(function() {
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE; // TODO: support asm
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert((STACKTOP|0) < (STACK_MAX|0)); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max
var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
var awaitingMemoryInitializer = false;
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, TOTAL_STACK);
    runPostSets();
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
  awaitingMemoryInitializer = false;
}
// === Body ===
assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);
STATICTOP += 25056;
assert(STATICTOP < TOTAL_MEMORY);
__ATINIT__ = __ATINIT__.concat([
  { func: function() { __GLOBAL__I_a() } },
  { func: function() { __GLOBAL__I_a120() } }
]);
var ___dso_handle;
var __ZTVSt9exception;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
var __ZTISt9exception;
var __ZN12b2BroadPhaseC1Ev;
var __ZN12b2BroadPhaseD1Ev;
var __ZN13b2DynamicTreeC1Ev;
var __ZN13b2DynamicTreeD1Ev;
var __ZN12b2ChainShapeD1Ev;
var __ZN16b2BlockAllocatorC1Ev;
var __ZN16b2BlockAllocatorD1Ev;
var __ZN6b2DrawC1Ev;
var __ZN16b2StackAllocatorC1Ev;
var __ZN16b2StackAllocatorD1Ev;
var __ZN7b2TimerC1Ev;
var __ZN6b2BodyC1EPK9b2BodyDefP7b2World;
var __ZN6b2BodyD1Ev;
var __ZN16b2ContactManagerC1Ev;
var __ZN9b2FixtureC1Ev;
var __ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener;
var __ZN8b2IslandD1Ev;
var __ZN7b2WorldC1ERK6b2Vec2;
var __ZN7b2WorldD1Ev;
var __ZN23b2ChainAndCircleContactC1EP9b2FixtureiS1_i;
var __ZN24b2ChainAndPolygonContactC1EP9b2FixtureiS1_i;
var __ZN15b2CircleContactC1EP9b2FixtureS1_;
var __ZN15b2ContactSolverC1EP18b2ContactSolverDef;
var __ZN15b2ContactSolverD1Ev;
var __ZN22b2EdgeAndCircleContactC1EP9b2FixtureS1_;
var __ZN23b2EdgeAndPolygonContactC1EP9b2FixtureS1_;
var __ZN25b2PolygonAndCircleContactC1EP9b2FixtureS1_;
var __ZN16b2PolygonContactC1EP9b2FixtureS1_;
var __ZN15b2DistanceJointC1EPK18b2DistanceJointDef;
var __ZN15b2FrictionJointC1EPK18b2FrictionJointDef;
var __ZN11b2GearJointC1EPK14b2GearJointDef;
var __ZN12b2MouseJointC1EPK15b2MouseJointDef;
var __ZN16b2PrismaticJointC1EPK19b2PrismaticJointDef;
var __ZN13b2PulleyJointC1EPK16b2PulleyJointDef;
var __ZN15b2RevoluteJointC1EPK18b2RevoluteJointDef;
var __ZN11b2RopeJointC1EPK14b2RopeJointDef;
var __ZN11b2WeldJointC1EPK14b2WeldJointDef;
var __ZN12b2WheelJointC1EPK15b2WheelJointDef;
var __ZN10__cxxabiv117__class_type_infoD1Ev;
var __ZN10__cxxabiv117__class_type_infoD2Ev;
var __ZN10__cxxabiv120__si_class_type_infoD1Ev;
var __ZN10__cxxabiv120__si_class_type_infoD2Ev;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,96,91,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,108,91,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,1,0,0,14,3,0,0,162,4,0,0,16,0,0,0,250,6,0,0,204,0,0,0,254,2,0,0,10,9,0,0,158,8,0,0,154,6,0,0,18,9,0,0,176,1,0,0,188,3,0,0,140,1,0,0,254,4,0,0,182,4,0,0,40,4,0,0,2,3,0,0,36,7,0,0,78,1,0,0,200,6,0,0,194,0,0,0,186,3,0,0,240,6,0,0,174,6,0,0,38,0,0,0,52,1,0,0,44,7,0,0,34,5,0,0,168,8,0,0,172,3,0,0,74,0,0,0,14,4,0,0,146,2,0,0,18,3,0,0,128,6,0,0,64,4,0,0,108,7,0,0,76,5,0,0,246,0,0,0,56,8,0,0,100,5,0,0,32,0,0,0,222,6,0,0,138,5,0,0,98,2,0,0,12,0,0,0,44,5,0,0,166,0,0,0,6,2,0,0,176,6,0,0,18,7,0,0,136,7,0,0,248,4,0,0,176,0,0,0,92,1,0,0,146,4,0,0,236,1,0,0,156,1,0,0,238,3,0,0,122,0,0,0,244,0,0,0,70,3,0,0,116,3,0,0,160,7,0,0,84,2,0,0,134,1,0,0,64,1,0,0,190,4,0,0,36,2,0,0,128,0,0,0,80,7,0,0,238,7,0,0,52,2,0,0,214,2,0,0,34,4,0,0,102,4,0,0,148,2,0,0,172,4,0,0,222,0,0,0,170,4,0,0,78,4,0,0,54,2,0,0,204,7,0,0,46,0,0,0,230,1,0,0,166,3,0,0,90,2,0,0,206,3,0,0,40,7,0,0,236,3,0,0,242,2,0,0,190,7,0,0,62,4,0,0,168,5,0,0,106,8,0,0,74,9,0,0,98,8,0,0,236,2,0,0,118,8,0,0,6,3,0,0,222,2,0,0,44,1,0,0,148,6,0,0,96,0,0,0,60,5,0,0,126,0,0,0,92,6,0,0,196,4,0,0,246,2,0,0,26,0,0,0,112,8,0,0,88,8,0,0,74,4,0,0,184,5,0,0,0,6,0,0,218,5,0,0,178,0,0,0,148,5,0,0,8,2,0,0,38,7,0,0,24,7,0,0,220,2,0,0,34,7,0,0,34,6,0,0,224,3,0,0,66,8,0,0,0,8,0,0,234,5,0,0,102,7,0,0,118,4,0,0,152,6,0,0,106,5,0,0,118,2,0,0,232,4,0,0,160,4,0,0,240,8,0,0,78,6,0,0,124,0,0,0,104,6,0,0,106,2,0,0,30,9,0,0,108,0,0,0,218,6,0,0,126,2,0,0,188,0,0,0,148,3,0,0,218,2,0,0,182,0,0,0,44,6,0,0,10,1,0,0,240,7,0,0,192,1,0,0,130,0,0,0,76,4,0,0,134,6,0,0,230,0,0,0,68,1,0,0,212,3,0,0,136,5,0,0,4,9,0,0,38,8,0,0,216,0,0,0,50,1,0,0,232,3,0,0,192,3,0,0,146,1,0,0,90,6,0,0,134,0,0,0,236,6,0,0,0,5,0,0,218,4,0,0,84,1,0,0,146,7,0,0,146,0,0,0,22,0,0,0,130,3,0,0,114,5,0,0,214,1,0,0,74,8,0,0,64,3,0,0,30,7,0,0,210,1,0,0,56,0,0,0,68,9,0,0,14,8,0,0,34,0,0,0,42,1,0,0,54,0,0,0,234,3,0,0,46,1,0,0,36,5,0,0,84,7,0,0,122,5,0,0,130,7,0,0,6,6,0,0,120,2,0,0,230,4,0,0,230,5,0,0,176,5,0,0,96,6,0,0,90,5,0,0,28,3,0,0,154,0,0,0,170,5,0,0,160,6,0,0,248,8,0,0,66,6,0,0,54,4,0,0,158,4,0,0,32,8,0,0,76,7,0,0,156,0,0,0,132,5,0,0,248,1,0,0,52,6,0,0,122,1,0,0,50,3,0,0,48,4,0,0,238,2,0,0,8,0,0,0,150,5,0,0,68,8,0,0,220,7,0,0,224,2,0,0,2,4,0,0,36,8,0,0,122,6,0,0,254,6,0,0,166,1,0,0,142,0,0,0,110,1,0,0,208,0,0,0,64,7,0,0,152,1,0,0,172,2,0,0,198,3,0,0,64,8,0,0,182,7,0,0,236,8,0,0,186,5,0,0,154,5,0,0,158,2,0,0,166,4,0,0,204,1,0,0,200,8,0,0,18,6,0,0,132,1,0,0,254,7,0,0,174,1,0,0,150,7,0,0,134,3,0,0,90,8,0,0,174,3,0,0,142,2,0,0,38,2,0,0,126,1,0,0,180,4,0,0,234,8,0,0,108,6,0,0,140,6,0,0,180,2,0,0,68,3,0,0,90,4,0,0,112,7,0,0,228,5,0,0,198,1,0,0,88,0,0,0,240,2,0,0,146,8,0,0,228,6,0,0,132,7,0,0,182,6,0,0,218,1,0,0,252,1,0,0,62,9,0,0,86,2,0,0,44,3,0,0,224,8,0,0,226,4,0,0,194,5,0,0,66,1,0,0,216,8,0,0,62,7,0,0,172,7,0,0,140,2,0,0,184,8,0,0,36,1,0,0,48,0,0,0,228,0,0,0,128,2,0,0,112,2,0,0,32,5,0,0,132,2,0,0,90,3,0,0,204,3,0,0,26,6,0,0,242,0,0,0,110,0,0,0,72,2,0,0,80,0,0,0,84,0,0,0,98,5,0,0,206,5,0,0,26,9,0,0,136,3,0,0,214,0,0,0,20,1,0,0,178,1,0,0,98,6,0,0,116,0,0,0,202,2,0,0,44,0,0,0,168,1,0,0,16,5,0,0,96,7,0,0,246,4,0,0,108,1,0,0,132,4,0,0,48,8,0,0,178,4,0,0,160,3,0,0,192,5,0,0,170,1,0,0,174,5,0,0,210,6,0,0,214,6,0,0,62,5,0,0,42,2,0,0,118,5,0,0,212,2,0,0,72,0,0,0,190,5,0,0,150,4,0,0,10,3,0,0,82,8,0,0,82,5,0,0,18,2,0,0,144,3,0,0,80,4,0,0,236,5,0,0,22,4,0,0,38,9,0,0,120,5,0,0,170,0,0,0,44,8,0,0,128,4,0,0,188,1,0,0,72,4,0,0,70,7,0,0,42,0,0,0,164,5,0,0,226,5,0,0,28,7,0,0,144,6,0,0,144,2,0,0,158,5,0,0,94,3,0,0,64,2,0,0,102,6,0,0,226,1,0,0,70,8,0,0,246,3,0,0,170,6,0,0,180,1,0,0,200,2,0,0,176,3,0,0,60,7,0,0,142,4,0,0,210,7,0,0,178,3,0,0,68,4,0,0,72,6,0,0,178,6,0,0,88,6,0,0,48,7,0,0,148,0,0,0,154,4,0,0,18,4,0,0,234,7,0,0,72,7,0,0,8,7,0,0,210,2,0,0,242,6,0,0,66,3,0,0,28,5,0,0,182,8,0,0,96,3,0,0,138,4,0,0,62,0,0,0,166,2,0,0,22,6,0,0,186,8,0,0,32,2,0,0,224,6,0,0,196,6,0,0,188,2,0,0,142,1,0,0,186,6,0,0,182,2,0,0,252,5,0,0,42,3,0,0,114,2,0,0,8,3,0,0,54,1,0,0,36,4,0,0,186,7,0,0,174,0,0,0,124,7,0,0,168,2,0,0,156,4,0,0,242,1,0,0,226,2,0,0,180,3,0,0,14,0,0,0,40,6,0,0,118,6,0,0,204,2,0,0,254,0,0,0,230,3,0,0,106,3,0,0,220,4,0,0,248,7,0,0,246,7,0,0,18,1,0,0,42,4,0,0,100,7,0,0,24,3,0,0,30,2,0,0,208,5,0,0,190,3,0,0,136,6,0,0,184,1,0,0,128,3,0,0,160,2,0,0,22,8,0,0,32,1,0,0,182,3,0,0,102,0,0,0,124,8,0,0,32,9,0,0,70,0,0,0,212,4,0,0,56,4,0,0,84,5,0,0,52,7,0,0,110,4,0,0,70,1,0,0,130,2,0,0,4,5,0,0,6,4,0,0,58,6,0,0,154,3,0,0,238,4,0,0,238,5,0,0,150,1,0,0,56,5,0,0,96,2,0,0,90,1,0,0,6,5,0,0,24,2,0,0,148,1,0,0,68,2,0,0,26,5,0,0,250,3,0,0,130,5,0,0,244,5,0,0,250,2,0,0,0,2,0,0,232,8,0,0,222,8,0,0,118,7,0,0,98,4,0,0,126,8,0,0,224,0,0,0,236,0,0,0,222,1,0,0,114,3,0,0,128,8,0,0,254,1,0,0,178,7,0,0,30,8,0,0,116,2,0,0,150,8,0,0,60,2,0,0,0,3,0,0,86,8,0,0,148,8,0,0,72,5,0,0,106,1,0,0,60,6,0,0,210,3,0,0,16,7,0,0,142,6,0,0,112,5,0,0,232,1,0,0,236,7,0,0,86,3,0,0,86,7,0,0,88,7,0,0,88,2,0,0,234,6,0,0,114,7,0,0,62,3,0,0,152,8,0,0,116,1,0,0,50,6,0,0,6,8,0,0,124,6,0,0,88,4,0,0,154,7,0,0,68,6,0,0,50,0,0,0,140,7,0,0,232,2,0,0,144,4,0,0,4,8,0,0,38,1,0,0,96,4,0,0,216,6,0,0,120,0,0,0,220,1,0,0,34,1,0,0,94,8,0,0,124,5,0,0,68,7,0,0,168,6,0,0,252,2,0,0,252,3,0,0,94,2,0,0,204,4,0,0,6,7,0,0,102,5,0,0,60,8,0,0,252,0,0,0,138,8,0,0,48,2,0,0,16,2,0,0,152,7,0,0,60,3,0,0,2,8,0,0,146,6,0,0,164,3,0,0,98,7,0,0,176,2,0,0,82,1,0,0,246,6,0,0,128,1,0,0,62,1,0,0,228,8,0,0,218,0,0,0,140,5,0,0,26,3,0,0,184,0,0,0,152,2,0,0,84,4,0,0,160,5,0,0,36,0,0,0,70,6,0,0,8,8,0,0,44,2,0,0,226,0,0,0,4,0,0,0,238,8,0,0,70,5,0,0,60,4,0,0,216,4,0,0,226,7,0,0,214,5,0,0,152,5,0,0,22,2,0,0,64,5,0,0,126,3,0,0,132,3,0,0,20,2,0,0,26,4,0,0,46,5,0,0,170,8,0,0,146,3,0,0,142,8,0,0,6,1,0,0,30,1,0,0,92,7,0,0,0,4,0,0,40,1,0,0,186,4,0,0,104,1,0,0,70,4,0,0,234,0,0,0,28,8,0,0,226,8,0,0,46,4,0,0,154,1,0,0,34,9,0,0,180,5,0,0,214,7,0,0,250,0,0,0,114,6,0,0,224,4,0,0,152,3,0,0,74,1,0,0,208,8,0,0,58,4,0,0,6,9,0,0,64,9,0,0,168,7,0,0,138,0,0,0,88,3,0,0,254,5,0,0,162,3,0,0,146,5,0,0,248,3,0,0,220,6,0,0,176,7,0,0,40,0,0,0,96,8,0,0,212,7,0,0,76,0,0,0,88,5,0,0,66,2,0,0,136,0,0,0,2,6,0,0,64,0,0,0,206,2,0,0,188,4,0,0,66,4,0,0,14,1,0,0,204,8,0,0,24,1,0,0,132,6,0,0,104,3,0,0,40,3,0,0,54,9,0,0,244,3,0,0,104,8,0,0,102,8,0,0,58,1,0,0,8,9,0,0,124,2,0,0,20,8,0,0,112,6,0,0,100,2,0,0,220,3,0,0,20,0,0,0,30,3,0,0,50,8,0,0,234,1,0,0,0,9,0,0,216,7,0,0,36,9,0,0,232,5,0,0,122,8,0,0,10,8,0,0,244,4,0,0,106,7,0,0,12,6,0,0,96,1,0,0,54,3,0,0,238,1,0,0,56,2,0,0,46,3,0,0,180,0,0,0,244,1,0,0,134,4,0,0,158,7,0,0,8,6,0,0,140,4,0,0,238,0,0,0,160,1,0,0,62,8,0,0,22,9,0,0,114,4,0,0,86,0,0,0,40,2,0,0,200,5,0,0,104,4,0,0,178,5,0,0,222,5,0,0,212,1,0,0,202,3,0,0,28,1,0,0,48,6,0,0,28,9,0,0,144,0,0,0,108,5,0,0,100,4,0,0,240,4,0,0,24,4,0,0,136,4,0,0,16,1,0,0,208,7,0,0,174,7,0,0,230,2,0,0,156,7,0,0,56,9,0,0,104,0,0,0,76,6,0,0,134,8,0,0,128,5,0,0,208,1,0,0,206,1,0,0,46,2,0,0,162,5,0,0,224,7,0,0,182,1,0,0,228,7,0,0,72,8,0,0,16,4,0,0,94,5,0,0,240,5,0,0,12,3,0,0,56,1,0,0,120,1,0,0,192,0,0,0,190,0,0,0,28,6,0,0,214,4,0,0,210,5,0,0,58,3,0,0,112,4,0,0,60,0,0,0,2,5,0,0,106,6,0,0,214,3,0,0,82,3,0,0,24,0,0,0,198,6,0,0,86,4,0,0,42,8,0,0,82,2,0,0,126,4,0,0,208,2,0,0,80,3,0,0,2,7,0,0,26,2,0,0,198,4,0,0,186,2,0,0,100,1,0,0,38,4,0,0,114,0,0,0,94,6,0,0,168,4,0,0,202,7,0,0,58,5,0,0,222,3,0,0,194,6,0,0,242,5,0,0,16,9,0,0,232,7,0,0,182,5,0,0,164,7,0,0,74,7,0,0,106,0,0,0,160,0,0,0,198,7,0,0,196,8,0,0,102,1,0,0,232,0,0,0,198,2,0,0,8,4,0,0,98,0,0,0,118,0,0,0,70,2,0,0,200,4,0,0,28,2,0,0,122,4,0,0,220,8,0,0,172,6,0,0,254,8,0,0,10,5,0,0,110,2,0,0,74,3,0,0,92,5,0,0,194,7,0,0,80,8,0,0,240,1,0,0,76,8,0,0,32,7,0,0,214,8,0,0,120,8,0,0,78,2,0,0,104,7,0,0,22,1,0,0,80,1,0,0,202,6,0,0,226,3,0,0,208,4,0,0,130,4,0,0,20,5,0,0,234,2,0,0,40,5,0,0,134,5,0,0,36,3,0,0,48,1,0,0,168,0,0,0,138,2,0,0,86,6,0,0,174,4,0,0,194,4,0,0,52,0,0,0,178,8,0,0,110,8,0,0,130,1,0,0,116,6,0,0,68,0,0,0,250,8,0,0,156,3,0,0,128,7,0,0,194,2,0,0,74,2,0,0,2,1,0,0,68,5,0,0,96,5,0,0,176,4,0,0,26,1,0,0,116,5,0,0,216,5,0,0,110,5,0,0,46,6,0,0,42,5,0,0,2,9,0,0,252,6,0,0,4,3,0,0,216,3,0,0,52,5,0,0,38,6,0,0,190,8,0,0,4,6,0,0,4,4,0,0,60,9,0,0,12,7,0,0,14,5,0,0,18,5,0,0,20,9,0,0,248,5,0,0,2,2,0,0,76,1,0,0,170,3,0,0,12,1,0,0,8,1,0,0,164,6,0,0,44,9,0,0,166,8,0,0,144,7,0,0,52,9,0,0,20,6,0,0,206,0,0,0,252,4,0,0,200,1,0,0,184,7,0,0,122,3,0,0,138,6,0,0,56,6,0,0,52,8,0,0,138,3,0,0,46,9,0,0,156,8,0,0,126,6,0,0,20,7,0,0,130,6,0,0,156,5,0,0,196,3,0,0,202,5,0,0,80,5,0,0,198,0,0,0,212,0,0,0,74,6,0,0,232,6,0,0,230,8,0,0,82,4,0,0,162,0,0,0,166,6,0,0,216,1,0,0,102,2,0,0,54,8,0,0,24,6,0,0,32,3,0,0,202,1,0,0,184,3,0,0,72,3,0,0,108,4,0,0,188,7,0,0,164,8,0,0,138,1,0,0,84,8,0,0,140,8,0,0,46,8,0,0,104,5,0,0,28,0,0,0,190,1,0,0,94,0,0,0,148,7,0,0,50,5,0,0,188,8,0,0,178,2,0,0,192,6,0,0,196,7,0,0,192,8,0,0,58,7,0,0,222,7,0,0,250,1,0,0,14,9,0,0,164,2,0,0,252,7,0,0,194,8,0,0,54,7,0,0,194,1,0,0,112,3,0,0,206,7,0,0,208,6,0,0,34,2,0,0,0,1,0,0,100,8,0,0,190,6,0,0,164,1,0,0,120,6,0,0,42,6,0,0,112,1,0,0,30,5,0,0,44,4,0,0,126,5,0,0,172,5,0,0,238,6,0,0,88,1,0,0,38,3,0,0,14,2,0,0,248,6,0,0,122,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,67,111,117,110,116,32,62,32,48,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,32,32,106,100,46,101,110,97,98,108,101,76,105,109,105,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,106,111,105,110,116,50,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,32,32,106,100,46,109,97,120,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,98,50,86,101,99,50,32,103,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,109,97,115,107,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0,0,0,48,32,60,61,32,105,66,32,38,38,32,105,66,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,102,105,120,116,117,114,101,45,62,109,95,98,111,100,121,32,61,61,32,116,104,105,115,0,32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,106,100,46,108,111,99,97,108,65,120,105,115,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,32,32,106,100,46,106,111,105,110,116,49,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,118,101,114,116,101,120,67,111,117,110,116,32,60,61,32,56,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,99,97,116,101,103,111,114,121,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0,0,0,105,65,32,33,61,32,40,45,49,41,0,0,109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,66,111,100,121,46,99,112,112,0,0,32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,97,108,112,104,97,48,32,60,32,49,46,48,102,0,0,0,32,32,32,32,102,100,46,105,115,83,101,110,115,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,99,104,105,108,100,50,32,33,61,32,40,45,49,41,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,99,111,117,110,116,32,62,61,32,51,0,0,32,32,106,100,46,108,111,99,97,108,65,120,105,115,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,109,97,120,76,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,77,111,117,115,101,32,106,111,105,110,116,32,100,117,109,112,105,110,103,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,106,100,46,108,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0,99,104,105,108,100,49,32,33,61,32,40,45,49,41,0,0,116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,32,32,32,32,102,100,46,100,101,110,115,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,99,112,112,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0,0,0,0,97,114,101,97,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0,0,99,104,105,108,100,73,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,48,32,60,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,32,51,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,100,32,43,32,104,32,42,32,107,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,112,99,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,99,112,112,0,0,109,95,110,111,100,101,115,91,112,114,111,120,121,73,100,93,46,73,115,76,101,97,102,40,41,0,0,0,115,116,97,99,107,67,111,117,110,116,32,60,32,115,116,97,99,107,83,105,122,101,0,0,32,32,32,32,102,100,46,114,101,115,116,105,116,117,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,99,97,99,104,101,45,62,99,111,117,110,116,32,60,61,32,51,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0,0,0,0,98,108,111,99,107,67,111,117,110,116,32,42,32,98,108,111,99,107,83,105,122,101,32,60,61,32,98,50,95,99,104,117,110,107,83,105,122,101,0,0,109,95,118,101,114,116,101,120,67,111,117,110,116,32,62,61,32,51,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,32,45,32,49,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,41,32,38,38,32,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,32,62,61,32,48,46,48,102,0,0,0,32,32,98,50,71,101,97,114,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0,0,48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,67,104,97,105,110,83,104,97,112,101,46,99,112,112,0,0,0,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,98,45,62,73,115,65,99,116,105,118,101,40,41,32,61,61,32,116,114,117,101,0,0,0,32,32,98,50,87,104,101,101,108,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,32,32,32,32,102,100,46,102,114,105,99,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,109,95,99,111,117,110,116,32,62,32,48,0,32,32,98,50,87,101,108,100,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,0,0,32,32,98,50,82,111,112,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,60,32,98,50,95,109,97,120,83,116,97,99,107,69,110,116,114,105,101,115,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,46,99,112,112,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,48,46,48,102,32,60,61,32,108,111,119,101,114,32,38,38,32,108,111,119,101,114,32,60,61,32,105,110,112,117,116,46,109,97,120,70,114,97,99,116,105,111,110,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,117,108,108,101,121,74,111,105,110,116,46,99,112,112,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,84,105,109,101,79,102,73,109,112,97,99,116,46,99,112,112,0,99,111,117,110,116,32,62,61,32,50,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,32,106,100,59,10,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,46,99,112,112,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,41,32,38,38,32,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,32,62,61,32,48,46,48,102,0,47,47,32,68,117,109,112,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,106,111,105,110,116,32,116,121,112,101,46,10,0,0,98,50,73,115,86,97,108,105,100,40,114,97,116,105,111,41,0,0,0,0,32,32,32,32,98,111,100,105,101,115,91,37,100,93,45,62,67,114,101,97,116,101,70,105,120,116,117,114,101,40,38,102,100,41,59,10,0,0,0,0,32,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,77,111,117,115,101,74,111,105,110,116,46,99,112,112,0,112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0,0,115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0,0,0,32,32,32,32,102,100,46,115,104,97,112,101,32,61,32,38,115,104,97,112,101,59,10,0,125,10,0,0,109,95,106,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,48,32,60,32,109,95,110,111,100,101,67,111,117,110,116,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,74,111,105,110,116,46,99,112,112,0,0,32,32,32,32,98,50,70,105,120,116,117,114,101,68,101,102,32,102,100,59,10,0,0,0,10,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0,32,32,125,10,0,0,0,0,110,111,100,101,45,62,73,115,76,101,97,102,40,41,32,61,61,32,102,97,108,115,101,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,71,101,97,114,74,111,105,110,116,46,99,112,112,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,78,101,120,116,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,123,10,0,0,0,0,109,95,110,111,100,101,67,111,117,110,116,32,43,32,102,114,101,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,104,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,80,114,101,118,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,10,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,46,99,112,112,0,0,71,101,116,72,101,105,103,104,116,40,41,32,61,61,32,67,111,109,112,117,116,101,72,101,105,103,104,116,40,41,0,0,48,32,60,61,32,102,114,101,101,73,110,100,101,120,32,38,38,32,102,114,101,101,73,110,100,101,120,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,110,101,120,116,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,98,111,100,105,101,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,66,111,100,121,40,38,98,100,41,59,10,0,0,0,32,32,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0,0,0,0,102,97,108,115,101,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0,0,32,32,32,32,115,104,97,112,101,46,109,95,112,114,101,118,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,98,100,46,103,114,97,118,105,116,121,83,99,97,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,97,97,98,98,46,117,112,112,101,114,66,111,117,110,100,32,61,61,32,110,111,100,101,45,62,97,97,98,98,46,117,112,112,101,114,66,111,117,110,100,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,95,106,111,105,110,116,67,97,112,97,99,105,116,121,0,0,32,32,32,32,115,104,97,112,101,46,67,114,101,97,116,101,67,104,97,105,110,40,118,115,44,32,37,100,41,59,10,0,32,32,98,100,46,97,99,116,105,118,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,48,32,60,32,115,105,122,101,0,0,0,0,97,97,98,98,46,108,111,119,101,114,66,111,117,110,100,32,61,61,32,110,111,100,101,45,62,97,97,98,98,46,108,111,119,101,114,66,111,117,110,100,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,101,100,103,101,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,32,42,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,104,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,32,32,32,32,98,50,67,104,97,105,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,32,32,98,100,46,98,117,108,108,101,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,110,111,100,101,45,62,104,101,105,103,104,116,32,61,61,32,104,101,105,103,104,116,0,0,99,111,117,110,116,32,62,61,32,51,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,32,32,115,104,97,112,101,46,83,101,116,40,118,115,44,32,37,100,41,59,10,0,32,32,98,100,46,102,105,120].concat([101,100,82,111,116,97,116,105,111,110,32,61,32,98,111,111,108,40,37,100,41,59,10,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,109,95,110,111,100,101,115,91,99,104,105,108,100,50,93,46,112,97,114,101,110,116,32,61,61,32,105,110,100,101,120,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,102,97,108,115,101,0,0,0,100,101,102,45,62,114,97,116,105,111,32,33,61,32,48,46,48,102,0,0,32,32,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,109,97,120,70,111,114,99,101,41,32,38,38,32,100,101,102,45,62,109,97,120,70,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,100,101,102,45,62,98,111,100,121,65,32,33,61,32,100,101,102,45,62,98,111,100,121,66,0,0,0,0,32,32,32,32,118,115,91,37,100,93,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,98,100,46,97,119,97,107,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,109,95,116,121,112,101,66,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,66,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0,0,0,0,109,95,110,111,100,101,115,91,99,104,105,108,100,49,93,46,112,97,114,101,110,116,32,61,61,32,105,110,100,101,120,0,98,50,73,115,86,97,108,105,100,40,116,111,114,113,117,101,41,32,38,38,32,116,111,114,113,117,101,32,62,61,32,48,46,48,102,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,32,32,32,32,98,50,86,101,99,50,32,118,115,91,37,100,93,59,10,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,32,32,98,100,46,97,108,108,111,119,83,108,101,101,112,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,48,32,60,61,32,99,104,105,108,100,50,32,38,38,32,99,104,105,108,100,50,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,32,32,98,100,46,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,109,95,98,111,100,121,67,111,117,110,116,32,62,32,48,0,116,111,105,73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0,0,48,32,60,61,32,110,111,100,101,73,100,32,38,38,32,110,111,100,101,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,102,97,108,115,101,0,0,0,32,32,32,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,48,32,60,61,32,99,104,105,108,100,49,32,38,38,32,99,104,105,108,100,49,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,32,32,98,100,46,108,105,110,101,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,114,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,48,46,48,102,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,51,32,61,32,98,111,111,108,40,37,100,41,59,10,0,110,111,100,101,45,62,104,101,105,103,104,116,32,61,61,32,48,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,80,111,108,121,103,111,110,46,99,112,112,0,0,0,32,32,98,100,46,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,48,32,61,32,98,111,111,108,40,37,100,41,59,10,0,99,104,105,108,100,50,32,61,61,32,40,45,49,41,0,0,32,32,98,100,46,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,98,111,100,105,101,115,32,61,32,78,85,76,76,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,51,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,99,104,105,108,100,49,32,61,61,32,40,45,49,41,0,0,32,32,98,100,46,97,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111,114,108,100,46,99,112,112,0,109,95,105,110,100,101,120,32,61,61,32,48,0,0,0,0,109,95,110,111,100,101,115,91,105,110,100,101,120,93,46,112,97,114,101,110,116,32,61,61,32,40,45,49,41,0,0,0,106,111,105,110,116,115,32,61,32,78,85,76,76,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,50,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,99,104,97,105,110,45,62,109,95,99,111,117,110,116,0,0,0,0,32,32,98,100,46,112,111,115,105,116,105,111,110,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,98,50,70,114,101,101,40,98,111,100,105,101,115,41,59,10,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,49,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,106,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,0,0,109,95,110,111,100,101,115,91,66,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,32,32,98,100,46,116,121,112,101,32,61,32,98,50,66,111,100,121,84,121,112,101,40,37,100,41,59,10,0,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,51,32,60,61,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,61,32,56,0,0,0,0,98,50,70,114,101,101,40,106,111,105,110,116,115,41,59,10,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,48,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,48,32,60,61,32,105,69,32,38,38,32,105,69,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,32,32,98,50,66,111,100,121,68,101,102,32,98,100,59,10,0,0,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0,109,95,118,101,114,116,105,99,101,115,32,61,61,32,95,95,110,117,108,108,32,38,38,32,109,95,99,111,117,110,116,32,61,61,32,48,0,0,0,0,48,32,60,61,32,105,68,32,38,38,32,105,68,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,125,10,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,32,32,32,32,98,50,69,100,103,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,99,112,112,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,123,10,0,0,108,111,119,101,114,32,60,61,32,117,112,112,101,114,0,0,116,97,114,103,101,116,32,62,32,116,111,108,101,114,97,110,99,101,0,0,114,97,116,105,111,32,62,32,49,46,49,57,50,48,57,50,57,48,69,45,48,55,70,0,32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,114,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,108,111,119,101,114,32,60,61,32,117,112,112,101,114,0,0,32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,100,101,102,45,62,116,97,114,103,101,116,46,73,115,86,97,108,105,100,40,41,0,0,0,109,95,110,111,100,101,115,91,67,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,123,10,0,0,102,97,108,115,101,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,112,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,109,95,116,121,112,101,65,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,65,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,48,32,60,61,32,101,100,103,101,49,32,38,38,32,101,100,103,101,49,32,60,32,112,111,108,121,49,45,62,109,95,118,101,114,116,101,120,67,111,117,110,116,0,0,98,50,73,115,86,97,108,105,100,40,102,111,114,99,101,41,32,38,38,32,102,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,109,95,73,32,62,32,48,46,48,102,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,108,101,110,103,116,104,66,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,32,32,106,100,46,117,112,112,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,98,50,74,111,105,110,116,42,42,32,106,111,105,110,116,115,32,61,32,40,98,50,74,111,105,110,116,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,74,111,105,110,116,42,41,41,59,10,0,0,48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,32,32,32,32,115,104,97,112,101,46,109,95,114,97,100,105,117,115,32,61,32,37,46,49,53,108,101,102,59,10,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,0,0,48,32,60,61,32,105,71,32,38,38,32,105,71,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,109,95,110,111,100,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,106,100,46,117,112,112,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,108,101,110,103,116,104,65,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,32,32,106,100,46,108,111,119,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32,48,0,0,0,98,50,66,111,100,121,42,42,32,98,111,100,105,101,115,32,61,32,40,98,50,66,111,100,121,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,66,111,100,121,42,41,41,59,10,0,32,32,32,32,98,50,67,105,114,99,108,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0,0,0,0,48,32,60,61,32,105,70,32,38,38,32,105,70,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,102,111,117,110,100,0,0,0,32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,32,32,106,100,46,108,111,119,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,106,100,46,101,110,97,98,108,101,76,105,109,105,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,114,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,106,100,46,109,97,120,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,109,95,119,111,114,108,100,45,62,83,101,116,71,114,97,118,105,116,121,40,103,41,59,10,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,103,114,111,117,112,73,110,100,101,120,32,61,32,105,110,116,49,54,40,37,100,41,59,10,0,0,48,32,60,61,32,105,67,32,38,38,32,105,67,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,100,101,110,32,62,32,48,46,48,102,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,69,100,103,101,46,99,112,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,108,111,97,116,51,50,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,77,101,116,114,105,99,40,41,32,99,111,110,115,116,0,0,0,0,98,50,86,101,99,50,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,83,101,97,114,99,104,68,105,114,101,99,116,105,111,110,40,41,32,99,111,110,115,116,0,0,0,0,118,111,105,100,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,87,105,116,110,101,115,115,80,111,105,110,116,115,40,98,50,86,101,99,50,32,42,44,32,98,50,86,101,99,50,32,42,41,32,99,111,110,115,116,0,0,98,50,86,101,99,50,32,98,50,83,105,109,112,108,101,120,58,58,71,101,116,67,108,111,115,101,115,116,80,111,105,110,116,40,41,32,99,111,110,115,116,0,0,0,102,108,111,97,116,51,50,32,98,50,83,101,112,97,114,97,116,105,111,110,70,117,110,99,116,105,111,110,58,58,69,118,97,108,117,97,116,101,40,105,110,116,51,50,44,32,105,110,116,51,50,44,32,102,108,111,97,116,51,50,41,32,99,111,110,115,116,0,102,108,111,97,116,51,50,32,98,50,83,101,112,97,114,97,116,105,111,110,70,117,110,99,116,105,111,110,58,58,70,105,110,100,77,105,110,83,101,112,97,114,97,116,105,111,110,40,105,110,116,51,50,32,42,44,32,105,110,116,51,50,32,42,44,32,102,108,111,97,116,51,50,41,32,99,111,110,115,116,0,0,0,0,99,111,110,115,116,32,98,50,86,101,99,50,32,38,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,58,58,71,101,116,86,101,114,116,101,120,40,105,110,116,51,50,41,32,99,111,110,115,116,0,0,0,118,105,114,116,117,97,108,32,98,111,111,108,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,58,58,82,97,121,67,97,115,116,40,98,50,82,97,121,67,97,115,116,79,117,116,112,117,116,32,42,44,32,99,111,110,115,116,32,98,50,82,97,121,67,97,115,116,73,110,112,117,116,32,38,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0,0,0,118,105,114,116,117,97,108,32,118,111,105,100,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,58,58,67,111,109,112,117,116,101,77,97,115,115,40,98,50,77,97,115,115,68,97,116,97,32,42,44,32,102,108,111,97,116,51,50,41,32,99,111,110,115,116,0,0,0,118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,86,97,108,105,100,97,116,101,40,41,32,99,111,110,115,116,0,0,0,0,118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,82,97,121,67,97,115,116,40,84,32,42,44,32,99,111,110,115,116,32,98,50,82,97,121,67,97,115,116,73,110,112,117,116,32,38,41,32,99,111,110,115,116,32,91,84,32,61,32,98,50,87,111,114,108,100,82,97,121,67,97,115,116,87,114,97,112,112,101,114,93,0,0,118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,86,97,108,105,100,97,116,101,83,116,114,117,99,116,117,114,101,40,105,110,116,51,50,41,32,99,111,110,115,116,0,0,118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,86,97,108,105,100,97,116,101,77,101,116,114,105,99,115,40,105,110,116,51,50,41,32,99,111,110,115,116,0,0,0,0,105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,71,101,116,77,97,120,66,97,108,97,110,99,101,40,41,32,99,111,110,115,116,0,0,105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,67,111,109,112,117,116,101,72,101,105,103,104,116,40,105,110,116,51,50,41,32,99,111,110,115,116,0,118,111,105,100,32,42,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,71,101,116,85,115,101,114,68,97,116,97,40,105,110,116,51,50,41,32,99,111,110,115,116,0,0,0,99,111,110,115,116,32,98,50,65,65,66,66,32,38,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,71,101,116,70,97,116,65,65,66,66,40,105,110,116,51,50,41,32,99,111,110,115,116,0,0,0,0,118,105,114,116,117,97,108,32,98,111,111,108,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,82,97,121,67,97,115,116,40,98,50,82,97,121,67,97,115,116,79,117,116,112,117,116,32,42,44,32,99,111,110,115,116,32,98,50,82,97,121,67,97,115,116,73,110,112,117,116,32,38,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0,118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,71,101,116,67,104,105,108,100,69,100,103,101,40,98,50,69,100,103,101,83,104,97,112,101,32,42,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0,118,105,114,116,117,97,108,32,118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,67,111,109,112,117,116,101,65,65,66,66,40,98,50,65,65,66,66,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,32,99,111,110,115,116,0,0,118,111,105,100,32,98,50,83,105,109,112,108,101,120,58,58,82,101,97,100,67,97,99,104,101,40,99,111,110,115,116,32,98,50,83,105,109,112,108,101,120,67,97,99,104,101,32,42,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0,0,0,118,111,105,100,32,98,50,70,105,120,116,117,114,101,58,58,68,101,115,116,114,111,121,40,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0,118,111,105,100,32,98,50,70,105,120,116,117,114,101,58,58,67,114,101,97,116,101,80,114,111,120,105,101,115,40,98,50,66,114,111,97,100,80,104,97,115,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0,0,115,116,97,116,105,99,32,118,111,105,100,32,98,50,67,111,110,116,97,99,116,58,58,68,101,115,116,114,111,121,40,98,50,67,111,110,116,97,99,116,32,42,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0,115,116,97,116,105,99,32,118,111,105,100,32,98,50,67,111,110,116,97,99,116,58,58,65,100,100,84,121,112,101,40,98,50,67,111,110,116,97,99,116,67,114,101,97,116,101,70,99,110,32,42,44,32,98,50,67,111,110,116,97,99,116,68,101,115,116,114,111,121,70,99,110,32,42,44,32,98,50,83,104,97,112,101,58,58,84,121,112,101,44,32,98,50,83,104,97,112,101,58,58,84,121,112,101,41,0,0,0,115,116,97,116,105,99,32,98,50,67,111,110,116,97,99,116,32,42,98,50,67,111,110,116,97,99,116,58,58,67,114,101,97,116,101,40,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0,118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,83,111,108,118,101,84,79,73,40,99,111,110,115,116,32,98,50,84,105,109,101,83,116,101,112,32,38,44,32,105,110,116,51,50,44,32,105,110,116,51,50,41,0,0,0,118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,65,100,100,40,98,50,67,111,110,116,97,99,116,32,42,41,0,118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,65,100,100,40,98,50,74,111,105,110,116,32,42,41,0,0,0,118,111,105,100,32,98,50,73,115,108,97,110,100,58,58,65,100,100,40,98,50,66,111,100,121,32,42,41,0,0,0,0,118,111,105,100,32,98,50,87,111,114,108,100,58,58,68,114,97,119,83,104,97,112,101,40,98,50,70,105,120,116,117,114,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,67,111,108,111,114,32,38,41,0,0,118,111,105,100,32,98,50,87,111,114,108,100,58,58,83,111,108,118,101,84,79,73,40,99,111,110,115,116,32,98,50,84,105,109,101,83,116,101,112,32,38,41,0,0,118,111,105,100,32,98,50,87,111,114,108,100,58,58,83,111,108,118,101,40,99,111,110,115,116,32,98,50,84,105,109,101,83,116,101,112,32,38,41,0,118,111,105,100,32,98,50,87,111,114,108,100,58,58,68,101,115,116,114,111,121,74,111,105,110,116,40,98,50,74,111,105,110,116,32,42,41,0,0,0,118,111,105,100,32,98,50,87,111,114,108,100,58,58,68,101,115,116,114,111,121,66,111,100,121,40,98,50,66,111,100,121,32,42,41,0,98,50,74,111,105,110,116,32,42,98,50,87,111,114,108,100,58,58,67,114,101,97,116,101,74,111,105,110,116,40,99,111,110,115,116,32,98,50,74,111,105,110,116,68,101,102,32,42,41,0,0,0,98,50,66,111,100,121,32,42,98,50,87,111,114,108,100,58,58,67,114,101,97,116,101,66,111,100,121,40,99,111,110,115,116,32,98,50,66,111,100,121,68,101,102,32,42,41,0,0,118,111,105,100,32,98,50,83,119,101,101,112,58,58,65,100,118,97,110,99,101,40,102,108,111,97,116,51,50,41,0,0,98,50,74,111,105,110,116,58,58,98,50,74,111,105,110,116,40,99,111,110,115,116,32,98,50,74,111,105,110,116,68,101,102,32,42,41,0,0,0,0,115,116,97,116,105,99,32,118,111,105,100,32,98,50,74,111,105,110,116,58,58,68,101,115,116,114,111,121,40,98,50,74,111,105,110,116,32,42,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0,115,116,97,116,105,99,32,98,50,74,111,105,110,116,32,42,98,50,74,111,105,110,116,58,58,67,114,101,97,116,101,40,99,111,110,115,116,32,98,50,74,111,105,110,116,68,101,102,32,42,44,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,32,42,41,0,98,50,66,111,100,121,58,58,98,50,66,111,100,121,40,99,111,110,115,116,32,98,50,66,111,100,121,68,101,102,32,42,44,32,98,50,87,111,114,108,100,32,42,41,0,0,0,0,118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,65,99,116,105,118,101,40,98,111,111,108,41,0,0,0,0,118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,84,121,112,101,40,98,50,66,111,100,121,84,121,112,101,41,0,0,0,0,118,111,105,100,32,98,50,66,111,100,121,58,58,68,101,115,116,114,111,121,70,105,120,116,117,114,101,40,98,50,70,105,120,116,117,114,101,32,42,41,0,0,0,0,118,111,105,100,32,98,50,66,111,100,121,58,58,82,101,115,101,116,77,97,115,115,68,97,116,97,40,41,0,0,0,0,98,50,70,105,120,116,117,114,101,32,42,98,50,66,111,100,121,58,58,67,114,101,97,116,101,70,105,120,116,117,114,101,40,99,111,110,115,116,32,98,50,70,105,120,116,117,114,101,68,101,102,32,42,41,0,0,118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,84,114,97,110,115,102,111,114,109,40,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,102,108,111,97,116,51,50,41,0,0,118,111,105,100,32,98,50,66,111,100,121,58,58,83,101,116,77,97,115,115,68,97,116,97,40,99,111,110,115,116,32,98,50,77,97,115,115,68,97,116,97,32,42,41,0,0,0,0,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0,0,118,111,105,100,32,98,50,80,111,115,105,116,105,111,110,83,111,108,118,101,114,77,97,110,105,102,111,108,100,58,58,73,110,105,116,105,97,108,105,122,101,40,98,50,67,111,110,116,97,99,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,41,0,0,0,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,58,58,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,41,0,0,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,58,58,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0,0,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,44,32,98,50,70,105,120,116,117,114,101,32,42,44,32,105,110,116,51,50,41,0,0,0,0,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0,0,0,0,102,108,111,97,116,51,50,32,98,50,83,101,112,97,114,97,116,105,111,110,70,117,110,99,116,105,111,110,58,58,73,110,105,116,105,97,108,105,122,101,40,99,111,110,115,116,32,98,50,83,105,109,112,108,101,120,67,97,99,104,101,32,42,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,83,119,101,101,112,32,38,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,32,42,44,32,99,111,110,115,116,32,98,50,83,119,101,101,112,32,38,44,32,102,108,111,97,116,51,50,41,0,0,0,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,58,58,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,40,41,0,0,0,118,111,105,100,32,42,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,58,58,65,108,108,111,99,97,116,101,40,105,110,116,51,50,41,0,118,111,105,100,32,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,58,58,70,114,101,101,40,118,111,105,100,32,42,41,0,118,111,105,100,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,58,58,73,110,105,116,105,97,108,105,122,101,40,98,50,66,111,100,121,32,42,44,32,98,50,66,111,100,121,32,42,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,44,32,102,108,111,97,116,51,50,41,0,0,118,111,105,100,32,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,58,58,83,101,116,76,105,109,105,116,115,40,102,108,111,97,116,51,50,44,32,102,108,111,97,116,51,50,41,0,0,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,58,58,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0,0,0,0,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,58,58,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,40,41,0,0,0,0,118,111,105,100,32,42,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,58,58,65,108,108,111,99,97,116,101,40,105,110,116,51,50,41,0,118,111,105,100,32,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,58,58,70,114,101,101,40,118,111,105,100,32,42,44,32,105,110,116,51,50,41,0,0,118,111,105,100,32,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,58,58,83,101,116,76,105,109,105,116,115,40,102,108,111,97,116,51,50,44,32,102,108,111,97,116,51,50,41,0,0,0,84,32,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,60,105,110,116,44,32,50,53,54,62,58,58,80,111,112,40,41,32,91,84,32,61,32,105,110,116,44,32,78,32,61,32,50,53,54,93,0,0,0,118,111,105,100,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,58,58,83,101,116,77,97,120,84,111,114,113,117,101,40,102,108,111,97,116,51,50,41,0,118,111,105,100,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,58,58,83,101,116,77,97,120,70,111,114,99,101,40,102,108,111,97,116,51,50,41,0,0,118,111,105,100,32,98,50,68,105,115,116,97,110,99,101,80,114,111,120,121,58,58,83,101,116,40,99,111,110,115,116,32,98,50,83,104,97,112,101,32,42,44,32,105,110,116,51,50,41,0,0,0,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,58,58,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,40,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,68,101,102,32,42,41,0,0,118,111,105,100,32,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,58,58,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,40,41,0,0,0,118,111,105,100,32,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,58,58,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,40,41,0,0,0,0,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,58,58,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,40,98,50,70,105,120,116,117,114,101,32,42,44,32,98,50,70,105,120,116,117,114,101,32,42,41,0,0,118,111,105,100,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,58,58,83,101,116,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0,98,50,80,117,108,108,101,121,74,111,105,110,116,58,58,98,50,80,117,108,108,101,121,74,111,105,110,116,40,99,111,110,115,116,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,32,42,41,0,0,98,111,111,108,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,77,111,118,101,80,114,111,120,121,40,105,110,116,51,50,44,32,99,111,110,115,116,32,98,50,65,65,66,66,32,38,44,32,99,111,110,115,116,32,98,50,86,101,99,50,32,38,41,0,0,0,0,118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,70,114,101,101,78,111,100,101,40,105,110,116,51,50,41,0,105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,66,97,108,97,110,99,101,40,105,110,116,51,50,41,0,118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,68,101,115,116,114,111,121,80,114,111,120,121])
.concat([40,105,110,116,51,50,41,0,105,110,116,51,50,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,65,108,108,111,99,97,116,101,78,111,100,101,40,41,0,118,111,105,100,32,98,50,68,121,110,97,109,105,99,84,114,101,101,58,58,73,110,115,101,114,116,76,101,97,102,40,105,110,116,51,50,41,0,0,0,98,50,77,111,117,115,101,74,111,105,110,116,58,58,98,50,77,111,117,115,101,74,111,105,110,116,40,99,111,110,115,116,32,98,50,77,111,117,115,101,74,111,105,110,116,68,101,102,32,42,41,0,118,105,114,116,117,97,108,32,118,111,105,100,32,98,50,77,111,117,115,101,74,111,105,110,116,58,58,73,110,105,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,40,99,111,110,115,116,32,98,50,83,111,108,118,101,114,68,97,116,97,32,38,41,0,0,0,0,118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,67,114,101,97,116,101,67,104,97,105,110,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0,0,0,118,111,105,100,32,98,50,67,104,97,105,110,83,104,97,112,101,58,58,67,114,101,97,116,101,76,111,111,112,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0,0,0,0,98,50,71,101,97,114,74,111,105,110,116,58,58,98,50,71,101,97,114,74,111,105,110,116,40,99,111,110,115,116,32,98,50,71,101,97,114,74,111,105,110,116,68,101,102,32,42,41,0,0,0,0,118,111,105,100,32,98,50,71,101,97,114,74,111,105,110,116,58,58,83,101,116,82,97,116,105,111,40,102,108,111,97,116,51,50,41,0,118,111,105,100,32,98,50,70,105,110,100,73,110,99,105,100,101,110,116,69,100,103,101,40,98,50,67,108,105,112,86,101,114,116,101,120,32,42,44,32,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,44,32,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0,0,0,0,102,108,111,97,116,51,50,32,98,50,69,100,103,101,83,101,112,97,114,97,116,105,111,110,40,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,105,110,116,51,50,44,32,99,111,110,115,116,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0,0,0,98,50,86,101,99,50,32,67,111,109,112,117,116,101,67,101,110,116,114,111,105,100,40,99,111,110,115,116,32,98,50,86,101,99,50,32,42,44,32,105,110,116,51,50,41,0,0,0,118,111,105,100,32,98,50,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,40,98,50,77,97,110,105,102,111,108,100,32,42,44,32,99,111,110,115,116,32,98,50,69,100,103,101,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,44,32,99,111,110,115,116,32,98,50,67,105,114,99,108,101,83,104,97,112,101,32,42,44,32,99,111,110,115,116,32,98,50,84,114,97,110,115,102,111,114,109,32,38,41,0,118,111,105,100,32,98,50,84,105,109,101,79,102,73,109,112,97,99,116,40,98,50,84,79,73,79,117,116,112,117,116,32,42,44,32,99,111,110,115,116,32,98,50,84,79,73,73,110,112,117,116,32,42,41,0,0,118,111,105,100,32,98,50,68,105,115,116,97,110,99,101,40,98,50,68,105,115,116,97,110,99,101,79,117,116,112,117,116,32,42,44,32,98,50,83,105,109,112,108,101,120,67,97,99,104,101,32,42,44,32,99,111,110,115,116,32,98,50,68,105,115,116,97,110,99,101,73,110,112,117,116,32,42,41,0,0,0,0,0,0,84,91,80,0,106,4,0,0,36,6,0,0,144,5,0,0,0,0,0,0,0,0,0,0,132,91,80,0,54,6,0,0,100,0,0,0,56,3,0,0,0,0,0,0,0,0,0,0,140,91,80,0,140,3,0,0,92,4,0,0,54,6,0,0,54,6,0,0,54,6,0,0,54,6,0,0,54,6,0,0,54,6,0,0,0,0,0,0,0,0,0,0,148,91,80,0,54,6,0,0,54,6,0,0,54,6,0,0,54,6,0,0,188,6,0,0,28,4,0,0,58,0,0,0,54,6,0,0,54,6,0,0,54,6,0,0,0,0,0,0,0,0,0,0,156,91,80,0,196,2,0,0,224,5,0,0,104,2,0,0,212,6,0,0,16,8,0,0,170,2,0,0,42,7,0,0,108,2,0,0,0,0,0,0,0,0,0,0,164,91,80,0,92,3,0,0,196,0,0,0,162,1,0,0,0,0,0,0,0,0,0,0,176,91,80,0,132,8,0,0,120,7,0,0,240,3,0,0,0,0,0,0,0,0,0,0,188,91,80,0,10,4,0,0,100,3,0,0,244,2,0,0,0,0,0,0,0,0,0,0,200,91,80,0,58,2,0,0,54,5,0,0,250,5,0,0,0,0,0,0,0,0,0,0,212,91,80,0,150,6,0,0,138,7,0,0,148,4,0,0,0,0,0,0,0,0,0,0,224,91,80,0,66,9,0,0,140,0,0,0,230,7,0,0,122,2,0,0,0,0,0,0,0,0,0,0,232,91,80,0,12,8,0,0,114,1,0,0,184,2,0,0,0,0,0,0,0,0,0,0,240,91,80,0,22,3,0,0,136,2,0,0,142,7,0,0,78,5,0,0,50,4,0,0,40,8,0,0,0,0,0,0,0,0,0,0,248,91,80,0,240,0,0,0,218,3,0,0,84,6,0,0,32,6,0,0,200,0,0,0,50,2,0,0,192,2,0,0,30,0,0,0,206,4,0,0,200,3,0,0,0,0,0,0,0,0,0,0,4,92,80,0,170,7,0,0,180,7,0,0,86,1,0,0,0,0,0,0,0,0,0,0,16,92,80,0,244,6,0,0,184,4,0,0,190,2,0,0,210,4,0,0,164,0,0,0,82,0,0,0,24,9,0,0,0,7,0,0,244,7,0,0,162,7,0,0,0,0,0,0,0,0,0,0,28,92,80,0,224,1,0,0,152,4,0,0,58,8,0,0,0,0,0,0,0,0,0,0,36,92,80,0,204,6,0,0,194,3,0,0,162,6,0,0,142,5,0,0,118,1,0,0,166,7,0,0,156,2,0,0,246,1,0,0,230,6,0,0,206,6,0,0,0,0,0,0,0,0,0,0,48,92,80,0,50,7,0,0,14,7,0,0,160,8,0,0,246,8,0,0,250,7,0,0,218,8,0,0,92,0,0,0,248,0,0,0,206,8,0,0,16,6,0,0,0,0,0,0,0,0,0,0,60,92,80,0,158,1,0,0,188,5,0,0,56,7,0,0,0,0,0,0,0,0,0,0,68,92,80,0,126,7,0,0,24,5,0,0,212,5,0,0,0,0,0,0,0,0,0,0,80,92,80,0,20,3,0,0,234,4,0,0,202,4,0,0,124,4,0,0,116,7,0,0,66,0,0,0,4,7,0,0,134,7,0,0,0,0,0,0,0,0,0,0,92,92,80,0,76,3,0,0,92,2,0,0,210,8,0,0,156,6,0,0,98,1,0,0,94,1,0,0,80,6,0,0,220,0,0,0,124,3,0,0,76,2,0,0,0,0,0,0,0,0,0,0,104,92,80,0,62,2,0,0,172,1,0,0,52,3,0,0,116,8,0,0,64,6,0,0,34,8,0,0,150,0,0,0,196,1,0,0,0,0,0,0,0,0,0,0,116,92,80,0,12,9,0,0,162,2,0,0,150,2,0,0,180,6,0,0,92,8,0,0,2,0,0,0,120,3,0,0,118,3,0,0,94,7,0,0,158,6,0,0,0,0,0,0,0,0,0,0,128,92,80,0,228,1,0,0,62,6,0,0,108,3,0,0,34,3,0,0,82,7,0,0,176,8,0,0,70,9,0,0,228,4,0,0,22,7,0,0,94,4,0,0,0,0,0,0,0,0,0,0,140,92,80,0,198,5,0,0,82,6,0,0,110,7,0,0,30,4,0,0,180,8,0,0,168,3,0,0,10,2,0,0,6,0,0,0,0,0,0,0,0,0,0,0,152,92,80,0,228,3,0,0,130,8,0,0,144,8,0,0,52,4,0,0,218,7,0,0,4,2,0,0,154,2,0,0,48,3,0,0,220,5,0,0,252,8,0,0,0,0,0,0,0,0,0,0,164,92,80,0,228,2,0,0,4,1,0,0,116,4,0,0,192,4,0,0,164,4,0,0,46,7,0,0,66,5,0,0,186,1,0,0,216,2,0,0,246,5,0,0,0,0,0,0,0,0,0,0,176,92,80,0,78,3,0,0,242,4,0,0,78,0,0,0,158,3,0,0,12,4,0,0,26,8,0,0,112,0,0,0,100,6,0,0,22,5,0,0,162,8,0,0,0,0,0,0,0,0,0,0,188,92,80,0,210,0,0,0,90,0,0,0,110,6,0,0,108,8,0,0,78,8,0,0,242,8,0,0,60,1,0,0,50,9,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,57,98,50,67,111,110,116,97,99,116,0,0,55,98,50,83,104,97,112,101,0,0,0,0,55,98,50,74,111,105,110,116,0,0,0,0,54,98,50,68,114,97,119,0,50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,50,51,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,50,51,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,50,49,98,50,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,0,49,55,98,50,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,0,49,55,98,50,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0,49,54,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,49,54,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,49,53,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,0,0,0,49,53,98,50,81,117,101,114,121,67,97,108,108,98,97,99,107,0,0,0,49,53,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,0,0,0,49,53,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,0,0,0,49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0,0,0,49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,49,52,98,50,80,111,108,121,103,111,110,83,104,97,112,101,0,0,0,0,49,51,98,50,80,117,108,108,101,121,74,111,105,110,116,0,49,51,98,50,67,105,114,99,108,101,83,104,97,112,101,0,49,50,98,50,87,104,101,101,108,74,111,105,110,116,0,0,49,50,98,50,77,111,117,115,101,74,111,105,110,116,0,0,49,50,98,50,67,104,97,105,110,83,104,97,112,101,0,0,49,49,98,50,87,101,108,100,74,111,105,110,116,0,0,0,49,49,98,50,82,111,112,101,74,111,105,110,116,0,0,0,49,49,98,50,71,101,97,114,74,111,105,110,116,0,0,0,49,49,98,50,69,100,103,101,83,104,97,112,101,0,0,0,0,0,0,0,128,88,80,0,0,0,0,0,144,88,80,0,0,0,0,0,0,0,0,0,160,88,80,0,108,91,80,0,0,0,0,0,200,88,80,0,120,91,80,0,0,0,0,0,236,88,80,0,76,91,80,0,0,0,0,0,16,89,80,0,0,0,0,0,28,89,80,0,0,0,0,0,40,89,80,0,0,0,0,0,52,89,80,0,0,0,0,0,60,89,80,0,132,91,80,0,0,0,0,0,88,89,80,0,132,91,80,0,0,0,0,0,116,89,80,0,132,91,80,0,0,0,0,0,144,89,80,0,132,91,80,0,0,0,0,0,172,89,80,0,132,91,80,0,0,0,0,0,200,89,80,0,0,0,0,0,224,89,80,0,0,0,0,0,244,89,80,0,0,0,0,0,8,90,80,0,148,91,80,0,0,0,0,0,28,90,80,0,132,91,80,0,0,0,0,0,48,90,80,0,148,91,80,0,0,0,0,0,68,90,80,0,0,0,0,0,88,90,80,0,148,91,80,0,0,0,0,0,108,90,80,0,148,91,80,0,0,0,0,0,128,90,80,0,0,0,0,0,148,90,80,0,132,91,80,0,0,0,0,0,168,90,80,0,140,91,80,0,0,0,0,0,188,90,80,0,148,91,80,0,0,0,0,0,204,90,80,0,140,91,80,0,0,0,0,0,220,90,80,0,148,91,80,0,0,0,0,0,236,90,80,0,148,91,80,0,0,0,0,0,252,90,80,0,140,91,80,0,0,0,0,0,12,91,80,0,148,91,80,0,0,0,0,0,28,91,80,0,148,91,80,0,0,0,0,0,44,91,80,0,148,91,80,0,0,0,0,0,60,91,80,0,140,91,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,128,2,0,0,0,0,0,0,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0,,,,,0,0,0,0])
, "i8", ALLOC_NONE, TOTAL_STACK)
function runPostSets() {
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(8))>>2)]=(976);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(12))>>2)]=(1144);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(16))>>2)]=(524);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(20))>>2)]=(1858);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(24))>>2)]=(1566);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(28))>>2)]=(1818);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(32))>>2)]=(784);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(36))>>2)]=(866);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(8))>>2)]=(1476);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(12))>>2)]=(2260);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(16))>>2)]=(524);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(20))>>2)]=(1858);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(24))>>2)]=(1566);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(28))>>2)]=(910);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(32))>>2)]=(852);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(36))>>2)]=(1328);
HEAP32[((5266252)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266260)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266268)>>2)]=__ZTISt9exception;
HEAP32[((5266272)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266284)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266296)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266308)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266316)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266324)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266332)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266340)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266352)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266364)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266376)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266388)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266400)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266408)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266416)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266424)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266436)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266448)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266460)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266468)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266480)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266492)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5266500)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266512)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266524)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266536)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266548)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266560)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266572)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266584)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266596)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266608)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5266620)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
__ZN12b2BroadPhaseC1Ev = 918;
__ZN12b2BroadPhaseD1Ev = 2066;
__ZN13b2DynamicTreeC1Ev = 2376;
__ZN13b2DynamicTreeD1Ev = 1802;
__ZN12b2ChainShapeD1Ev = 400;
__ZN16b2BlockAllocatorC1Ev = 646;
__ZN16b2BlockAllocatorD1Ev = 1870;
__ZN6b2DrawC1Ev = 132;
__ZN16b2StackAllocatorC1Ev = 2220;
__ZN16b2StackAllocatorD1Ev = 1246;
__ZN7b2TimerC1Ev = 2162;
__ZN6b2BodyC1EPK9b2BodyDefP7b2World = 2246;
__ZN6b2BodyD1Ev = 1992;
__ZN16b2ContactManagerC1Ev = 2202;
__ZN9b2FixtureC1Ev = 158;
__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener = 1056;
__ZN8b2IslandD1Ev = 1550;
__ZN7b2WorldC1ERK6b2Vec2 = 1354;
__ZN7b2WorldD1Ev = 1260;
__ZN23b2ChainAndCircleContactC1EP9b2FixtureiS1_i = 1546;
__ZN24b2ChainAndPolygonContactC1EP9b2FixtureiS1_i = 1984;
__ZN15b2CircleContactC1EP9b2FixtureS1_ = 760;
__ZN15b2ContactSolverC1EP18b2ContactSolverDef = 2222;
__ZN15b2ContactSolverD1Ev = 2034;
__ZN22b2EdgeAndCircleContactC1EP9b2FixtureS1_ = 10;
__ZN23b2EdgeAndPolygonContactC1EP9b2FixtureS1_ = 870;
__ZN25b2PolygonAndCircleContactC1EP9b2FixtureS1_ = 1288;
__ZN16b2PolygonContactC1EP9b2FixtureS1_ = 2250;
__ZN15b2DistanceJointC1EPK18b2DistanceJointDef = 1022;
__ZN15b2FrictionJointC1EPK18b2FrictionJointDef = 152;
__ZN11b2GearJointC1EPK14b2GearJointDef = 2380;
__ZN12b2MouseJointC1EPK15b2MouseJointDef = 18;
__ZN16b2PrismaticJointC1EPK19b2PrismaticJointDef = 2072;
__ZN13b2PulleyJointC1EPK16b2PulleyJointDef = 392;
__ZN15b2RevoluteJointC1EPK18b2RevoluteJointDef = 878;
__ZN11b2RopeJointC1EPK14b2RopeJointDef = 186;
__ZN11b2WeldJointC1EPK14b2WeldJointDef = 2344;
__ZN12b2WheelJointC1EPK15b2WheelJointDef = 172;
__ZN10__cxxabiv117__class_type_infoD1Ev = 2184;
__ZN10__cxxabiv117__class_type_infoD2Ev = (2292);
__ZN10__cxxabiv120__si_class_type_infoD1Ev = 2346;
__ZN10__cxxabiv120__si_class_type_infoD2Ev = (2184);
__ZNSt9bad_allocC1Ev = 1762;
__ZNSt9bad_allocD1Ev = 202;
}
if (!awaitingMemoryInitializer) runPostSets();
  function ___gxx_personality_v0() {
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  var _sqrtf=Math.sqrt;
  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  var _sinf=Math.sin;
  var _cosf=Math.cos;
  var _floorf=Math.floor;
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = flagAlternative ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*') || nullString;
              var argLength = _strlen(arg);
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              for (var i = 0; i < argLength; i++) {
                ret.push(HEAPU8[((arg++)|0)]);
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }var _vprintf=_printf;
  function _llvm_va_end() {}
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  var _atan2f=Math.atan2;
  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }
  function ___cxa_guard_abort() {}
  function ___cxa_guard_release() {}
  function __ZNSt9exceptionD2Ev(){}
  var _llvm_memset_p0i8_i64=_memset;
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (Browser.initted) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'];
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        this.lockPointer = lockPointer;
        this.resizeCanvas = resizeCanvas;
        if (typeof this.lockPointer === 'undefined') this.lockPointer = true;
        if (typeof this.resizeCanvas === 'undefined') this.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!this.fullScreenHandlersInstalled) {
          this.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
var FUNCTION_TABLE = [0,0,__ZN12b2WheelJointD1Ev,0,_emscripten_bind_b2Filter__b2Filter_p0,0,__ZNK12b2ChainShape11ComputeMassEP10b2MassDataf,0,_emscripten_bind_b2WheelJoint__GetSpringFrequencyHz_p0,0,__ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_
,0,_emscripten_bind_b2Fixture__SetRestitution_p1,0,_emscripten_bind_b2PolygonShape____destroy___p0,0,_emscripten_bind_b2ContactManager__b2ContactManager_p0,0,__ZN12b2MouseJointC2EPK15b2MouseJointDef,0,_emscripten_bind_b2DistanceProxy__get_m_vertices_p0
,0,_emscripten_bind_b2PrismaticJoint__EnableLimit_p1,0,_emscripten_bind_b2WheelJointDef__Initialize_p4,0,_emscripten_bind_b2BroadPhase__GetUserData_p1,0,_emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1,0,__ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData
,0,_emscripten_bind_b2Fixture__SetFilterData_p1,0,_emscripten_bind_b2PrismaticJoint__GetMotorForce_p1,0,_emscripten_bind_b2Filter__set_maskBits_p1,0,_emscripten_bind_b2DistanceJoint__GetNext_p0,0,_emscripten_bind_b2Vec2__b2Vec2_p2
,0,_emscripten_bind_b2RevoluteJoint__GetMaxMotorTorque_p0,0,_emscripten_bind_b2WeldJoint__GetFrequency_p0,0,_emscripten_bind_b2MouseJoint__GetType_p0,0,_emscripten_bind_b2RayCastCallback__b2RayCastCallback_p0,0,_emscripten_bind_b2Body__GetLinearDamping_p0
,0,_emscripten_bind_b2JointDef__get_type_p0,0,_emscripten_bind_b2PrismaticJoint__GetType_p0,0,_emscripten_bind_b2PrismaticJoint____destroy___p0,0,__ZN7b2JointD0Ev,0,_emscripten_bind_b2WheelJointDef__set_frequencyHz_p1
,0,_emscripten_bind_b2BlockAllocator____destroy___p0,0,_emscripten_bind_b2Vec2__op_add_p1,0,__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,0,_emscripten_bind_b2Transform__Set_p2,0,_emscripten_bind_b2EdgeShape__RayCast_p4
,0,_emscripten_bind_b2RevoluteJoint__GetLocalAnchorA_p0,0,_emscripten_bind_b2DistanceJoint__GetDampingRatio_p0,0,_emscripten_bind_b2Vec2__get_y_p0,0,__ZNK11b2GearJoint16GetReactionForceEf,0,_emscripten_bind_b2DynamicTree__Validate_p0
,0,__ZN15b2RevoluteJointD1Ev,0,_emscripten_bind_b2DynamicTree__DestroyProxy_p1,0,_emscripten_bind_b2Manifold__set_type_p1,0,_emscripten_bind_b2Joint__IsActive_p0,0,__ZN11b2EdgeShapeD0Ev
,0,__ZN15b2DistanceJointD0Ev,0,_emscripten_bind_b2GearJointDef____destroy___p0,0,_emscripten_bind_b2PulleyJoint__GetNext_p0,0,_emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0,0,__ZN9b2ContactD1Ev
,0,_emscripten_bind_b2EdgeShape__get_m_radius_p0,0,_emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2RevoluteJointDef__set_bodyA_p1,0,_emscripten_bind_b2World__GetJointCount_p0,0,_emscripten_bind_b2DynamicTree__CreateProxy_p2
,0,__ZN11b2GearJointD0Ev,0,_emscripten_bind_b2WheelJointDef__set_collideConnected_p1,0,_emscripten_bind_b2WeldJoint__GetLocalAnchorA_p0,0,_emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2Body__GetGravityScale_p0
,0,_emscripten_bind_b2Fixture__Dump_p1,0,_emscripten_bind_b2World__GetBodyList_p0,0,_emscripten_bind_b2PulleyJoint__IsActive_p0,0,_emscripten_bind_b2MouseJoint__SetUserData_p1,0,_emscripten_bind_b2World__GetContactList_p0
,0,__ZN6b2DrawC2Ev,0,_emscripten_bind_b2PrismaticJoint__GetNext_p0,0,_emscripten_bind_b2Vec2__Skew_p0,0,_emscripten_bind_b2BodyDef__get_linearVelocity_p0,0,__ZN21b2DestructionListenerD0Ev
,0,_emscripten_bind_b2WheelJoint__GetReactionForce_p1,0,_emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1,0,_emscripten_bind_b2PrismaticJoint__SetMaxMotorForce_p1,0,_emscripten_bind_b2ChainShape__b2ChainShape_p0,0,__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi
,0,__ZN15b2FrictionJointC2EPK18b2FrictionJointDef,0,_emscripten_bind_b2CircleShape__RayCast_p4,0,_emscripten_bind_b2WheelJoint__GetBodyA_p0,0,__ZN9b2FixtureC2Ev,0,_emscripten_bind_b2RevoluteJointDef__set_bodyB_p1
,0,_emscripten_bind_b2MouseJointDef__get_dampingRatio_p0,0,__ZN15b2RevoluteJoint4DumpEv,0,_emscripten_bind_b2Fixture__GetNext_p0,0,_emscripten_bind_b2JointDef__set_bodyB_p1,0,_emscripten_bind_b2RevoluteJoint__GetJointSpeed_p0
,0,__ZN12b2WheelJointC2EPK15b2WheelJointDef,0,_emscripten_bind_b2RopeJoint__GetLocalAnchorB_p0,0,_emscripten_bind_b2Fixture__GetAABB_p1,0,_emscripten_bind_b2BroadPhase__TouchProxy_p1,0,_emscripten_bind_b2FixtureDef__set_isSensor_p1
,0,_emscripten_bind_b2World__GetAllowSleeping_p0,0,_emscripten_bind_b2DestructionListener____destroy___p0,0,__ZN11b2RopeJointC2EPK14b2RopeJointDef,0,_emscripten_bind_b2World__GetWarmStarting_p0,0,_emscripten_bind_b2Rot__b2Rot_p1
,0,_emscripten_bind_b2Rot__b2Rot_p0,0,_emscripten_bind_b2DistanceJoint__GetUserData_p0,0,__ZN25b2PolygonAndCircleContactD1Ev,0,_emscripten_bind_b2MouseJointDef__get_frequencyHz_p0,0,__ZN16b2PrismaticJoint4DumpEv
,0,__ZNSt9bad_allocD2Ev,0,_emscripten_bind_b2ContactManager__set_m_allocator_p1,0,_emscripten_bind_b2WeldJointDef__get_referenceAngle_p0,0,_emscripten_bind_b2WheelJoint__SetMaxMotorTorque_p1,0,__ZN11b2EdgeShapeD1Ev
,0,_emscripten_bind_b2MouseJointDef__get_target_p0,0,_emscripten_bind_b2WeldJoint__SetUserData_p1,0,_emscripten_bind_b2PrismaticJoint__GetBodyA_p0,0,_emscripten_bind_b2StackAllocator__b2StackAllocator_p0,0,__ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData
,0,_emscripten_bind_b2MouseJoint__GetDampingRatio_p0,0,_emscripten_bind_b2Body__IsSleepingAllowed_p0,0,_emscripten_bind_b2Filter__get_maskBits_p0,0,_emscripten_bind_b2RayCastCallback____destroy___p0,0,_emscripten_bind_b2World__Dump_p0
,0,_emscripten_bind_b2RevoluteJointDef____destroy___p0,0,_emscripten_bind_b2BodyDef__get_bullet_p0,0,_emscripten_bind_b2Body__SetAngularDamping_p1,0,_emscripten_bind_b2Manifold____destroy___p0,0,__ZNK16b2PrismaticJoint10GetAnchorAEv
,0,_emscripten_bind_b2DynamicTree__RebuildBottomUp_p0,0,_emscripten_bind_b2Fixture__GetFilterData_p0,0,_emscripten_bind_b2DistanceJoint__SetLength_p1,0,__ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2BodyDef__get_position_p0
,0,_emscripten_bind_b2FrictionJoint__GetUserData_p0,0,_emscripten_bind_b2PolygonShape__get_m_radius_p0,0,_emscripten_bind_b2ContactEdge__set_next_p1,0,_emscripten_bind_b2Transform__b2Transform_p2,0,__ZNK11b2RopeJoint10GetAnchorBEv
,0,_emscripten_bind_b2FrictionJointDef__get_maxTorque_p0,0,_emscripten_bind_b2WeldJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2World__GetProxyCount_p0,0,_emscripten_bind_b2WeldJointDef__get_bodyB_p1,0,_emscripten_bind_b2Vec2__op_mul_p1
,0,_emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1,0,_emscripten_bind_b2PolygonShape__set_m_centroid_p1,0,_emscripten_bind_b2WeldJoint__GetAnchorB_p0,0,_emscripten_bind_b2PulleyJointDef__get_collideConnected_p1,0,_emscripten_bind_b2Vec3____destroy___p0
,0,_emscripten_bind_b2Color__set_r_p1,0,_emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0,0,_emscripten_bind_b2BodyDef__get_linearDamping_p0,0,_emscripten_bind_b2EdgeShape__ComputeMass_p2,0,_emscripten_bind_b2Body__GetInertia_p0
,0,_emscripten_bind_b2RayCastCallback__ReportFixture_p4,0,_emscripten_bind_b2Body__Dump_p0,0,_emscripten_bind_b2BodyDef__get_allowSleep_p0,0,_emscripten_bind_b2PrismaticJoint__GetJointTranslation_p0,0,_emscripten_bind_b2PulleyJoint__GetAnchorB_p0
,0,_emscripten_bind_b2PrismaticJoint__GetReactionTorque_p1,0,_emscripten_bind_b2JointDef__set_bodyA_p1,0,_emscripten_bind_b2PrismaticJoint__GetBodyB_p0,0,_emscripten_bind_b2DistanceJoint__GetLocalAnchorA_p0,0,_emscripten_bind_b2RopeJoint__GetLocalAnchorA_p0
,0,_emscripten_bind_b2Rot__set_c_p1,0,_emscripten_bind_b2Vec3__op_mul_p1,0,__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi,0,_emscripten_bind_b2StackAllocator__GetMaxAllocation_p0,0,_emscripten_bind_b2MouseJoint__SetFrequency_p1
,0,_emscripten_bind_b2GearJoint__GetAnchorB_p0,0,_emscripten_bind_b2World__SetAutoClearForces_p1,0,_emscripten_bind_b2Contact__SetEnabled_p1,0,_emscripten_bind_b2ContactManager__get_m_contactFilter_p0,0,_emscripten_bind_b2BodyDef__get_angularDamping_p0
,0,_emscripten_bind_b2WeldJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2DistanceJoint__GetBodyB_p0,0,_emscripten_bind_b2PulleyJointDef__set_lengthB_p1,0,_emscripten_bind_b2FrictionJoint__GetNext_p0,0,_emscripten_bind_b2PrismaticJoint__GetLocalAnchorB_p0
,0,__ZN16b2PolygonContactD0Ev,0,_emscripten_bind_b2RopeJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2Contact__GetChildIndexB_p0,0,_emscripten_bind_b2Fixture__TestPoint_p1,0,__ZN13b2PulleyJointD1Ev
,0,_emscripten_bind_b2FixtureDef__get_shape_p0,0,__ZN13b2PulleyJoint4DumpEv,0,_emscripten_bind_b2WheelJointDef__get_bodyB_p1,0,_emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0,0,_emscripten_bind_b2BodyDef__set_linearVelocity_p1
,0,_emscripten_bind_b2Body__GetMass_p0,0,_emscripten_bind_b2WeldJoint____destroy___p0,0,_emscripten_bind_b2WheelJoint__GetSpringDampingRatio_p0,0,_emscripten_bind_b2RopeJointDef__set_localAnchorB_p1,0,__ZN17b2RayCastCallbackD0Ev
,0,_emscripten_bind_b2Body__IsFixedRotation_p0,0,__ZN15b2FrictionJoint4DumpEv,0,_emscripten_bind_b2Rot__SetIdentity_p0,0,_emscripten_bind_b2WheelJoint__SetSpringDampingRatio_p1,0,__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator
,0,_emscripten_bind_b2Joint__GetBodyA_p0,0,_emscripten_bind_b2FrictionJoint__IsActive_p0,0,_emscripten_bind_b2JointDef__get_userData_p0,0,_emscripten_bind_b2Draw__DrawPolygon_p3,0,_emscripten_bind_b2MouseJoint__GetBodyB_p0
,0,__ZN13b2PulleyJointC2EPK16b2PulleyJointDef,0,_emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0,0,_emscripten_bind_b2ContactManager__get_m_broadPhase_p0,0,_emscripten_bind_b2RopeJoint__GetReactionTorque_p1,0,__ZN12b2ChainShapeD2Ev
,0,_emscripten_bind_b2PrismaticJoint__GetLowerLimit_p0,0,_emscripten_bind_b2Contact__GetManifold_p0,0,_emscripten_bind_b2Contact__SetFriction_p1,0,_emscripten_bind_b2WheelJoint__GetJointSpeed_p0,0,_emscripten_bind_b2BodyDef__set_allowSleep_p1
,0,_emscripten_bind_b2Fixture__RayCast_p3,0,__ZN15b2ContactFilterD1Ev,0,_emscripten_bind_b2Manifold__get_localPoint_p0,0,__ZN25b2PolygonAndCircleContactD0Ev,0,_emscripten_bind_b2RopeJointDef__set_localAnchorA_p1
,0,_emscripten_bind_b2WheelJoint__SetUserData_p1,0,_emscripten_bind_b2WeldJoint__b2WeldJoint_p1,0,_emscripten_bind_b2WeldJoint__IsActive_p0,0,__ZN13b2CircleShapeD0Ev,0,_emscripten_bind_b2Draw__DrawSolidPolygon_p3
,0,_emscripten_bind_b2ContactManager____destroy___p0,0,_emscripten_bind_b2WeldJoint__GetAnchorA_p0,0,_emscripten_bind_b2ContactListener__PreSolve_p2,0,_emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0,0,_emscripten_bind_b2PolygonShape__get_m_vertexCount_p0
,0,__ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2RevoluteJoint__GetReferenceAngle_p0,0,_emscripten_bind_b2DistanceJointDef__Initialize_p4,0,_emscripten_bind_b2World__IsLocked_p0,0,_emscripten_bind_b2ContactEdge__get_prev_p0
,0,__ZNK13b2CircleShape11ComputeMassEP10b2MassDataf,0,_emscripten_bind_b2Joint__GetReactionForce_p1,0,_emscripten_bind_b2WeldJointDef__get_collideConnected_p1,0,_emscripten_bind_b2DistanceJointDef__set_bodyB_p1,0,_emscripten_bind_b2Draw__AppendFlags_p1
,0,_emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0,0,_emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1,0,_emscripten_bind_b2PrismaticJoint__EnableMotor_p1,0,_emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2PrismaticJoint__GetReactionForce_p1
,0,_emscripten_bind_b2DistanceJointDef__get_bodyA_p1,0,_emscripten_bind_b2GearJoint__Dump_p0,0,_emscripten_bind_b2Body__DestroyFixture_p1,0,_emscripten_bind_b2Body__SetActive_p1,0,__ZN15b2QueryCallbackD1Ev
,0,_emscripten_bind_b2ContactListener____destroy___p0,0,__ZNK12b2MouseJoint10GetAnchorAEv,0,_emscripten_bind_b2MouseJoint__SetDampingRatio_p1,0,_emscripten_bind_b2Body__ApplyTorque_p1,0,_emscripten_bind_b2DistanceProxy__GetVertexCount_p0
,0,_emscripten_bind_b2Fixture____destroy___p0,0,_emscripten_bind_b2FixtureDef__set_density_p1,0,_emscripten_bind_b2PulleyJointDef__set_bodyA_p1,0,_emscripten_bind_b2RopeJoint__b2RopeJoint_p1,0,_emscripten_bind_b2FixtureDef__get_filter_p0
,0,__ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2WheelJoint__GetUserData_p0,0,_emscripten_bind_b2GearJointDef__set_collideConnected_p1,0,_emscripten_bind_b2GearJoint____destroy___p0,0,_emscripten_bind_b2Body__GetAngularVelocity_p0
,0,_emscripten_bind_b2Shape__RayCast_p4,0,_emscripten_bind_b2AABB__get_lowerBound_p0,0,__ZN11b2WeldJointD1Ev,0,_emscripten_bind_b2Fixture__GetFriction_p0,0,_emscripten_bind_b2BroadPhase__MoveProxy_p3
,0,__ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,_emscripten_bind_b2RopeJointDef__set_collideConnected_p1,0,_emscripten_bind_b2FrictionJoint__GetBodyB_p0,0,_emscripten_bind_b2RevoluteJoint__IsLimitEnabled_p0
,0,_emscripten_bind_b2FrictionJointDef__set_maxForce_p1,0,_emscripten_bind_b2FrictionJointDef____destroy___p0,0,_emscripten_bind_b2Contact__SetRestitution_p1,0,_emscripten_bind_b2WheelJointDef__get_enableMotor_p0,0,_emscripten_bind_b2RevoluteJointDef__get_bodyB_p1
,0,_emscripten_bind_b2PolygonShape__GetChildCount_p0,0,_emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0,0,_emscripten_bind_b2ContactEdge__set_other_p1,0,_emscripten_bind_b2MouseJoint__SetMaxForce_p1,0,_emscripten_bind_b2Joint__GetNext_p0
,0,_emscripten_bind_b2Manifold__get_pointCount_p0,0,_emscripten_bind_b2RevoluteJoint__GetAnchorA_p0,0,_emscripten_bind_b2Filter__set_groupIndex_p1,0,_emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1,0,_emscripten_bind_b2FrictionJoint__SetMaxForce_p1
,0,__ZN16b2PrismaticJointD1Ev,0,_emscripten_bind_b2MouseJoint__b2MouseJoint_p1,0,_emscripten_bind_b2MouseJoint__Dump_p0,0,_emscripten_bind_b2FixtureDef__set_restitution_p1,0,__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
,0,_emscripten_bind_b2Body__GetJointList_p0,0,__ZN13b2CircleShapeD1Ev,0,_emscripten_bind_b2Timer____destroy___p0,0,_emscripten_bind_b2Vec2__IsValid_p0,0,_emscripten_bind_b2Contact__ResetRestitution_p0
,0,_emscripten_bind_b2RevoluteJointDef__get_collideConnected_p1,0,_emscripten_bind_b2DynamicTree__MoveProxy_p3,0,_emscripten_bind_b2Transform__b2Transform_p0,0,__ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0
,0,__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator,0,_emscripten_bind_b2WheelJointDef____destroy___p0,0,_emscripten_bind_b2MouseJoint__GetBodyA_p0,0,_emscripten_bind_b2GearJoint__GetType_p0,0,_emscripten_bind_b2Body__SetMassData_p1
,0,_emscripten_bind_b2MouseJoint__IsActive_p0,0,__ZNK13b2PulleyJoint10GetAnchorBEv,0,_emscripten_bind_b2FrictionJoint__GetAnchorA_p0,0,_emscripten_bind_b2Contact__GetChildIndexA_p0,0,_emscripten_bind_b2Fixture__GetShape_p0
,0,_emscripten_bind_b2DistanceProxy__set_m_radius_p1,0,_emscripten_bind_b2DistanceJointDef__get_bodyB_p1,0,__ZN6b2Draw11DrawPolygonEPK6b2Vec2iRK7b2Color,0,_emscripten_bind_b2World__DestroyJoint_p1,0,__ZN6b2Draw13DrawTransformERK11b2Transform
,0,_emscripten_bind_b2PulleyJointDef__set_ratio_p1,0,_emscripten_bind_b2DynamicTree__b2DynamicTree_p0,0,_emscripten_bind_b2RopeJoint__GetType_p0,0,_emscripten_bind_b2Body__GetLocalPoint_p1,0,_emscripten_bind_b2World__GetBodyCount_p0
,0,_emscripten_bind_b2CircleShape__GetType_p0,0,__ZN21b2DestructionListener10SayGoodbyeEP9b2Fixture,0,_emscripten_bind_b2DistanceProxy__get_m_radius_p0,0,_emscripten_bind_b2World__ClearForces_p0,0,_emscripten_bind_b2DynamicTree____destroy___p0
,0,_emscripten_bind_b2Contact__GetWorldManifold_p1,0,_emscripten_bind_b2DynamicTree__GetUserData_p1,0,__ZN16b2BlockAllocatorC2Ev,0,__ZN17b2ContactListenerD0Ev,0,_emscripten_bind_b2JointDef____destroy___p0
,0,_emscripten_bind_b2GearJoint__IsActive_p0,0,_emscripten_bind_b2Draw__GetFlags_p0,0,_emscripten_bind_b2RevoluteJoint__GetAnchorB_p0,0,_emscripten_bind_b2DistanceJoint____destroy___p0,0,_emscripten_bind_b2MouseJoint__GetFrequency_p0
,0,__ZNK12b2WheelJoint16GetReactionForceEf,0,_emscripten_bind_b2DestructionListener__SayGoodbye_p1,0,__ZN11b2WeldJointD0Ev,0,__ZN15b2FrictionJointD0Ev,0,_emscripten_bind_b2WheelJoint__IsActive_p0
,0,_emscripten_bind_b2EdgeShape____destroy___p0,0,__ZNK12b2WheelJoint10GetAnchorBEv,0,_emscripten_bind_b2GearJointDef__get_ratio_p0,0,_emscripten_bind_b2BlockAllocator__Clear_p0,0,_emscripten_bind_b2RopeJoint__GetAnchorB_p0
,0,__ZN6b2Draw15DrawSolidCircleERK6b2Vec2fS2_RK7b2Color,0,_emscripten_bind_b2WheelJoint__EnableMotor_p1,0,__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,0,_emscripten_bind_b2FrictionJoint__GetBodyA_p0,0,_emscripten_bind_b2GearJointDef__set_bodyA_p1
,0,_emscripten_bind_b2Joint__GetType_p0,0,_emscripten_bind_b2RopeJoint__GetBodyA_p0,0,__ZN17b2RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f,0,_emscripten_bind_b2WheelJointDef__get_bodyA_p1,0,_emscripten_bind_b2RopeJoint__GetAnchorA_p0
,0,__ZNK15b2RevoluteJoint16GetReactionForceEf,0,__ZN16b2PrismaticJointD0Ev,0,_emscripten_bind_b2Transform__get_q_p0,0,__ZN6b2DrawD1Ev,0,_emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0
,0,_emscripten_bind_b2ContactListener__PostSolve_p2,0,_emscripten_bind_b2WeldJoint__GetLocalAnchorB_p0,0,_emscripten_bind_b2PolygonShape__set_m_radius_p1,0,_emscripten_bind_b2Vec2__SetZero_p0,0,_emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0
,0,_emscripten_bind_b2ChainShape__CreateLoop_p2,0,_emscripten_bind_b2RevoluteJoint__GetNext_p0,0,_emscripten_bind_b2MouseJoint__GetNext_p0,0,__ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2World__DestroyBody_p1
,0,_emscripten_bind_b2World__SetSubStepping_p1,0,_emscripten_bind_b2PulleyJoint__SetUserData_p1,0,_emscripten_bind_b2WheelJoint__GetMotorSpeed_p0,0,_emscripten_bind_b2RopeJoint__GetLimitState_p0,0,__ZNK11b2RopeJoint10GetAnchorAEv
,0,_emscripten_bind_b2PrismaticJointDef____destroy___p0,0,_emscripten_bind_b2Body__GetWorld_p0,0,_emscripten_bind_b2PulleyJointDef__set_collideConnected_p1,0,_emscripten_bind_b2PulleyJoint__GetLengthA_p0,0,_emscripten_bind_b2WheelJoint__GetNext_p0
,0,_emscripten_bind_b2GearJoint__GetJoint1_p0,0,_emscripten_bind_b2PulleyJoint__GetType_p0,0,__ZN23b2EdgeAndPolygonContactD0Ev,0,_emscripten_bind_b2BroadPhase__GetFatAABB_p1,0,__ZN15b2CircleContactC2EP9b2FixtureS1_
,0,_emscripten_bind_b2Shape__GetType_p0,0,_emscripten_bind_b2FrictionJoint__SetMaxTorque_p1,0,_emscripten_bind_b2ContactManager__set_m_contactCount_p1,0,_emscripten_bind_b2Body__GetLinearVelocity_p0,0,_emscripten_bind_b2ContactManager__get_m_allocator_p0
,0,_emscripten_bind_b2AABB____destroy___p0,0,_emscripten_bind_b2PulleyJoint__GetCollideConnected_p0,0,_emscripten_bind_b2RopeJoint__GetBodyB_p0,0,_emscripten_bind_b2RevoluteJoint__GetJointAngle_p0,0,_emscripten_bind_b2Rot__GetXAxis_p0
,0,_emscripten_bind_b2ContactManager__get_m_contactCount_p0,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,_emscripten_bind_b2DistanceJoint__Dump_p0,0,__ZN14b2PolygonShapeD1Ev,0,__ZN17b2ContactListenerD1Ev
,0,_emscripten_bind_b2PolygonShape__GetVertexCount_p0,0,_emscripten_bind_b2StackAllocator__Free_p1,0,_emscripten_bind_b2CircleShape__GetSupportVertex_p1,0,_emscripten_bind_b2DistanceProxy__GetSupportVertex_p1,0,_emscripten_bind_b2DistanceJointDef__set_bodyA_p1
,0,__ZNK12b2MouseJoint17GetReactionTorqueEf,0,_emscripten_bind_b2JointDef__set_userData_p1,0,_emscripten_bind_b2RopeJointDef__get_collideConnected_p1,0,_emscripten_bind_b2Vec3__get_z_p0,0,_emscripten_bind_b2RopeJoint__GetUserData_p0
,0,_emscripten_bind_b2GearJoint__GetUserData_p0,0,_emscripten_bind_b2FixtureDef__get_restitution_p0,0,__ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2WheelJoint__GetAnchorB_p0,0,__ZNK13b2CircleShape5CloneEP16b2BlockAllocator
,0,_emscripten_bind_b2FixtureDef__b2FixtureDef_p0,0,__ZN9b2ContactD0Ev,0,_emscripten_bind_b2WheelJointDef__get_motorSpeed_p0,0,_emscripten_bind_b2FrictionJoint__b2FrictionJoint_p1,0,_emscripten_bind_b2Body__GetAngularDamping_p0
,0,_emscripten_bind_b2PrismaticJoint__GetCollideConnected_p0,0,_emscripten_bind_b2ChainShape__SetNextVertex_p1,0,_emscripten_bind_b2Joint__SetUserData_p1,0,_emscripten_bind_b2Fixture__IsSensor_p0,0,_emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0
,0,_emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1,0,__ZNK13b2PulleyJoint10GetAnchorAEv,0,__ZNK11b2GearJoint10GetAnchorAEv,0,_emscripten_bind_b2WheelJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2WheelJointDef__set_bodyB_p1
,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,_emscripten_bind_b2Body__SetType_p1,0,_emscripten_bind_b2BodyDef__get_active_p0,0,_emscripten_bind_b2DynamicTree__GetMaxBalance_p0,0,__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
,0,_emscripten_bind_b2Timer__Reset_p0,0,_emscripten_bind_b2QueryCallback____destroy___p0,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZN23b2EdgeAndPolygonContactD1Ev,0,__ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_
,0,_emscripten_bind_b2Vec3__Set_p3,0,_emscripten_bind_b2PolygonShape__GetVertex_p1,0,__ZNK12b2MouseJoint16GetReactionForceEf,0,__ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef,0,_emscripten_bind_b2ContactEdge__get_other_p0
,0,_emscripten_bind_b2Body__SetGravityScale_p1,0,_emscripten_bind_b2Fixture__GetType_p0,0,__ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData,0,__ZN12b2WheelJointD0Ev,0,_emscripten_bind_b2WeldJointDef__set_collideConnected_p1
,0,__ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0,0,_emscripten_bind_b2PolygonShape__get_m_centroid_p0,0,_emscripten_bind_b2PrismaticJoint__IsMotorEnabled_p0,0,_emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0
,0,_emscripten_bind_b2Draw__SetFlags_p1,0,_emscripten_bind_b2WeldJoint__GetUserData_p0,0,_emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0,0,__ZN7b2ShapeD1Ev,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib
,0,_emscripten_bind_b2RevoluteJoint__EnableLimit_p1,0,_emscripten_bind_b2FrictionJointDef__set_collideConnected_p1,0,_emscripten_bind_b2World__SetAllowSleeping_p1,0,__ZN12b2BroadPhaseC2Ev,0,_emscripten_bind_b2BodyDef__set_gravityScale_p1
,0,_emscripten_bind_b2Contact__IsTouching_p0,0,_emscripten_bind_b2Transform__set_q_p1,0,__ZNK11b2GearJoint17GetReactionTorqueEf,0,_emscripten_bind_b2WeldJoint__SetDampingRatio_p1,0,_emscripten_bind_b2BodyDef__get_fixedRotation_p0
,0,_emscripten_bind_b2FrictionJoint__GetAnchorB_p0,0,_emscripten_bind_b2MouseJoint__GetReactionTorque_p1,0,__ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,0,_emscripten_bind_b2WeldJointDef__get_bodyA_p1,0,_emscripten_bind_b2DistanceJoint__GetLength_p0
,0,_emscripten_bind_b2Draw__b2Draw_p0,0,_emscripten_bind_b2ChainShape____destroy___p0,0,_emscripten_bind_b2ChainShape__get_m_radius_p0,0,_emscripten_bind_b2RopeJoint__IsActive_p0,0,_emscripten_bind_b2EdgeShape__set_m_radius_p1
,0,_emscripten_bind_b2DistanceJointDef__get_length_p0,0,_emscripten_bind_b2DistanceJoint__SetUserData_p1,0,_emscripten_bind_b2ContactManager__set_m_contactListener_p1,0,_emscripten_bind_b2PolygonShape__GetType_p0,0,_emscripten_bind_b2PrismaticJoint__GetLocalAxisA_p0
,0,__ZNK15b2FrictionJoint10GetAnchorBEv,0,_emscripten_bind_b2MouseJointDef__get_maxForce_p0,0,_emscripten_bind_b2WheelJoint____destroy___p0,0,__ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0
,0,_emscripten_bind_b2DynamicTree__GetHeight_p0,0,_emscripten_bind_b2PulleyJoint__GetBodyA_p0,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,_emscripten_bind_b2Body__GetMassData_p1,0,_emscripten_bind_b2World__GetGravity_p0
,0,_emscripten_bind_b2WheelJointDef__set_bodyA_p1,0,_emscripten_bind_b2AABB__b2AABB_p0,0,__ZNK16b2PrismaticJoint10GetAnchorBEv,0,_emscripten_bind_b2DistanceProxy____destroy___p0,0,_emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1
,0,_emscripten_bind_b2World__GetProfile_p0,0,_emscripten_bind_b2PulleyJointDef__get_bodyA_p1,0,__ZNK11b2WeldJoint10GetAnchorAEv,0,_emscripten_bind_b2PolygonShape__Clone_p1,0,_emscripten_bind_b2PrismaticJoint__GetUserData_p0
,0,_emscripten_bind_b2PrismaticJoint__IsLimitEnabled_p0,0,_emscripten_bind_b2PulleyJoint__GetAnchorA_p0,0,_emscripten_bind_b2Fixture__Refilter_p0,0,__ZN24b2ChainAndPolygonContactD0Ev,0,__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
,0,_emscripten_bind_b2Vec3__SetZero_p0,0,_emscripten_bind_b2ContactListener__EndContact_p1,0,_emscripten_bind_b2Vec2__Normalize_p0,0,_emscripten_bind_b2Shape__ComputeMass_p2,0,_emscripten_bind_b2FrictionJoint__GetMaxForce_p0
,0,__ZN15b2DistanceJointC2EPK18b2DistanceJointDef,0,_emscripten_bind_b2BodyDef__get_type_p0,0,_emscripten_bind_b2WheelJoint__GetMotorTorque_p1,0,_emscripten_bind_b2AABB__GetCenter_p0,0,_emscripten_bind_b2Contact__ResetFriction_p0
,0,_emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1,0,__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,__ZN11b2GearJoint4DumpEv,0,_emscripten_bind_b2DistanceJoint__GetCollideConnected_p0,0,_emscripten_bind_b2Rot__Set_p1
,0,_emscripten_bind_b2ChainShape__RayCast_p4,0,__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,0,_emscripten_bind_b2RevoluteJoint__GetReactionForce_p1,0,_emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0,0,_emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0
,0,__ZN7b2JointD1Ev,0,__ZNK12b2ChainShape13GetChildCountEv,0,__ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener,0,_emscripten_bind_b2MouseJoint__GetMaxForce_p0,0,_emscripten_bind_b2RopeJoint__Dump_p0
,0,_emscripten_bind_b2WheelJointDef__set_enableMotor_p1,0,_emscripten_bind_b2ContactManager__get_m_contactList_p0,0,_emscripten_bind_b2PolygonShape__ComputeAABB_p3,0,_emscripten_bind_b2RopeJointDef__set_bodyB_p1,0,_emscripten_bind_b2BodyDef__set_fixedRotation_p1
,0,_emscripten_bind_b2WheelJoint__GetAnchorA_p0,0,__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold,0,__ZNK11b2WeldJoint17GetReactionTorqueEf,0,_emscripten_bind_b2CircleShape__b2CircleShape_p0,0,_emscripten_bind_b2EdgeShape__GetChildCount_p0
,0,_emscripten_bind_b2BodyDef__set_active_p1,0,_emscripten_bind_b2FrictionJointDef__get_bodyA_p1,0,_emscripten_bind_b2PulleyJoint__GetReactionTorque_p1,0,_emscripten_bind_b2DistanceJoint__b2DistanceJoint_p1,0,_emscripten_bind_b2Vec2____destroy___p0
,0,_emscripten_bind_b2ChainShape__get_m_vertices_p0,0,_emscripten_bind_b2BodyDef__b2BodyDef_p0,0,_emscripten_bind_b2RevoluteJoint__Dump_p0,0,_emscripten_bind_b2BroadPhase__b2BroadPhase_p0,0,_emscripten_bind_b2World__SetDebugDraw_p1
,0,_emscripten_bind_b2MouseJoint____destroy___p0,0,_emscripten_bind_b2RevoluteJoint__IsMotorEnabled_p0,0,_emscripten_bind_b2MouseJointDef__set_frequencyHz_p1,0,_emscripten_bind_b2DestructionListener__b2DestructionListener_p0,0,_emscripten_bind_b2WheelJointDef__get_frequencyHz_p0
,0,_emscripten_bind_b2Body__GetContactList_p0,0,_emscripten_bind_b2Joint__GetCollideConnected_p0,0,__ZN7b2ShapeD0Ev,0,__ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2Body__SetBullet_p1
,0,_emscripten_bind_b2Body__GetAngle_p0,0,_emscripten_bind_b2PrismaticJointDef__set_bodyA_p1,0,_emscripten_bind_b2MouseJoint__GetTarget_p0,0,_emscripten_bind_b2Manifold__set_pointCount_p1,0,__ZNSt9bad_allocD2Ev
,0,_emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0,0,_emscripten_bind_b2Contact__GetNext_p0,0,_emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1,0,_emscripten_bind_b2Manifold__set_localNormal_p1,0,__ZNK11b2RopeJoint16GetReactionForceEf
,0,_emscripten_bind_b2World__DrawDebugData_p0,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,_emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1,0,__ZNK14b2PolygonShape13GetChildCountEv,0,_emscripten_bind_b2WheelJointDef__get_localAnchorA_p0
,0,_emscripten_bind_b2RevoluteJoint____destroy___p0,0,_emscripten_bind_b2PulleyJointDef__get_lengthB_p0,0,_emscripten_bind_b2WeldJoint__GetReferenceAngle_p0,0,_emscripten_bind_b2FixtureDef__get_friction_p0,0,_emscripten_bind_b2PrismaticJointDef__Initialize_p4
,0,_emscripten_bind_b2QueryCallback__b2QueryCallback_p0,0,_emscripten_bind_b2FixtureDef__set_filter_p1,0,_emscripten_bind_b2ChainShape__CreateChain_p2,0,_emscripten_bind_b2Body__GetLocalVector_p1,0,_emscripten_bind_b2Fixture__SetUserData_p1
,0,__ZN22b2EdgeAndCircleContactD0Ev,0,_emscripten_bind_b2RevoluteJoint__GetLocalAnchorB_p0,0,__ZN15b2QueryCallbackD0Ev,0,_emscripten_bind_b2ChainShape__ComputeAABB_p3,0,_emscripten_bind_b2RopeJoint__GetReactionForce_p1
,0,_emscripten_bind_b2CircleShape__GetSupport_p1,0,_emscripten_bind_b2World__GetContinuousPhysics_p0,0,_emscripten_bind_b2ContactManager__set_m_contactFilter_p1,0,__ZN11b2RopeJoint4DumpEv,0,_emscripten_bind_b2Draw____destroy___p0
,0,_emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2MouseJoint__GetCollideConnected_p0,0,_emscripten_bind_b2MouseJoint__GetReactionForce_p1,0,_emscripten_bind_b2JointDef__set_type_p1,0,_emscripten_bind_b2Color__Set_p3
,0,_emscripten_bind_b2WeldJoint__GetType_p0,0,_emscripten_bind_b2Joint__GetBodyB_p0,0,_emscripten_bind_b2ContactManager__set_m_broadPhase_p1,0,__ZNK15b2RevoluteJoint10GetAnchorBEv,0,_emscripten_bind_b2BodyDef__set_position_p1
,0,_emscripten_bind_b2Vec2__Length_p0,0,_emscripten_bind_b2MouseJoint__GetUserData_p0,0,__ZNK11b2RopeJoint17GetReactionTorqueEf,0,_emscripten_bind_b2JointDef__get_collideConnected_p0,0,_emscripten_bind_b2BroadPhase__GetTreeQuality_p0
,0,_emscripten_bind_b2WheelJointDef__get_dampingRatio_p0,0,_emscripten_bind_b2RevoluteJointDef__get_bodyA_p1,0,__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator,0,_emscripten_bind_b2FrictionJoint__GetReactionTorque_p1,0,__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData
,0,_emscripten_bind_b2PulleyJointDef__get_bodyB_p1,0,__ZNK15b2RevoluteJoint17GetReactionTorqueEf,0,_emscripten_bind_b2EdgeShape__ComputeAABB_p3,0,_emscripten_bind_b2WheelJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2FrictionJointDef__get_bodyB_p1
,0,_emscripten_bind_b2PrismaticJoint__SetMotorSpeed_p1,0,_emscripten_bind_b2PolygonShape__RayCast_p4,0,__ZN16b2StackAllocatorD2Ev,0,_emscripten_bind_b2BodyDef__set_type_p1,0,_emscripten_bind_b2GearJoint__GetCollideConnected_p0
,0,__ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2CircleShape__ComputeMass_p2,0,_emscripten_bind_b2World__GetAutoClearForces_p0,0,__ZN14b2PolygonShapeD0Ev,0,__ZN7b2WorldD2Ev
,0,_emscripten_bind_b2Contact__IsEnabled_p0,0,_emscripten_bind_b2PrismaticJointDef__set_bodyB_p1,0,__ZNK11b2GearJoint10GetAnchorBEv,0,_emscripten_bind_b2FixtureDef__set_userData_p1,0,_emscripten_bind_b2WeldJoint__GetCollideConnected_p0
,0,_emscripten_bind_b2Fixture__SetSensor_p1,0,__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,_emscripten_bind_b2WeldJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2ContactManager__Destroy_p1,0,_emscripten_bind_b2PrismaticJoint__GetLocalAnchorA_p0
,0,_emscripten_bind_b2WheelJointDef__set_motorSpeed_p1,0,_emscripten_bind_b2Contact__GetRestitution_p0,0,_emscripten_bind_b2Contact__Evaluate_p3,0,__ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_,0,_emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1
,0,__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,0,_emscripten_bind_b2AABB__Combine_p1,0,_emscripten_bind_b2WeldJoint__GetReactionForce_p1,0,_emscripten_bind_b2AABB__Combine_p2,0,_emscripten_bind_b2PulleyJointDef__get_lengthA_p0
,0,__ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData,0,__ZN15b2CircleContactD1Ev,0,_emscripten_bind_b2Shape__get_m_radius_p0,0,_emscripten_bind_b2ChainShape__set_m_count_p1,0,_emscripten_bind_b2RopeJointDef__set_bodyA_p1
,0,_emscripten_bind_b2DynamicTree__GetFatAABB_p1,0,_emscripten_bind_b2DistanceJoint__GetFrequency_p0,0,_emscripten_bind_b2PrismaticJoint__SetLimits_p2,0,__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,_emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0
,0,_emscripten_bind_b2Color__get_g_p0,0,_emscripten_bind_b2Fixture__GetBody_p0,0,_emscripten_bind_b2FrictionJointDef__get_collideConnected_p1,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,_emscripten_bind_b2GearJointDef__get_bodyB_p1
,0,_emscripten_bind_b2AABB__set_upperBound_p1,0,__ZN23b2ChainAndCircleContactD1Ev,0,_emscripten_bind_b2Contact__GetFixtureA_p0,0,_emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2PulleyJoint__b2PulleyJoint_p1
,0,_emscripten_bind_b2RevoluteJoint__GetLowerLimit_p0,0,_emscripten_bind_b2FrictionJointDef__get_maxForce_p0,0,__ZN11b2RopeJointD0Ev,0,_emscripten_bind_b2Transform__SetIdentity_p0,0,_emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1
,0,_emscripten_bind_b2Body__SetTransform_p2,0,__ZN7b2WorldC2ERK6b2Vec2,0,_emscripten_bind_b2DistanceJoint__GetReactionTorque_p1,0,__ZN17b2ContactListener10EndContactEP9b2Contact,0,_emscripten_bind_b2MouseJointDef__set_maxForce_p1
,0,_emscripten_bind_b2RevoluteJoint__GetMotorTorque_p1,0,_emscripten_bind_b2EdgeShape__TestPoint_p2,0,__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,0,_emscripten_bind_b2Vec2__set_y_p1,0,_emscripten_bind_b2CircleShape__Clone_p1
,0,_emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1,0,_emscripten_bind_b2Rot__GetAngle_p0,0,_emscripten_bind_b2Color____destroy___p0,0,_emscripten_bind_b2WeldJoint__GetBodyA_p0,0,_emscripten_bind_b2Fixture__GetRestitution_p0
,0,_emscripten_bind_b2FrictionJoint____destroy___p0,0,_emscripten_bind_b2DistanceJointDef__set_length_p1,0,_emscripten_bind_b2World__SetGravity_p1,0,_emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0,0,_emscripten_bind_b2Color__b2Color_p3
,0,_emscripten_bind_b2Body__ApplyForceToCenter_p1,0,_emscripten_bind_b2PrismaticJoint__SetUserData_p1,0,_emscripten_bind_b2Color__get_r_p0,0,_emscripten_bind_b2RevoluteJoint__b2RevoluteJoint_p1,0,_emscripten_bind_b2RevoluteJoint__GetCollideConnected_p0
,0,_emscripten_bind_b2PrismaticJoint__IsActive_p0,0,_emscripten_bind_b2Body__SetFixedRotation_p1,0,_emscripten_bind_b2RopeJointDef____destroy___p0,0,_emscripten_bind_b2PrismaticJointDef__get_bodyB_p1,0,_emscripten_bind_b2Shape__set_m_radius_p1
,0,_emscripten_bind_b2WheelJoint__GetBodyB_p0,0,_emscripten_bind_b2JointDef__get_bodyA_p0,0,_emscripten_bind_b2World__GetContactCount_p0,0,_emscripten_bind_b2Fixture__b2Fixture_p0,0,_emscripten_bind_b2StackAllocator__Allocate_p1
,0,__ZNK15b2FrictionJoint17GetReactionTorqueEf,0,__ZNKSt9bad_alloc4whatEv,0,_emscripten_bind_b2BodyDef__set_awake_p1,0,_emscripten_bind_b2BroadPhase__CreateProxy_p2,0,_emscripten_bind_b2WheelJoint__GetLocalAnchorA_p0
,0,_emscripten_bind_b2FrictionJointDef__set_bodyB_p1,0,_emscripten_bind_b2WheelJoint__SetSpringFrequencyHz_p1,0,_emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0,0,_emscripten_bind_b2Timer__b2Timer_p0,0,_emscripten_bind_b2Filter____destroy___p0
,0,_emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1,0,_emscripten_bind_b2RevoluteJoint__GetType_p0,0,__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,_emscripten_bind_b2PulleyJoint__Dump_p0,0,_emscripten_bind_b2CircleShape__ComputeAABB_p3
,0,_emscripten_bind_b2RopeJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2RevoluteJoint__GetBodyA_p0,0,_emscripten_bind_b2CircleShape__get_m_radius_p0,0,_emscripten_bind_b2Manifold__get_localNormal_p0,0,_emscripten_bind_b2BodyDef__set_angularVelocity_p1
,0,_emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0,0,_emscripten_bind_b2BroadPhase__GetProxyCount_p0,0,_emscripten_bind_b2WheelJoint__GetReactionTorque_p1,0,__ZN15b2ContactFilterD0Ev,0,_emscripten_bind_b2RevoluteJoint__SetMotorSpeed_p1
,0,_emscripten_bind_b2WeldJoint__GetReactionTorque_p1,0,_emscripten_bind_b2GearJoint__SetUserData_p1,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN12b2ChainShapeD2Ev,0,_emscripten_bind_b2Manifold__get_type_p0
,0,_emscripten_bind_b2MouseJointDef__set_target_p1,0,__Z14b2PairLessThanRK6b2PairS1_,0,_emscripten_bind_b2WeldJoint__GetBodyB_p0,0,_emscripten_bind_b2PolygonShape__TestPoint_p2,0,_emscripten_bind_b2WheelJointDef__set_localAnchorB_p1
,0,__ZN15b2CircleContactD0Ev,0,_emscripten_bind_b2FrictionJointDef__set_bodyA_p1,0,_emscripten_bind_b2Color__b2Color_p0,0,_emscripten_bind_b2BroadPhase__TestOverlap_p2,0,__ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData
,0,_emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1,0,__ZN6b2DrawD0Ev,0,_emscripten_bind_b2RevoluteJoint__GetReactionTorque_p1,0,_emscripten_bind_b2Joint__GetAnchorB_p0,0,_emscripten_bind_b2CircleShape__set_m_radius_p1
,0,_emscripten_bind_b2DistanceProxy__set_m_count_p1,0,_emscripten_bind_b2World__GetContactManager_p0,0,_emscripten_bind_b2RevoluteJoint__SetUserData_p1,0,_emscripten_bind_b2Contact__GetFixtureB_p0,0,_emscripten_bind_b2Rot__GetYAxis_p0
,0,_emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1,0,_emscripten_bind_b2Shape__Clone_p1,0,__ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2AABB__set_lowerBound_p1,0,__ZN23b2ChainAndCircleContactD0Ev
,0,_emscripten_bind_b2RopeJoint__GetCollideConnected_p0,0,_emscripten_bind_b2BodyDef__set_linearDamping_p1,0,_emscripten_bind_b2BroadPhase__GetTreeBalance_p0,0,_emscripten_bind_b2Vec2__LengthSquared_p0,0,_emscripten_bind_b2AABB__GetExtents_p0
,0,_emscripten_bind_b2CircleShape____destroy___p0,0,_emscripten_bind_b2FixtureDef__get_userData_p0,0,__ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i,0,_emscripten_bind_b2FixtureDef__get_density_p0,0,__ZN8b2IslandD2Ev
,0,__ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2Draw__ClearFlags_p1,0,_emscripten_bind_b2WeldJointDef__get_localAnchorA_p0,0,_emscripten_bind_b2BlockAllocator__Free_p2,0,_emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1
,0,_emscripten_bind_b2DynamicTree__GetAreaRatio_p0,0,_emscripten_bind_b2Rot__get_c_p0,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNK16b2PrismaticJoint17GetReactionTorqueEf,0,_emscripten_bind_b2World__GetTreeHeight_p0
,0,__ZNSt9bad_allocD0Ev,0,_emscripten_bind_b2AABB__IsValid_p0,0,_emscripten_bind_b2PolygonShape__Set_p2,0,_emscripten_bind_b2RopeJointDef__get_bodyB_p1,0,_emscripten_bind_b2World__CreateJoint_p1
,0,_emscripten_bind_b2Color__set_b_p1,0,_emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0,0,_emscripten_bind_b2Body__GetLocalCenter_p0,0,_emscripten_bind_b2WheelJoint__GetLocalAxisA_p0,0,___cxa_pure_virtual
,0,_emscripten_bind_b2WeldJointDef__Initialize_p3,0,_emscripten_bind_b2Contact__GetFriction_p0,0,_emscripten_bind_b2Body__SetAngularVelocity_p1,0,__ZNK12b2MouseJoint10GetAnchorBEv,0,__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2
,0,_emscripten_bind_b2CircleShape__TestPoint_p2,0,_emscripten_bind_b2Body__SetAwake_p1,0,_emscripten_bind_b2Filter__set_categoryBits_p1,0,_emscripten_bind_b2ChainShape__ComputeMass_p2,0,_emscripten_bind_b2MouseJointDef__get_collideConnected_p1
,0,_emscripten_bind_b2PrismaticJointDef__get_collideConnected_p1,0,_emscripten_bind_b2World__CreateBody_p1,0,__ZN13b2PulleyJointD0Ev,0,__ZN12b2ChainShapeD0Ev,0,__ZNK16b2PrismaticJoint16GetReactionForceEf
,0,_emscripten_bind_b2JointDef__get_bodyB_p0,0,_emscripten_bind_b2ChainShape__get_m_count_p0,0,_emscripten_bind_b2PrismaticJoint__GetAnchorA_p0,0,_emscripten_bind_b2PulleyJoint__GetRatio_p0,0,_emscripten_bind_b2WheelJointDef__set_localAxisA_p1
,0,_emscripten_bind_b2CircleShape__GetVertex_p1,0,_emscripten_bind_b2WeldJoint__GetNext_p0,0,__ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2Timer__GetMilliseconds_p0,0,_emscripten_bind_b2World__SetDestructionListener_p1
,0,_emscripten_bind_b2WheelJointDef__get_localAxisA_p0,0,_emscripten_bind_b2Joint__GetAnchorA_p0,0,__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator,0,_emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0,0,_emscripten_bind_b2BodyDef____destroy___p0
,0,_emscripten_bind_b2Transform____destroy___p0,0,_emscripten_bind_b2PolygonShape__ComputeMass_p2,0,_emscripten_bind_b2RopeJointDef__get_bodyA_p1,0,_emscripten_bind_b2WheelJoint__b2WheelJoint_p1,0,_emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1
,0,_emscripten_bind_b2MouseJointDef__set_dampingRatio_p1,0,_emscripten_bind_b2DistanceJoint__GetType_p0,0,_emscripten_bind_b2MouseJointDef__set_bodyB_p1,0,_emscripten_bind_b2Vec3__set_z_p1,0,_emscripten_bind_b2World____destroy___p0
,0,_emscripten_bind_b2PolygonShape__b2PolygonShape_p0,0,_emscripten_bind_b2WeldJointDef__set_frequencyHz_p1,0,_emscripten_bind_b2Joint__GetUserData_p0,0,_emscripten_bind_b2Body__ResetMassData_p0,0,_emscripten_bind_b2RevoluteJoint__IsActive_p0
,0,_emscripten_bind_b2FrictionJoint__SetUserData_p1,0,_emscripten_bind_b2PulleyJoint__GetReactionForce_p1,0,__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,_emscripten_bind_b2World__SetContinuousPhysics_p1,0,_emscripten_bind_b2ContactManager__FindNewContacts_p0
,0,__ZNK13b2PulleyJoint17GetReactionTorqueEf,0,__ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2CircleShape__GetVertexCount_p0,0,__ZNK15b2FrictionJoint16GetReactionForceEf,0,_emscripten_bind_b2WeldJointDef__get_frequencyHz_p0
,0,_emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2Body__GetPosition_p0,0,_emscripten_bind_b2ContactListener__BeginContact_p1,0,_emscripten_bind_b2RevoluteJointDef__set_collideConnected_p1,0,_emscripten_bind_b2DistanceJoint__GetAnchorA_p0
,0,_emscripten_bind_b2Fixture__GetUserData_p0,0,_emscripten_bind_b2ChainShape__Clone_p1,0,__ZNK12b2WheelJoint17GetReactionTorqueEf,0,_emscripten_bind_b2GearJoint__GetReactionTorque_p1,0,__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
,0,_emscripten_bind_b2RopeJoint__GetMaxLength_p0,0,__ZN7b2Joint4DumpEv,0,_emscripten_bind_b2ContactEdge__get_contact_p0,0,_emscripten_bind_b2GearJointDef__set_bodyB_p1,0,_emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0
,0,_emscripten_bind_b2RopeJoint____destroy___p0,0,_emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0,0,_emscripten_bind_b2DistanceJoint__SetFrequency_p1,0,_emscripten_bind_b2PulleyJointDef__set_lengthA_p1,0,__ZNK15b2FrictionJoint10GetAnchorAEv
,0,__ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2ContactEdge__get_next_p0,0,_emscripten_bind_b2RevoluteJoint__GetBodyB_p0,0,__ZN6b2Draw16DrawSolidPolygonEPK6b2Vec2iRK7b2Color,0,_emscripten_bind_b2RevoluteJoint__GetUserData_p0
,0,_emscripten_bind_b2Body__GetType_p0,0,_emscripten_bind_b2World__Step_p3,0,_emscripten_bind_b2Vec2__set_x_p1,0,_emscripten_bind_b2Fixture__SetFriction_p1,0,_emscripten_bind_b2RopeJoint__GetNext_p0
,0,__ZNSt9bad_allocC2Ev,0,_emscripten_bind_b2GearJoint__GetAnchorA_p0,0,__ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2MouseJointDef____destroy___p0,0,_emscripten_bind_b2Body__GetTransform_p0
,0,_emscripten_bind_b2PrismaticJoint__b2PrismaticJoint_p1,0,_emscripten_bind_b2RopeJointDef__get_maxLength_p0,0,_emscripten_bind_b2DistanceJoint__GetAnchorB_p0,0,_emscripten_bind_b2ChainShape__set_m_vertices_p1,0,__ZNK15b2RevoluteJoint10GetAnchorAEv
,0,_emscripten_bind_b2FrictionJoint__GetMaxTorque_p0,0,_emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0,0,_emscripten_bind_b2ContactManager__AddPair_p2,0,_emscripten_bind_b2Color__set_g_p1,0,_emscripten_bind_b2WheelJoint__IsMotorEnabled_p0
,0,__ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2WheelJointDef__get_collideConnected_p1,0,__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi,0,_emscripten_bind_b2FrictionJoint__Dump_p0,0,_emscripten_bind_b2ChainShape__SetPrevVertex_p1
,0,__ZN13b2DynamicTreeD2Ev,0,_emscripten_bind_b2AABB__GetPerimeter_p0,0,__ZNK15b2DistanceJoint10GetAnchorBEv,0,_emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1,0,_emscripten_bind_b2Fixture__SetDensity_p1
,0,_emscripten_bind_b2MouseJointDef__set_bodyA_p1,0,__ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2World__QueryAABB_p2,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,_emscripten_bind_b2RevoluteJoint__GetUpperLimit_p0
,0,_emscripten_bind_b2PrismaticJoint__GetJointSpeed_p0,0,_emscripten_bind_b2PulleyJointDef__Initialize_p7,0,_emscripten_bind_b2World__GetTreeQuality_p0,0,_emscripten_bind_b2DistanceJoint__GetBodyA_p0,0,_emscripten_bind_b2BroadPhase__DestroyProxy_p1
,0,_emscripten_bind_b2PulleyJoint____destroy___p0,0,__ZN6b2Draw11DrawSegmentERK6b2Vec2S2_RK7b2Color,0,_emscripten_bind_b2DistanceJoint__GetLocalAnchorB_p0,0,__ZN11b2RopeJointD1Ev,0,_emscripten_bind_b2ChainShape__GetChildEdge_p2
,0,__ZNK15b2DistanceJoint10GetAnchorAEv,0,_emscripten_bind_b2EdgeShape__b2EdgeShape_p0,0,_emscripten_bind_b2ContactEdge__set_contact_p1,0,__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_,0,_emscripten_bind_b2GearJointDef__get_collideConnected_p1
,0,_emscripten_bind_b2ChainShape__GetType_p0,0,_emscripten_bind_b2GearJoint__GetBodyA_p0,0,_emscripten_bind_b2WheelJoint__GetCollideConnected_p0,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,_emscripten_bind_b2Body__ApplyAngularImpulse_p1
,0,_emscripten_bind_b2RevoluteJoint__SetLimits_p2,0,_emscripten_bind_b2ChainShape__TestPoint_p2,0,_emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0,0,_emscripten_bind_b2CircleShape__get_m_p_p0,0,__ZN16b2BlockAllocatorD2Ev
,0,_emscripten_bind_b2MouseJoint__GetAnchorB_p0,0,__ZN12b2MouseJoint4DumpEv,0,_emscripten_bind_b2PrismaticJoint__GetUpperLimit_p0,0,_emscripten_bind_b2Body__CreateFixture_p1,0,_emscripten_bind_b2Body__CreateFixture_p2
,0,__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,0,_emscripten_bind_b2BodyDef__get_awake_p0,0,__ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2WeldJoint__GetDampingRatio_p0,0,_emscripten_bind_b2FrictionJoint__GetReactionForce_p1
,0,_emscripten_bind_b2PolygonShape__set_m_vertexCount_p1,0,_emscripten_bind_b2World__SetContactListener_p1,0,_emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0,0,_emscripten_bind_b2FixtureDef__set_shape_p1,0,_emscripten_bind_b2DistanceJoint__SetDampingRatio_p1
,0,__ZNK12b2ChainShape5CloneEP16b2BlockAllocator,0,_emscripten_bind_b2Joint__Dump_p0,0,_emscripten_bind_b2Body__GetWorldCenter_p0,0,__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2,0,_emscripten_bind_b2Shape__TestPoint_p2
,0,__ZN24b2ChainAndPolygonContactD1Ev,0,_emscripten_bind_b2RopeJointDef__set_maxLength_p1,0,_emscripten_bind_b2RopeJoint__SetUserData_p1,0,__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,_emscripten_bind_b2Transform__get_p_p0
,0,_emscripten_bind_b2PrismaticJoint__GetAnchorB_p0,0,_emscripten_bind_b2GearJoint__GetJoint2_p0,0,__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf,0,_emscripten_bind_b2Fixture__GetMassData_p1,0,__ZN22b2EdgeAndCircleContactD1Ev
,0,_emscripten_bind_b2Body__IsBullet_p0,0,__ZN17b2ContactListener12BeginContactEP9b2Contact,0,_emscripten_bind_b2WeldJointDef____destroy___p0,0,_emscripten_bind_b2PrismaticJoint__GetMotorSpeed_p0,0,_emscripten_bind_b2GearJointDef__get_bodyA_p1
,0,_emscripten_bind_b2Draw__DrawCircle_p3,0,_emscripten_bind_b2FrictionJoint__GetLocalAnchorA_p0,0,_emscripten_bind_b2Body__GetWorldPoint_p1,0,_emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1,0,_emscripten_bind_b2FixtureDef__set_friction_p1
,0,_emscripten_bind_b2Fixture__GetDensity_p0,0,__ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData,0,_emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1,0,__ZN15b2FrictionJointD1Ev,0,_emscripten_bind_b2BodyDef__get_angularVelocity_p0
,0,__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,0,_emscripten_bind_b2GearJoint__GetNext_p0,0,_emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0,0,_emscripten_bind_b2Vec2__b2Vec2_p0,0,_emscripten_bind_b2Body__GetFixtureList_p0
,0,__ZN16b2PolygonContactD1Ev,0,_emscripten_bind_b2WheelJoint__GetJointTranslation_p0,0,_emscripten_bind_b2WeldJointDef__get_dampingRatio_p0,0,_emscripten_bind_b2RopeJoint__SetMaxLength_p1,0,_emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0
,0,_emscripten_bind_b2PulleyJoint__GetGroundAnchorB_p0,0,__ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i,0,_emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0,0,_emscripten_bind_b2GearJointDef__set_joint2_p1,0,_emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0
,0,__ZN6b2BodyD2Ev,0,_emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0,0,_emscripten_bind_b2MouseJoint__SetTarget_p1,0,_emscripten_bind_b2ContactEdge__set_prev_p1,0,_emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0
,0,_emscripten_bind_b2ChainShape__set_m_radius_p1,0,_emscripten_bind_b2Vec2__get_x_p0,0,_emscripten_bind_b2BodyDef__set_userData_p1,0,_emscripten_bind_b2DistanceProxy__GetSupport_p1,0,__ZN11b2WeldJoint4DumpEv
,0,_emscripten_bind_b2WheelJoint__GetLocalAnchorB_p0,0,_emscripten_bind_b2GearJointDef__get_joint2_p0,0,_emscripten_bind_b2PrismaticJointDef__set_collideConnected_p1,0,_emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1
,0,__ZN21b2DestructionListener10SayGoodbyeEP7b2Joint,0,_emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1,0,_emscripten_bind_b2ChainShape__GetChildCount_p0,0,_emscripten_bind_b2Body__IsAwake_p0,0,_emscripten_bind_b2MouseJoint__GetAnchorA_p0
,0,_emscripten_bind_b2World__RayCast_p3,0,__ZN15b2ContactSolverD2Ev,0,__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2PolygonShape__SetAsBox_p4,0,_emscripten_bind_b2PolygonShape__SetAsBox_p2
,0,__ZN15b2DistanceJoint4DumpEv,0,_emscripten_bind_b2GearJointDef__set_joint1_p1,0,_emscripten_bind_b2Draw__DrawSolidCircle_p4,0,_emscripten_bind_b2World__GetSubStepping_p0,0,_emscripten_bind_b2FrictionJoint__GetLocalAnchorB_p0
,0,_emscripten_bind_b2Body__SetLinearDamping_p1,0,_emscripten_bind_b2Body__GetWorldVector_p1,0,_emscripten_bind_b2Filter__get_groupIndex_p0,0,_emscripten_bind_b2FixtureDef__get_isSensor_p0,0,__ZN17b2RayCastCallbackD1Ev
,0,_emscripten_bind_b2PrismaticJoint__Dump_p0,0,__ZN6b2Draw10DrawCircleERK6b2Vec2fRK7b2Color,0,__ZN12b2BroadPhaseD2Ev,0,_emscripten_bind_b2DistanceProxy__Set_p2,0,_emscripten_bind_b2EdgeShape__Set_p2
,0,__ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef,0,__ZN11b2GearJointD1Ev,0,_emscripten_bind_b2BodyDef__get_userData_p0,0,_emscripten_bind_b2Body__ApplyForce_p2,0,_emscripten_bind_b2CircleShape__set_m_p_p1
,0,__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,0,_emscripten_bind_b2WheelJoint__GetMaxMotorTorque_p0,0,_emscripten_bind_b2World__SetContactFilter_p1,0,__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,0,_emscripten_bind_b2WheelJointDef__set_dampingRatio_p1
,0,_emscripten_bind_b2RevoluteJoint__EnableMotor_p1,0,_emscripten_bind_b2DistanceJointDef__set_collideConnected_p1,0,_emscripten_bind_b2WeldJoint__Dump_p0,0,_emscripten_bind_b2DistanceProxy__get_m_count_p0,0,_emscripten_bind_b2WeldJointDef__set_dampingRatio_p1
,0,_emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1,0,_emscripten_bind_b2DistanceJoint__IsActive_p0,0,__ZN15b2QueryCallback13ReportFixtureEP9b2Fixture,0,_emscripten_bind_b2FrictionJoint__GetCollideConnected_p0,0,_emscripten_bind_b2Manifold__b2Manifold_p0
,0,_emscripten_bind_b2WheelJoint__Dump_p0,0,_emscripten_bind_b2World__GetTreeBalance_p0,0,_emscripten_bind_b2WheelJoint__SetMotorSpeed_p1,0,_emscripten_bind_b2ContactListener__b2ContactListener_p0,0,_emscripten_bind_b2Rot____destroy___p0
,0,_emscripten_bind_b2PrismaticJoint__GetMaxMotorForce_p0,0,_emscripten_bind_b2PulleyJointDef__set_bodyB_p1,0,__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2,0,_emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0,0,_emscripten_bind_b2RevoluteJoint__GetMotorSpeed_p0
,0,_emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0,0,_emscripten_bind_b2Body__GetNext_p0,0,_emscripten_bind_b2BroadPhase__GetTreeHeight_p0,0,_emscripten_bind_b2Draw__DrawSegment_p3,0,__ZN12b2WheelJoint4DumpEv
,0,_emscripten_bind_b2Body__IsActive_p0,0,_emscripten_bind_b2Vec2__Set_p2,0,_emscripten_bind_b2PulleyJoint__GetUserData_p0,0,_emscripten_bind_b2ContactEdge__b2ContactEdge_p0,0,_emscripten_bind_b2Vec3__b2Vec3_p3
,0,_emscripten_bind_b2Vec3__b2Vec3_p0,0,_emscripten_bind_b2PulleyJoint__GetGroundAnchorA_p0,0,__ZNK11b2EdgeShape13GetChildCountEv,0,_emscripten_bind_b2JointDef__b2JointDef_p0,0,_emscripten_bind_b2BroadPhase____destroy___p0
,0,__ZN7b2TimerC2Ev,0,__ZNK13b2CircleShape13GetChildCountEv,0,_emscripten_bind_b2PulleyJoint__GetBodyB_p0,0,_emscripten_bind_b2PulleyJointDef____destroy___p0,0,_emscripten_bind_b2FixtureDef____destroy___p0
,0,_emscripten_bind_b2EdgeShape__Clone_p1,0,_emscripten_bind_b2Body__GetUserData_p0,0,_emscripten_bind_b2Body__SetUserData_p1,0,__ZNK11b2WeldJoint10GetAnchorBEv,0,__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
,0,_emscripten_bind_b2PrismaticJointDef__get_bodyA_p1,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,_emscripten_bind_b2FrictionJoint__GetType_p0,0,_emscripten_bind_b2DistanceJointDef____destroy___p0,0,_emscripten_bind_b2FrictionJointDef__Initialize_p3
,0,__ZNK11b2WeldJoint16GetReactionForceEf,0,_emscripten_bind_b2GearJoint__b2GearJoint_p1,0,_emscripten_bind_b2Body__SetSleepingAllowed_p1,0,_emscripten_bind_b2Body__SetLinearVelocity_p1,0,_emscripten_bind_b2Body__ApplyLinearImpulse_p2
,0,__ZN16b2ContactManagerC2Ev,0,_emscripten_bind_b2MouseJointDef__get_bodyB_p1,0,_emscripten_bind_b2ContactManager__set_m_contactList_p1,0,__ZNK15b2DistanceJoint16GetReactionForceEf,0,__ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData
,0,_emscripten_bind_b2DistanceJointDef__get_collideConnected_p1,0,_emscripten_bind_b2WeldJointDef__set_bodyB_p1,0,_emscripten_bind_b2DistanceJoint__GetReactionForce_p1,0,_emscripten_bind_b2FrictionJointDef__set_maxTorque_p1,0,__ZN16b2StackAllocatorC2Ev
,0,__ZN15b2ContactSolverC2EP18b2ContactSolverDef,0,__ZN12b2MouseJointD1Ev,0,_emscripten_bind_b2JointDef__set_collideConnected_p1,0,__ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2,0,_emscripten_bind_b2QueryCallback__ReportFixture_p1
,0,_emscripten_bind_b2GearJoint__GetRatio_p0,0,_emscripten_bind_b2BlockAllocator__Allocate_p1,0,_emscripten_bind_b2GearJointDef__get_joint1_p0,0,_emscripten_bind_b2AABB__Contains_p1,0,_emscripten_bind_b2GearJointDef__set_ratio_p1
,0,_emscripten_bind_b2ContactEdge____destroy___p0,0,_emscripten_bind_b2RevoluteJointDef__Initialize_p3,0,__ZN6b2BodyC2EPK9b2BodyDefP7b2World,0,_emscripten_bind_b2Draw__DrawTransform_p1,0,__ZN16b2PolygonContactC2EP9b2FixtureS1_
,0,_emscripten_bind_b2Vec2__op_sub_p0,0,__ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData,0,_emscripten_bind_b2BodyDef__set_bullet_p1,0,__ZNK13b2PulleyJoint16GetReactionForceEf,0,__ZN10__cxxabiv117__class_type_infoD0Ev
,0,_emscripten_bind_b2PulleyJointDef__get_ratio_p0,0,_emscripten_bind_b2GearJoint__GetReactionForce_p1,0,__ZN15b2DistanceJointD1Ev,0,_emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1,0,_emscripten_bind_b2Shape__GetChildCount_p0
,0,_emscripten_bind_b2GearJoint__GetBodyB_p0,0,_emscripten_bind_b2BodyDef__set_angularDamping_p1,0,_emscripten_bind_b2StackAllocator____destroy___p0,0,_emscripten_bind_b2MouseJointDef__set_collideConnected_p1,0,_emscripten_bind_b2Shape__ComputeAABB_p3
,0,_emscripten_bind_b2Joint__GetReactionTorque_p1,0,_emscripten_bind_b2WheelJoint__GetType_p0,0,_emscripten_bind_b2Filter__get_categoryBits_p0,0,_emscripten_bind_b2World__GetJointList_p0,0,__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi
,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNK15b2DistanceJoint17GetReactionTorqueEf,0,_emscripten_bind_b2CircleShape__GetChildCount_p0,0,_emscripten_bind_b2Transform__set_p_p1,0,__ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData
,0,_emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1,0,_emscripten_bind_b2DistanceProxy__GetVertex_p1,0,_emscripten_bind_b2Color__get_b_p0,0,_emscripten_bind_b2World__SetWarmStarting_p1,0,_emscripten_bind_b2BodyDef__set_angle_p1
,0,_emscripten_bind_b2Vec3__op_sub_p0,0,_emscripten_bind_b2ContactManager__Collide_p0,0,__ZNK12b2WheelJoint10GetAnchorAEv,0,_emscripten_bind_b2GearJointDef__b2GearJointDef_p0,0,_emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0
,0,_emscripten_bind_b2ContactManager__get_m_contactListener_p0,0,_emscripten_bind_b2AABB__RayCast_p2,0,_emscripten_bind_b2Manifold__set_localPoint_p1,0,__ZN15b2RevoluteJointD0Ev,0,_emscripten_bind_b2WeldJoint__SetFrequency_p1
,0,_emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1,0,_emscripten_bind_b2World__b2World_p1,0,_emscripten_bind_b2EdgeShape__GetType_p0,0,_emscripten_bind_b2BodyDef__get_gravityScale_p0,0,_emscripten_bind_b2DistanceProxy__set_m_vertices_p1
,0,_emscripten_bind_b2RevoluteJoint__SetMaxMotorTorque_p1,0,__ZN11b2WeldJointC2EPK14b2WeldJointDef,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,_emscripten_bind_b2WeldJointDef__set_bodyA_p1,0,_emscripten_bind_b2MouseJointDef__get_bodyA_p1
,0,__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf,0,_emscripten_bind_b2WeldJointDef__set_referenceAngle_p1,0,_emscripten_bind_b2Vec3__op_add_p1,0,_emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0
,0,__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,0,_emscripten_bind_b2AABB__get_upperBound_p0,0,_emscripten_bind_b2GearJoint__SetRatio_p1,0,_emscripten_bind_b2BodyDef__get_angle_p0,0,__ZN21b2DestructionListenerD1Ev
,0,_emscripten_bind_b2PrismaticJoint__GetReferenceAngle_p0,0,__ZN12b2MouseJointD0Ev,0,__ZN13b2DynamicTreeC2Ev,0,_emscripten_bind_b2PulleyJoint__GetLengthB_p0,0,__ZN11b2GearJointC2EPK14b2GearJointDef,0];
// EMSCRIPTEN_START_FUNCS
function __Z5b2MinIiET_S0_S0_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|(0)) < (($4)|(0));
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  return $8;
}
function __Z5b2MaxIiET_S0_S0_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|(0)) > (($4)|(0));
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  return $8;
}
function __ZN12b2BroadPhase12UnBufferMoveEi($this, $proxyId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=(($3+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0)) < (($7)|(0));
      if ($8) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $10=$i;
      var $11=(($3+32)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+($10<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$2;
      var $16=(($14)|(0))==(($15)|(0));
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$i;
      var $19=(($3+32)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($18<<2))|0);
      HEAP32[(($21)>>2)]=-1;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $24=$i;
      var $25=((($24)+(1))|0);
      $i=$25;
      label = 2; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2DotRK6b2Vec2S1_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)*($8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)*($15);
  var $17=($9)+($16);
  return $17;
}
function __ZN6b2Vec27SetZeroEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAPF32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAPF32[(($4)>>2)]=0;
  return;
}
function __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $proxyId;
  $1=$this;
  $2=$aabb;
  $3=$userData;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$3;
  var $8=__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($5, $6, $7);
  $proxyId=$8;
  var $9=(($4+28)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=((($10)+(1))|0);
  HEAP32[(($9)>>2)]=$11;
  var $12=$proxyId;
  __ZN12b2BroadPhase10BufferMoveEi($4, $12);
  var $13=$proxyId;
  return $13;
}
function __ZN12b2BroadPhase10BufferMoveEi($this, $proxyId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $oldBuffer;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+36)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0))==(($7)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=(($3+32)|0);
      var $11=HEAP32[(($10)>>2)];
      $oldBuffer=$11;
      var $12=(($3+36)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=($13<<1);
      HEAP32[(($12)>>2)]=$14;
      var $15=(($3+36)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=($16<<2);
      var $18=__Z7b2Alloci($17);
      var $19=$18;
      var $20=(($3+32)|0);
      HEAP32[(($20)>>2)]=$19;
      var $21=(($3+32)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$oldBuffer;
      var $25=$24;
      var $26=(($3+40)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=($27<<2);
      assert($28 % 1 === 0);_memcpy($23, $25, $28);
      var $29=$oldBuffer;
      var $30=$29;
      __Z6b2FreePv($30);
      label = 3; break;
    case 3: 
      var $32=$2;
      var $33=(($3+40)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($3+32)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+($34<<2))|0);
      HEAP32[(($37)>>2)]=$32;
      var $38=(($3+40)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)+(1))|0);
      HEAP32[(($38)>>2)]=$40;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2BroadPhase12DestroyProxyEi($this, $proxyId) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase12UnBufferMoveEi($3, $4);
  var $5=(($3+28)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=((($6)-(1))|0);
  HEAP32[(($5)>>2)]=$7;
  var $8=(($3)|0);
  var $9=$2;
  __ZN13b2DynamicTree12DestroyProxyEi($8, $9);
  return;
}
function __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $buffer;
      $1=$this;
      $2=$proxyId;
      $3=$aabb;
      $4=$displacement;
      var $5=$1;
      var $6=(($5)|0);
      var $7=$2;
      var $8=$3;
      var $9=$4;
      var $10=__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($6, $7, $8, $9);
      var $11=(($10)&(1));
      $buffer=$11;
      var $12=$buffer;
      var $13=(($12) & 1);
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $15=$2;
      __ZN12b2BroadPhase10BufferMoveEi($5, $15);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2BroadPhase10TouchProxyEi($this, $proxyId) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase10BufferMoveEi($3, $4);
  return;
}
function __ZN12b2BroadPhase13QueryCallbackEi($this, $proxyId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $oldBuffer;
      $2=$this;
      $3=$proxyId;
      var $4=$2;
      var $5=$3;
      var $6=(($4+56)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0))==(($7)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 6; break;
    case 3: 
      var $11=(($4+52)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($4+48)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|(0))==(($14)|(0));
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=(($4+44)|0);
      var $18=HEAP32[(($17)>>2)];
      $oldBuffer=$18;
      var $19=(($4+48)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=($20<<1);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($4+48)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)*(12))&-1);
      var $25=__Z7b2Alloci($24);
      var $26=$25;
      var $27=(($4+44)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($4+44)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=$oldBuffer;
      var $32=$31;
      var $33=(($4+52)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)*(12))&-1);
      assert($35 % 1 === 0);_memcpy($30, $32, $35);
      var $36=$oldBuffer;
      var $37=$36;
      __Z6b2FreePv($37);
      label = 5; break;
    case 5: 
      var $39=$3;
      var $40=(($4+56)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=__Z5b2MinIiET_S0_S0_($39, $41);
      var $43=(($4+52)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($4+44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+((($44)*(12))&-1))|0);
      var $48=(($47)|0);
      HEAP32[(($48)>>2)]=$42;
      var $49=$3;
      var $50=(($4+56)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=__Z5b2MaxIiET_S0_S0_($49, $51);
      var $53=(($4+52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($4+44)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+((($54)*(12))&-1))|0);
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$52;
      var $59=(($4+52)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)+(1))|0);
      HEAP32[(($59)>>2)]=$61;
      $1=1;
      label = 6; break;
    case 6: 
      var $63=$1;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
function __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold, $circleA, $xfA, $circleB, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $pA=__stackBase__;
      var $pB=(__stackBase__)+(8);
      var $d=(__stackBase__)+(16);
      var $distSqr;
      var $rA;
      var $rB;
      var $radius;
      $1=$manifold;
      $2=$circleA;
      $3=$xfA;
      $4=$circleB;
      $5=$xfB;
      var $6=$1;
      var $7=(($6+60)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$3;
      var $9=$2;
      var $10=(($9+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pA, $8, $10);
      var $11=$5;
      var $12=$4;
      var $13=(($12+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pB, $11, $13);
      __ZmiRK6b2Vec2S1_($d, $pB, $pA);
      var $14=__Z5b2DotRK6b2Vec2S1_($d, $d);
      $distSqr=$14;
      var $15=$2;
      var $16=$15;
      var $17=(($16+8)|0);
      var $18=HEAPF32[(($17)>>2)];
      $rA=$18;
      var $19=$4;
      var $20=$19;
      var $21=(($20+8)|0);
      var $22=HEAPF32[(($21)>>2)];
      $rB=$22;
      var $23=$rA;
      var $24=$rB;
      var $25=($23)+($24);
      $radius=$25;
      var $26=$distSqr;
      var $27=$radius;
      var $28=$radius;
      var $29=($27)*($28);
      var $30=$26 > $29;
      if ($30) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $33=$1;
      var $34=(($33+56)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$1;
      var $36=(($35+48)|0);
      var $37=$2;
      var $38=(($37+12)|0);
      var $39=$36;
      var $40=$38;
      assert(8 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
      var $41=$1;
      var $42=(($41+40)|0);
      __ZN6b2Vec27SetZeroEv($42);
      var $43=$1;
      var $44=(($43+60)|0);
      HEAP32[(($44)>>2)]=1;
      var $45=$1;
      var $46=(($45)|0);
      var $47=(($46)|0);
      var $48=(($47)|0);
      var $49=$4;
      var $50=(($49+12)|0);
      var $51=$48;
      var $52=$50;
      assert(8 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];
      var $53=$1;
      var $54=(($53)|0);
      var $55=(($54)|0);
      var $56=(($55+16)|0);
      var $57=$56;
      HEAP32[(($57)>>2)]=0;
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2MulRK11b2TransformRK6b2Vec2($agg_result, $T, $v) {
  var label = 0;
  var $1;
  var $2;
  var $x;
  var $y;
  $1=$T;
  $2=$v;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=(($4+4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=($6)*($9);
  var $11=$1;
  var $12=(($11+8)|0);
  var $13=(($12)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$2;
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=($14)*($17);
  var $19=($10)-($18);
  var $20=$1;
  var $21=(($20)|0);
  var $22=(($21)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=($19)+($23);
  $x=$24;
  var $25=$1;
  var $26=(($25+8)|0);
  var $27=(($26)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$2;
  var $30=(($29)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=($28)*($31);
  var $33=$1;
  var $34=(($33+8)|0);
  var $35=(($34+4)|0);
  var $36=HEAPF32[(($35)>>2)];
  var $37=$2;
  var $38=(($37+4)|0);
  var $39=HEAPF32[(($38)>>2)];
  var $40=($36)*($39);
  var $41=($32)+($40);
  var $42=$1;
  var $43=(($42)|0);
  var $44=(($43+4)|0);
  var $45=HEAPF32[(($44)>>2)];
  var $46=($41)+($45);
  $y=$46;
  var $47=$x;
  var $48=$y;
  __ZN6b2Vec2C1Eff($agg_result, $47, $48);
  return;
}
function __ZmiRK6b2Vec2S1_($agg_result, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)-($8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)-($15);
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  return;
}
function __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $polygonA, $xfA, $circleB, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $c=__stackBase__;
      var $cLocal=(__stackBase__)+(8);
      var $normalIndex;
      var $separation;
      var $radius;
      var $vertexCount;
      var $vertices;
      var $normals;
      var $i;
      var $s;
      var $6=(__stackBase__)+(16);
      var $vertIndex1;
      var $vertIndex2;
      var $v1=(__stackBase__)+(24);
      var $v2=(__stackBase__)+(32);
      var $7=(__stackBase__)+(40);
      var $8=(__stackBase__)+(48);
      var $u1;
      var $9=(__stackBase__)+(56);
      var $10=(__stackBase__)+(64);
      var $u2;
      var $11=(__stackBase__)+(72);
      var $12=(__stackBase__)+(80);
      var $13=(__stackBase__)+(88);
      var $14=(__stackBase__)+(96);
      var $faceCenter=(__stackBase__)+(104);
      var $15=(__stackBase__)+(112);
      var $separation1;
      var $16=(__stackBase__)+(120);
      $1=$manifold;
      $2=$polygonA;
      $3=$xfA;
      $4=$circleB;
      $5=$xfB;
      var $17=$1;
      var $18=(($17+60)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=$5;
      var $20=$4;
      var $21=(($20+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($c, $19, $21);
      var $22=$3;
      __Z6b2MulTRK11b2TransformRK6b2Vec2($cLocal, $22, $c);
      $normalIndex=0;
      $separation=-3.4028234663852886e+38;
      var $23=$2;
      var $24=$23;
      var $25=(($24+8)|0);
      var $26=HEAPF32[(($25)>>2)];
      var $27=$4;
      var $28=$27;
      var $29=(($28+8)|0);
      var $30=HEAPF32[(($29)>>2)];
      var $31=($26)+($30);
      $radius=$31;
      var $32=$2;
      var $33=(($32+148)|0);
      var $34=HEAP32[(($33)>>2)];
      $vertexCount=$34;
      var $35=$2;
      var $36=(($35+20)|0);
      var $37=(($36)|0);
      $vertices=$37;
      var $38=$2;
      var $39=(($38+84)|0);
      var $40=(($39)|0);
      $normals=$40;
      $i=0;
      label = 2; break;
    case 2: 
      var $42=$i;
      var $43=$vertexCount;
      var $44=(($42)|(0)) < (($43)|(0));
      if ($44) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $46=$i;
      var $47=$normals;
      var $48=(($47+($46<<3))|0);
      var $49=$i;
      var $50=$vertices;
      var $51=(($50+($49<<3))|0);
      __ZmiRK6b2Vec2S1_($6, $cLocal, $51);
      var $52=__Z5b2DotRK6b2Vec2S1_($48, $6);
      $s=$52;
      var $53=$s;
      var $54=$radius;
      var $55=$53 > $54;
      if ($55) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 26; break;
    case 5: 
      var $58=$s;
      var $59=$separation;
      var $60=$58 > $59;
      if ($60) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $62=$s;
      $separation=$62;
      var $63=$i;
      $normalIndex=$63;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $66=$i;
      var $67=((($66)+(1))|0);
      $i=$67;
      label = 2; break;
    case 9: 
      var $69=$normalIndex;
      $vertIndex1=$69;
      var $70=$vertIndex1;
      var $71=((($70)+(1))|0);
      var $72=$vertexCount;
      var $73=(($71)|(0)) < (($72)|(0));
      if ($73) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $75=$vertIndex1;
      var $76=((($75)+(1))|0);
      var $79 = $76;label = 12; break;
    case 11: 
      var $79 = 0;label = 12; break;
    case 12: 
      var $79;
      $vertIndex2=$79;
      var $80=$vertIndex1;
      var $81=$vertices;
      var $82=(($81+($80<<3))|0);
      var $83=$v1;
      var $84=$82;
      assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];
      var $85=$vertIndex2;
      var $86=$vertices;
      var $87=(($86+($85<<3))|0);
      var $88=$v2;
      var $89=$87;
      assert(8 % 1 === 0);HEAP32[(($88)>>2)]=HEAP32[(($89)>>2)];HEAP32[((($88)+(4))>>2)]=HEAP32[((($89)+(4))>>2)];
      var $90=$separation;
      var $91=$90 < 1.1920928955078125e-7;
      if ($91) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $93=$1;
      var $94=(($93+60)|0);
      HEAP32[(($94)>>2)]=1;
      var $95=$1;
      var $96=(($95+56)|0);
      HEAP32[(($96)>>2)]=1;
      var $97=$1;
      var $98=(($97+40)|0);
      var $99=$normalIndex;
      var $100=$normals;
      var $101=(($100+($99<<3))|0);
      var $102=$98;
      var $103=$101;
      assert(8 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];
      var $104=$1;
      var $105=(($104+48)|0);
      __ZplRK6b2Vec2S1_($8, $v1, $v2);
      __ZmlfRK6b2Vec2($7, 0.5, $8);
      var $106=$105;
      var $107=$7;
      assert(8 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];
      var $108=$1;
      var $109=(($108)|0);
      var $110=(($109)|0);
      var $111=(($110)|0);
      var $112=$4;
      var $113=(($112+12)|0);
      var $114=$111;
      var $115=$113;
      assert(8 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];
      var $116=$1;
      var $117=(($116)|0);
      var $118=(($117)|0);
      var $119=(($118+16)|0);
      var $120=$119;
      HEAP32[(($120)>>2)]=0;
      label = 26; break;
    case 14: 
      __ZmiRK6b2Vec2S1_($9, $cLocal, $v1);
      __ZmiRK6b2Vec2S1_($10, $v2, $v1);
      var $122=__Z5b2DotRK6b2Vec2S1_($9, $10);
      $u1=$122;
      __ZmiRK6b2Vec2S1_($11, $cLocal, $v2);
      __ZmiRK6b2Vec2S1_($12, $v1, $v2);
      var $123=__Z5b2DotRK6b2Vec2S1_($11, $12);
      $u2=$123;
      var $124=$u1;
      var $125=$124 <= 0;
      if ($125) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $127=__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal, $v1);
      var $128=$radius;
      var $129=$radius;
      var $130=($128)*($129);
      var $131=$127 > $130;
      if ($131) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 26; break;
    case 17: 
      var $134=$1;
      var $135=(($134+60)|0);
      HEAP32[(($135)>>2)]=1;
      var $136=$1;
      var $137=(($136+56)|0);
      HEAP32[(($137)>>2)]=1;
      var $138=$1;
      var $139=(($138+40)|0);
      __ZmiRK6b2Vec2S1_($13, $cLocal, $v1);
      var $140=$139;
      var $141=$13;
      assert(8 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];
      var $142=$1;
      var $143=(($142+40)|0);
      var $144=__ZN6b2Vec29NormalizeEv($143);
      var $145=$1;
      var $146=(($145+48)|0);
      var $147=$146;
      var $148=$v1;
      assert(8 % 1 === 0);HEAP32[(($147)>>2)]=HEAP32[(($148)>>2)];HEAP32[((($147)+(4))>>2)]=HEAP32[((($148)+(4))>>2)];
      var $149=$1;
      var $150=(($149)|0);
      var $151=(($150)|0);
      var $152=(($151)|0);
      var $153=$4;
      var $154=(($153+12)|0);
      var $155=$152;
      var $156=$154;
      assert(8 % 1 === 0);HEAP32[(($155)>>2)]=HEAP32[(($156)>>2)];HEAP32[((($155)+(4))>>2)]=HEAP32[((($156)+(4))>>2)];
      var $157=$1;
      var $158=(($157)|0);
      var $159=(($158)|0);
      var $160=(($159+16)|0);
      var $161=$160;
      HEAP32[(($161)>>2)]=0;
      label = 26; break;
    case 18: 
      var $163=$u2;
      var $164=$163 <= 0;
      if ($164) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $166=__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal, $v2);
      var $167=$radius;
      var $168=$radius;
      var $169=($167)*($168);
      var $170=$166 > $169;
      if ($170) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 26; break;
    case 21: 
      var $173=$1;
      var $174=(($173+60)|0);
      HEAP32[(($174)>>2)]=1;
      var $175=$1;
      var $176=(($175+56)|0);
      HEAP32[(($176)>>2)]=1;
      var $177=$1;
      var $178=(($177+40)|0);
      __ZmiRK6b2Vec2S1_($14, $cLocal, $v2);
      var $179=$178;
      var $180=$14;
      assert(8 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];
      var $181=$1;
      var $182=(($181+40)|0);
      var $183=__ZN6b2Vec29NormalizeEv($182);
      var $184=$1;
      var $185=(($184+48)|0);
      var $186=$185;
      var $187=$v2;
      assert(8 % 1 === 0);HEAP32[(($186)>>2)]=HEAP32[(($187)>>2)];HEAP32[((($186)+(4))>>2)]=HEAP32[((($187)+(4))>>2)];
      var $188=$1;
      var $189=(($188)|0);
      var $190=(($189)|0);
      var $191=(($190)|0);
      var $192=$4;
      var $193=(($192+12)|0);
      var $194=$191;
      var $195=$193;
      assert(8 % 1 === 0);HEAP32[(($194)>>2)]=HEAP32[(($195)>>2)];HEAP32[((($194)+(4))>>2)]=HEAP32[((($195)+(4))>>2)];
      var $196=$1;
      var $197=(($196)|0);
      var $198=(($197)|0);
      var $199=(($198+16)|0);
      var $200=$199;
      HEAP32[(($200)>>2)]=0;
      label = 25; break;
    case 22: 
      __ZplRK6b2Vec2S1_($15, $v1, $v2);
      __ZmlfRK6b2Vec2($faceCenter, 0.5, $15);
      __ZmiRK6b2Vec2S1_($16, $cLocal, $faceCenter);
      var $202=$vertIndex1;
      var $203=$normals;
      var $204=(($203+($202<<3))|0);
      var $205=__Z5b2DotRK6b2Vec2S1_($16, $204);
      $separation1=$205;
      var $206=$separation1;
      var $207=$radius;
      var $208=$206 > $207;
      if ($208) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 26; break;
    case 24: 
      var $211=$1;
      var $212=(($211+60)|0);
      HEAP32[(($212)>>2)]=1;
      var $213=$1;
      var $214=(($213+56)|0);
      HEAP32[(($214)>>2)]=1;
      var $215=$1;
      var $216=(($215+40)|0);
      var $217=$vertIndex1;
      var $218=$normals;
      var $219=(($218+($217<<3))|0);
      var $220=$216;
      var $221=$219;
      assert(8 % 1 === 0);HEAP32[(($220)>>2)]=HEAP32[(($221)>>2)];HEAP32[((($220)+(4))>>2)]=HEAP32[((($221)+(4))>>2)];
      var $222=$1;
      var $223=(($222+48)|0);
      var $224=$223;
      var $225=$faceCenter;
      assert(8 % 1 === 0);HEAP32[(($224)>>2)]=HEAP32[(($225)>>2)];HEAP32[((($224)+(4))>>2)]=HEAP32[((($225)+(4))>>2)];
      var $226=$1;
      var $227=(($226)|0);
      var $228=(($227)|0);
      var $229=(($228)|0);
      var $230=$4;
      var $231=(($230+12)|0);
      var $232=$229;
      var $233=$231;
      assert(8 % 1 === 0);HEAP32[(($232)>>2)]=HEAP32[(($233)>>2)];HEAP32[((($232)+(4))>>2)]=HEAP32[((($233)+(4))>>2)];
      var $234=$1;
      var $235=(($234)|0);
      var $236=(($235)|0);
      var $237=(($236+16)|0);
      var $238=$237;
      HEAP32[(($238)>>2)]=0;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2BroadPhaseC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=(($4)|0);
      __ZN13b2DynamicTreeC2Ev($5);
      var $6=(($4+28)|0);
      HEAP32[(($6)>>2)]=0;
      var $7=(($4+48)|0);
      HEAP32[(($7)>>2)]=16;
      var $8=(($4+52)|0);
      HEAP32[(($8)>>2)]=0;
      var $9=(($4+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($10)*(12))&-1);
      var $12 = (function() { try { __THREW__ = 0; return __Z7b2Alloci($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $14=$12;
      var $15=(($4+44)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=(($4+36)|0);
      HEAP32[(($16)>>2)]=16;
      var $17=(($4+40)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=(($4+36)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=($19<<2);
      var $21 = (function() { try { __THREW__ = 0; return __Z7b2Alloci($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $23=$21;
      var $24=(($4+32)|0);
      HEAP32[(($24)>>2)]=$23;
      return;
    case 4: 
      var $26$0 = ___cxa_find_matching_catch(-1, -1); $26$1 = tempRet0;
      var $27=$26$0;
      $2=$27;
      var $28=$26$1;
      $3=$28;
      (function() { try { __THREW__ = 0; return __ZN13b2DynamicTreeD2Ev($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $31=$2;
      var $32=$3;
      var $33$0=$31;
      var $33$1=0;
      var $34$0=$33$0;
      var $34$1=$32;
      ___resumeException($34$0)
    case 7: 
      var $36$0 = ___cxa_find_matching_catch(-1, -1,0); $36$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2BroadPhaseD2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      (function() { try { __THREW__ = 0; return __Z6b2FreePv($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=(($4+44)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      (function() { try { __THREW__ = 0; return __Z6b2FreePv($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=(($4)|0);
      __ZN13b2DynamicTreeD2Ev($13);
      return;
    case 4: 
      var $15$0 = ___cxa_find_matching_catch(-1, -1); $15$1 = tempRet0;
      var $16=$15$0;
      $2=$16;
      var $17=$15$1;
      $3=$17;
      var $18=(($4)|0);
      (function() { try { __THREW__ = 0; return __ZN13b2DynamicTreeD2Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $21=$2;
      var $22=$3;
      var $23$0=$21;
      var $23$1=0;
      var $24$0=$23$0;
      var $24$1=$22;
      ___resumeException($24$0)
    case 7: 
      var $26$0 = ___cxa_find_matching_catch(-1, -1,0); $26$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec2C2Eff($this, $x, $y) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$x;
  $3=$y;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  HEAPF32[(($5)>>2)]=$6;
  var $7=(($4+4)|0);
  var $8=$3;
  HEAPF32[(($7)>>2)]=$8;
  return;
}
function __ZN6b2Vec23SetEff($this, $x_, $y_) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$x_;
  $3=$y_;
  var $4=$1;
  var $5=$2;
  var $6=(($4)|0);
  HEAPF32[(($6)>>2)]=$5;
  var $7=$3;
  var $8=(($4+4)|0);
  HEAPF32[(($8)>>2)]=$7;
  return;
}
function __Z6b2MulTRK11b2TransformRK6b2Vec2($agg_result, $T, $v) {
  var label = 0;
  var $1;
  var $2;
  var $px;
  var $py;
  var $x;
  var $y;
  $1=$T;
  $2=$v;
  var $3=$2;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$1;
  var $7=(($6)|0);
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=($5)-($9);
  $px=$10;
  var $11=$2;
  var $12=(($11+4)|0);
  var $13=HEAPF32[(($12)>>2)];
  var $14=$1;
  var $15=(($14)|0);
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=($13)-($17);
  $py=$18;
  var $19=$1;
  var $20=(($19+8)|0);
  var $21=(($20+4)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$px;
  var $24=($22)*($23);
  var $25=$1;
  var $26=(($25+8)|0);
  var $27=(($26)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$py;
  var $30=($28)*($29);
  var $31=($24)+($30);
  $x=$31;
  var $32=$1;
  var $33=(($32+8)|0);
  var $34=(($33)|0);
  var $35=HEAPF32[(($34)>>2)];
  var $36=(-$35);
  var $37=$px;
  var $38=($36)*($37);
  var $39=$1;
  var $40=(($39+8)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$py;
  var $44=($42)*($43);
  var $45=($38)+($44);
  $y=$45;
  var $46=$x;
  var $47=$y;
  __ZN6b2Vec2C1Eff($agg_result, $46, $47);
  return;
}
function __ZmlfRK6b2Vec2($agg_result, $s, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$s;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($3)*($6);
  var $8=$1;
  var $9=$2;
  var $10=(($9+4)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=($8)*($11);
  __ZN6b2Vec2C1Eff($agg_result, $7, $12);
  return;
}
function __ZplRK6b2Vec2S1_($agg_result, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)+($8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)+($15);
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  return;
}
function __Z17b2DistanceSquaredRK6b2Vec2S1_($a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $c=__stackBase__;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  __ZmiRK6b2Vec2S1_($c, $3, $4);
  var $5=__Z5b2DotRK6b2Vec2S1_($c, $c);
  STACKTOP = __stackBase__;
  return $5;
}
function __ZN6b2Vec29NormalizeEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $length;
      var $invLength;
      $2=$this;
      var $3=$2;
      var $4=__ZNK6b2Vec26LengthEv($3);
      $length=$4;
      var $5=$length;
      var $6=$5 < 1.1920928955078125e-7;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$length;
      var $10=(1)/($9);
      $invLength=$10;
      var $11=$invLength;
      var $12=(($3)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=($13)*($11);
      HEAPF32[(($12)>>2)]=$14;
      var $15=$invLength;
      var $16=(($3+4)|0);
      var $17=HEAPF32[(($16)>>2)];
      var $18=($17)*($15);
      HEAPF32[(($16)>>2)]=$18;
      var $19=$length;
      $1=$19;
      label = 4; break;
    case 4: 
      var $21=$1;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Vec26LengthEv($this) {
  var label = 0;
  var $1;
  var $2;
  $2=$this;
  var $3=$2;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=($5)*($7);
  var $9=(($3+4)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=(($3+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=($10)*($12);
  var $14=($8)+($13);
  $1=$14;
  var $15=$1;
  var $16=Math.sqrt($15);
  return $16;
}
function __ZN6b2Vec2C1Eff($this, $x, $y) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$x;
  $3=$y;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Vec2C2Eff($4, $5, $6);
  return;
}
function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edgeA, $xfA, $circleB, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 212)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $Q=__stackBase__;
      var $6=(__stackBase__)+(8);
      var $A=(__stackBase__)+(16);
      var $B=(__stackBase__)+(24);
      var $e=(__stackBase__)+(32);
      var $u;
      var $7=(__stackBase__)+(40);
      var $v;
      var $8=(__stackBase__)+(48);
      var $radius;
      var $cf=(__stackBase__)+(56);
      var $P=(__stackBase__)+(60);
      var $d=(__stackBase__)+(68);
      var $dd;
      var $A1=(__stackBase__)+(76);
      var $B1=(__stackBase__)+(84);
      var $e1=(__stackBase__)+(92);
      var $u1;
      var $9=(__stackBase__)+(100);
      var $P1=(__stackBase__)+(108);
      var $d2=(__stackBase__)+(116);
      var $dd3;
      var $B2=(__stackBase__)+(124);
      var $A2=(__stackBase__)+(132);
      var $e2=(__stackBase__)+(140);
      var $v2;
      var $10=(__stackBase__)+(148);
      var $den;
      var $P4=(__stackBase__)+(156);
      var $11=(__stackBase__)+(164);
      var $12=(__stackBase__)+(172);
      var $13=(__stackBase__)+(180);
      var $d5=(__stackBase__)+(188);
      var $dd6;
      var $n=(__stackBase__)+(196);
      var $14=(__stackBase__)+(204);
      $1=$manifold;
      $2=$edgeA;
      $3=$xfA;
      $4=$circleB;
      $5=$xfB;
      var $15=$1;
      var $16=(($15+60)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=$3;
      var $18=$5;
      var $19=$4;
      var $20=(($19+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $18, $20);
      __Z6b2MulTRK11b2TransformRK6b2Vec2($Q, $17, $6);
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=$A;
      var $24=$22;
      assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=$B;
      var $28=$26;
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($e, $B, $A);
      __ZmiRK6b2Vec2S1_($7, $B, $Q);
      var $29=__Z5b2DotRK6b2Vec2S1_($e, $7);
      $u=$29;
      __ZmiRK6b2Vec2S1_($8, $Q, $A);
      var $30=__Z5b2DotRK6b2Vec2S1_($e, $8);
      $v=$30;
      var $31=$2;
      var $32=$31;
      var $33=(($32+8)|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=$4;
      var $36=$35;
      var $37=(($36+8)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=($34)+($38);
      $radius=$39;
      var $40=(($cf+1)|0);
      HEAP8[($40)]=0;
      var $41=(($cf+3)|0);
      HEAP8[($41)]=0;
      var $42=$v;
      var $43=$42 <= 0;
      if ($43) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $45=$P;
      var $46=$A;
      assert(8 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($d, $Q, $P);
      var $47=__Z5b2DotRK6b2Vec2S1_($d, $d);
      $dd=$47;
      var $48=$dd;
      var $49=$radius;
      var $50=$radius;
      var $51=($49)*($50);
      var $52=$48 > $51;
      if ($52) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 25; break;
    case 4: 
      var $55=$2;
      var $56=(($55+44)|0);
      var $57=HEAP8[($56)];
      var $58=(($57) & 1);
      if ($58) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $60=$2;
      var $61=(($60+28)|0);
      var $62=$A1;
      var $63=$61;
      assert(8 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];
      var $64=$B1;
      var $65=$A;
      assert(8 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($e1, $B1, $A1);
      __ZmiRK6b2Vec2S1_($9, $B1, $Q);
      var $66=__Z5b2DotRK6b2Vec2S1_($e1, $9);
      $u1=$66;
      var $67=$u1;
      var $68=$67 > 0;
      if ($68) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 25; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $72=(($cf)|0);
      HEAP8[($72)]=0;
      var $73=(($cf+2)|0);
      HEAP8[($73)]=0;
      var $74=$1;
      var $75=(($74+60)|0);
      HEAP32[(($75)>>2)]=1;
      var $76=$1;
      var $77=(($76+56)|0);
      HEAP32[(($77)>>2)]=0;
      var $78=$1;
      var $79=(($78+40)|0);
      __ZN6b2Vec27SetZeroEv($79);
      var $80=$1;
      var $81=(($80+48)|0);
      var $82=$81;
      var $83=$P;
      assert(8 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];
      var $84=$1;
      var $85=(($84)|0);
      var $86=(($85)|0);
      var $87=(($86+16)|0);
      var $88=$87;
      HEAP32[(($88)>>2)]=0;
      var $89=$1;
      var $90=(($89)|0);
      var $91=(($90)|0);
      var $92=(($91+16)|0);
      var $93=$92;
      var $94=$93;
      var $95=$cf;
      assert(4 % 1 === 0);HEAP8[($94)]=HEAP8[($95)];HEAP8[((($94)+(1))|0)]=HEAP8[((($95)+(1))|0)];HEAP8[((($94)+(2))|0)]=HEAP8[((($95)+(2))|0)];HEAP8[((($94)+(3))|0)]=HEAP8[((($95)+(3))|0)];
      var $96=$1;
      var $97=(($96)|0);
      var $98=(($97)|0);
      var $99=(($98)|0);
      var $100=$4;
      var $101=(($100+12)|0);
      var $102=$99;
      var $103=$101;
      assert(8 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];
      label = 25; break;
    case 9: 
      var $105=$u;
      var $106=$105 <= 0;
      if ($106) { label = 10; break; } else { label = 17; break; }
    case 10: 
      var $108=$P1;
      var $109=$B;
      assert(8 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($d2, $Q, $P1);
      var $110=__Z5b2DotRK6b2Vec2S1_($d2, $d2);
      $dd3=$110;
      var $111=$dd3;
      var $112=$radius;
      var $113=$radius;
      var $114=($112)*($113);
      var $115=$111 > $114;
      if ($115) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 25; break;
    case 12: 
      var $118=$2;
      var $119=(($118+45)|0);
      var $120=HEAP8[($119)];
      var $121=(($120) & 1);
      if ($121) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $123=$2;
      var $124=(($123+36)|0);
      var $125=$B2;
      var $126=$124;
      assert(8 % 1 === 0);HEAP32[(($125)>>2)]=HEAP32[(($126)>>2)];HEAP32[((($125)+(4))>>2)]=HEAP32[((($126)+(4))>>2)];
      var $127=$A2;
      var $128=$B;
      assert(8 % 1 === 0);HEAP32[(($127)>>2)]=HEAP32[(($128)>>2)];HEAP32[((($127)+(4))>>2)]=HEAP32[((($128)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($e2, $B2, $A2);
      __ZmiRK6b2Vec2S1_($10, $Q, $A2);
      var $129=__Z5b2DotRK6b2Vec2S1_($e2, $10);
      $v2=$129;
      var $130=$v2;
      var $131=$130 > 0;
      if ($131) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 25; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $135=(($cf)|0);
      HEAP8[($135)]=1;
      var $136=(($cf+2)|0);
      HEAP8[($136)]=0;
      var $137=$1;
      var $138=(($137+60)|0);
      HEAP32[(($138)>>2)]=1;
      var $139=$1;
      var $140=(($139+56)|0);
      HEAP32[(($140)>>2)]=0;
      var $141=$1;
      var $142=(($141+40)|0);
      __ZN6b2Vec27SetZeroEv($142);
      var $143=$1;
      var $144=(($143+48)|0);
      var $145=$144;
      var $146=$P1;
      assert(8 % 1 === 0);HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];
      var $147=$1;
      var $148=(($147)|0);
      var $149=(($148)|0);
      var $150=(($149+16)|0);
      var $151=$150;
      HEAP32[(($151)>>2)]=0;
      var $152=$1;
      var $153=(($152)|0);
      var $154=(($153)|0);
      var $155=(($154+16)|0);
      var $156=$155;
      var $157=$156;
      var $158=$cf;
      assert(4 % 1 === 0);HEAP8[($157)]=HEAP8[($158)];HEAP8[((($157)+(1))|0)]=HEAP8[((($158)+(1))|0)];HEAP8[((($157)+(2))|0)]=HEAP8[((($158)+(2))|0)];HEAP8[((($157)+(3))|0)]=HEAP8[((($158)+(3))|0)];
      var $159=$1;
      var $160=(($159)|0);
      var $161=(($160)|0);
      var $162=(($161)|0);
      var $163=$4;
      var $164=(($163+12)|0);
      var $165=$162;
      var $166=$164;
      assert(8 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($166)+(4))>>2)];
      label = 25; break;
    case 17: 
      var $168=__Z5b2DotRK6b2Vec2S1_($e, $e);
      $den=$168;
      var $169=$den;
      var $170=$169 > 0;
      if ($170) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      ___assert_func(((5258060)|0), 127, ((5264084)|0), ((5258048)|0));
      throw "Reached an unreachable!"
      label = 20; break;
    case 20: 
      var $175=$den;
      var $176=(1)/($175);
      var $177=$u;
      __ZmlfRK6b2Vec2($12, $177, $A);
      var $178=$v;
      __ZmlfRK6b2Vec2($13, $178, $B);
      __ZplRK6b2Vec2S1_($11, $12, $13);
      __ZmlfRK6b2Vec2($P4, $176, $11);
      __ZmiRK6b2Vec2S1_($d5, $Q, $P4);
      var $179=__Z5b2DotRK6b2Vec2S1_($d5, $d5);
      $dd6=$179;
      var $180=$dd6;
      var $181=$radius;
      var $182=$radius;
      var $183=($181)*($182);
      var $184=$180 > $183;
      if ($184) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 25; break;
    case 22: 
      var $187=(($e+4)|0);
      var $188=HEAPF32[(($187)>>2)];
      var $189=(-$188);
      var $190=(($e)|0);
      var $191=HEAPF32[(($190)>>2)];
      __ZN6b2Vec2C1Eff($n, $189, $191);
      __ZmiRK6b2Vec2S1_($14, $Q, $A);
      var $192=__Z5b2DotRK6b2Vec2S1_($n, $14);
      var $193=$192 < 0;
      if ($193) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $195=(($n)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=(-$196);
      var $198=(($n+4)|0);
      var $199=HEAPF32[(($198)>>2)];
      var $200=(-$199);
      __ZN6b2Vec23SetEff($n, $197, $200);
      label = 24; break;
    case 24: 
      var $202=__ZN6b2Vec29NormalizeEv($n);
      var $203=(($cf)|0);
      HEAP8[($203)]=0;
      var $204=(($cf+2)|0);
      HEAP8[($204)]=1;
      var $205=$1;
      var $206=(($205+60)|0);
      HEAP32[(($206)>>2)]=1;
      var $207=$1;
      var $208=(($207+56)|0);
      HEAP32[(($208)>>2)]=1;
      var $209=$1;
      var $210=(($209+40)|0);
      var $211=$210;
      var $212=$n;
      assert(8 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($212)+(4))>>2)];
      var $213=$1;
      var $214=(($213+48)|0);
      var $215=$214;
      var $216=$A;
      assert(8 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($216)>>2)];HEAP32[((($215)+(4))>>2)]=HEAP32[((($216)+(4))>>2)];
      var $217=$1;
      var $218=(($217)|0);
      var $219=(($218)|0);
      var $220=(($219+16)|0);
      var $221=$220;
      HEAP32[(($221)>>2)]=0;
      var $222=$1;
      var $223=(($222)|0);
      var $224=(($223)|0);
      var $225=(($224+16)|0);
      var $226=$225;
      var $227=$226;
      var $228=$cf;
      assert(4 % 1 === 0);HEAP8[($227)]=HEAP8[($228)];HEAP8[((($227)+(1))|0)]=HEAP8[((($228)+(1))|0)];HEAP8[((($227)+(2))|0)]=HEAP8[((($228)+(2))|0)];HEAP8[((($227)+(3))|0)]=HEAP8[((($228)+(3))|0)];
      var $229=$1;
      var $230=(($229)|0);
      var $231=(($230)|0);
      var $232=(($231)|0);
      var $233=$4;
      var $234=(($233+12)|0);
      var $235=$232;
      var $236=$234;
      assert(8 % 1 === 0);HEAP32[(($235)>>2)]=HEAP32[(($236)>>2)];HEAP32[((($235)+(4))>>2)]=HEAP32[((($236)+(4))>>2)];
      label = 25; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($this, $manifold, $edgeA, $xfA, $polygonB, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 500)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7=__stackBase__;
      var $8=(__stackBase__)+(16);
      var $hasVertex0;
      var $hasVertex3;
      var $edge1=(__stackBase__)+(24);
      var $offset1;
      var $9=(__stackBase__)+(32);
      var $offset0;
      var $offset2;
      var $convex1;
      var $convex2;
      var $edge0=(__stackBase__)+(40);
      var $10=(__stackBase__)+(48);
      var $edge2=(__stackBase__)+(56);
      var $11=(__stackBase__)+(64);
      var $12=(__stackBase__)+(72);
      var $13=(__stackBase__)+(80);
      var $14=(__stackBase__)+(88);
      var $15=(__stackBase__)+(96);
      var $16=(__stackBase__)+(104);
      var $17=(__stackBase__)+(112);
      var $18=(__stackBase__)+(120);
      var $19=(__stackBase__)+(128);
      var $20=(__stackBase__)+(136);
      var $21=(__stackBase__)+(144);
      var $22=(__stackBase__)+(152);
      var $23=(__stackBase__)+(160);
      var $24=(__stackBase__)+(168);
      var $25=(__stackBase__)+(176);
      var $26=(__stackBase__)+(184);
      var $27=(__stackBase__)+(192);
      var $28=(__stackBase__)+(200);
      var $29=(__stackBase__)+(208);
      var $30=(__stackBase__)+(216);
      var $31=(__stackBase__)+(224);
      var $32=(__stackBase__)+(232);
      var $33=(__stackBase__)+(240);
      var $34=(__stackBase__)+(248);
      var $35=(__stackBase__)+(256);
      var $36=(__stackBase__)+(264);
      var $37=(__stackBase__)+(272);
      var $38=(__stackBase__)+(280);
      var $i;
      var $39=(__stackBase__)+(288);
      var $40=(__stackBase__)+(296);
      var $edgeAxis=(__stackBase__)+(304);
      var $polygonAxis=(__stackBase__)+(316);
      var $k_relativeTol;
      var $k_absoluteTol;
      var $primaryAxis=(__stackBase__)+(328);
      var $ie=(__stackBase__)+(340);
      var $rf=(__stackBase__)+(364);
      var $bestIndex;
      var $bestValue;
      var $i1;
      var $value;
      var $i12;
      var $i2;
      var $41=(__stackBase__)+(420);
      var $42=(__stackBase__)+(428);
      var $clipPoints1=(__stackBase__)+(436);
      var $clipPoints2=(__stackBase__)+(460);
      var $np;
      var $pointCount;
      var $i3;
      var $separation;
      var $43=(__stackBase__)+(484);
      var $cp;
      var $44=(__stackBase__)+(492);
      $1=$this;
      $2=$manifold;
      $3=$edgeA;
      $4=$xfA;
      $5=$polygonB;
      $6=$xfB;
      var $45=$1;
      var $46=(($45+132)|0);
      var $47=$4;
      var $48=$6;
      __Z6b2MulTRK11b2TransformS1_($7, $47, $48);
      var $49=$46;
      var $50=$7;
      assert(16 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];HEAP32[((($49)+(12))>>2)]=HEAP32[((($50)+(12))>>2)];
      var $51=(($45+148)|0);
      var $52=(($45+132)|0);
      var $53=$5;
      var $54=(($53+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $52, $54);
      var $55=$51;
      var $56=$8;
      assert(8 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
      var $57=(($45+156)|0);
      var $58=$3;
      var $59=(($58+28)|0);
      var $60=$57;
      var $61=$59;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=(($45+164)|0);
      var $63=$3;
      var $64=(($63+12)|0);
      var $65=$62;
      var $66=$64;
      assert(8 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];
      var $67=(($45+172)|0);
      var $68=$3;
      var $69=(($68+20)|0);
      var $70=$67;
      var $71=$69;
      assert(8 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];
      var $72=(($45+180)|0);
      var $73=$3;
      var $74=(($73+36)|0);
      var $75=$72;
      var $76=$74;
      assert(8 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];
      var $77=$3;
      var $78=(($77+44)|0);
      var $79=HEAP8[($78)];
      var $80=(($79) & 1);
      var $81=(($80)&(1));
      $hasVertex0=$81;
      var $82=$3;
      var $83=(($82+45)|0);
      var $84=HEAP8[($83)];
      var $85=(($84) & 1);
      var $86=(($85)&(1));
      $hasVertex3=$86;
      var $87=(($45+172)|0);
      var $88=(($45+164)|0);
      __ZmiRK6b2Vec2S1_($edge1, $87, $88);
      var $89=__ZN6b2Vec29NormalizeEv($edge1);
      var $90=(($45+196)|0);
      var $91=(($edge1+4)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=(($edge1)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=(-$94);
      __ZN6b2Vec23SetEff($90, $92, $95);
      var $96=(($45+196)|0);
      var $97=(($45+148)|0);
      var $98=(($45+164)|0);
      __ZmiRK6b2Vec2S1_($9, $97, $98);
      var $99=__Z5b2DotRK6b2Vec2S1_($96, $9);
      $offset1=$99;
      $offset0=0;
      $offset2=0;
      $convex1=0;
      $convex2=0;
      var $100=$hasVertex0;
      var $101=(($100) & 1);
      if ($101) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $103=(($45+164)|0);
      var $104=(($45+156)|0);
      __ZmiRK6b2Vec2S1_($edge0, $103, $104);
      var $105=__ZN6b2Vec29NormalizeEv($edge0);
      var $106=(($45+188)|0);
      var $107=(($edge0+4)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=(($edge0)|0);
      var $110=HEAPF32[(($109)>>2)];
      var $111=(-$110);
      __ZN6b2Vec23SetEff($106, $108, $111);
      var $112=__Z7b2CrossRK6b2Vec2S1_($edge0, $edge1);
      var $113=$112 >= 0;
      var $114=(($113)&(1));
      $convex1=$114;
      var $115=(($45+188)|0);
      var $116=(($45+148)|0);
      var $117=(($45+156)|0);
      __ZmiRK6b2Vec2S1_($10, $116, $117);
      var $118=__Z5b2DotRK6b2Vec2S1_($115, $10);
      $offset0=$118;
      label = 3; break;
    case 3: 
      var $120=$hasVertex3;
      var $121=(($120) & 1);
      if ($121) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $123=(($45+180)|0);
      var $124=(($45+172)|0);
      __ZmiRK6b2Vec2S1_($edge2, $123, $124);
      var $125=__ZN6b2Vec29NormalizeEv($edge2);
      var $126=(($45+204)|0);
      var $127=(($edge2+4)|0);
      var $128=HEAPF32[(($127)>>2)];
      var $129=(($edge2)|0);
      var $130=HEAPF32[(($129)>>2)];
      var $131=(-$130);
      __ZN6b2Vec23SetEff($126, $128, $131);
      var $132=__Z7b2CrossRK6b2Vec2S1_($edge1, $edge2);
      var $133=$132 > 0;
      var $134=(($133)&(1));
      $convex2=$134;
      var $135=(($45+204)|0);
      var $136=(($45+148)|0);
      var $137=(($45+172)|0);
      __ZmiRK6b2Vec2S1_($11, $136, $137);
      var $138=__Z5b2DotRK6b2Vec2S1_($135, $11);
      $offset2=$138;
      label = 5; break;
    case 5: 
      var $140=$hasVertex0;
      var $141=(($140) & 1);
      if ($141) { label = 6; break; } else { label = 44; break; }
    case 6: 
      var $143=$hasVertex3;
      var $144=(($143) & 1);
      if ($144) { label = 7; break; } else { label = 44; break; }
    case 7: 
      var $146=$convex1;
      var $147=(($146) & 1);
      if ($147) { label = 8; break; } else { label = 16; break; }
    case 8: 
      var $149=$convex2;
      var $150=(($149) & 1);
      if ($150) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $152=$offset0;
      var $153=$152 >= 0;
      if ($153) { var $161 = 1;label = 12; break; } else { label = 10; break; }
    case 10: 
      var $155=$offset1;
      var $156=$155 >= 0;
      if ($156) { var $161 = 1;label = 12; break; } else { label = 11; break; }
    case 11: 
      var $158=$offset2;
      var $159=$158 >= 0;
      var $161 = $159;label = 12; break;
    case 12: 
      var $161;
      var $162=(($45+248)|0);
      var $163=(($161)&(1));
      HEAP8[($162)]=$163;
      var $164=(($45+248)|0);
      var $165=HEAP8[($164)];
      var $166=(($165) & 1);
      if ($166) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $168=(($45+212)|0);
      var $169=(($45+196)|0);
      var $170=$168;
      var $171=$169;
      assert(8 % 1 === 0);HEAP32[(($170)>>2)]=HEAP32[(($171)>>2)];HEAP32[((($170)+(4))>>2)]=HEAP32[((($171)+(4))>>2)];
      var $172=(($45+228)|0);
      var $173=(($45+188)|0);
      var $174=$172;
      var $175=$173;
      assert(8 % 1 === 0);HEAP32[(($174)>>2)]=HEAP32[(($175)>>2)];HEAP32[((($174)+(4))>>2)]=HEAP32[((($175)+(4))>>2)];
      var $176=(($45+236)|0);
      var $177=(($45+204)|0);
      var $178=$176;
      var $179=$177;
      assert(8 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($179)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($179)+(4))>>2)];
      label = 15; break;
    case 14: 
      var $181=(($45+212)|0);
      var $182=(($45+196)|0);
      __ZNK6b2Vec2ngEv($12, $182);
      var $183=$181;
      var $184=$12;
      assert(8 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];
      var $185=(($45+228)|0);
      var $186=(($45+196)|0);
      __ZNK6b2Vec2ngEv($13, $186);
      var $187=$185;
      var $188=$13;
      assert(8 % 1 === 0);HEAP32[(($187)>>2)]=HEAP32[(($188)>>2)];HEAP32[((($187)+(4))>>2)]=HEAP32[((($188)+(4))>>2)];
      var $189=(($45+236)|0);
      var $190=(($45+196)|0);
      __ZNK6b2Vec2ngEv($14, $190);
      var $191=$189;
      var $192=$14;
      assert(8 % 1 === 0);HEAP32[(($191)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($191)+(4))>>2)]=HEAP32[((($192)+(4))>>2)];
      label = 15; break;
    case 15: 
      label = 43; break;
    case 16: 
      var $195=$convex1;
      var $196=(($195) & 1);
      if ($196) { label = 17; break; } else { label = 25; break; }
    case 17: 
      var $198=$offset0;
      var $199=$198 >= 0;
      if ($199) { var $209 = 1;label = 21; break; } else { label = 18; break; }
    case 18: 
      var $201=$offset1;
      var $202=$201 >= 0;
      if ($202) { label = 19; break; } else { var $207 = 0;label = 20; break; }
    case 19: 
      var $204=$offset2;
      var $205=$204 >= 0;
      var $207 = $205;label = 20; break;
    case 20: 
      var $207;
      var $209 = $207;label = 21; break;
    case 21: 
      var $209;
      var $210=(($45+248)|0);
      var $211=(($209)&(1));
      HEAP8[($210)]=$211;
      var $212=(($45+248)|0);
      var $213=HEAP8[($212)];
      var $214=(($213) & 1);
      if ($214) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $216=(($45+212)|0);
      var $217=(($45+196)|0);
      var $218=$216;
      var $219=$217;
      assert(8 % 1 === 0);HEAP32[(($218)>>2)]=HEAP32[(($219)>>2)];HEAP32[((($218)+(4))>>2)]=HEAP32[((($219)+(4))>>2)];
      var $220=(($45+228)|0);
      var $221=(($45+188)|0);
      var $222=$220;
      var $223=$221;
      assert(8 % 1 === 0);HEAP32[(($222)>>2)]=HEAP32[(($223)>>2)];HEAP32[((($222)+(4))>>2)]=HEAP32[((($223)+(4))>>2)];
      var $224=(($45+236)|0);
      var $225=(($45+196)|0);
      var $226=$224;
      var $227=$225;
      assert(8 % 1 === 0);HEAP32[(($226)>>2)]=HEAP32[(($227)>>2)];HEAP32[((($226)+(4))>>2)]=HEAP32[((($227)+(4))>>2)];
      label = 24; break;
    case 23: 
      var $229=(($45+212)|0);
      var $230=(($45+196)|0);
      __ZNK6b2Vec2ngEv($15, $230);
      var $231=$229;
      var $232=$15;
      assert(8 % 1 === 0);HEAP32[(($231)>>2)]=HEAP32[(($232)>>2)];HEAP32[((($231)+(4))>>2)]=HEAP32[((($232)+(4))>>2)];
      var $233=(($45+228)|0);
      var $234=(($45+204)|0);
      __ZNK6b2Vec2ngEv($16, $234);
      var $235=$233;
      var $236=$16;
      assert(8 % 1 === 0);HEAP32[(($235)>>2)]=HEAP32[(($236)>>2)];HEAP32[((($235)+(4))>>2)]=HEAP32[((($236)+(4))>>2)];
      var $237=(($45+236)|0);
      var $238=(($45+196)|0);
      __ZNK6b2Vec2ngEv($17, $238);
      var $239=$237;
      var $240=$17;
      assert(8 % 1 === 0);HEAP32[(($239)>>2)]=HEAP32[(($240)>>2)];HEAP32[((($239)+(4))>>2)]=HEAP32[((($240)+(4))>>2)];
      label = 24; break;
    case 24: 
      label = 42; break;
    case 25: 
      var $243=$convex2;
      var $244=(($243) & 1);
      if ($244) { label = 26; break; } else { label = 34; break; }
    case 26: 
      var $246=$offset2;
      var $247=$246 >= 0;
      if ($247) { var $257 = 1;label = 30; break; } else { label = 27; break; }
    case 27: 
      var $249=$offset0;
      var $250=$249 >= 0;
      if ($250) { label = 28; break; } else { var $255 = 0;label = 29; break; }
    case 28: 
      var $252=$offset1;
      var $253=$252 >= 0;
      var $255 = $253;label = 29; break;
    case 29: 
      var $255;
      var $257 = $255;label = 30; break;
    case 30: 
      var $257;
      var $258=(($45+248)|0);
      var $259=(($257)&(1));
      HEAP8[($258)]=$259;
      var $260=(($45+248)|0);
      var $261=HEAP8[($260)];
      var $262=(($261) & 1);
      if ($262) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $264=(($45+212)|0);
      var $265=(($45+196)|0);
      var $266=$264;
      var $267=$265;
      assert(8 % 1 === 0);HEAP32[(($266)>>2)]=HEAP32[(($267)>>2)];HEAP32[((($266)+(4))>>2)]=HEAP32[((($267)+(4))>>2)];
      var $268=(($45+228)|0);
      var $269=(($45+196)|0);
      var $270=$268;
      var $271=$269;
      assert(8 % 1 === 0);HEAP32[(($270)>>2)]=HEAP32[(($271)>>2)];HEAP32[((($270)+(4))>>2)]=HEAP32[((($271)+(4))>>2)];
      var $272=(($45+236)|0);
      var $273=(($45+204)|0);
      var $274=$272;
      var $275=$273;
      assert(8 % 1 === 0);HEAP32[(($274)>>2)]=HEAP32[(($275)>>2)];HEAP32[((($274)+(4))>>2)]=HEAP32[((($275)+(4))>>2)];
      label = 33; break;
    case 32: 
      var $277=(($45+212)|0);
      var $278=(($45+196)|0);
      __ZNK6b2Vec2ngEv($18, $278);
      var $279=$277;
      var $280=$18;
      assert(8 % 1 === 0);HEAP32[(($279)>>2)]=HEAP32[(($280)>>2)];HEAP32[((($279)+(4))>>2)]=HEAP32[((($280)+(4))>>2)];
      var $281=(($45+228)|0);
      var $282=(($45+196)|0);
      __ZNK6b2Vec2ngEv($19, $282);
      var $283=$281;
      var $284=$19;
      assert(8 % 1 === 0);HEAP32[(($283)>>2)]=HEAP32[(($284)>>2)];HEAP32[((($283)+(4))>>2)]=HEAP32[((($284)+(4))>>2)];
      var $285=(($45+236)|0);
      var $286=(($45+188)|0);
      __ZNK6b2Vec2ngEv($20, $286);
      var $287=$285;
      var $288=$20;
      assert(8 % 1 === 0);HEAP32[(($287)>>2)]=HEAP32[(($288)>>2)];HEAP32[((($287)+(4))>>2)]=HEAP32[((($288)+(4))>>2)];
      label = 33; break;
    case 33: 
      label = 41; break;
    case 34: 
      var $291=$offset0;
      var $292=$291 >= 0;
      if ($292) { label = 35; break; } else { var $300 = 0;label = 37; break; }
    case 35: 
      var $294=$offset1;
      var $295=$294 >= 0;
      if ($295) { label = 36; break; } else { var $300 = 0;label = 37; break; }
    case 36: 
      var $297=$offset2;
      var $298=$297 >= 0;
      var $300 = $298;label = 37; break;
    case 37: 
      var $300;
      var $301=(($45+248)|0);
      var $302=(($300)&(1));
      HEAP8[($301)]=$302;
      var $303=(($45+248)|0);
      var $304=HEAP8[($303)];
      var $305=(($304) & 1);
      if ($305) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $307=(($45+212)|0);
      var $308=(($45+196)|0);
      var $309=$307;
      var $310=$308;
      assert(8 % 1 === 0);HEAP32[(($309)>>2)]=HEAP32[(($310)>>2)];HEAP32[((($309)+(4))>>2)]=HEAP32[((($310)+(4))>>2)];
      var $311=(($45+228)|0);
      var $312=(($45+196)|0);
      var $313=$311;
      var $314=$312;
      assert(8 % 1 === 0);HEAP32[(($313)>>2)]=HEAP32[(($314)>>2)];HEAP32[((($313)+(4))>>2)]=HEAP32[((($314)+(4))>>2)];
      var $315=(($45+236)|0);
      var $316=(($45+196)|0);
      var $317=$315;
      var $318=$316;
      assert(8 % 1 === 0);HEAP32[(($317)>>2)]=HEAP32[(($318)>>2)];HEAP32[((($317)+(4))>>2)]=HEAP32[((($318)+(4))>>2)];
      label = 40; break;
    case 39: 
      var $320=(($45+212)|0);
      var $321=(($45+196)|0);
      __ZNK6b2Vec2ngEv($21, $321);
      var $322=$320;
      var $323=$21;
      assert(8 % 1 === 0);HEAP32[(($322)>>2)]=HEAP32[(($323)>>2)];HEAP32[((($322)+(4))>>2)]=HEAP32[((($323)+(4))>>2)];
      var $324=(($45+228)|0);
      var $325=(($45+204)|0);
      __ZNK6b2Vec2ngEv($22, $325);
      var $326=$324;
      var $327=$22;
      assert(8 % 1 === 0);HEAP32[(($326)>>2)]=HEAP32[(($327)>>2)];HEAP32[((($326)+(4))>>2)]=HEAP32[((($327)+(4))>>2)];
      var $328=(($45+236)|0);
      var $329=(($45+188)|0);
      __ZNK6b2Vec2ngEv($23, $329);
      var $330=$328;
      var $331=$23;
      assert(8 % 1 === 0);HEAP32[(($330)>>2)]=HEAP32[(($331)>>2)];HEAP32[((($330)+(4))>>2)]=HEAP32[((($331)+(4))>>2)];
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 80; break;
    case 44: 
      var $337=$hasVertex0;
      var $338=(($337) & 1);
      if ($338) { label = 45; break; } else { label = 59; break; }
    case 45: 
      var $340=$convex1;
      var $341=(($340) & 1);
      if ($341) { label = 46; break; } else { label = 52; break; }
    case 46: 
      var $343=$offset0;
      var $344=$343 >= 0;
      if ($344) { var $349 = 1;label = 48; break; } else { label = 47; break; }
    case 47: 
      var $346=$offset1;
      var $347=$346 >= 0;
      var $349 = $347;label = 48; break;
    case 48: 
      var $349;
      var $350=(($45+248)|0);
      var $351=(($349)&(1));
      HEAP8[($350)]=$351;
      var $352=(($45+248)|0);
      var $353=HEAP8[($352)];
      var $354=(($353) & 1);
      if ($354) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $356=(($45+212)|0);
      var $357=(($45+196)|0);
      var $358=$356;
      var $359=$357;
      assert(8 % 1 === 0);HEAP32[(($358)>>2)]=HEAP32[(($359)>>2)];HEAP32[((($358)+(4))>>2)]=HEAP32[((($359)+(4))>>2)];
      var $360=(($45+228)|0);
      var $361=(($45+188)|0);
      var $362=$360;
      var $363=$361;
      assert(8 % 1 === 0);HEAP32[(($362)>>2)]=HEAP32[(($363)>>2)];HEAP32[((($362)+(4))>>2)]=HEAP32[((($363)+(4))>>2)];
      var $364=(($45+236)|0);
      var $365=(($45+196)|0);
      __ZNK6b2Vec2ngEv($24, $365);
      var $366=$364;
      var $367=$24;
      assert(8 % 1 === 0);HEAP32[(($366)>>2)]=HEAP32[(($367)>>2)];HEAP32[((($366)+(4))>>2)]=HEAP32[((($367)+(4))>>2)];
      label = 51; break;
    case 50: 
      var $369=(($45+212)|0);
      var $370=(($45+196)|0);
      __ZNK6b2Vec2ngEv($25, $370);
      var $371=$369;
      var $372=$25;
      assert(8 % 1 === 0);HEAP32[(($371)>>2)]=HEAP32[(($372)>>2)];HEAP32[((($371)+(4))>>2)]=HEAP32[((($372)+(4))>>2)];
      var $373=(($45+228)|0);
      var $374=(($45+196)|0);
      var $375=$373;
      var $376=$374;
      assert(8 % 1 === 0);HEAP32[(($375)>>2)]=HEAP32[(($376)>>2)];HEAP32[((($375)+(4))>>2)]=HEAP32[((($376)+(4))>>2)];
      var $377=(($45+236)|0);
      var $378=(($45+196)|0);
      __ZNK6b2Vec2ngEv($26, $378);
      var $379=$377;
      var $380=$26;
      assert(8 % 1 === 0);HEAP32[(($379)>>2)]=HEAP32[(($380)>>2)];HEAP32[((($379)+(4))>>2)]=HEAP32[((($380)+(4))>>2)];
      label = 51; break;
    case 51: 
      label = 58; break;
    case 52: 
      var $383=$offset0;
      var $384=$383 >= 0;
      if ($384) { label = 53; break; } else { var $389 = 0;label = 54; break; }
    case 53: 
      var $386=$offset1;
      var $387=$386 >= 0;
      var $389 = $387;label = 54; break;
    case 54: 
      var $389;
      var $390=(($45+248)|0);
      var $391=(($389)&(1));
      HEAP8[($390)]=$391;
      var $392=(($45+248)|0);
      var $393=HEAP8[($392)];
      var $394=(($393) & 1);
      if ($394) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $396=(($45+212)|0);
      var $397=(($45+196)|0);
      var $398=$396;
      var $399=$397;
      assert(8 % 1 === 0);HEAP32[(($398)>>2)]=HEAP32[(($399)>>2)];HEAP32[((($398)+(4))>>2)]=HEAP32[((($399)+(4))>>2)];
      var $400=(($45+228)|0);
      var $401=(($45+196)|0);
      var $402=$400;
      var $403=$401;
      assert(8 % 1 === 0);HEAP32[(($402)>>2)]=HEAP32[(($403)>>2)];HEAP32[((($402)+(4))>>2)]=HEAP32[((($403)+(4))>>2)];
      var $404=(($45+236)|0);
      var $405=(($45+196)|0);
      __ZNK6b2Vec2ngEv($27, $405);
      var $406=$404;
      var $407=$27;
      assert(8 % 1 === 0);HEAP32[(($406)>>2)]=HEAP32[(($407)>>2)];HEAP32[((($406)+(4))>>2)]=HEAP32[((($407)+(4))>>2)];
      label = 57; break;
    case 56: 
      var $409=(($45+212)|0);
      var $410=(($45+196)|0);
      __ZNK6b2Vec2ngEv($28, $410);
      var $411=$409;
      var $412=$28;
      assert(8 % 1 === 0);HEAP32[(($411)>>2)]=HEAP32[(($412)>>2)];HEAP32[((($411)+(4))>>2)]=HEAP32[((($412)+(4))>>2)];
      var $413=(($45+228)|0);
      var $414=(($45+196)|0);
      var $415=$413;
      var $416=$414;
      assert(8 % 1 === 0);HEAP32[(($415)>>2)]=HEAP32[(($416)>>2)];HEAP32[((($415)+(4))>>2)]=HEAP32[((($416)+(4))>>2)];
      var $417=(($45+236)|0);
      var $418=(($45+188)|0);
      __ZNK6b2Vec2ngEv($29, $418);
      var $419=$417;
      var $420=$29;
      assert(8 % 1 === 0);HEAP32[(($419)>>2)]=HEAP32[(($420)>>2)];HEAP32[((($419)+(4))>>2)]=HEAP32[((($420)+(4))>>2)];
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 79; break;
    case 59: 
      var $424=$hasVertex3;
      var $425=(($424) & 1);
      if ($425) { label = 60; break; } else { label = 74; break; }
    case 60: 
      var $427=$convex2;
      var $428=(($427) & 1);
      if ($428) { label = 61; break; } else { label = 67; break; }
    case 61: 
      var $430=$offset1;
      var $431=$430 >= 0;
      if ($431) { var $436 = 1;label = 63; break; } else { label = 62; break; }
    case 62: 
      var $433=$offset2;
      var $434=$433 >= 0;
      var $436 = $434;label = 63; break;
    case 63: 
      var $436;
      var $437=(($45+248)|0);
      var $438=(($436)&(1));
      HEAP8[($437)]=$438;
      var $439=(($45+248)|0);
      var $440=HEAP8[($439)];
      var $441=(($440) & 1);
      if ($441) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $443=(($45+212)|0);
      var $444=(($45+196)|0);
      var $445=$443;
      var $446=$444;
      assert(8 % 1 === 0);HEAP32[(($445)>>2)]=HEAP32[(($446)>>2)];HEAP32[((($445)+(4))>>2)]=HEAP32[((($446)+(4))>>2)];
      var $447=(($45+228)|0);
      var $448=(($45+196)|0);
      __ZNK6b2Vec2ngEv($30, $448);
      var $449=$447;
      var $450=$30;
      assert(8 % 1 === 0);HEAP32[(($449)>>2)]=HEAP32[(($450)>>2)];HEAP32[((($449)+(4))>>2)]=HEAP32[((($450)+(4))>>2)];
      var $451=(($45+236)|0);
      var $452=(($45+204)|0);
      var $453=$451;
      var $454=$452;
      assert(8 % 1 === 0);HEAP32[(($453)>>2)]=HEAP32[(($454)>>2)];HEAP32[((($453)+(4))>>2)]=HEAP32[((($454)+(4))>>2)];
      label = 66; break;
    case 65: 
      var $456=(($45+212)|0);
      var $457=(($45+196)|0);
      __ZNK6b2Vec2ngEv($31, $457);
      var $458=$456;
      var $459=$31;
      assert(8 % 1 === 0);HEAP32[(($458)>>2)]=HEAP32[(($459)>>2)];HEAP32[((($458)+(4))>>2)]=HEAP32[((($459)+(4))>>2)];
      var $460=(($45+228)|0);
      var $461=(($45+196)|0);
      __ZNK6b2Vec2ngEv($32, $461);
      var $462=$460;
      var $463=$32;
      assert(8 % 1 === 0);HEAP32[(($462)>>2)]=HEAP32[(($463)>>2)];HEAP32[((($462)+(4))>>2)]=HEAP32[((($463)+(4))>>2)];
      var $464=(($45+236)|0);
      var $465=(($45+196)|0);
      var $466=$464;
      var $467=$465;
      assert(8 % 1 === 0);HEAP32[(($466)>>2)]=HEAP32[(($467)>>2)];HEAP32[((($466)+(4))>>2)]=HEAP32[((($467)+(4))>>2)];
      label = 66; break;
    case 66: 
      label = 73; break;
    case 67: 
      var $470=$offset1;
      var $471=$470 >= 0;
      if ($471) { label = 68; break; } else { var $476 = 0;label = 69; break; }
    case 68: 
      var $473=$offset2;
      var $474=$473 >= 0;
      var $476 = $474;label = 69; break;
    case 69: 
      var $476;
      var $477=(($45+248)|0);
      var $478=(($476)&(1));
      HEAP8[($477)]=$478;
      var $479=(($45+248)|0);
      var $480=HEAP8[($479)];
      var $481=(($480) & 1);
      if ($481) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $483=(($45+212)|0);
      var $484=(($45+196)|0);
      var $485=$483;
      var $486=$484;
      assert(8 % 1 === 0);HEAP32[(($485)>>2)]=HEAP32[(($486)>>2)];HEAP32[((($485)+(4))>>2)]=HEAP32[((($486)+(4))>>2)];
      var $487=(($45+228)|0);
      var $488=(($45+196)|0);
      __ZNK6b2Vec2ngEv($33, $488);
      var $489=$487;
      var $490=$33;
      assert(8 % 1 === 0);HEAP32[(($489)>>2)]=HEAP32[(($490)>>2)];HEAP32[((($489)+(4))>>2)]=HEAP32[((($490)+(4))>>2)];
      var $491=(($45+236)|0);
      var $492=(($45+196)|0);
      var $493=$491;
      var $494=$492;
      assert(8 % 1 === 0);HEAP32[(($493)>>2)]=HEAP32[(($494)>>2)];HEAP32[((($493)+(4))>>2)]=HEAP32[((($494)+(4))>>2)];
      label = 72; break;
    case 71: 
      var $496=(($45+212)|0);
      var $497=(($45+196)|0);
      __ZNK6b2Vec2ngEv($34, $497);
      var $498=$496;
      var $499=$34;
      assert(8 % 1 === 0);HEAP32[(($498)>>2)]=HEAP32[(($499)>>2)];HEAP32[((($498)+(4))>>2)]=HEAP32[((($499)+(4))>>2)];
      var $500=(($45+228)|0);
      var $501=(($45+204)|0);
      __ZNK6b2Vec2ngEv($35, $501);
      var $502=$500;
      var $503=$35;
      assert(8 % 1 === 0);HEAP32[(($502)>>2)]=HEAP32[(($503)>>2)];HEAP32[((($502)+(4))>>2)]=HEAP32[((($503)+(4))>>2)];
      var $504=(($45+236)|0);
      var $505=(($45+196)|0);
      var $506=$504;
      var $507=$505;
      assert(8 % 1 === 0);HEAP32[(($506)>>2)]=HEAP32[(($507)>>2)];HEAP32[((($506)+(4))>>2)]=HEAP32[((($507)+(4))>>2)];
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 78; break;
    case 74: 
      var $511=$offset1;
      var $512=$511 >= 0;
      var $513=(($45+248)|0);
      var $514=(($512)&(1));
      HEAP8[($513)]=$514;
      var $515=(($45+248)|0);
      var $516=HEAP8[($515)];
      var $517=(($516) & 1);
      if ($517) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $519=(($45+212)|0);
      var $520=(($45+196)|0);
      var $521=$519;
      var $522=$520;
      assert(8 % 1 === 0);HEAP32[(($521)>>2)]=HEAP32[(($522)>>2)];HEAP32[((($521)+(4))>>2)]=HEAP32[((($522)+(4))>>2)];
      var $523=(($45+228)|0);
      var $524=(($45+196)|0);
      __ZNK6b2Vec2ngEv($36, $524);
      var $525=$523;
      var $526=$36;
      assert(8 % 1 === 0);HEAP32[(($525)>>2)]=HEAP32[(($526)>>2)];HEAP32[((($525)+(4))>>2)]=HEAP32[((($526)+(4))>>2)];
      var $527=(($45+236)|0);
      var $528=(($45+196)|0);
      __ZNK6b2Vec2ngEv($37, $528);
      var $529=$527;
      var $530=$37;
      assert(8 % 1 === 0);HEAP32[(($529)>>2)]=HEAP32[(($530)>>2)];HEAP32[((($529)+(4))>>2)]=HEAP32[((($530)+(4))>>2)];
      label = 77; break;
    case 76: 
      var $532=(($45+212)|0);
      var $533=(($45+196)|0);
      __ZNK6b2Vec2ngEv($38, $533);
      var $534=$532;
      var $535=$38;
      assert(8 % 1 === 0);HEAP32[(($534)>>2)]=HEAP32[(($535)>>2)];HEAP32[((($534)+(4))>>2)]=HEAP32[((($535)+(4))>>2)];
      var $536=(($45+228)|0);
      var $537=(($45+196)|0);
      var $538=$536;
      var $539=$537;
      assert(8 % 1 === 0);HEAP32[(($538)>>2)]=HEAP32[(($539)>>2)];HEAP32[((($538)+(4))>>2)]=HEAP32[((($539)+(4))>>2)];
      var $540=(($45+236)|0);
      var $541=(($45+196)|0);
      var $542=$540;
      var $543=$541;
      assert(8 % 1 === 0);HEAP32[(($542)>>2)]=HEAP32[(($543)>>2)];HEAP32[((($542)+(4))>>2)]=HEAP32[((($543)+(4))>>2)];
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $548=$5;
      var $549=(($548+148)|0);
      var $550=HEAP32[(($549)>>2)];
      var $551=(($45)|0);
      var $552=(($551+128)|0);
      HEAP32[(($552)>>2)]=$550;
      $i=0;
      label = 81; break;
    case 81: 
      var $554=$i;
      var $555=$5;
      var $556=(($555+148)|0);
      var $557=HEAP32[(($556)>>2)];
      var $558=(($554)|(0)) < (($557)|(0));
      if ($558) { label = 82; break; } else { label = 84; break; }
    case 82: 
      var $560=$i;
      var $561=(($45)|0);
      var $562=(($561)|0);
      var $563=(($562+($560<<3))|0);
      var $564=(($45+132)|0);
      var $565=$i;
      var $566=$5;
      var $567=(($566+20)|0);
      var $568=(($567+($565<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($39, $564, $568);
      var $569=$563;
      var $570=$39;
      assert(8 % 1 === 0);HEAP32[(($569)>>2)]=HEAP32[(($570)>>2)];HEAP32[((($569)+(4))>>2)]=HEAP32[((($570)+(4))>>2)];
      var $571=$i;
      var $572=(($45)|0);
      var $573=(($572+64)|0);
      var $574=(($573+($571<<3))|0);
      var $575=(($45+132)|0);
      var $576=(($575+8)|0);
      var $577=$i;
      var $578=$5;
      var $579=(($578+84)|0);
      var $580=(($579+($577<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($40, $576, $580);
      var $581=$574;
      var $582=$40;
      assert(8 % 1 === 0);HEAP32[(($581)>>2)]=HEAP32[(($582)>>2)];HEAP32[((($581)+(4))>>2)]=HEAP32[((($582)+(4))>>2)];
      label = 83; break;
    case 83: 
      var $584=$i;
      var $585=((($584)+(1))|0);
      $i=$585;
      label = 81; break;
    case 84: 
      var $587=(($45+244)|0);
      HEAPF32[(($587)>>2)]=0.019999999552965164;
      var $588=$2;
      var $589=(($588+60)|0);
      HEAP32[(($589)>>2)]=0;
      __ZN12b2EPCollider21ComputeEdgeSeparationEv($edgeAxis, $45);
      var $590=(($edgeAxis)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=(($591)|(0))==0;
      if ($592) { label = 85; break; } else { label = 86; break; }
    case 85: 
      label = 138; break;
    case 86: 
      var $595=(($edgeAxis+8)|0);
      var $596=HEAPF32[(($595)>>2)];
      var $597=(($45+244)|0);
      var $598=HEAPF32[(($597)>>2)];
      var $599=$596 > $598;
      if ($599) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 138; break;
    case 88: 
      __ZN12b2EPCollider24ComputePolygonSeparationEv($polygonAxis, $45);
      var $602=(($polygonAxis)|0);
      var $603=HEAP32[(($602)>>2)];
      var $604=(($603)|(0))!=0;
      if ($604) { label = 89; break; } else { label = 91; break; }
    case 89: 
      var $606=(($polygonAxis+8)|0);
      var $607=HEAPF32[(($606)>>2)];
      var $608=(($45+244)|0);
      var $609=HEAPF32[(($608)>>2)];
      var $610=$607 > $609;
      if ($610) { label = 90; break; } else { label = 91; break; }
    case 90: 
      label = 138; break;
    case 91: 
      $k_relativeTol=0.9800000190734863;
      $k_absoluteTol=0.0010000000474974513;
      var $613=(($polygonAxis)|0);
      var $614=HEAP32[(($613)>>2)];
      var $615=(($614)|(0))==0;
      if ($615) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $617=$primaryAxis;
      var $618=$edgeAxis;
      assert(12 % 1 === 0);HEAP32[(($617)>>2)]=HEAP32[(($618)>>2)];HEAP32[((($617)+(4))>>2)]=HEAP32[((($618)+(4))>>2)];HEAP32[((($617)+(8))>>2)]=HEAP32[((($618)+(8))>>2)];
      label = 97; break;
    case 93: 
      var $620=(($polygonAxis+8)|0);
      var $621=HEAPF32[(($620)>>2)];
      var $622=(($edgeAxis+8)|0);
      var $623=HEAPF32[(($622)>>2)];
      var $624=($623)*(0.9800000190734863);
      var $625=($624)+(0.0010000000474974513);
      var $626=$621 > $625;
      if ($626) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $628=$primaryAxis;
      var $629=$polygonAxis;
      assert(12 % 1 === 0);HEAP32[(($628)>>2)]=HEAP32[(($629)>>2)];HEAP32[((($628)+(4))>>2)]=HEAP32[((($629)+(4))>>2)];HEAP32[((($628)+(8))>>2)]=HEAP32[((($629)+(8))>>2)];
      label = 96; break;
    case 95: 
      var $631=$primaryAxis;
      var $632=$edgeAxis;
      assert(12 % 1 === 0);HEAP32[(($631)>>2)]=HEAP32[(($632)>>2)];HEAP32[((($631)+(4))>>2)]=HEAP32[((($632)+(4))>>2)];HEAP32[((($631)+(8))>>2)]=HEAP32[((($632)+(8))>>2)];
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $635=(($ie)|0);
      var $636=(($635+24)|0);
      var $638 = $635;label = 98; break;
    case 98: 
      var $638;
      __ZN12b2ClipVertexC1Ev($638);
      var $639=(($638+12)|0);
      var $640=(($639)|(0))==(($636)|(0));
      if ($640) { label = 99; break; } else { var $638 = $639;label = 98; break; }
    case 99: 
      __ZN15b2ReferenceFaceC1Ev($rf);
      var $642=(($primaryAxis)|0);
      var $643=HEAP32[(($642)>>2)];
      var $644=(($643)|(0))==1;
      if ($644) { label = 100; break; } else { label = 113; break; }
    case 100: 
      var $646=$2;
      var $647=(($646+56)|0);
      HEAP32[(($647)>>2)]=1;
      $bestIndex=0;
      var $648=(($45+212)|0);
      var $649=(($45)|0);
      var $650=(($649+64)|0);
      var $651=(($650)|0);
      var $652=__Z5b2DotRK6b2Vec2S1_($648, $651);
      $bestValue=$652;
      $i1=1;
      label = 101; break;
    case 101: 
      var $654=$i1;
      var $655=(($45)|0);
      var $656=(($655+128)|0);
      var $657=HEAP32[(($656)>>2)];
      var $658=(($654)|(0)) < (($657)|(0));
      if ($658) { label = 102; break; } else { label = 106; break; }
    case 102: 
      var $660=(($45+212)|0);
      var $661=$i1;
      var $662=(($45)|0);
      var $663=(($662+64)|0);
      var $664=(($663+($661<<3))|0);
      var $665=__Z5b2DotRK6b2Vec2S1_($660, $664);
      $value=$665;
      var $666=$value;
      var $667=$bestValue;
      var $668=$666 < $667;
      if ($668) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $670=$value;
      $bestValue=$670;
      var $671=$i1;
      $bestIndex=$671;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $674=$i1;
      var $675=((($674)+(1))|0);
      $i1=$675;
      label = 101; break;
    case 106: 
      var $677=$bestIndex;
      $i12=$677;
      var $678=$i12;
      var $679=((($678)+(1))|0);
      var $680=(($45)|0);
      var $681=(($680+128)|0);
      var $682=HEAP32[(($681)>>2)];
      var $683=(($679)|(0)) < (($682)|(0));
      if ($683) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $685=$i12;
      var $686=((($685)+(1))|0);
      var $689 = $686;label = 109; break;
    case 108: 
      var $689 = 0;label = 109; break;
    case 109: 
      var $689;
      $i2=$689;
      var $690=(($ie)|0);
      var $691=(($690)|0);
      var $692=$i12;
      var $693=(($45)|0);
      var $694=(($693)|0);
      var $695=(($694+($692<<3))|0);
      var $696=$691;
      var $697=$695;
      assert(8 % 1 === 0);HEAP32[(($696)>>2)]=HEAP32[(($697)>>2)];HEAP32[((($696)+(4))>>2)]=HEAP32[((($697)+(4))>>2)];
      var $698=(($ie)|0);
      var $699=(($698+8)|0);
      var $700=$699;
      var $701=(($700)|0);
      HEAP8[($701)]=0;
      var $702=$i12;
      var $703=(($702) & 255);
      var $704=(($ie)|0);
      var $705=(($704+8)|0);
      var $706=$705;
      var $707=(($706+1)|0);
      HEAP8[($707)]=$703;
      var $708=(($ie)|0);
      var $709=(($708+8)|0);
      var $710=$709;
      var $711=(($710+2)|0);
      HEAP8[($711)]=1;
      var $712=(($ie)|0);
      var $713=(($712+8)|0);
      var $714=$713;
      var $715=(($714+3)|0);
      HEAP8[($715)]=0;
      var $716=(($ie+12)|0);
      var $717=(($716)|0);
      var $718=$i2;
      var $719=(($45)|0);
      var $720=(($719)|0);
      var $721=(($720+($718<<3))|0);
      var $722=$717;
      var $723=$721;
      assert(8 % 1 === 0);HEAP32[(($722)>>2)]=HEAP32[(($723)>>2)];HEAP32[((($722)+(4))>>2)]=HEAP32[((($723)+(4))>>2)];
      var $724=(($ie+12)|0);
      var $725=(($724+8)|0);
      var $726=$725;
      var $727=(($726)|0);
      HEAP8[($727)]=0;
      var $728=$i2;
      var $729=(($728) & 255);
      var $730=(($ie+12)|0);
      var $731=(($730+8)|0);
      var $732=$731;
      var $733=(($732+1)|0);
      HEAP8[($733)]=$729;
      var $734=(($ie+12)|0);
      var $735=(($734+8)|0);
      var $736=$735;
      var $737=(($736+2)|0);
      HEAP8[($737)]=1;
      var $738=(($ie+12)|0);
      var $739=(($738+8)|0);
      var $740=$739;
      var $741=(($740+3)|0);
      HEAP8[($741)]=0;
      var $742=(($45+248)|0);
      var $743=HEAP8[($742)];
      var $744=(($743) & 1);
      if ($744) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $746=(($rf)|0);
      HEAP32[(($746)>>2)]=0;
      var $747=(($rf+4)|0);
      HEAP32[(($747)>>2)]=1;
      var $748=(($rf+8)|0);
      var $749=(($45+164)|0);
      var $750=$748;
      var $751=$749;
      assert(8 % 1 === 0);HEAP32[(($750)>>2)]=HEAP32[(($751)>>2)];HEAP32[((($750)+(4))>>2)]=HEAP32[((($751)+(4))>>2)];
      var $752=(($rf+16)|0);
      var $753=(($45+172)|0);
      var $754=$752;
      var $755=$753;
      assert(8 % 1 === 0);HEAP32[(($754)>>2)]=HEAP32[(($755)>>2)];HEAP32[((($754)+(4))>>2)]=HEAP32[((($755)+(4))>>2)];
      var $756=(($rf+24)|0);
      var $757=(($45+196)|0);
      var $758=$756;
      var $759=$757;
      assert(8 % 1 === 0);HEAP32[(($758)>>2)]=HEAP32[(($759)>>2)];HEAP32[((($758)+(4))>>2)]=HEAP32[((($759)+(4))>>2)];
      label = 112; break;
    case 111: 
      var $761=(($rf)|0);
      HEAP32[(($761)>>2)]=1;
      var $762=(($rf+4)|0);
      HEAP32[(($762)>>2)]=0;
      var $763=(($rf+8)|0);
      var $764=(($45+172)|0);
      var $765=$763;
      var $766=$764;
      assert(8 % 1 === 0);HEAP32[(($765)>>2)]=HEAP32[(($766)>>2)];HEAP32[((($765)+(4))>>2)]=HEAP32[((($766)+(4))>>2)];
      var $767=(($rf+16)|0);
      var $768=(($45+164)|0);
      var $769=$767;
      var $770=$768;
      assert(8 % 1 === 0);HEAP32[(($769)>>2)]=HEAP32[(($770)>>2)];HEAP32[((($769)+(4))>>2)]=HEAP32[((($770)+(4))>>2)];
      var $771=(($rf+24)|0);
      var $772=(($45+196)|0);
      __ZNK6b2Vec2ngEv($41, $772);
      var $773=$771;
      var $774=$41;
      assert(8 % 1 === 0);HEAP32[(($773)>>2)]=HEAP32[(($774)>>2)];HEAP32[((($773)+(4))>>2)]=HEAP32[((($774)+(4))>>2)];
      label = 112; break;
    case 112: 
      label = 117; break;
    case 113: 
      var $777=$2;
      var $778=(($777+56)|0);
      HEAP32[(($778)>>2)]=2;
      var $779=(($ie)|0);
      var $780=(($779)|0);
      var $781=(($45+164)|0);
      var $782=$780;
      var $783=$781;
      assert(8 % 1 === 0);HEAP32[(($782)>>2)]=HEAP32[(($783)>>2)];HEAP32[((($782)+(4))>>2)]=HEAP32[((($783)+(4))>>2)];
      var $784=(($ie)|0);
      var $785=(($784+8)|0);
      var $786=$785;
      var $787=(($786)|0);
      HEAP8[($787)]=0;
      var $788=(($primaryAxis+4)|0);
      var $789=HEAP32[(($788)>>2)];
      var $790=(($789) & 255);
      var $791=(($ie)|0);
      var $792=(($791+8)|0);
      var $793=$792;
      var $794=(($793+1)|0);
      HEAP8[($794)]=$790;
      var $795=(($ie)|0);
      var $796=(($795+8)|0);
      var $797=$796;
      var $798=(($797+2)|0);
      HEAP8[($798)]=0;
      var $799=(($ie)|0);
      var $800=(($799+8)|0);
      var $801=$800;
      var $802=(($801+3)|0);
      HEAP8[($802)]=1;
      var $803=(($ie+12)|0);
      var $804=(($803)|0);
      var $805=(($45+172)|0);
      var $806=$804;
      var $807=$805;
      assert(8 % 1 === 0);HEAP32[(($806)>>2)]=HEAP32[(($807)>>2)];HEAP32[((($806)+(4))>>2)]=HEAP32[((($807)+(4))>>2)];
      var $808=(($ie+12)|0);
      var $809=(($808+8)|0);
      var $810=$809;
      var $811=(($810)|0);
      HEAP8[($811)]=0;
      var $812=(($primaryAxis+4)|0);
      var $813=HEAP32[(($812)>>2)];
      var $814=(($813) & 255);
      var $815=(($ie+12)|0);
      var $816=(($815+8)|0);
      var $817=$816;
      var $818=(($817+1)|0);
      HEAP8[($818)]=$814;
      var $819=(($ie+12)|0);
      var $820=(($819+8)|0);
      var $821=$820;
      var $822=(($821+2)|0);
      HEAP8[($822)]=0;
      var $823=(($ie+12)|0);
      var $824=(($823+8)|0);
      var $825=$824;
      var $826=(($825+3)|0);
      HEAP8[($826)]=1;
      var $827=(($primaryAxis+4)|0);
      var $828=HEAP32[(($827)>>2)];
      var $829=(($rf)|0);
      HEAP32[(($829)>>2)]=$828;
      var $830=(($rf)|0);
      var $831=HEAP32[(($830)>>2)];
      var $832=((($831)+(1))|0);
      var $833=(($45)|0);
      var $834=(($833+128)|0);
      var $835=HEAP32[(($834)>>2)];
      var $836=(($832)|(0)) < (($835)|(0));
      if ($836) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $838=(($rf)|0);
      var $839=HEAP32[(($838)>>2)];
      var $840=((($839)+(1))|0);
      var $843 = $840;label = 116; break;
    case 115: 
      var $843 = 0;label = 116; break;
    case 116: 
      var $843;
      var $844=(($rf+4)|0);
      HEAP32[(($844)>>2)]=$843;
      var $845=(($rf+8)|0);
      var $846=(($rf)|0);
      var $847=HEAP32[(($846)>>2)];
      var $848=(($45)|0);
      var $849=(($848)|0);
      var $850=(($849+($847<<3))|0);
      var $851=$845;
      var $852=$850;
      assert(8 % 1 === 0);HEAP32[(($851)>>2)]=HEAP32[(($852)>>2)];HEAP32[((($851)+(4))>>2)]=HEAP32[((($852)+(4))>>2)];
      var $853=(($rf+16)|0);
      var $854=(($rf+4)|0);
      var $855=HEAP32[(($854)>>2)];
      var $856=(($45)|0);
      var $857=(($856)|0);
      var $858=(($857+($855<<3))|0);
      var $859=$853;
      var $860=$858;
      assert(8 % 1 === 0);HEAP32[(($859)>>2)]=HEAP32[(($860)>>2)];HEAP32[((($859)+(4))>>2)]=HEAP32[((($860)+(4))>>2)];
      var $861=(($rf+24)|0);
      var $862=(($rf)|0);
      var $863=HEAP32[(($862)>>2)];
      var $864=(($45)|0);
      var $865=(($864+64)|0);
      var $866=(($865+($863<<3))|0);
      var $867=$861;
      var $868=$866;
      assert(8 % 1 === 0);HEAP32[(($867)>>2)]=HEAP32[(($868)>>2)];HEAP32[((($867)+(4))>>2)]=HEAP32[((($868)+(4))>>2)];
      label = 117; break;
    case 117: 
      var $870=(($rf+32)|0);
      var $871=(($rf+24)|0);
      var $872=(($871+4)|0);
      var $873=HEAPF32[(($872)>>2)];
      var $874=(($rf+24)|0);
      var $875=(($874)|0);
      var $876=HEAPF32[(($875)>>2)];
      var $877=(-$876);
      __ZN6b2Vec23SetEff($870, $873, $877);
      var $878=(($rf+44)|0);
      var $879=(($rf+32)|0);
      __ZNK6b2Vec2ngEv($42, $879);
      var $880=$878;
      var $881=$42;
      assert(8 % 1 === 0);HEAP32[(($880)>>2)]=HEAP32[(($881)>>2)];HEAP32[((($880)+(4))>>2)]=HEAP32[((($881)+(4))>>2)];
      var $882=(($rf+32)|0);
      var $883=(($rf+8)|0);
      var $884=__Z5b2DotRK6b2Vec2S1_($882, $883);
      var $885=(($rf+40)|0);
      HEAPF32[(($885)>>2)]=$884;
      var $886=(($rf+44)|0);
      var $887=(($rf+16)|0);
      var $888=__Z5b2DotRK6b2Vec2S1_($886, $887);
      var $889=(($rf+52)|0);
      HEAPF32[(($889)>>2)]=$888;
      var $890=(($clipPoints1)|0);
      var $891=(($890+24)|0);
      var $893 = $890;label = 118; break;
    case 118: 
      var $893;
      __ZN12b2ClipVertexC1Ev($893);
      var $894=(($893+12)|0);
      var $895=(($894)|(0))==(($891)|(0));
      if ($895) { label = 119; break; } else { var $893 = $894;label = 118; break; }
    case 119: 
      var $897=(($clipPoints2)|0);
      var $898=(($897+24)|0);
      var $900 = $897;label = 120; break;
    case 120: 
      var $900;
      __ZN12b2ClipVertexC1Ev($900);
      var $901=(($900+12)|0);
      var $902=(($901)|(0))==(($898)|(0));
      if ($902) { label = 121; break; } else { var $900 = $901;label = 120; break; }
    case 121: 
      var $904=(($clipPoints1)|0);
      var $905=(($ie)|0);
      var $906=(($rf+32)|0);
      var $907=(($rf+40)|0);
      var $908=HEAPF32[(($907)>>2)];
      var $909=(($rf)|0);
      var $910=HEAP32[(($909)>>2)];
      var $911=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($904, $905, $906, $908, $910);
      $np=$911;
      var $912=$np;
      var $913=(($912)|(0)) < 2;
      if ($913) { label = 122; break; } else { label = 123; break; }
    case 122: 
      label = 138; break;
    case 123: 
      var $916=(($clipPoints2)|0);
      var $917=(($clipPoints1)|0);
      var $918=(($rf+44)|0);
      var $919=(($rf+52)|0);
      var $920=HEAPF32[(($919)>>2)];
      var $921=(($rf+4)|0);
      var $922=HEAP32[(($921)>>2)];
      var $923=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($916, $917, $918, $920, $922);
      $np=$923;
      var $924=$np;
      var $925=(($924)|(0)) < 2;
      if ($925) { label = 124; break; } else { label = 125; break; }
    case 124: 
      label = 138; break;
    case 125: 
      var $928=(($primaryAxis)|0);
      var $929=HEAP32[(($928)>>2)];
      var $930=(($929)|(0))==1;
      if ($930) { label = 126; break; } else { label = 127; break; }
    case 126: 
      var $932=$2;
      var $933=(($932+40)|0);
      var $934=(($rf+24)|0);
      var $935=$933;
      var $936=$934;
      assert(8 % 1 === 0);HEAP32[(($935)>>2)]=HEAP32[(($936)>>2)];HEAP32[((($935)+(4))>>2)]=HEAP32[((($936)+(4))>>2)];
      var $937=$2;
      var $938=(($937+48)|0);
      var $939=(($rf+8)|0);
      var $940=$938;
      var $941=$939;
      assert(8 % 1 === 0);HEAP32[(($940)>>2)]=HEAP32[(($941)>>2)];HEAP32[((($940)+(4))>>2)]=HEAP32[((($941)+(4))>>2)];
      label = 128; break;
    case 127: 
      var $943=$2;
      var $944=(($943+40)|0);
      var $945=(($rf)|0);
      var $946=HEAP32[(($945)>>2)];
      var $947=$5;
      var $948=(($947+84)|0);
      var $949=(($948+($946<<3))|0);
      var $950=$944;
      var $951=$949;
      assert(8 % 1 === 0);HEAP32[(($950)>>2)]=HEAP32[(($951)>>2)];HEAP32[((($950)+(4))>>2)]=HEAP32[((($951)+(4))>>2)];
      var $952=$2;
      var $953=(($952+48)|0);
      var $954=(($rf)|0);
      var $955=HEAP32[(($954)>>2)];
      var $956=$5;
      var $957=(($956+20)|0);
      var $958=(($957+($955<<3))|0);
      var $959=$953;
      var $960=$958;
      assert(8 % 1 === 0);HEAP32[(($959)>>2)]=HEAP32[(($960)>>2)];HEAP32[((($959)+(4))>>2)]=HEAP32[((($960)+(4))>>2)];
      label = 128; break;
    case 128: 
      $pointCount=0;
      $i3=0;
      label = 129; break;
    case 129: 
      var $963=$i3;
      var $964=(($963)|(0)) < 2;
      if ($964) { label = 130; break; } else { label = 137; break; }
    case 130: 
      var $966=(($rf+24)|0);
      var $967=$i3;
      var $968=(($clipPoints2+((($967)*(12))&-1))|0);
      var $969=(($968)|0);
      var $970=(($rf+8)|0);
      __ZmiRK6b2Vec2S1_($43, $969, $970);
      var $971=__Z5b2DotRK6b2Vec2S1_($966, $43);
      $separation=$971;
      var $972=$separation;
      var $973=(($45+244)|0);
      var $974=HEAPF32[(($973)>>2)];
      var $975=$972 <= $974;
      if ($975) { label = 131; break; } else { label = 135; break; }
    case 131: 
      var $977=$2;
      var $978=(($977)|0);
      var $979=(($978)|0);
      var $980=$pointCount;
      var $981=(($979+((($980)*(20))&-1))|0);
      $cp=$981;
      var $982=(($primaryAxis)|0);
      var $983=HEAP32[(($982)>>2)];
      var $984=(($983)|(0))==1;
      if ($984) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $986=$cp;
      var $987=(($986)|0);
      var $988=(($45+132)|0);
      var $989=$i3;
      var $990=(($clipPoints2+((($989)*(12))&-1))|0);
      var $991=(($990)|0);
      __Z6b2MulTRK11b2TransformRK6b2Vec2($44, $988, $991);
      var $992=$987;
      var $993=$44;
      assert(8 % 1 === 0);HEAP32[(($992)>>2)]=HEAP32[(($993)>>2)];HEAP32[((($992)+(4))>>2)]=HEAP32[((($993)+(4))>>2)];
      var $994=$cp;
      var $995=(($994+16)|0);
      var $996=$i3;
      var $997=(($clipPoints2+((($996)*(12))&-1))|0);
      var $998=(($997+8)|0);
      var $999=$995;
      var $1000=$998;
      assert(4 % 1 === 0);HEAP32[(($999)>>2)]=HEAP32[(($1000)>>2)];
      label = 134; break;
    case 133: 
      var $1002=$cp;
      var $1003=(($1002)|0);
      var $1004=$i3;
      var $1005=(($clipPoints2+((($1004)*(12))&-1))|0);
      var $1006=(($1005)|0);
      var $1007=$1003;
      var $1008=$1006;
      assert(8 % 1 === 0);HEAP32[(($1007)>>2)]=HEAP32[(($1008)>>2)];HEAP32[((($1007)+(4))>>2)]=HEAP32[((($1008)+(4))>>2)];
      var $1009=$i3;
      var $1010=(($clipPoints2+((($1009)*(12))&-1))|0);
      var $1011=(($1010+8)|0);
      var $1012=$1011;
      var $1013=(($1012+3)|0);
      var $1014=HEAP8[($1013)];
      var $1015=$cp;
      var $1016=(($1015+16)|0);
      var $1017=$1016;
      var $1018=(($1017+2)|0);
      HEAP8[($1018)]=$1014;
      var $1019=$i3;
      var $1020=(($clipPoints2+((($1019)*(12))&-1))|0);
      var $1021=(($1020+8)|0);
      var $1022=$1021;
      var $1023=(($1022+2)|0);
      var $1024=HEAP8[($1023)];
      var $1025=$cp;
      var $1026=(($1025+16)|0);
      var $1027=$1026;
      var $1028=(($1027+3)|0);
      HEAP8[($1028)]=$1024;
      var $1029=$i3;
      var $1030=(($clipPoints2+((($1029)*(12))&-1))|0);
      var $1031=(($1030+8)|0);
      var $1032=$1031;
      var $1033=(($1032+1)|0);
      var $1034=HEAP8[($1033)];
      var $1035=$cp;
      var $1036=(($1035+16)|0);
      var $1037=$1036;
      var $1038=(($1037)|0);
      HEAP8[($1038)]=$1034;
      var $1039=$i3;
      var $1040=(($clipPoints2+((($1039)*(12))&-1))|0);
      var $1041=(($1040+8)|0);
      var $1042=$1041;
      var $1043=(($1042)|0);
      var $1044=HEAP8[($1043)];
      var $1045=$cp;
      var $1046=(($1045+16)|0);
      var $1047=$1046;
      var $1048=(($1047+1)|0);
      HEAP8[($1048)]=$1044;
      label = 134; break;
    case 134: 
      var $1050=$pointCount;
      var $1051=((($1050)+(1))|0);
      $pointCount=$1051;
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $1054=$i3;
      var $1055=((($1054)+(1))|0);
      $i3=$1055;
      label = 129; break;
    case 137: 
      var $1057=$pointCount;
      var $1058=$2;
      var $1059=(($1058+60)|0);
      HEAP32[(($1059)>>2)]=$1057;
      label = 138; break;
    case 138: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec2C2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN5b2RotC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __Z5b2MinIfET_S0_S0_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3 < $4;
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  return $8;
}
function __Z7b2CrossRK6b2Vec2S1_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6+4)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)*($8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)*($15);
  var $17=($9)-($16);
  return $17;
}
function __Z6b2MulTRK11b2TransformS1_($agg_result, $A, $B) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(8);
  var $5=(__stackBase__)+(16);
  $1=$A;
  $2=$B;
  __ZN11b2TransformC1Ev($agg_result);
  var $6=(($agg_result+8)|0);
  var $7=$1;
  var $8=(($7+8)|0);
  var $9=$2;
  var $10=(($9+8)|0);
  __Z6b2MulTRK5b2RotS1_($3, $8, $10);
  var $11=$6;
  var $12=$3;
  assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
  var $13=(($agg_result)|0);
  var $14=$1;
  var $15=(($14+8)|0);
  var $16=$2;
  var $17=(($16)|0);
  var $18=$1;
  var $19=(($18)|0);
  __ZmiRK6b2Vec2S1_($5, $17, $19);
  __Z6b2MulTRK5b2RotRK6b2Vec2($4, $15, $5);
  var $20=$13;
  var $21=$4;
  assert(8 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function __ZNK6b2Vec2ngEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec2C1Ev($agg_result);
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=(-$7);
  __ZN6b2Vec23SetEff($agg_result, $5, $8);
  return;
}
function __Z5b2MulRK5b2RotRK6b2Vec2($agg_result, $q, $v) {
  var label = 0;
  var $1;
  var $2;
  $1=$q;
  $2=$v;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)*($8);
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)*($15);
  var $17=($9)-($16);
  var $18=$1;
  var $19=(($18)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=$2;
  var $22=(($21)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=($20)*($23);
  var $25=$1;
  var $26=(($25+4)|0);
  var $27=HEAPF32[(($26)>>2)];
  var $28=$2;
  var $29=(($28+4)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=($27)*($30);
  var $32=($24)+($31);
  __ZN6b2Vec2C1Eff($agg_result, $17, $32);
  return;
}
function __ZN12b2EPCollider21ComputeEdgeSeparationEv($agg_result, $this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $s;
      var $2=__stackBase__;
      $1=$this;
      var $3=$1;
      var $4=(($agg_result)|0);
      HEAP32[(($4)>>2)]=1;
      var $5=(($3+248)|0);
      var $6=HEAP8[($5)];
      var $7=(($6) & 1);
      var $8=$7 ? 0 : 1;
      var $9=(($agg_result+4)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=(($agg_result+8)|0);
      HEAPF32[(($10)>>2)]=3.4028234663852886e+38;
      $i=0;
      label = 2; break;
    case 2: 
      var $12=$i;
      var $13=(($3)|0);
      var $14=(($13+128)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|(0)) < (($15)|(0));
      if ($16) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $18=(($3+212)|0);
      var $19=$i;
      var $20=(($3)|0);
      var $21=(($20)|0);
      var $22=(($21+($19<<3))|0);
      var $23=(($3+164)|0);
      __ZmiRK6b2Vec2S1_($2, $22, $23);
      var $24=__Z5b2DotRK6b2Vec2S1_($18, $2);
      $s=$24;
      var $25=$s;
      var $26=(($agg_result+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      var $28=$25 < $27;
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$s;
      var $31=(($agg_result+8)|0);
      HEAPF32[(($31)>>2)]=$30;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $34=$i;
      var $35=((($34)+(1))|0);
      $i=$35;
      label = 2; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2EPCollider24ComputePolygonSeparationEv($agg_result, $this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $perp=__stackBase__;
      var $i;
      var $n=(__stackBase__)+(8);
      var $s1;
      var $2=(__stackBase__)+(16);
      var $s2;
      var $3=(__stackBase__)+(24);
      var $s;
      var $4=(__stackBase__)+(32);
      var $5=(__stackBase__)+(40);
      $1=$this;
      var $6=$1;
      var $7=(($agg_result)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=(($agg_result+4)|0);
      HEAP32[(($8)>>2)]=-1;
      var $9=(($agg_result+8)|0);
      HEAPF32[(($9)>>2)]=-3.4028234663852886e+38;
      var $10=(($6+212)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      var $13=(-$12);
      var $14=(($6+212)|0);
      var $15=(($14)|0);
      var $16=HEAPF32[(($15)>>2)];
      __ZN6b2Vec2C1Eff($perp, $13, $16);
      $i=0;
      label = 2; break;
    case 2: 
      var $18=$i;
      var $19=(($6)|0);
      var $20=(($19+128)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18)|(0)) < (($21)|(0));
      if ($22) { label = 3; break; } else { label = 16; break; }
    case 3: 
      var $24=$i;
      var $25=(($6)|0);
      var $26=(($25+64)|0);
      var $27=(($26+($24<<3))|0);
      __ZNK6b2Vec2ngEv($n, $27);
      var $28=$i;
      var $29=(($6)|0);
      var $30=(($29)|0);
      var $31=(($30+($28<<3))|0);
      var $32=(($6+164)|0);
      __ZmiRK6b2Vec2S1_($2, $31, $32);
      var $33=__Z5b2DotRK6b2Vec2S1_($n, $2);
      $s1=$33;
      var $34=$i;
      var $35=(($6)|0);
      var $36=(($35)|0);
      var $37=(($36+($34<<3))|0);
      var $38=(($6+172)|0);
      __ZmiRK6b2Vec2S1_($3, $37, $38);
      var $39=__Z5b2DotRK6b2Vec2S1_($n, $3);
      $s2=$39;
      var $40=$s1;
      var $41=$s2;
      var $42=__Z5b2MinIfET_S0_S0_($40, $41);
      $s=$42;
      var $43=$s;
      var $44=(($6+244)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=$43 > $45;
      if ($46) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $48=(($agg_result)|0);
      HEAP32[(($48)>>2)]=2;
      var $49=$i;
      var $50=(($agg_result+4)|0);
      HEAP32[(($50)>>2)]=$49;
      var $51=$s;
      var $52=(($agg_result+8)|0);
      HEAPF32[(($52)>>2)]=$51;
      label = 17; break;
    case 5: 
      var $54=__Z5b2DotRK6b2Vec2S1_($n, $perp);
      var $55=$54 >= 0;
      if ($55) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $57=(($6+236)|0);
      __ZmiRK6b2Vec2S1_($4, $n, $57);
      var $58=(($6+212)|0);
      var $59=__Z5b2DotRK6b2Vec2S1_($4, $58);
      var $60=$59 < -0.03490658849477768;
      if ($60) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 15; break;
    case 8: 
      label = 12; break;
    case 9: 
      var $64=(($6+228)|0);
      __ZmiRK6b2Vec2S1_($5, $n, $64);
      var $65=(($6+212)|0);
      var $66=__Z5b2DotRK6b2Vec2S1_($5, $65);
      var $67=$66 < -0.03490658849477768;
      if ($67) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 15; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $71=$s;
      var $72=(($agg_result+8)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$71 > $73;
      if ($74) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $76=(($agg_result)|0);
      HEAP32[(($76)>>2)]=2;
      var $77=$i;
      var $78=(($agg_result+4)|0);
      HEAP32[(($78)>>2)]=$77;
      var $79=$s;
      var $80=(($agg_result+8)|0);
      HEAPF32[(($80)>>2)]=$79;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $83=$i;
      var $84=((($83)+(1))|0);
      $i=$84;
      label = 2; break;
    case 16: 
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2ClipVertexC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2ClipVertexC2Ev($2);
  return;
}
function __ZN15b2ReferenceFaceC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ReferenceFaceC2Ev($2);
  return;
}
function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edgeA, $xfA, $polygonB, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 252)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $collider=__stackBase__;
  $1=$manifold;
  $2=$edgeA;
  $3=$xfA;
  $4=$polygonB;
  $5=$xfB;
  __ZN12b2EPColliderC1Ev($collider);
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider, $6, $7, $8, $9, $10);
  STACKTOP = __stackBase__;
  return;
}
function __ZN12b2EPColliderC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2EPColliderC2Ev($2);
  return;
}
function __ZN12b2EPColliderC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN13b2TempPolygonC1Ev($3);
  var $4=(($2+132)|0);
  __ZN11b2TransformC1Ev($4);
  var $5=(($2+148)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+156)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=(($2+164)|0);
  __ZN6b2Vec2C1Ev($7);
  var $8=(($2+172)|0);
  __ZN6b2Vec2C1Ev($8);
  var $9=(($2+180)|0);
  __ZN6b2Vec2C1Ev($9);
  var $10=(($2+188)|0);
  __ZN6b2Vec2C1Ev($10);
  var $11=(($2+196)|0);
  __ZN6b2Vec2C1Ev($11);
  var $12=(($2+204)|0);
  __ZN6b2Vec2C1Ev($12);
  var $13=(($2+212)|0);
  __ZN6b2Vec2C1Ev($13);
  var $14=(($2+228)|0);
  __ZN6b2Vec2C1Ev($14);
  var $15=(($2+236)|0);
  __ZN6b2Vec2C1Ev($15);
  return;
}
function __ZN13b2TempPolygonC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2TempPolygonC2Ev($2);
  return;
}
function __ZN11b2TransformC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2TransformC2Ev($2);
  return;
}
function __ZN6b2Vec2C1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec2C2Ev($2);
  return;
}
function __ZN11b2TransformC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN5b2RotC1Ev($4);
  return;
}
function __ZN5b2RotC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN5b2RotC2Ev($2);
  return;
}
function __ZN13b2TempPolygonC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=(($4+64)|0);
      var $7 = $4;label = 2; break;
    case 2: 
      var $7;
      __ZN6b2Vec2C1Ev($7);
      var $8=(($7+8)|0);
      var $9=(($8)|(0))==(($5)|(0));
      if ($9) { label = 3; break; } else { var $7 = $8;label = 2; break; }
    case 3: 
      var $11=(($2+64)|0);
      var $12=(($11)|0);
      var $13=(($12+64)|0);
      var $15 = $12;label = 4; break;
    case 4: 
      var $15;
      __ZN6b2Vec2C1Ev($15);
      var $16=(($15+8)|0);
      var $17=(($16)|(0))==(($13)|(0));
      if ($17) { label = 5; break; } else { var $15 = $16;label = 4; break; }
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2ReferenceFaceC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+16)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+24)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+32)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=(($2+44)|0);
  __ZN6b2Vec2C1Ev($7);
  return;
}
function __ZN12b2ClipVertexC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  return;
}
function __Z6b2MulTRK5b2RotS1_($agg_result, $q, $r) {
  var label = 0;
  var $1;
  var $2;
  $1=$q;
  $2=$r;
  __ZN5b2RotC1Ev($agg_result);
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)*($8);
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)*($15);
  var $17=($9)-($16);
  var $18=(($agg_result)|0);
  HEAPF32[(($18)>>2)]=$17;
  var $19=$1;
  var $20=(($19+4)|0);
  var $21=HEAPF32[(($20)>>2)];
  var $22=$2;
  var $23=(($22+4)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=($21)*($24);
  var $26=$1;
  var $27=(($26)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$2;
  var $30=(($29)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=($28)*($31);
  var $33=($25)+($32);
  var $34=(($agg_result+4)|0);
  HEAPF32[(($34)>>2)]=$33;
  return;
}
function __Z6b2MulTRK5b2RotRK6b2Vec2($agg_result, $q, $v) {
  var label = 0;
  var $1;
  var $2;
  $1=$q;
  $2=$v;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)*($8);
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)*($15);
  var $17=($9)+($16);
  var $18=$1;
  var $19=(($18)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=(-$20);
  var $22=$2;
  var $23=(($22)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=($21)*($24);
  var $26=$1;
  var $27=(($26+4)|0);
  var $28=HEAPF32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+4)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=($28)*($31);
  var $33=($25)+($32);
  __ZN6b2Vec2C1Eff($agg_result, $17, $33);
  return;
}
function __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold, $polyA, $xfA, $polyB, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 212)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $totalRadius;
      var $edgeA=__stackBase__;
      var $separationA;
      var $edgeB=(__stackBase__)+(4);
      var $separationB;
      var $poly1;
      var $poly2;
      var $xf1=(__stackBase__)+(8);
      var $xf2=(__stackBase__)+(24);
      var $edge1;
      var $flip;
      var $k_relativeTol;
      var $k_absoluteTol;
      var $incidentEdge=(__stackBase__)+(40);
      var $count1;
      var $vertices1;
      var $iv1;
      var $iv2;
      var $v11=(__stackBase__)+(64);
      var $v12=(__stackBase__)+(72);
      var $localTangent=(__stackBase__)+(80);
      var $localNormal=(__stackBase__)+(88);
      var $planePoint=(__stackBase__)+(96);
      var $6=(__stackBase__)+(104);
      var $tangent=(__stackBase__)+(112);
      var $normal=(__stackBase__)+(120);
      var $7=(__stackBase__)+(128);
      var $8=(__stackBase__)+(136);
      var $frontOffset;
      var $sideOffset1;
      var $sideOffset2;
      var $clipPoints1=(__stackBase__)+(144);
      var $clipPoints2=(__stackBase__)+(168);
      var $np;
      var $9=(__stackBase__)+(192);
      var $pointCount;
      var $i;
      var $separation;
      var $cp;
      var $10=(__stackBase__)+(200);
      var $cf=(__stackBase__)+(208);
      $1=$manifold;
      $2=$polyA;
      $3=$xfA;
      $4=$polyB;
      $5=$xfB;
      var $11=$1;
      var $12=(($11+60)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=$2;
      var $14=$13;
      var $15=(($14+8)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=$4;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAPF32[(($19)>>2)];
      var $21=($16)+($20);
      $totalRadius=$21;
      HEAP32[(($edgeA)>>2)]=0;
      var $22=$2;
      var $23=$3;
      var $24=$4;
      var $25=$5;
      var $26=__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA, $22, $23, $24, $25);
      $separationA=$26;
      var $27=$separationA;
      var $28=$totalRadius;
      var $29=$27 > $28;
      if ($29) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 30; break;
    case 3: 
      HEAP32[(($edgeB)>>2)]=0;
      var $32=$4;
      var $33=$5;
      var $34=$2;
      var $35=$3;
      var $36=__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB, $32, $33, $34, $35);
      $separationB=$36;
      var $37=$separationB;
      var $38=$totalRadius;
      var $39=$37 > $38;
      if ($39) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 30; break;
    case 5: 
      __ZN11b2TransformC1Ev($xf1);
      __ZN11b2TransformC1Ev($xf2);
      $k_relativeTol=0.9800000190734863;
      $k_absoluteTol=0.0010000000474974513;
      var $42=$separationB;
      var $43=$separationA;
      var $44=($43)*(0.9800000190734863);
      var $45=($44)+(0.0010000000474974513);
      var $46=$42 > $45;
      if ($46) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $48=$4;
      $poly1=$48;
      var $49=$2;
      $poly2=$49;
      var $50=$5;
      var $51=$xf1;
      var $52=$50;
      assert(16 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];HEAP32[((($51)+(12))>>2)]=HEAP32[((($52)+(12))>>2)];
      var $53=$3;
      var $54=$xf2;
      var $55=$53;
      assert(16 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];HEAP32[((($54)+(12))>>2)]=HEAP32[((($55)+(12))>>2)];
      var $56=HEAP32[(($edgeB)>>2)];
      $edge1=$56;
      var $57=$1;
      var $58=(($57+56)|0);
      HEAP32[(($58)>>2)]=2;
      $flip=1;
      label = 8; break;
    case 7: 
      var $60=$2;
      $poly1=$60;
      var $61=$4;
      $poly2=$61;
      var $62=$3;
      var $63=$xf1;
      var $64=$62;
      assert(16 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];HEAP32[((($63)+(12))>>2)]=HEAP32[((($64)+(12))>>2)];
      var $65=$5;
      var $66=$xf2;
      var $67=$65;
      assert(16 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];HEAP32[((($66)+(12))>>2)]=HEAP32[((($67)+(12))>>2)];
      var $68=HEAP32[(($edgeA)>>2)];
      $edge1=$68;
      var $69=$1;
      var $70=(($69+56)|0);
      HEAP32[(($70)>>2)]=1;
      $flip=0;
      label = 8; break;
    case 8: 
      var $72=(($incidentEdge)|0);
      var $73=(($72+24)|0);
      var $75 = $72;label = 9; break;
    case 9: 
      var $75;
      __ZN12b2ClipVertexC1Ev($75);
      var $76=(($75+12)|0);
      var $77=(($76)|(0))==(($73)|(0));
      if ($77) { label = 10; break; } else { var $75 = $76;label = 9; break; }
    case 10: 
      var $79=(($incidentEdge)|0);
      var $80=$poly1;
      var $81=$edge1;
      var $82=$poly2;
      __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($79, $80, $xf1, $81, $82, $xf2);
      var $83=$poly1;
      var $84=(($83+148)|0);
      var $85=HEAP32[(($84)>>2)];
      $count1=$85;
      var $86=$poly1;
      var $87=(($86+20)|0);
      var $88=(($87)|0);
      $vertices1=$88;
      var $89=$edge1;
      $iv1=$89;
      var $90=$edge1;
      var $91=((($90)+(1))|0);
      var $92=$count1;
      var $93=(($91)|(0)) < (($92)|(0));
      if ($93) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $95=$edge1;
      var $96=((($95)+(1))|0);
      var $99 = $96;label = 13; break;
    case 12: 
      var $99 = 0;label = 13; break;
    case 13: 
      var $99;
      $iv2=$99;
      var $100=$iv1;
      var $101=$vertices1;
      var $102=(($101+($100<<3))|0);
      var $103=$v11;
      var $104=$102;
      assert(8 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
      var $105=$iv2;
      var $106=$vertices1;
      var $107=(($106+($105<<3))|0);
      var $108=$v12;
      var $109=$107;
      assert(8 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($localTangent, $v12, $v11);
      var $110=__ZN6b2Vec29NormalizeEv($localTangent);
      __Z7b2CrossRK6b2Vec2f($localNormal, $localTangent, 1);
      __ZplRK6b2Vec2S1_($6, $v11, $v12);
      __ZmlfRK6b2Vec2($planePoint, 0.5, $6);
      var $111=(($xf1+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($tangent, $111, $localTangent);
      __Z7b2CrossRK6b2Vec2f($normal, $tangent, 1);
      __Z5b2MulRK11b2TransformRK6b2Vec2($7, $xf1, $v11);
      var $112=$v11;
      var $113=$7;
      assert(8 % 1 === 0);HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($112)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $xf1, $v12);
      var $114=$v12;
      var $115=$8;
      assert(8 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];
      var $116=__Z5b2DotRK6b2Vec2S1_($normal, $v11);
      $frontOffset=$116;
      var $117=__Z5b2DotRK6b2Vec2S1_($tangent, $v11);
      var $118=(-$117);
      var $119=$totalRadius;
      var $120=($118)+($119);
      $sideOffset1=$120;
      var $121=__Z5b2DotRK6b2Vec2S1_($tangent, $v12);
      var $122=$totalRadius;
      var $123=($121)+($122);
      $sideOffset2=$123;
      var $124=(($clipPoints1)|0);
      var $125=(($124+24)|0);
      var $127 = $124;label = 14; break;
    case 14: 
      var $127;
      __ZN12b2ClipVertexC1Ev($127);
      var $128=(($127+12)|0);
      var $129=(($128)|(0))==(($125)|(0));
      if ($129) { label = 15; break; } else { var $127 = $128;label = 14; break; }
    case 15: 
      var $131=(($clipPoints2)|0);
      var $132=(($131+24)|0);
      var $134 = $131;label = 16; break;
    case 16: 
      var $134;
      __ZN12b2ClipVertexC1Ev($134);
      var $135=(($134+12)|0);
      var $136=(($135)|(0))==(($132)|(0));
      if ($136) { label = 17; break; } else { var $134 = $135;label = 16; break; }
    case 17: 
      var $138=(($clipPoints1)|0);
      var $139=(($incidentEdge)|0);
      __ZNK6b2Vec2ngEv($9, $tangent);
      var $140=$sideOffset1;
      var $141=$iv1;
      var $142=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($138, $139, $9, $140, $141);
      $np=$142;
      var $143=$np;
      var $144=(($143)|(0)) < 2;
      if ($144) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 30; break;
    case 19: 
      var $147=(($clipPoints2)|0);
      var $148=(($clipPoints1)|0);
      var $149=$sideOffset2;
      var $150=$iv2;
      var $151=__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($147, $148, $tangent, $149, $150);
      $np=$151;
      var $152=$np;
      var $153=(($152)|(0)) < 2;
      if ($153) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 30; break;
    case 21: 
      var $156=$1;
      var $157=(($156+40)|0);
      var $158=$157;
      var $159=$localNormal;
      assert(8 % 1 === 0);HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($158)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];
      var $160=$1;
      var $161=(($160+48)|0);
      var $162=$161;
      var $163=$planePoint;
      assert(8 % 1 === 0);HEAP32[(($162)>>2)]=HEAP32[(($163)>>2)];HEAP32[((($162)+(4))>>2)]=HEAP32[((($163)+(4))>>2)];
      $pointCount=0;
      $i=0;
      label = 22; break;
    case 22: 
      var $165=$i;
      var $166=(($165)|(0)) < 2;
      if ($166) { label = 23; break; } else { label = 29; break; }
    case 23: 
      var $168=$i;
      var $169=(($clipPoints2+((($168)*(12))&-1))|0);
      var $170=(($169)|0);
      var $171=__Z5b2DotRK6b2Vec2S1_($normal, $170);
      var $172=$frontOffset;
      var $173=($171)-($172);
      $separation=$173;
      var $174=$separation;
      var $175=$totalRadius;
      var $176=$174 <= $175;
      if ($176) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $178=$1;
      var $179=(($178)|0);
      var $180=(($179)|0);
      var $181=$pointCount;
      var $182=(($180+((($181)*(20))&-1))|0);
      $cp=$182;
      var $183=$cp;
      var $184=(($183)|0);
      var $185=$i;
      var $186=(($clipPoints2+((($185)*(12))&-1))|0);
      var $187=(($186)|0);
      __Z6b2MulTRK11b2TransformRK6b2Vec2($10, $xf2, $187);
      var $188=$184;
      var $189=$10;
      assert(8 % 1 === 0);HEAP32[(($188)>>2)]=HEAP32[(($189)>>2)];HEAP32[((($188)+(4))>>2)]=HEAP32[((($189)+(4))>>2)];
      var $190=$cp;
      var $191=(($190+16)|0);
      var $192=$i;
      var $193=(($clipPoints2+((($192)*(12))&-1))|0);
      var $194=(($193+8)|0);
      var $195=$191;
      var $196=$194;
      assert(4 % 1 === 0);HEAP32[(($195)>>2)]=HEAP32[(($196)>>2)];
      var $197=$flip;
      var $198=(($197 << 24) >> 24)!=0;
      if ($198) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $200=$cp;
      var $201=(($200+16)|0);
      var $202=$201;
      var $203=$cf;
      var $204=$202;
      assert(4 % 1 === 0);HEAP8[($203)]=HEAP8[($204)];HEAP8[((($203)+(1))|0)]=HEAP8[((($204)+(1))|0)];HEAP8[((($203)+(2))|0)]=HEAP8[((($204)+(2))|0)];HEAP8[((($203)+(3))|0)]=HEAP8[((($204)+(3))|0)];
      var $205=(($cf+1)|0);
      var $206=HEAP8[($205)];
      var $207=$cp;
      var $208=(($207+16)|0);
      var $209=$208;
      var $210=(($209)|0);
      HEAP8[($210)]=$206;
      var $211=(($cf)|0);
      var $212=HEAP8[($211)];
      var $213=$cp;
      var $214=(($213+16)|0);
      var $215=$214;
      var $216=(($215+1)|0);
      HEAP8[($216)]=$212;
      var $217=(($cf+3)|0);
      var $218=HEAP8[($217)];
      var $219=$cp;
      var $220=(($219+16)|0);
      var $221=$220;
      var $222=(($221+2)|0);
      HEAP8[($222)]=$218;
      var $223=(($cf+2)|0);
      var $224=HEAP8[($223)];
      var $225=$cp;
      var $226=(($225+16)|0);
      var $227=$226;
      var $228=(($227+3)|0);
      HEAP8[($228)]=$224;
      label = 26; break;
    case 26: 
      var $230=$pointCount;
      var $231=((($230)+(1))|0);
      $pointCount=$231;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $234=$i;
      var $235=((($234)+(1))|0);
      $i=$235;
      label = 22; break;
    case 29: 
      var $237=$pointCount;
      var $238=$1;
      var $239=(($238+60)|0);
      HEAP32[(($239)>>2)]=$237;
      label = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex, $poly1, $xf1, $poly2, $xf2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $count1;
      var $normals1;
      var $d=__stackBase__;
      var $7=(__stackBase__)+(8);
      var $8=(__stackBase__)+(16);
      var $dLocal1=(__stackBase__)+(24);
      var $edge;
      var $maxDot;
      var $i;
      var $dot;
      var $s;
      var $prevEdge;
      var $sPrev;
      var $nextEdge;
      var $sNext;
      var $bestEdge;
      var $bestSeparation;
      var $increment;
      $2=$edgeIndex;
      $3=$poly1;
      $4=$xf1;
      $5=$poly2;
      $6=$xf2;
      var $9=$3;
      var $10=(($9+148)|0);
      var $11=HEAP32[(($10)>>2)];
      $count1=$11;
      var $12=$3;
      var $13=(($12+84)|0);
      var $14=(($13)|0);
      $normals1=$14;
      var $15=$6;
      var $16=$5;
      var $17=(($16+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($7, $15, $17);
      var $18=$4;
      var $19=$3;
      var $20=(($19+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $18, $20);
      __ZmiRK6b2Vec2S1_($d, $7, $8);
      var $21=$4;
      var $22=(($21+8)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($dLocal1, $22, $d);
      $edge=0;
      $maxDot=-3.4028234663852886e+38;
      $i=0;
      label = 2; break;
    case 2: 
      var $24=$i;
      var $25=$count1;
      var $26=(($24)|(0)) < (($25)|(0));
      if ($26) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $28=$i;
      var $29=$normals1;
      var $30=(($29+($28<<3))|0);
      var $31=__Z5b2DotRK6b2Vec2S1_($30, $dLocal1);
      $dot=$31;
      var $32=$dot;
      var $33=$maxDot;
      var $34=$32 > $33;
      if ($34) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $36=$dot;
      $maxDot=$36;
      var $37=$i;
      $edge=$37;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      $i=$41;
      label = 2; break;
    case 7: 
      var $43=$3;
      var $44=$4;
      var $45=$edge;
      var $46=$5;
      var $47=$6;
      var $48=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($43, $44, $45, $46, $47);
      $s=$48;
      var $49=$edge;
      var $50=((($49)-(1))|0);
      var $51=(($50)|(0)) >= 0;
      if ($51) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $53=$edge;
      var $54=((($53)-(1))|0);
      var $59 = $54;label = 10; break;
    case 9: 
      var $56=$count1;
      var $57=((($56)-(1))|0);
      var $59 = $57;label = 10; break;
    case 10: 
      var $59;
      $prevEdge=$59;
      var $60=$3;
      var $61=$4;
      var $62=$prevEdge;
      var $63=$5;
      var $64=$6;
      var $65=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($60, $61, $62, $63, $64);
      $sPrev=$65;
      var $66=$edge;
      var $67=((($66)+(1))|0);
      var $68=$count1;
      var $69=(($67)|(0)) < (($68)|(0));
      if ($69) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $71=$edge;
      var $72=((($71)+(1))|0);
      var $75 = $72;label = 13; break;
    case 12: 
      var $75 = 0;label = 13; break;
    case 13: 
      var $75;
      $nextEdge=$75;
      var $76=$3;
      var $77=$4;
      var $78=$nextEdge;
      var $79=$5;
      var $80=$6;
      var $81=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($76, $77, $78, $79, $80);
      $sNext=$81;
      var $82=$sPrev;
      var $83=$s;
      var $84=$82 > $83;
      if ($84) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $86=$sPrev;
      var $87=$sNext;
      var $88=$86 > $87;
      if ($88) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $increment=-1;
      var $90=$prevEdge;
      $bestEdge=$90;
      var $91=$sPrev;
      $bestSeparation=$91;
      label = 20; break;
    case 16: 
      var $93=$sNext;
      var $94=$s;
      var $95=$93 > $94;
      if ($95) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $increment=1;
      var $97=$nextEdge;
      $bestEdge=$97;
      var $98=$sNext;
      $bestSeparation=$98;
      label = 19; break;
    case 18: 
      var $100=$edge;
      var $101=$2;
      HEAP32[(($101)>>2)]=$100;
      var $102=$s;
      $1=$102;
      label = 35; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $106=$increment;
      var $107=(($106)|(0))==-1;
      if ($107) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $109=$bestEdge;
      var $110=((($109)-(1))|0);
      var $111=(($110)|(0)) >= 0;
      if ($111) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $113=$bestEdge;
      var $114=((($113)-(1))|0);
      var $119 = $114;label = 25; break;
    case 24: 
      var $116=$count1;
      var $117=((($116)-(1))|0);
      var $119 = $117;label = 25; break;
    case 25: 
      var $119;
      $edge=$119;
      label = 30; break;
    case 26: 
      var $121=$bestEdge;
      var $122=((($121)+(1))|0);
      var $123=$count1;
      var $124=(($122)|(0)) < (($123)|(0));
      if ($124) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $126=$bestEdge;
      var $127=((($126)+(1))|0);
      var $130 = $127;label = 29; break;
    case 28: 
      var $130 = 0;label = 29; break;
    case 29: 
      var $130;
      $edge=$130;
      label = 30; break;
    case 30: 
      var $132=$3;
      var $133=$4;
      var $134=$edge;
      var $135=$5;
      var $136=$6;
      var $137=__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($132, $133, $134, $135, $136);
      $s=$137;
      var $138=$s;
      var $139=$bestSeparation;
      var $140=$138 > $139;
      if ($140) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $142=$edge;
      $bestEdge=$142;
      var $143=$s;
      $bestSeparation=$143;
      label = 33; break;
    case 32: 
      label = 34; break;
    case 33: 
      label = 21; break;
    case 34: 
      var $147=$bestEdge;
      var $148=$2;
      HEAP32[(($148)>>2)]=$147;
      var $149=$bestSeparation;
      $1=$149;
      label = 35; break;
    case 35: 
      var $151=$1;
      STACKTOP = __stackBase__;
      return $151;
    default: assert(0, "bad label: " + label);
  }
}
function __Z7b2CrossRK6b2Vec2f($agg_result, $a, $s) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$s;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($3)*($6);
  var $8=$2;
  var $9=(-$8);
  var $10=$1;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=($9)*($12);
  __ZN6b2Vec2C1Eff($agg_result, $7, $13);
  return;
}
function __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($this, $manifold, $xfA, $radiusA, $xfB, $radiusB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 240)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $pointA=__stackBase__;
      var $pointB=(__stackBase__)+(8);
      var $7=(__stackBase__)+(16);
      var $cA=(__stackBase__)+(24);
      var $8=(__stackBase__)+(32);
      var $cB=(__stackBase__)+(40);
      var $9=(__stackBase__)+(48);
      var $10=(__stackBase__)+(56);
      var $11=(__stackBase__)+(64);
      var $12=(__stackBase__)+(72);
      var $planePoint=(__stackBase__)+(80);
      var $i;
      var $clipPoint=(__stackBase__)+(88);
      var $cA1=(__stackBase__)+(96);
      var $13=(__stackBase__)+(104);
      var $14=(__stackBase__)+(112);
      var $cB2=(__stackBase__)+(120);
      var $15=(__stackBase__)+(128);
      var $16=(__stackBase__)+(136);
      var $17=(__stackBase__)+(144);
      var $18=(__stackBase__)+(152);
      var $planePoint3=(__stackBase__)+(160);
      var $i4;
      var $clipPoint5=(__stackBase__)+(168);
      var $cB6=(__stackBase__)+(176);
      var $19=(__stackBase__)+(184);
      var $20=(__stackBase__)+(192);
      var $cA7=(__stackBase__)+(200);
      var $21=(__stackBase__)+(208);
      var $22=(__stackBase__)+(216);
      var $23=(__stackBase__)+(224);
      var $24=(__stackBase__)+(232);
      $1=$this;
      $2=$manifold;
      $3=$xfA;
      $4=$radiusA;
      $5=$xfB;
      $6=$radiusB;
      var $25=$1;
      var $26=$2;
      var $27=(($26+60)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==0;
      if ($29) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 17; break;
    case 3: 
      var $32=$2;
      var $33=(($32+56)|0);
      var $34=HEAP32[(($33)>>2)];
      if ((($34)|(0))==0) {
        label = 4; break;
      }
      else if ((($34)|(0))==1) {
        label = 7; break;
      }
      else if ((($34)|(0))==2) {
        label = 12; break;
      }
      else {
      label = 17; break;
      }
    case 4: 
      var $36=(($25)|0);
      __ZN6b2Vec23SetEff($36, 1, 0);
      var $37=$3;
      var $38=$2;
      var $39=(($38+48)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $37, $39);
      var $40=$5;
      var $41=$2;
      var $42=(($41)|0);
      var $43=(($42)|0);
      var $44=(($43)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $40, $44);
      var $45=__Z17b2DistanceSquaredRK6b2Vec2S1_($pointA, $pointB);
      var $46=$45 > 1.4210854715202004e-14;
      if ($46) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $48=(($25)|0);
      __ZmiRK6b2Vec2S1_($7, $pointB, $pointA);
      var $49=$48;
      var $50=$7;
      assert(8 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];
      var $51=(($25)|0);
      var $52=__ZN6b2Vec29NormalizeEv($51);
      label = 6; break;
    case 6: 
      var $54=$4;
      var $55=(($25)|0);
      __ZmlfRK6b2Vec2($8, $54, $55);
      __ZplRK6b2Vec2S1_($cA, $pointA, $8);
      var $56=$6;
      var $57=(($25)|0);
      __ZmlfRK6b2Vec2($9, $56, $57);
      __ZmiRK6b2Vec2S1_($cB, $pointB, $9);
      var $58=(($25+8)|0);
      var $59=(($58)|0);
      __ZplRK6b2Vec2S1_($11, $cA, $cB);
      __ZmlfRK6b2Vec2($10, 0.5, $11);
      var $60=$59;
      var $61=$10;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      label = 17; break;
    case 7: 
      var $63=(($25)|0);
      var $64=$3;
      var $65=(($64+8)|0);
      var $66=$2;
      var $67=(($66+40)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($12, $65, $67);
      var $68=$63;
      var $69=$12;
      assert(8 % 1 === 0);HEAP32[(($68)>>2)]=HEAP32[(($69)>>2)];HEAP32[((($68)+(4))>>2)]=HEAP32[((($69)+(4))>>2)];
      var $70=$3;
      var $71=$2;
      var $72=(($71+48)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint, $70, $72);
      $i=0;
      label = 8; break;
    case 8: 
      var $74=$i;
      var $75=$2;
      var $76=(($75+60)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)|(0)) < (($77)|(0));
      if ($78) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $80=$5;
      var $81=$i;
      var $82=$2;
      var $83=(($82)|0);
      var $84=(($83+((($81)*(20))&-1))|0);
      var $85=(($84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint, $80, $85);
      var $86=$4;
      __ZmiRK6b2Vec2S1_($14, $clipPoint, $planePoint);
      var $87=(($25)|0);
      var $88=__Z5b2DotRK6b2Vec2S1_($14, $87);
      var $89=($86)-($88);
      var $90=(($25)|0);
      __ZmlfRK6b2Vec2($13, $89, $90);
      __ZplRK6b2Vec2S1_($cA1, $clipPoint, $13);
      var $91=$6;
      var $92=(($25)|0);
      __ZmlfRK6b2Vec2($15, $91, $92);
      __ZmiRK6b2Vec2S1_($cB2, $clipPoint, $15);
      var $93=$i;
      var $94=(($25+8)|0);
      var $95=(($94+($93<<3))|0);
      __ZplRK6b2Vec2S1_($17, $cA1, $cB2);
      __ZmlfRK6b2Vec2($16, 0.5, $17);
      var $96=$95;
      var $97=$16;
      assert(8 % 1 === 0);HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[((($96)+(4))>>2)]=HEAP32[((($97)+(4))>>2)];
      label = 10; break;
    case 10: 
      var $99=$i;
      var $100=((($99)+(1))|0);
      $i=$100;
      label = 8; break;
    case 11: 
      label = 17; break;
    case 12: 
      var $103=(($25)|0);
      var $104=$5;
      var $105=(($104+8)|0);
      var $106=$2;
      var $107=(($106+40)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($18, $105, $107);
      var $108=$103;
      var $109=$18;
      assert(8 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];
      var $110=$5;
      var $111=$2;
      var $112=(($111+48)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint3, $110, $112);
      $i4=0;
      label = 13; break;
    case 13: 
      var $114=$i4;
      var $115=$2;
      var $116=(($115+60)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($114)|(0)) < (($117)|(0));
      if ($118) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $120=$3;
      var $121=$i4;
      var $122=$2;
      var $123=(($122)|0);
      var $124=(($123+((($121)*(20))&-1))|0);
      var $125=(($124)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint5, $120, $125);
      var $126=$6;
      __ZmiRK6b2Vec2S1_($20, $clipPoint5, $planePoint3);
      var $127=(($25)|0);
      var $128=__Z5b2DotRK6b2Vec2S1_($20, $127);
      var $129=($126)-($128);
      var $130=(($25)|0);
      __ZmlfRK6b2Vec2($19, $129, $130);
      __ZplRK6b2Vec2S1_($cB6, $clipPoint5, $19);
      var $131=$4;
      var $132=(($25)|0);
      __ZmlfRK6b2Vec2($21, $131, $132);
      __ZmiRK6b2Vec2S1_($cA7, $clipPoint5, $21);
      var $133=$i4;
      var $134=(($25+8)|0);
      var $135=(($134+($133<<3))|0);
      __ZplRK6b2Vec2S1_($23, $cA7, $cB6);
      __ZmlfRK6b2Vec2($22, 0.5, $23);
      var $136=$135;
      var $137=$22;
      assert(8 % 1 === 0);HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[((($136)+(4))>>2)]=HEAP32[((($137)+(4))>>2)];
      label = 15; break;
    case 15: 
      var $139=$i4;
      var $140=((($139)+(1))|0);
      $i4=$140;
      label = 13; break;
    case 16: 
      var $142=(($25)|0);
      var $143=(($25)|0);
      __ZNK6b2Vec2ngEv($24, $143);
      var $144=$142;
      var $145=$24;
      assert(8 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($c, $poly1, $xf1, $edge1, $poly2, $xf2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $normals1;
      var $count2;
      var $vertices2;
      var $normals2;
      var $normal1=__stackBase__;
      var $7=(__stackBase__)+(8);
      var $index;
      var $minDot;
      var $i;
      var $dot;
      var $i1;
      var $i2;
      var $8=(__stackBase__)+(16);
      var $9=(__stackBase__)+(24);
      $1=$c;
      $2=$poly1;
      $3=$xf1;
      $4=$edge1;
      $5=$poly2;
      $6=$xf2;
      var $10=$2;
      var $11=(($10+84)|0);
      var $12=(($11)|0);
      $normals1=$12;
      var $13=$5;
      var $14=(($13+148)|0);
      var $15=HEAP32[(($14)>>2)];
      $count2=$15;
      var $16=$5;
      var $17=(($16+20)|0);
      var $18=(($17)|0);
      $vertices2=$18;
      var $19=$5;
      var $20=(($19+84)|0);
      var $21=(($20)|0);
      $normals2=$21;
      var $22=$4;
      var $23=0 <= (($22)|(0));
      if ($23) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $25=$4;
      var $26=$2;
      var $27=(($26+148)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($25)|(0)) < (($28)|(0));
      if ($29) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5254740)|0), 151, ((5263772)|0), ((5256448)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $34=$6;
      var $35=(($34+8)|0);
      var $36=$3;
      var $37=(($36+8)|0);
      var $38=$4;
      var $39=$normals1;
      var $40=(($39+($38<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $37, $40);
      __Z6b2MulTRK5b2RotRK6b2Vec2($normal1, $35, $7);
      $index=0;
      $minDot=3.4028234663852886e+38;
      $i=0;
      label = 6; break;
    case 6: 
      var $42=$i;
      var $43=$count2;
      var $44=(($42)|(0)) < (($43)|(0));
      if ($44) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $46=$i;
      var $47=$normals2;
      var $48=(($47+($46<<3))|0);
      var $49=__Z5b2DotRK6b2Vec2S1_($normal1, $48);
      $dot=$49;
      var $50=$dot;
      var $51=$minDot;
      var $52=$50 < $51;
      if ($52) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $54=$dot;
      $minDot=$54;
      var $55=$i;
      $index=$55;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $58=$i;
      var $59=((($58)+(1))|0);
      $i=$59;
      label = 6; break;
    case 11: 
      var $61=$index;
      $i1=$61;
      var $62=$i1;
      var $63=((($62)+(1))|0);
      var $64=$count2;
      var $65=(($63)|(0)) < (($64)|(0));
      if ($65) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $67=$i1;
      var $68=((($67)+(1))|0);
      var $71 = $68;label = 14; break;
    case 13: 
      var $71 = 0;label = 14; break;
    case 14: 
      var $71;
      $i2=$71;
      var $72=$1;
      var $73=(($72)|0);
      var $74=(($73)|0);
      var $75=$6;
      var $76=$i1;
      var $77=$vertices2;
      var $78=(($77+($76<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $75, $78);
      var $79=$74;
      var $80=$8;
      assert(8 % 1 === 0);HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];
      var $81=$4;
      var $82=(($81) & 255);
      var $83=$1;
      var $84=(($83)|0);
      var $85=(($84+8)|0);
      var $86=$85;
      var $87=(($86)|0);
      HEAP8[($87)]=$82;
      var $88=$i1;
      var $89=(($88) & 255);
      var $90=$1;
      var $91=(($90)|0);
      var $92=(($91+8)|0);
      var $93=$92;
      var $94=(($93+1)|0);
      HEAP8[($94)]=$89;
      var $95=$1;
      var $96=(($95)|0);
      var $97=(($96+8)|0);
      var $98=$97;
      var $99=(($98+2)|0);
      HEAP8[($99)]=1;
      var $100=$1;
      var $101=(($100)|0);
      var $102=(($101+8)|0);
      var $103=$102;
      var $104=(($103+3)|0);
      HEAP8[($104)]=0;
      var $105=$1;
      var $106=(($105+12)|0);
      var $107=(($106)|0);
      var $108=$6;
      var $109=$i2;
      var $110=$vertices2;
      var $111=(($110+($109<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($9, $108, $111);
      var $112=$107;
      var $113=$9;
      assert(8 % 1 === 0);HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($112)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];
      var $114=$4;
      var $115=(($114) & 255);
      var $116=$1;
      var $117=(($116+12)|0);
      var $118=(($117+8)|0);
      var $119=$118;
      var $120=(($119)|0);
      HEAP8[($120)]=$115;
      var $121=$i2;
      var $122=(($121) & 255);
      var $123=$1;
      var $124=(($123+12)|0);
      var $125=(($124+8)|0);
      var $126=$125;
      var $127=(($126+1)|0);
      HEAP8[($127)]=$122;
      var $128=$1;
      var $129=(($128+12)|0);
      var $130=(($129+8)|0);
      var $131=$130;
      var $132=(($131+2)|0);
      HEAP8[($132)]=1;
      var $133=$1;
      var $134=(($133+12)|0);
      var $135=(($134+8)|0);
      var $136=$135;
      var $137=(($136+3)|0);
      HEAP8[($137)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $edge1, $poly2, $xf2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $vertices1;
      var $normals1;
      var $count2;
      var $vertices2;
      var $normal1World=__stackBase__;
      var $normal1=(__stackBase__)+(8);
      var $index;
      var $minDot;
      var $i;
      var $dot;
      var $v1=(__stackBase__)+(16);
      var $v2=(__stackBase__)+(24);
      var $separation;
      var $6=(__stackBase__)+(32);
      $1=$poly1;
      $2=$xf1;
      $3=$edge1;
      $4=$poly2;
      $5=$xf2;
      var $7=$1;
      var $8=(($7+20)|0);
      var $9=(($8)|0);
      $vertices1=$9;
      var $10=$1;
      var $11=(($10+84)|0);
      var $12=(($11)|0);
      $normals1=$12;
      var $13=$4;
      var $14=(($13+148)|0);
      var $15=HEAP32[(($14)>>2)];
      $count2=$15;
      var $16=$4;
      var $17=(($16+20)|0);
      var $18=(($17)|0);
      $vertices2=$18;
      var $19=$3;
      var $20=0 <= (($19)|(0));
      if ($20) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $22=$3;
      var $23=$1;
      var $24=(($23+148)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22)|(0)) < (($25)|(0));
      if ($26) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5254740)|0), 32, ((5263912)|0), ((5256448)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=$3;
      var $34=$normals1;
      var $35=(($34+($33<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal1World, $32, $35);
      var $36=$5;
      var $37=(($36+8)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($normal1, $37, $normal1World);
      $index=0;
      $minDot=3.4028234663852886e+38;
      $i=0;
      label = 6; break;
    case 6: 
      var $39=$i;
      var $40=$count2;
      var $41=(($39)|(0)) < (($40)|(0));
      if ($41) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $43=$i;
      var $44=$vertices2;
      var $45=(($44+($43<<3))|0);
      var $46=__Z5b2DotRK6b2Vec2S1_($45, $normal1);
      $dot=$46;
      var $47=$dot;
      var $48=$minDot;
      var $49=$47 < $48;
      if ($49) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $51=$dot;
      $minDot=$51;
      var $52=$i;
      $index=$52;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $55=$i;
      var $56=((($55)+(1))|0);
      $i=$56;
      label = 6; break;
    case 11: 
      var $58=$2;
      var $59=$3;
      var $60=$vertices1;
      var $61=(($60+($59<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $58, $61);
      var $62=$5;
      var $63=$index;
      var $64=$vertices2;
      var $65=(($64+($63<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $62, $65);
      __ZmiRK6b2Vec2S1_($6, $v2, $v1);
      var $66=__Z5b2DotRK6b2Vec2S1_($6, $normal1World);
      $separation=$66;
      var $67=$separation;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + label);
  }
}
function __Z6b2SwapIfEvRT_S1_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $tmp;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=HEAPF32[(($3)>>2)];
  $tmp=$4;
  var $5=$2;
  var $6=HEAPF32[(($5)>>2)];
  var $7=$1;
  HEAPF32[(($7)>>2)]=$6;
  var $8=$tmp;
  var $9=$2;
  HEAPF32[(($9)>>2)]=$8;
  return;
}
function __Z5b2AbsIfET_S0_($a) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$a;
      var $2=$1;
      var $3=$2 > 0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=$1;
      var $10 = $5;label = 4; break;
    case 3: 
      var $7=$1;
      var $8=(-$7);
      var $10 = $8;label = 4; break;
    case 4: 
      var $10;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec2clEi($this, $i) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$i;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=(($5+($4<<2))|0);
  return $6;
}
function __ZNK6b2Vec2clEi($this, $i) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$i;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=(($5+($4<<2))|0);
  var $7=HEAPF32[(($6)>>2)];
  return $7;
}
function __ZNK7b2Shape7GetTypeEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK6b2AABB7RayCastEP15b2RayCastOutputRK14b2RayCastInput($this, $output, $input) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tmin;
      var $tmax;
      var $p=__stackBase__;
      var $d=(__stackBase__)+(8);
      var $absD=(__stackBase__)+(16);
      var $normal=(__stackBase__)+(24);
      var $i;
      var $inv_d;
      var $t1=(__stackBase__)+(32);
      var $t2=(__stackBase__)+(36);
      var $s;
      $2=$this;
      $3=$output;
      $4=$input;
      var $5=$2;
      $tmin=-3.4028234663852886e+38;
      $tmax=3.4028234663852886e+38;
      var $6=$4;
      var $7=(($6)|0);
      var $8=$p;
      var $9=$7;
      assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];
      var $10=$4;
      var $11=(($10+8)|0);
      var $12=$4;
      var $13=(($12)|0);
      __ZmiRK6b2Vec2S1_($d, $11, $13);
      __Z5b2AbsRK6b2Vec2($absD, $d);
      __ZN6b2Vec2C1Ev($normal);
      $i=0;
      label = 2; break;
    case 2: 
      var $15=$i;
      var $16=(($15)|(0)) < 2;
      if ($16) { label = 3; break; } else { label = 17; break; }
    case 3: 
      var $18=$i;
      var $19=__ZN6b2Vec2clEi($absD, $18);
      var $20=HEAPF32[(($19)>>2)];
      var $21=$20 < 1.1920928955078125e-7;
      if ($21) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $23=$i;
      var $24=__ZN6b2Vec2clEi($p, $23);
      var $25=HEAPF32[(($24)>>2)];
      var $26=(($5)|0);
      var $27=$i;
      var $28=__ZNK6b2Vec2clEi($26, $27);
      var $29=$25 < $28;
      if ($29) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $31=(($5+8)|0);
      var $32=$i;
      var $33=__ZNK6b2Vec2clEi($31, $32);
      var $34=$i;
      var $35=__ZN6b2Vec2clEi($p, $34);
      var $36=HEAPF32[(($35)>>2)];
      var $37=$33 < $36;
      if ($37) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 21; break;
    case 7: 
      label = 15; break;
    case 8: 
      var $41=$i;
      var $42=__ZN6b2Vec2clEi($d, $41);
      var $43=HEAPF32[(($42)>>2)];
      var $44=(1)/($43);
      $inv_d=$44;
      var $45=(($5)|0);
      var $46=$i;
      var $47=__ZNK6b2Vec2clEi($45, $46);
      var $48=$i;
      var $49=__ZN6b2Vec2clEi($p, $48);
      var $50=HEAPF32[(($49)>>2)];
      var $51=($47)-($50);
      var $52=$inv_d;
      var $53=($51)*($52);
      HEAPF32[(($t1)>>2)]=$53;
      var $54=(($5+8)|0);
      var $55=$i;
      var $56=__ZNK6b2Vec2clEi($54, $55);
      var $57=$i;
      var $58=__ZN6b2Vec2clEi($p, $57);
      var $59=HEAPF32[(($58)>>2)];
      var $60=($56)-($59);
      var $61=$inv_d;
      var $62=($60)*($61);
      HEAPF32[(($t2)>>2)]=$62;
      $s=-1;
      var $63=HEAPF32[(($t1)>>2)];
      var $64=HEAPF32[(($t2)>>2)];
      var $65=$63 > $64;
      if ($65) { label = 9; break; } else { label = 10; break; }
    case 9: 
      __Z6b2SwapIfEvRT_S1_($t1, $t2);
      $s=1;
      label = 10; break;
    case 10: 
      var $68=HEAPF32[(($t1)>>2)];
      var $69=$tmin;
      var $70=$68 > $69;
      if ($70) { label = 11; break; } else { label = 12; break; }
    case 11: 
      __ZN6b2Vec27SetZeroEv($normal);
      var $72=$s;
      var $73=$i;
      var $74=__ZN6b2Vec2clEi($normal, $73);
      HEAPF32[(($74)>>2)]=$72;
      var $75=HEAPF32[(($t1)>>2)];
      $tmin=$75;
      label = 12; break;
    case 12: 
      var $77=$tmax;
      var $78=HEAPF32[(($t2)>>2)];
      var $79=__Z5b2MinIfET_S0_S0_($77, $78);
      $tmax=$79;
      var $80=$tmin;
      var $81=$tmax;
      var $82=$80 > $81;
      if ($82) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=0;
      label = 21; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $87=$i;
      var $88=((($87)+(1))|0);
      $i=$88;
      label = 2; break;
    case 17: 
      var $90=$tmin;
      var $91=$90 < 0;
      if ($91) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $93=$4;
      var $94=(($93+16)|0);
      var $95=HEAPF32[(($94)>>2)];
      var $96=$tmin;
      var $97=$95 < $96;
      if ($97) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=0;
      label = 21; break;
    case 20: 
      var $100=$tmin;
      var $101=$3;
      var $102=(($101+8)|0);
      HEAPF32[(($102)>>2)]=$100;
      var $103=$3;
      var $104=(($103)|0);
      var $105=$104;
      var $106=$normal;
      assert(8 % 1 === 0);HEAP32[(($105)>>2)]=HEAP32[(($106)>>2)];HEAP32[((($105)+(4))>>2)]=HEAP32[((($106)+(4))>>2)];
      $1=1;
      label = 21; break;
    case 21: 
      var $108=$1;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2AbsRK6b2Vec2($agg_result, $a) {
  var label = 0;
  var $1;
  $1=$a;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=__Z5b2AbsIfET_S0_($4);
  var $6=$1;
  var $7=(($6+4)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=__Z5b2AbsIfET_S0_($8);
  __ZN6b2Vec2C1Eff($agg_result, $5, $9);
  return;
}
function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut, $vIn, $normal, $offset, $vertexIndexA) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $numOut;
      var $distance0;
      var $distance1;
      var $interp;
      var $6=__stackBase__;
      var $7=(__stackBase__)+(8);
      var $8=(__stackBase__)+(16);
      $1=$vOut;
      $2=$vIn;
      $3=$normal;
      $4=$offset;
      $5=$vertexIndexA;
      $numOut=0;
      var $9=$3;
      var $10=$2;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=__Z5b2DotRK6b2Vec2S1_($9, $12);
      var $14=$4;
      var $15=($13)-($14);
      $distance0=$15;
      var $16=$3;
      var $17=$2;
      var $18=(($17+12)|0);
      var $19=(($18)|0);
      var $20=__Z5b2DotRK6b2Vec2S1_($16, $19);
      var $21=$4;
      var $22=($20)-($21);
      $distance1=$22;
      var $23=$distance0;
      var $24=$23 <= 0;
      if ($24) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $26=$numOut;
      var $27=((($26)+(1))|0);
      $numOut=$27;
      var $28=$1;
      var $29=(($28+((($26)*(12))&-1))|0);
      var $30=$2;
      var $31=(($30)|0);
      var $32=$29;
      var $33=$31;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      label = 3; break;
    case 3: 
      var $35=$distance1;
      var $36=$35 <= 0;
      if ($36) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $38=$numOut;
      var $39=((($38)+(1))|0);
      $numOut=$39;
      var $40=$1;
      var $41=(($40+((($38)*(12))&-1))|0);
      var $42=$2;
      var $43=(($42+12)|0);
      var $44=$41;
      var $45=$43;
      assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $47=$distance0;
      var $48=$distance1;
      var $49=($47)*($48);
      var $50=$49 < 0;
      if ($50) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $52=$distance0;
      var $53=$distance0;
      var $54=$distance1;
      var $55=($53)-($54);
      var $56=($52)/($55);
      $interp=$56;
      var $57=$numOut;
      var $58=$1;
      var $59=(($58+((($57)*(12))&-1))|0);
      var $60=(($59)|0);
      var $61=$2;
      var $62=(($61)|0);
      var $63=(($62)|0);
      var $64=$interp;
      var $65=$2;
      var $66=(($65+12)|0);
      var $67=(($66)|0);
      var $68=$2;
      var $69=(($68)|0);
      var $70=(($69)|0);
      __ZmiRK6b2Vec2S1_($8, $67, $70);
      __ZmlfRK6b2Vec2($7, $64, $8);
      __ZplRK6b2Vec2S1_($6, $63, $7);
      var $71=$60;
      var $72=$6;
      assert(8 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];
      var $73=$5;
      var $74=(($73) & 255);
      var $75=$numOut;
      var $76=$1;
      var $77=(($76+((($75)*(12))&-1))|0);
      var $78=(($77+8)|0);
      var $79=$78;
      var $80=(($79)|0);
      HEAP8[($80)]=$74;
      var $81=$2;
      var $82=(($81)|0);
      var $83=(($82+8)|0);
      var $84=$83;
      var $85=(($84+1)|0);
      var $86=HEAP8[($85)];
      var $87=$numOut;
      var $88=$1;
      var $89=(($88+((($87)*(12))&-1))|0);
      var $90=(($89+8)|0);
      var $91=$90;
      var $92=(($91+1)|0);
      HEAP8[($92)]=$86;
      var $93=$numOut;
      var $94=$1;
      var $95=(($94+((($93)*(12))&-1))|0);
      var $96=(($95+8)|0);
      var $97=$96;
      var $98=(($97+2)|0);
      HEAP8[($98)]=0;
      var $99=$numOut;
      var $100=$1;
      var $101=(($100+((($99)*(12))&-1))|0);
      var $102=(($101+8)|0);
      var $103=$102;
      var $104=(($103+3)|0);
      HEAP8[($104)]=1;
      var $105=$numOut;
      var $106=((($105)+(1))|0);
      $numOut=$106;
      label = 7; break;
    case 7: 
      var $108=$numOut;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + label);
  }
}
function __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($shapeA, $indexA, $shapeB, $indexB, $xfA, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $input=__stackBase__;
  var $cache=(__stackBase__)+(92);
  var $output=(__stackBase__)+(104);
  $1=$shapeA;
  $2=$indexA;
  $3=$shapeB;
  $4=$indexB;
  $5=$xfA;
  $6=$xfB;
  __ZN15b2DistanceInputC1Ev($input);
  var $7=(($input)|0);
  var $8=$1;
  var $9=$2;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($7, $8, $9);
  var $10=(($input+28)|0);
  var $11=$3;
  var $12=$4;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($10, $11, $12);
  var $13=(($input+56)|0);
  var $14=$5;
  var $15=$13;
  var $16=$14;
  assert(16 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];HEAP32[((($15)+(12))>>2)]=HEAP32[((($16)+(12))>>2)];
  var $17=(($input+72)|0);
  var $18=$6;
  var $19=$17;
  var $20=$18;
  assert(16 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];HEAP32[((($19)+(12))>>2)]=HEAP32[((($20)+(12))>>2)];
  var $21=(($input+88)|0);
  HEAP8[($21)]=1;
  var $22=(($cache+4)|0);
  HEAP16[(($22)>>1)]=0;
  __ZN16b2DistanceOutputC1Ev($output);
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input);
  var $23=(($output+16)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=$24 < 0.0000011920928955078125;
  STACKTOP = __stackBase__;
  return $25;
}
function __ZN15b2DistanceInputC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2DistanceInputC2Ev($2);
  return;
}
function __ZN16b2DistanceOutputC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2DistanceOutputC2Ev($2);
  return;
}
function __ZN16b2DistanceOutputC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  return;
}
function __ZN15b2DistanceInputC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN15b2DistanceProxyC1Ev($3);
  var $4=(($2+28)|0);
  __ZN15b2DistanceProxyC1Ev($4);
  var $5=(($2+56)|0);
  __ZN11b2TransformC1Ev($5);
  var $6=(($2+72)|0);
  __ZN11b2TransformC1Ev($6);
  return;
}
function __ZN15b2DistanceProxyC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2DistanceProxyC2Ev($2);
  return;
}
function __ZN15b2DistanceProxyC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=(($4+16)|0);
      var $7 = $4;label = 2; break;
    case 2: 
      var $7;
      __ZN6b2Vec2C1Ev($7);
      var $8=(($7+8)|0);
      var $9=(($8)|(0))==(($5)|(0));
      if ($9) { label = 3; break; } else { var $7 = $8;label = 2; break; }
    case 3: 
      var $11=(($2+16)|0);
      HEAP32[(($11)>>2)]=0;
      var $12=(($2+20)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=(($2+24)|0);
      HEAPF32[(($13)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Simplex6Solve2Ev($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $w1=__stackBase__;
      var $w2=(__stackBase__)+(8);
      var $e12=(__stackBase__)+(16);
      var $d12_2;
      var $d12_1;
      var $inv_d12;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3+16)|0);
      var $5=$w1;
      var $6=$4;
      assert(8 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];
      var $7=(($2+36)|0);
      var $8=(($7+16)|0);
      var $9=$w2;
      var $10=$8;
      assert(8 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($e12, $w2, $w1);
      var $11=__Z5b2DotRK6b2Vec2S1_($w1, $e12);
      var $12=(-$11);
      $d12_2=$12;
      var $13=$d12_2;
      var $14=$13 <= 0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=(($2)|0);
      var $17=(($16+24)|0);
      HEAPF32[(($17)>>2)]=1;
      var $18=(($2+108)|0);
      HEAP32[(($18)>>2)]=1;
      label = 6; break;
    case 3: 
      var $20=__Z5b2DotRK6b2Vec2S1_($w2, $e12);
      $d12_1=$20;
      var $21=$d12_1;
      var $22=$21 <= 0;
      if ($22) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $24=(($2+36)|0);
      var $25=(($24+24)|0);
      HEAPF32[(($25)>>2)]=1;
      var $26=(($2+108)|0);
      HEAP32[(($26)>>2)]=1;
      var $27=(($2)|0);
      var $28=(($2+36)|0);
      var $29=$27;
      var $30=$28;
      assert(36 % 1 === 0);_memcpy($29, $30, 36);
      label = 6; break;
    case 5: 
      var $32=$d12_1;
      var $33=$d12_2;
      var $34=($32)+($33);
      var $35=(1)/($34);
      $inv_d12=$35;
      var $36=$d12_1;
      var $37=$inv_d12;
      var $38=($36)*($37);
      var $39=(($2)|0);
      var $40=(($39+24)|0);
      HEAPF32[(($40)>>2)]=$38;
      var $41=$d12_2;
      var $42=$inv_d12;
      var $43=($41)*($42);
      var $44=(($2+36)|0);
      var $45=(($44+24)|0);
      HEAPF32[(($45)>>2)]=$43;
      var $46=(($2+108)|0);
      HEAP32[(($46)>>2)]=2;
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this, $shape, $index) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $circle;
      var $polygon;
      var $chain;
      var $edge;
      $1=$this;
      $2=$shape;
      $3=$index;
      var $4=$1;
      var $5=$2;
      var $6=__ZNK7b2Shape7GetTypeEv($5);
      if ((($6)|(0))==0) {
        label = 2; break;
      }
      else if ((($6)|(0))==2) {
        label = 3; break;
      }
      else if ((($6)|(0))==3) {
        label = 4; break;
      }
      else if ((($6)|(0))==1) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
    case 2: 
      var $8=$2;
      var $9=$8;
      $circle=$9;
      var $10=$circle;
      var $11=(($10+12)|0);
      var $12=(($4+16)|0);
      HEAP32[(($12)>>2)]=$11;
      var $13=(($4+20)|0);
      HEAP32[(($13)>>2)]=1;
      var $14=$circle;
      var $15=$14;
      var $16=(($15+8)|0);
      var $17=HEAPF32[(($16)>>2)];
      var $18=(($4+24)|0);
      HEAPF32[(($18)>>2)]=$17;
      label = 14; break;
    case 3: 
      var $20=$2;
      var $21=$20;
      $polygon=$21;
      var $22=$polygon;
      var $23=(($22+20)|0);
      var $24=(($23)|0);
      var $25=(($4+16)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=$polygon;
      var $27=(($26+148)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($4+20)|0);
      HEAP32[(($29)>>2)]=$28;
      var $30=$polygon;
      var $31=$30;
      var $32=(($31+8)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=(($4+24)|0);
      HEAPF32[(($34)>>2)]=$33;
      label = 14; break;
    case 4: 
      var $36=$2;
      var $37=$36;
      $chain=$37;
      var $38=$3;
      var $39=0 <= (($38)|(0));
      if ($39) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $41=$3;
      var $42=$chain;
      var $43=(($42+16)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($41)|(0)) < (($44)|(0));
      if ($45) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5248912)|0), 53, ((5262804)|0), ((5255288)|0));
      throw "Reached an unreachable!"
      label = 8; break;
    case 8: 
      var $50=(($4)|0);
      var $51=(($50)|0);
      var $52=$3;
      var $53=$chain;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+($52<<3))|0);
      var $57=$51;
      var $58=$56;
      assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
      var $59=$3;
      var $60=((($59)+(1))|0);
      var $61=$chain;
      var $62=(($61+16)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($60)|(0)) < (($63)|(0));
      if ($64) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $66=(($4)|0);
      var $67=(($66+8)|0);
      var $68=$3;
      var $69=((($68)+(1))|0);
      var $70=$chain;
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+($69<<3))|0);
      var $74=$67;
      var $75=$73;
      assert(8 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];
      label = 11; break;
    case 10: 
      var $77=(($4)|0);
      var $78=(($77+8)|0);
      var $79=$chain;
      var $80=(($79+12)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81)|0);
      var $83=$78;
      var $84=$82;
      assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];
      label = 11; break;
    case 11: 
      var $86=(($4)|0);
      var $87=(($86)|0);
      var $88=(($4+16)|0);
      HEAP32[(($88)>>2)]=$87;
      var $89=(($4+20)|0);
      HEAP32[(($89)>>2)]=2;
      var $90=$chain;
      var $91=$90;
      var $92=(($91+8)|0);
      var $93=HEAPF32[(($92)>>2)];
      var $94=(($4+24)|0);
      HEAPF32[(($94)>>2)]=$93;
      label = 14; break;
    case 12: 
      var $96=$2;
      var $97=$96;
      $edge=$97;
      var $98=$edge;
      var $99=(($98+12)|0);
      var $100=(($4+16)|0);
      HEAP32[(($100)>>2)]=$99;
      var $101=(($4+20)|0);
      HEAP32[(($101)>>2)]=2;
      var $102=$edge;
      var $103=$102;
      var $104=(($103+8)|0);
      var $105=HEAPF32[(($104)>>2)];
      var $106=(($4+24)|0);
      HEAPF32[(($106)>>2)]=$105;
      label = 14; break;
    case 13: 
      ___assert_func(((5248912)|0), 81, ((5262804)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Simplex6Solve3Ev($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $w1=__stackBase__;
      var $w2=(__stackBase__)+(8);
      var $w3=(__stackBase__)+(16);
      var $e12=(__stackBase__)+(24);
      var $w1e12;
      var $w2e12;
      var $d12_1;
      var $d12_2;
      var $e13=(__stackBase__)+(32);
      var $w1e13;
      var $w3e13;
      var $d13_1;
      var $d13_2;
      var $e23=(__stackBase__)+(40);
      var $w2e23;
      var $w3e23;
      var $d23_1;
      var $d23_2;
      var $n123;
      var $d123_1;
      var $d123_2;
      var $d123_3;
      var $inv_d12;
      var $inv_d13;
      var $inv_d23;
      var $inv_d123;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3+16)|0);
      var $5=$w1;
      var $6=$4;
      assert(8 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];
      var $7=(($2+36)|0);
      var $8=(($7+16)|0);
      var $9=$w2;
      var $10=$8;
      assert(8 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];
      var $11=(($2+72)|0);
      var $12=(($11+16)|0);
      var $13=$w3;
      var $14=$12;
      assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($e12, $w2, $w1);
      var $15=__Z5b2DotRK6b2Vec2S1_($w1, $e12);
      $w1e12=$15;
      var $16=__Z5b2DotRK6b2Vec2S1_($w2, $e12);
      $w2e12=$16;
      var $17=$w2e12;
      $d12_1=$17;
      var $18=$w1e12;
      var $19=(-$18);
      $d12_2=$19;
      __ZmiRK6b2Vec2S1_($e13, $w3, $w1);
      var $20=__Z5b2DotRK6b2Vec2S1_($w1, $e13);
      $w1e13=$20;
      var $21=__Z5b2DotRK6b2Vec2S1_($w3, $e13);
      $w3e13=$21;
      var $22=$w3e13;
      $d13_1=$22;
      var $23=$w1e13;
      var $24=(-$23);
      $d13_2=$24;
      __ZmiRK6b2Vec2S1_($e23, $w3, $w2);
      var $25=__Z5b2DotRK6b2Vec2S1_($w2, $e23);
      $w2e23=$25;
      var $26=__Z5b2DotRK6b2Vec2S1_($w3, $e23);
      $w3e23=$26;
      var $27=$w3e23;
      $d23_1=$27;
      var $28=$w2e23;
      var $29=(-$28);
      $d23_2=$29;
      var $30=__Z7b2CrossRK6b2Vec2S1_($e12, $e13);
      $n123=$30;
      var $31=$n123;
      var $32=__Z7b2CrossRK6b2Vec2S1_($w2, $w3);
      var $33=($31)*($32);
      $d123_1=$33;
      var $34=$n123;
      var $35=__Z7b2CrossRK6b2Vec2S1_($w3, $w1);
      var $36=($34)*($35);
      $d123_2=$36;
      var $37=$n123;
      var $38=__Z7b2CrossRK6b2Vec2S1_($w1, $w2);
      var $39=($37)*($38);
      $d123_3=$39;
      var $40=$d12_2;
      var $41=$40 <= 0;
      if ($41) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $43=$d13_2;
      var $44=$43 <= 0;
      if ($44) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $46=(($2)|0);
      var $47=(($46+24)|0);
      HEAPF32[(($47)>>2)]=1;
      var $48=(($2+108)|0);
      HEAP32[(($48)>>2)]=1;
      label = 23; break;
    case 4: 
      var $50=$d12_1;
      var $51=$50 > 0;
      if ($51) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $53=$d12_2;
      var $54=$53 > 0;
      if ($54) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $56=$d123_3;
      var $57=$56 <= 0;
      if ($57) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $59=$d12_1;
      var $60=$d12_2;
      var $61=($59)+($60);
      var $62=(1)/($61);
      $inv_d12=$62;
      var $63=$d12_1;
      var $64=$inv_d12;
      var $65=($63)*($64);
      var $66=(($2)|0);
      var $67=(($66+24)|0);
      HEAPF32[(($67)>>2)]=$65;
      var $68=$d12_2;
      var $69=$inv_d12;
      var $70=($68)*($69);
      var $71=(($2+36)|0);
      var $72=(($71+24)|0);
      HEAPF32[(($72)>>2)]=$70;
      var $73=(($2+108)|0);
      HEAP32[(($73)>>2)]=2;
      label = 23; break;
    case 8: 
      var $75=$d13_1;
      var $76=$75 > 0;
      if ($76) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $78=$d13_2;
      var $79=$78 > 0;
      if ($79) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $81=$d123_2;
      var $82=$81 <= 0;
      if ($82) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $84=$d13_1;
      var $85=$d13_2;
      var $86=($84)+($85);
      var $87=(1)/($86);
      $inv_d13=$87;
      var $88=$d13_1;
      var $89=$inv_d13;
      var $90=($88)*($89);
      var $91=(($2)|0);
      var $92=(($91+24)|0);
      HEAPF32[(($92)>>2)]=$90;
      var $93=$d13_2;
      var $94=$inv_d13;
      var $95=($93)*($94);
      var $96=(($2+72)|0);
      var $97=(($96+24)|0);
      HEAPF32[(($97)>>2)]=$95;
      var $98=(($2+108)|0);
      HEAP32[(($98)>>2)]=2;
      var $99=(($2+36)|0);
      var $100=(($2+72)|0);
      var $101=$99;
      var $102=$100;
      assert(36 % 1 === 0);_memcpy($101, $102, 36);
      label = 23; break;
    case 12: 
      var $104=$d12_1;
      var $105=$104 <= 0;
      if ($105) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $107=$d23_2;
      var $108=$107 <= 0;
      if ($108) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $110=(($2+36)|0);
      var $111=(($110+24)|0);
      HEAPF32[(($111)>>2)]=1;
      var $112=(($2+108)|0);
      HEAP32[(($112)>>2)]=1;
      var $113=(($2)|0);
      var $114=(($2+36)|0);
      var $115=$113;
      var $116=$114;
      assert(36 % 1 === 0);_memcpy($115, $116, 36);
      label = 23; break;
    case 15: 
      var $118=$d13_1;
      var $119=$118 <= 0;
      if ($119) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $121=$d23_1;
      var $122=$121 <= 0;
      if ($122) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $124=(($2+72)|0);
      var $125=(($124+24)|0);
      HEAPF32[(($125)>>2)]=1;
      var $126=(($2+108)|0);
      HEAP32[(($126)>>2)]=1;
      var $127=(($2)|0);
      var $128=(($2+72)|0);
      var $129=$127;
      var $130=$128;
      assert(36 % 1 === 0);_memcpy($129, $130, 36);
      label = 23; break;
    case 18: 
      var $132=$d23_1;
      var $133=$132 > 0;
      if ($133) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $135=$d23_2;
      var $136=$135 > 0;
      if ($136) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $138=$d123_1;
      var $139=$138 <= 0;
      if ($139) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $141=$d23_1;
      var $142=$d23_2;
      var $143=($141)+($142);
      var $144=(1)/($143);
      $inv_d23=$144;
      var $145=$d23_1;
      var $146=$inv_d23;
      var $147=($145)*($146);
      var $148=(($2+36)|0);
      var $149=(($148+24)|0);
      HEAPF32[(($149)>>2)]=$147;
      var $150=$d23_2;
      var $151=$inv_d23;
      var $152=($150)*($151);
      var $153=(($2+72)|0);
      var $154=(($153+24)|0);
      HEAPF32[(($154)>>2)]=$152;
      var $155=(($2+108)|0);
      HEAP32[(($155)>>2)]=2;
      var $156=(($2)|0);
      var $157=(($2+72)|0);
      var $158=$156;
      var $159=$157;
      assert(36 % 1 === 0);_memcpy($158, $159, 36);
      label = 23; break;
    case 22: 
      var $161=$d123_1;
      var $162=$d123_2;
      var $163=($161)+($162);
      var $164=$d123_3;
      var $165=($163)+($164);
      var $166=(1)/($165);
      $inv_d123=$166;
      var $167=$d123_1;
      var $168=$inv_d123;
      var $169=($167)*($168);
      var $170=(($2)|0);
      var $171=(($170+24)|0);
      HEAPF32[(($171)>>2)]=$169;
      var $172=$d123_2;
      var $173=$inv_d123;
      var $174=($172)*($173);
      var $175=(($2+36)|0);
      var $176=(($175+24)|0);
      HEAPF32[(($176)>>2)]=$174;
      var $177=$d123_3;
      var $178=$inv_d123;
      var $179=($177)*($178);
      var $180=(($2+72)|0);
      var $181=(($180+24)|0);
      HEAPF32[(($181)>>2)]=$179;
      var $182=(($2+108)|0);
      HEAP32[(($182)>>2)]=3;
      label = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2SimplexC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN9b2SimplexC2Ev($2);
  return;
}
function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 288)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $proxyA;
      var $proxyB;
      var $transformA=__stackBase__;
      var $transformB=(__stackBase__)+(16);
      var $simplex=(__stackBase__)+(32);
      var $vertices;
      var $k_maxIters;
      var $saveA=(__stackBase__)+(144);
      var $saveB=(__stackBase__)+(156);
      var $saveCount;
      var $closestPoint=(__stackBase__)+(168);
      var $distanceSqr1;
      var $distanceSqr2;
      var $iter;
      var $i;
      var $p=(__stackBase__)+(176);
      var $d=(__stackBase__)+(184);
      var $vertex;
      var $4=(__stackBase__)+(192);
      var $5=(__stackBase__)+(200);
      var $6=(__stackBase__)+(208);
      var $wBLocal=(__stackBase__)+(216);
      var $7=(__stackBase__)+(224);
      var $8=(__stackBase__)+(232);
      var $9=(__stackBase__)+(240);
      var $duplicate;
      var $i1;
      var $rA;
      var $rB;
      var $normal=(__stackBase__)+(248);
      var $10=(__stackBase__)+(256);
      var $11=(__stackBase__)+(264);
      var $p2=(__stackBase__)+(272);
      var $12=(__stackBase__)+(280);
      $1=$output;
      $2=$cache;
      $3=$input;
      var $13=HEAP32[((5247048)>>2)];
      var $14=((($13)+(1))|0);
      HEAP32[((5247048)>>2)]=$14;
      var $15=$3;
      var $16=(($15)|0);
      $proxyA=$16;
      var $17=$3;
      var $18=(($17+28)|0);
      $proxyB=$18;
      var $19=$3;
      var $20=(($19+56)|0);
      var $21=$transformA;
      var $22=$20;
      assert(16 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];HEAP32[((($21)+(12))>>2)]=HEAP32[((($22)+(12))>>2)];
      var $23=$3;
      var $24=(($23+72)|0);
      var $25=$transformB;
      var $26=$24;
      assert(16 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];HEAP32[((($25)+(12))>>2)]=HEAP32[((($26)+(12))>>2)];
      __ZN9b2SimplexC1Ev($simplex);
      var $27=$2;
      var $28=$proxyA;
      var $29=$proxyB;
      __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($simplex, $27, $28, $transformA, $29, $transformB);
      var $30=(($simplex)|0);
      $vertices=$30;
      $k_maxIters=20;
      $saveCount=0;
      __ZNK9b2Simplex15GetClosestPointEv($closestPoint, $simplex);
      var $31=__ZNK6b2Vec213LengthSquaredEv($closestPoint);
      $distanceSqr1=$31;
      var $32=$distanceSqr1;
      $distanceSqr2=$32;
      $iter=0;
      label = 2; break;
    case 2: 
      var $34=$iter;
      var $35=(($34)|(0)) < 20;
      if ($35) { label = 3; break; } else { label = 28; break; }
    case 3: 
      var $37=(($simplex+108)|0);
      var $38=HEAP32[(($37)>>2)];
      $saveCount=$38;
      $i=0;
      label = 4; break;
    case 4: 
      var $40=$i;
      var $41=$saveCount;
      var $42=(($40)|(0)) < (($41)|(0));
      if ($42) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $44=$i;
      var $45=$vertices;
      var $46=(($45+((($44)*(36))&-1))|0);
      var $47=(($46+28)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$i;
      var $50=(($saveA+($49<<2))|0);
      HEAP32[(($50)>>2)]=$48;
      var $51=$i;
      var $52=$vertices;
      var $53=(($52+((($51)*(36))&-1))|0);
      var $54=(($53+32)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$i;
      var $57=(($saveB+($56<<2))|0);
      HEAP32[(($57)>>2)]=$55;
      label = 6; break;
    case 6: 
      var $59=$i;
      var $60=((($59)+(1))|0);
      $i=$60;
      label = 4; break;
    case 7: 
      var $62=(($simplex+108)|0);
      var $63=HEAP32[(($62)>>2)];
      if ((($63)|(0))==1) {
        label = 8; break;
      }
      else if ((($63)|(0))==2) {
        label = 9; break;
      }
      else if ((($63)|(0))==3) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
    case 8: 
      label = 12; break;
    case 9: 
      __ZN9b2Simplex6Solve2Ev($simplex);
      label = 12; break;
    case 10: 
      __ZN9b2Simplex6Solve3Ev($simplex);
      label = 12; break;
    case 11: 
      ___assert_func(((5248912)|0), 498, ((5264268)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 12: 
      var $69=(($simplex+108)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|(0))==3;
      if ($71) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 28; break;
    case 14: 
      __ZNK9b2Simplex15GetClosestPointEv($p, $simplex);
      var $74=__ZNK6b2Vec213LengthSquaredEv($p);
      $distanceSqr2=$74;
      var $75=$distanceSqr2;
      var $76=$distanceSqr1;
      var $77=$75 >= $76;
      if ($77) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $80=$distanceSqr2;
      $distanceSqr1=$80;
      __ZNK9b2Simplex18GetSearchDirectionEv($d, $simplex);
      var $81=__ZNK6b2Vec213LengthSquaredEv($d);
      var $82=$81 < 1.4210854715202004e-14;
      if ($82) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 28; break;
    case 18: 
      var $85=$vertices;
      var $86=(($simplex+108)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($85+((($87)*(36))&-1))|0);
      $vertex=$88;
      var $89=$proxyA;
      var $90=(($transformA+8)|0);
      __ZNK6b2Vec2ngEv($5, $d);
      __Z6b2MulTRK5b2RotRK6b2Vec2($4, $90, $5);
      var $91=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($89, $4);
      var $92=$vertex;
      var $93=(($92+28)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$vertex;
      var $95=(($94)|0);
      var $96=$proxyA;
      var $97=$vertex;
      var $98=(($97+28)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=__ZNK15b2DistanceProxy9GetVertexEi($96, $99);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $transformA, $100);
      var $101=$95;
      var $102=$6;
      assert(8 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];
      __ZN6b2Vec2C1Ev($wBLocal);
      var $103=$proxyB;
      var $104=(($transformB+8)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($7, $104, $d);
      var $105=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($103, $7);
      var $106=$vertex;
      var $107=(($106+32)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$vertex;
      var $109=(($108+8)|0);
      var $110=$proxyB;
      var $111=$vertex;
      var $112=(($111+32)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=__ZNK15b2DistanceProxy9GetVertexEi($110, $113);
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $transformB, $114);
      var $115=$109;
      var $116=$8;
      assert(8 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];
      var $117=$vertex;
      var $118=(($117+16)|0);
      var $119=$vertex;
      var $120=(($119+8)|0);
      var $121=$vertex;
      var $122=(($121)|0);
      __ZmiRK6b2Vec2S1_($9, $120, $122);
      var $123=$118;
      var $124=$9;
      assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
      var $125=$iter;
      var $126=((($125)+(1))|0);
      $iter=$126;
      var $127=HEAP32[((5247044)>>2)];
      var $128=((($127)+(1))|0);
      HEAP32[((5247044)>>2)]=$128;
      $duplicate=0;
      $i1=0;
      label = 19; break;
    case 19: 
      var $130=$i1;
      var $131=$saveCount;
      var $132=(($130)|(0)) < (($131)|(0));
      if ($132) { label = 20; break; } else { label = 25; break; }
    case 20: 
      var $134=$vertex;
      var $135=(($134+28)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$i1;
      var $138=(($saveA+($137<<2))|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($136)|(0))==(($139)|(0));
      if ($140) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $142=$vertex;
      var $143=(($142+32)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$i1;
      var $146=(($saveB+($145<<2))|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($144)|(0))==(($147)|(0));
      if ($148) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $duplicate=1;
      label = 25; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $152=$i1;
      var $153=((($152)+(1))|0);
      $i1=$153;
      label = 19; break;
    case 25: 
      var $155=$duplicate;
      var $156=(($155) & 1);
      if ($156) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $159=(($simplex+108)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)+(1))|0);
      HEAP32[(($159)>>2)]=$161;
      label = 2; break;
    case 28: 
      var $163=HEAP32[((5247040)>>2)];
      var $164=$iter;
      var $165=__Z5b2MaxIiET_S0_S0_($163, $164);
      HEAP32[((5247040)>>2)]=$165;
      var $166=$1;
      var $167=(($166)|0);
      var $168=$1;
      var $169=(($168+8)|0);
      __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($simplex, $167, $169);
      var $170=$1;
      var $171=(($170)|0);
      var $172=$1;
      var $173=(($172+8)|0);
      var $174=__Z10b2DistanceRK6b2Vec2S1_($171, $173);
      var $175=$1;
      var $176=(($175+16)|0);
      HEAPF32[(($176)>>2)]=$174;
      var $177=$iter;
      var $178=$1;
      var $179=(($178+20)|0);
      HEAP32[(($179)>>2)]=$177;
      var $180=$2;
      __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($simplex, $180);
      var $181=$3;
      var $182=(($181+88)|0);
      var $183=HEAP8[($182)];
      var $184=(($183) & 1);
      if ($184) { label = 29; break; } else { label = 34; break; }
    case 29: 
      var $186=$proxyA;
      var $187=(($186+24)|0);
      var $188=HEAPF32[(($187)>>2)];
      $rA=$188;
      var $189=$proxyB;
      var $190=(($189+24)|0);
      var $191=HEAPF32[(($190)>>2)];
      $rB=$191;
      var $192=$1;
      var $193=(($192+16)|0);
      var $194=HEAPF32[(($193)>>2)];
      var $195=$rA;
      var $196=$rB;
      var $197=($195)+($196);
      var $198=$194 > $197;
      if ($198) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $200=$1;
      var $201=(($200+16)|0);
      var $202=HEAPF32[(($201)>>2)];
      var $203=$202 > 1.1920928955078125e-7;
      if ($203) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $205=$rA;
      var $206=$rB;
      var $207=($205)+($206);
      var $208=$1;
      var $209=(($208+16)|0);
      var $210=HEAPF32[(($209)>>2)];
      var $211=($210)-($207);
      HEAPF32[(($209)>>2)]=$211;
      var $212=$1;
      var $213=(($212+8)|0);
      var $214=$1;
      var $215=(($214)|0);
      __ZmiRK6b2Vec2S1_($normal, $213, $215);
      var $216=__ZN6b2Vec29NormalizeEv($normal);
      var $217=$1;
      var $218=(($217)|0);
      var $219=$rA;
      __ZmlfRK6b2Vec2($10, $219, $normal);
      __ZN6b2Vec2pLERKS_($218, $10);
      var $220=$1;
      var $221=(($220+8)|0);
      var $222=$rB;
      __ZmlfRK6b2Vec2($11, $222, $normal);
      __ZN6b2Vec2mIERKS_($221, $11);
      label = 33; break;
    case 32: 
      var $224=$1;
      var $225=(($224)|0);
      var $226=$1;
      var $227=(($226+8)|0);
      __ZplRK6b2Vec2S1_($12, $225, $227);
      __ZmlfRK6b2Vec2($p2, 0.5, $12);
      var $228=$1;
      var $229=(($228)|0);
      var $230=$229;
      var $231=$p2;
      assert(8 % 1 === 0);HEAP32[(($230)>>2)]=HEAP32[(($231)>>2)];HEAP32[((($230)+(4))>>2)]=HEAP32[((($231)+(4))>>2)];
      var $232=$1;
      var $233=(($232+8)|0);
      var $234=$233;
      var $235=$p2;
      assert(8 % 1 === 0);HEAP32[(($234)>>2)]=HEAP32[(($235)>>2)];HEAP32[((($234)+(4))>>2)]=HEAP32[((($235)+(4))>>2)];
      var $236=$1;
      var $237=(($236+16)|0);
      HEAPF32[(($237)>>2)]=0;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($this, $cache, $proxyA, $transformA, $proxyB, $transformB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $vertices;
      var $i;
      var $v;
      var $wALocal=__stackBase__;
      var $wBLocal=(__stackBase__)+(8);
      var $7=(__stackBase__)+(16);
      var $8=(__stackBase__)+(24);
      var $9=(__stackBase__)+(32);
      var $metric1;
      var $metric2;
      var $v1;
      var $wALocal2=(__stackBase__)+(40);
      var $wBLocal3=(__stackBase__)+(48);
      var $10=(__stackBase__)+(56);
      var $11=(__stackBase__)+(64);
      var $12=(__stackBase__)+(72);
      $1=$this;
      $2=$cache;
      $3=$proxyA;
      $4=$transformA;
      $5=$proxyB;
      $6=$transformB;
      var $13=$1;
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAP16[(($15)>>1)];
      var $17=(($16)&(65535));
      var $18=(($17)|(0)) <= 3;
      if ($18) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5248912)|0), 102, ((5259856)|0), ((5249676)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=HEAP16[(($24)>>1)];
      var $26=(($25)&(65535));
      var $27=(($13+108)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($13)|0);
      $vertices=$28;
      $i=0;
      label = 5; break;
    case 5: 
      var $30=$i;
      var $31=(($13+108)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($30)|(0)) < (($32)|(0));
      if ($33) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $35=$vertices;
      var $36=$i;
      var $37=(($35+((($36)*(36))&-1))|0);
      $v=$37;
      var $38=$i;
      var $39=$2;
      var $40=(($39+6)|0);
      var $41=(($40+$38)|0);
      var $42=HEAP8[($41)];
      var $43=(($42)&(255));
      var $44=$v;
      var $45=(($44+28)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$i;
      var $47=$2;
      var $48=(($47+9)|0);
      var $49=(($48+$46)|0);
      var $50=HEAP8[($49)];
      var $51=(($50)&(255));
      var $52=$v;
      var $53=(($52+32)|0);
      HEAP32[(($53)>>2)]=$51;
      var $54=$3;
      var $55=$v;
      var $56=(($55+28)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=__ZNK15b2DistanceProxy9GetVertexEi($54, $57);
      var $59=$wALocal;
      var $60=$58;
      assert(8 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];
      var $61=$5;
      var $62=$v;
      var $63=(($62+32)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=__ZNK15b2DistanceProxy9GetVertexEi($61, $64);
      var $66=$wBLocal;
      var $67=$65;
      assert(8 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];
      var $68=$v;
      var $69=(($68)|0);
      var $70=$4;
      __Z5b2MulRK11b2TransformRK6b2Vec2($7, $70, $wALocal);
      var $71=$69;
      var $72=$7;
      assert(8 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];
      var $73=$v;
      var $74=(($73+8)|0);
      var $75=$6;
      __Z5b2MulRK11b2TransformRK6b2Vec2($8, $75, $wBLocal);
      var $76=$74;
      var $77=$8;
      assert(8 % 1 === 0);HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($77)+(4))>>2)];
      var $78=$v;
      var $79=(($78+16)|0);
      var $80=$v;
      var $81=(($80+8)|0);
      var $82=$v;
      var $83=(($82)|0);
      __ZmiRK6b2Vec2S1_($9, $81, $83);
      var $84=$79;
      var $85=$9;
      assert(8 % 1 === 0);HEAP32[(($84)>>2)]=HEAP32[(($85)>>2)];HEAP32[((($84)+(4))>>2)]=HEAP32[((($85)+(4))>>2)];
      var $86=$v;
      var $87=(($86+24)|0);
      HEAPF32[(($87)>>2)]=0;
      label = 7; break;
    case 7: 
      var $89=$i;
      var $90=((($89)+(1))|0);
      $i=$90;
      label = 5; break;
    case 8: 
      var $92=(($13+108)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93)|(0)) > 1;
      if ($94) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $96=$2;
      var $97=(($96)|0);
      var $98=HEAPF32[(($97)>>2)];
      $metric1=$98;
      var $99=__ZNK9b2Simplex9GetMetricEv($13);
      $metric2=$99;
      var $100=$metric2;
      var $101=$metric1;
      var $102=($101)*(0.5);
      var $103=$100 < $102;
      if ($103) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $105=$metric1;
      var $106=($105)*(2);
      var $107=$metric2;
      var $108=$106 < $107;
      if ($108) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $110=$metric2;
      var $111=$110 < 1.1920928955078125e-7;
      if ($111) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $113=(($13+108)|0);
      HEAP32[(($113)>>2)]=0;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $116=(($13+108)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|(0))==0;
      if ($118) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $120=$vertices;
      var $121=(($120)|0);
      $v1=$121;
      var $122=$v1;
      var $123=(($122+28)|0);
      HEAP32[(($123)>>2)]=0;
      var $124=$v1;
      var $125=(($124+32)|0);
      HEAP32[(($125)>>2)]=0;
      var $126=$3;
      var $127=__ZNK15b2DistanceProxy9GetVertexEi($126, 0);
      var $128=$wALocal2;
      var $129=$127;
      assert(8 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];HEAP32[((($128)+(4))>>2)]=HEAP32[((($129)+(4))>>2)];
      var $130=$5;
      var $131=__ZNK15b2DistanceProxy9GetVertexEi($130, 0);
      var $132=$wBLocal3;
      var $133=$131;
      assert(8 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];
      var $134=$v1;
      var $135=(($134)|0);
      var $136=$4;
      __Z5b2MulRK11b2TransformRK6b2Vec2($10, $136, $wALocal2);
      var $137=$135;
      var $138=$10;
      assert(8 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[((($137)+(4))>>2)]=HEAP32[((($138)+(4))>>2)];
      var $139=$v1;
      var $140=(($139+8)|0);
      var $141=$6;
      __Z5b2MulRK11b2TransformRK6b2Vec2($11, $141, $wBLocal3);
      var $142=$140;
      var $143=$11;
      assert(8 % 1 === 0);HEAP32[(($142)>>2)]=HEAP32[(($143)>>2)];HEAP32[((($142)+(4))>>2)]=HEAP32[((($143)+(4))>>2)];
      var $144=$v1;
      var $145=(($144+16)|0);
      var $146=$v1;
      var $147=(($146+8)|0);
      var $148=$v1;
      var $149=(($148)|0);
      __ZmiRK6b2Vec2S1_($12, $147, $149);
      var $150=$145;
      var $151=$12;
      assert(8 % 1 === 0);HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];HEAP32[((($150)+(4))>>2)]=HEAP32[((($151)+(4))>>2)];
      var $152=(($13+108)|0);
      HEAP32[(($152)>>2)]=1;
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Vec213LengthSquaredEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(($2)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  var $8=(($2+4)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=(($2+4)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=($9)*($11);
  var $13=($7)+($12);
  return $13;
}
function __ZN6b2Vec2pLERKS_($this, $v) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$v;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($8)+($6);
  HEAPF32[(($7)>>2)]=$9;
  var $10=$2;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($3+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=($14)+($12);
  HEAPF32[(($13)>>2)]=$15;
  return;
}
function __ZN6b2Vec2mIERKS_($this, $v) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$v;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($8)-($6);
  HEAPF32[(($7)>>2)]=$9;
  var $10=$2;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($3+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=($14)-($12);
  HEAPF32[(($13)>>2)]=$15;
  return;
}
function __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($this, $d) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $bestIndex;
      var $bestValue;
      var $i;
      var $value;
      $1=$this;
      $2=$d;
      var $3=$1;
      $bestIndex=0;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=$2;
      var $8=__Z5b2DotRK6b2Vec2S1_($6, $7);
      $bestValue=$8;
      $i=1;
      label = 2; break;
    case 2: 
      var $10=$i;
      var $11=(($3+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|(0)) < (($12)|(0));
      if ($13) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $15=$i;
      var $16=(($3+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<3))|0);
      var $19=$2;
      var $20=__Z5b2DotRK6b2Vec2S1_($18, $19);
      $value=$20;
      var $21=$value;
      var $22=$bestValue;
      var $23=$21 > $22;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$i;
      $bestIndex=$25;
      var $26=$value;
      $bestValue=$26;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      label = 2; break;
    case 7: 
      var $32=$bestIndex;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function __Z10b2DistanceRK6b2Vec2S1_($a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $c=__stackBase__;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  __ZmiRK6b2Vec2S1_($c, $3, $4);
  var $5=__ZNK6b2Vec26LengthEv($c);
  STACKTOP = __stackBase__;
  return $5;
}
function __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($this, $cache) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $vertices;
      var $i;
      $1=$this;
      $2=$cache;
      var $3=$1;
      var $4=__ZNK9b2Simplex9GetMetricEv($3);
      var $5=$2;
      var $6=(($5)|0);
      HEAPF32[(($6)>>2)]=$4;
      var $7=(($3+108)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8) & 65535);
      var $10=$2;
      var $11=(($10+4)|0);
      HEAP16[(($11)>>1)]=$9;
      var $12=(($3)|0);
      $vertices=$12;
      $i=0;
      label = 2; break;
    case 2: 
      var $14=$i;
      var $15=(($3+108)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($14)|(0)) < (($16)|(0));
      if ($17) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $19=$i;
      var $20=$vertices;
      var $21=(($20+((($19)*(36))&-1))|0);
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23) & 255);
      var $25=$i;
      var $26=$2;
      var $27=(($26+6)|0);
      var $28=(($27+$25)|0);
      HEAP8[($28)]=$24;
      var $29=$i;
      var $30=$vertices;
      var $31=(($30+((($29)*(36))&-1))|0);
      var $32=(($31+32)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33) & 255);
      var $35=$i;
      var $36=$2;
      var $37=(($36+9)|0);
      var $38=(($37+$35)|0);
      HEAP8[($38)]=$34;
      label = 4; break;
    case 4: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      $i=$41;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z7b2CrossfRK6b2Vec2($agg_result, $s, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$s;
  $2=$a;
  var $3=$1;
  var $4=(-$3);
  var $5=$2;
  var $6=(($5+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=($4)*($7);
  var $9=$1;
  var $10=$2;
  var $11=(($10)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=($9)*($12);
  __ZN6b2Vec2C1Eff($agg_result, $8, $13);
  return;
}
function __ZN9b2SimplexC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN15b2SimplexVertexC1Ev($3);
  var $4=(($2+36)|0);
  __ZN15b2SimplexVertexC1Ev($4);
  var $5=(($2+72)|0);
  __ZN15b2SimplexVertexC1Ev($5);
  return;
}
function __ZN15b2SimplexVertexC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2SimplexVertexC2Ev($2);
  return;
}
function __ZN15b2SimplexVertexC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+16)|0);
  __ZN6b2Vec2C1Ev($5);
  return;
}
function __ZN13b2DynamicTreeC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      HEAP32[(($3)>>2)]=-1;
      var $4=(($2+12)|0);
      HEAP32[(($4)>>2)]=16;
      var $5=(($2+8)|0);
      HEAP32[(($5)>>2)]=0;
      var $6=(($2+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)*(36))&-1);
      var $9=__Z7b2Alloci($8);
      var $10=$9;
      var $11=(($2+4)|0);
      HEAP32[(($11)>>2)]=$10;
      var $12=(($2+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($2+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)*(36))&-1);
      _memset($14, 0, $17);
      $i=0;
      label = 2; break;
    case 2: 
      var $19=$i;
      var $20=(($2+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)-(1))|0);
      var $23=(($19)|(0)) < (($22)|(0));
      if ($23) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $25=$i;
      var $26=((($25)+(1))|0);
      var $27=$i;
      var $28=(($2+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+((($27)*(36))&-1))|0);
      var $31=(($30+20)|0);
      var $32=$31;
      HEAP32[(($32)>>2)]=$26;
      var $33=$i;
      var $34=(($2+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+((($33)*(36))&-1))|0);
      var $37=(($36+32)|0);
      HEAP32[(($37)>>2)]=-1;
      label = 4; break;
    case 4: 
      var $39=$i;
      var $40=((($39)+(1))|0);
      $i=$40;
      label = 2; break;
    case 5: 
      var $42=(($2+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      var $45=(($2+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+((($44)*(36))&-1))|0);
      var $48=(($47+20)|0);
      var $49=$48;
      HEAP32[(($49)>>2)]=-1;
      var $50=(($2+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)-(1))|0);
      var $53=(($2+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+((($52)*(36))&-1))|0);
      var $56=(($55+32)|0);
      HEAP32[(($56)>>2)]=-1;
      var $57=(($2+16)|0);
      HEAP32[(($57)>>2)]=0;
      var $58=(($2+20)|0);
      HEAP32[(($58)>>2)]=0;
      var $59=(($2+24)|0);
      HEAP32[(($59)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2DynamicTreeD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  __Z6b2FreePv($5);
  return;
}
function __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $proxyId;
  var $r=__stackBase__;
  var $4=(__stackBase__)+(8);
  var $5=(__stackBase__)+(16);
  $1=$this;
  $2=$aabb;
  $3=$userData;
  var $6=$1;
  var $7=__ZN13b2DynamicTree12AllocateNodeEv($6);
  $proxyId=$7;
  __ZN6b2Vec2C1Eff($r, 0.10000000149011612, 0.10000000149011612);
  var $8=$proxyId;
  var $9=(($6+4)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+((($8)*(36))&-1))|0);
  var $12=(($11)|0);
  var $13=(($12)|0);
  var $14=$2;
  var $15=(($14)|0);
  __ZmiRK6b2Vec2S1_($4, $15, $r);
  var $16=$13;
  var $17=$4;
  assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
  var $18=$proxyId;
  var $19=(($6+4)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=(($20+((($18)*(36))&-1))|0);
  var $22=(($21)|0);
  var $23=(($22+8)|0);
  var $24=$2;
  var $25=(($24+8)|0);
  __ZplRK6b2Vec2S1_($5, $25, $r);
  var $26=$23;
  var $27=$5;
  assert(8 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
  var $28=$3;
  var $29=$proxyId;
  var $30=(($6+4)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+((($29)*(36))&-1))|0);
  var $33=(($32+16)|0);
  HEAP32[(($33)>>2)]=$28;
  var $34=$proxyId;
  var $35=(($6+4)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=(($36+((($34)*(36))&-1))|0);
  var $38=(($37+32)|0);
  HEAP32[(($38)>>2)]=0;
  var $39=$proxyId;
  __ZN13b2DynamicTree10InsertLeafEi($6, $39);
  var $40=$proxyId;
  STACKTOP = __stackBase__;
  return $40;
}
function __ZNK9b2Simplex15GetClosestPointEv($agg_result, $this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(8);
      $1=$this;
      var $4=$1;
      var $5=(($4+108)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|(0))==0) {
        label = 2; break;
      }
      else if ((($6)|(0))==1) {
        label = 3; break;
      }
      else if ((($6)|(0))==2) {
        label = 4; break;
      }
      else if ((($6)|(0))==3) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
    case 2: 
      ___assert_func(((5248912)|0), 194, ((5258728)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 3: 
      var $9=(($4)|0);
      var $10=(($9+16)|0);
      var $11=$agg_result;
      var $12=$10;
      assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
      label = 7; break;
    case 4: 
      var $14=(($4)|0);
      var $15=(($14+24)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=(($4)|0);
      var $18=(($17+16)|0);
      __ZmlfRK6b2Vec2($2, $16, $18);
      var $19=(($4+36)|0);
      var $20=(($19+24)|0);
      var $21=HEAPF32[(($20)>>2)];
      var $22=(($4+36)|0);
      var $23=(($22+16)|0);
      __ZmlfRK6b2Vec2($3, $21, $23);
      __ZplRK6b2Vec2S1_($agg_result, $2, $3);
      label = 7; break;
    case 5: 
      var $25=$agg_result;
      assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[((5247060)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((5247064)>>2)];
      label = 7; break;
    case 6: 
      ___assert_func(((5248912)|0), 207, ((5258728)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK9b2Simplex18GetSearchDirectionEv($agg_result, $this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $e12=__stackBase__;
      var $sgn;
      var $2=(__stackBase__)+(8);
      $1=$this;
      var $3=$1;
      var $4=(($3+108)|0);
      var $5=HEAP32[(($4)>>2)];
      if ((($5)|(0))==1) {
        label = 2; break;
      }
      else if ((($5)|(0))==2) {
        label = 3; break;
      }
      else {
      label = 6; break;
      }
    case 2: 
      var $7=(($3)|0);
      var $8=(($7+16)|0);
      __ZNK6b2Vec2ngEv($agg_result, $8);
      label = 7; break;
    case 3: 
      var $10=(($3+36)|0);
      var $11=(($10+16)|0);
      var $12=(($3)|0);
      var $13=(($12+16)|0);
      __ZmiRK6b2Vec2S1_($e12, $11, $13);
      var $14=(($3)|0);
      var $15=(($14+16)|0);
      __ZNK6b2Vec2ngEv($2, $15);
      var $16=__Z7b2CrossRK6b2Vec2S1_($e12, $2);
      $sgn=$16;
      var $17=$sgn;
      var $18=$17 > 0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __Z7b2CrossfRK6b2Vec2($agg_result, 1, $e12);
      label = 7; break;
    case 5: 
      __Z7b2CrossRK6b2Vec2f($agg_result, $e12, 1);
      label = 7; break;
    case 6: 
      ___assert_func(((5248912)|0), 184, ((5258620)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK15b2DistanceProxy9GetVertexEi($this, $index) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$index;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|(0));
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+20)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|(0)) < (($9)|(0));
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5251828)|0), 103, ((5258924)|0), ((5250500)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($3+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<3))|0);
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($this, $pA, $pB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $5=(__stackBase__)+(8);
      var $6=(__stackBase__)+(16);
      var $7=(__stackBase__)+(24);
      var $8=(__stackBase__)+(32);
      var $9=(__stackBase__)+(40);
      var $10=(__stackBase__)+(48);
      var $11=(__stackBase__)+(56);
      var $12=(__stackBase__)+(64);
      var $13=(__stackBase__)+(72);
      var $14=(__stackBase__)+(80);
      $1=$this;
      $2=$pA;
      $3=$pB;
      var $15=$1;
      var $16=(($15+108)|0);
      var $17=HEAP32[(($16)>>2)];
      if ((($17)|(0))==0) {
        label = 2; break;
      }
      else if ((($17)|(0))==1) {
        label = 3; break;
      }
      else if ((($17)|(0))==2) {
        label = 4; break;
      }
      else if ((($17)|(0))==3) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
    case 2: 
      ___assert_func(((5248912)|0), 217, ((5258668)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 3: 
      var $20=$2;
      var $21=(($15)|0);
      var $22=(($21)|0);
      var $23=$20;
      var $24=$22;
      assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=$3;
      var $26=(($15)|0);
      var $27=(($26+8)|0);
      var $28=$25;
      var $29=$27;
      assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
      label = 7; break;
    case 4: 
      var $31=$2;
      var $32=(($15)|0);
      var $33=(($32+24)|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=(($15)|0);
      var $36=(($35)|0);
      __ZmlfRK6b2Vec2($5, $34, $36);
      var $37=(($15+36)|0);
      var $38=(($37+24)|0);
      var $39=HEAPF32[(($38)>>2)];
      var $40=(($15+36)|0);
      var $41=(($40)|0);
      __ZmlfRK6b2Vec2($6, $39, $41);
      __ZplRK6b2Vec2S1_($4, $5, $6);
      var $42=$31;
      var $43=$4;
      assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
      var $44=$3;
      var $45=(($15)|0);
      var $46=(($45+24)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=(($15)|0);
      var $49=(($48+8)|0);
      __ZmlfRK6b2Vec2($8, $47, $49);
      var $50=(($15+36)|0);
      var $51=(($50+24)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($15+36)|0);
      var $54=(($53+8)|0);
      __ZmlfRK6b2Vec2($9, $52, $54);
      __ZplRK6b2Vec2S1_($7, $8, $9);
      var $55=$44;
      var $56=$7;
      assert(8 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
      label = 7; break;
    case 5: 
      var $58=$2;
      var $59=(($15)|0);
      var $60=(($59+24)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($15)|0);
      var $63=(($62)|0);
      __ZmlfRK6b2Vec2($12, $61, $63);
      var $64=(($15+36)|0);
      var $65=(($64+24)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=(($15+36)|0);
      var $68=(($67)|0);
      __ZmlfRK6b2Vec2($13, $66, $68);
      __ZplRK6b2Vec2S1_($11, $12, $13);
      var $69=(($15+72)|0);
      var $70=(($69+24)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=(($15+72)|0);
      var $73=(($72)|0);
      __ZmlfRK6b2Vec2($14, $71, $73);
      __ZplRK6b2Vec2S1_($10, $11, $14);
      var $74=$58;
      var $75=$10;
      assert(8 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];
      var $76=$3;
      var $77=$2;
      var $78=$76;
      var $79=$77;
      assert(8 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];
      label = 7; break;
    case 6: 
      ___assert_func(((5248912)|0), 236, ((5258668)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK9b2Simplex9GetMetricEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $4=(__stackBase__)+(8);
      $2=$this;
      var $5=$2;
      var $6=(($5+108)|0);
      var $7=HEAP32[(($6)>>2)];
      if ((($7)|(0))==0) {
        label = 2; break;
      }
      else if ((($7)|(0))==1) {
        label = 3; break;
      }
      else if ((($7)|(0))==2) {
        label = 4; break;
      }
      else if ((($7)|(0))==3) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
    case 2: 
      ___assert_func(((5248912)|0), 246, ((5258580)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 3: 
      $1=0;
      label = 7; break;
    case 4: 
      var $11=(($5)|0);
      var $12=(($11+16)|0);
      var $13=(($5+36)|0);
      var $14=(($13+16)|0);
      var $15=__Z10b2DistanceRK6b2Vec2S1_($12, $14);
      $1=$15;
      label = 7; break;
    case 5: 
      var $17=(($5+36)|0);
      var $18=(($17+16)|0);
      var $19=(($5)|0);
      var $20=(($19+16)|0);
      __ZmiRK6b2Vec2S1_($3, $18, $20);
      var $21=(($5+72)|0);
      var $22=(($21+16)|0);
      var $23=(($5)|0);
      var $24=(($23+16)|0);
      __ZmiRK6b2Vec2S1_($4, $22, $24);
      var $25=__Z7b2CrossRK6b2Vec2S1_($3, $4);
      $1=$25;
      label = 7; break;
    case 6: 
      ___assert_func(((5248912)|0), 259, ((5258580)|0), ((5252236)|0));
      throw "Reached an unreachable!"
    case 7: 
      var $28=$1;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2DynamicTree12AllocateNodeEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $oldNodes;
      var $i;
      var $nodeId;
      $1=$this;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))==-1;
      if ($5) { label = 2; break; } else { label = 10; break; }
    case 2: 
      var $7=(($2+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($2+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|(0))==(($10)|(0));
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5256040)|0), 61, ((5263368)|0), ((5257320)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $16=(($2+4)|0);
      var $17=HEAP32[(($16)>>2)];
      $oldNodes=$17;
      var $18=(($2+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=($19<<1);
      HEAP32[(($18)>>2)]=$20;
      var $21=(($2+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)*(36))&-1);
      var $24=__Z7b2Alloci($23);
      var $25=$24;
      var $26=(($2+4)|0);
      HEAP32[(($26)>>2)]=$25;
      var $27=(($2+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=$oldNodes;
      var $31=$30;
      var $32=(($2+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)*(36))&-1);
      assert($34 % 1 === 0);_memcpy($29, $31, $34);
      var $35=$oldNodes;
      var $36=$35;
      __Z6b2FreePv($36);
      var $37=(($2+8)|0);
      var $38=HEAP32[(($37)>>2)];
      $i=$38;
      label = 6; break;
    case 6: 
      var $40=$i;
      var $41=(($2+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)-(1))|0);
      var $44=(($40)|(0)) < (($43)|(0));
      if ($44) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $46=$i;
      var $47=((($46)+(1))|0);
      var $48=$i;
      var $49=(($2+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+((($48)*(36))&-1))|0);
      var $52=(($51+20)|0);
      var $53=$52;
      HEAP32[(($53)>>2)]=$47;
      var $54=$i;
      var $55=(($2+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+((($54)*(36))&-1))|0);
      var $58=(($57+32)|0);
      HEAP32[(($58)>>2)]=-1;
      label = 8; break;
    case 8: 
      var $60=$i;
      var $61=((($60)+(1))|0);
      $i=$61;
      label = 6; break;
    case 9: 
      var $63=(($2+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)-(1))|0);
      var $66=(($2+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+((($65)*(36))&-1))|0);
      var $69=(($68+20)|0);
      var $70=$69;
      HEAP32[(($70)>>2)]=-1;
      var $71=(($2+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)-(1))|0);
      var $74=(($2+4)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+((($73)*(36))&-1))|0);
      var $77=(($76+32)|0);
      HEAP32[(($77)>>2)]=-1;
      var $78=(($2+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($2+16)|0);
      HEAP32[(($80)>>2)]=$79;
      label = 10; break;
    case 10: 
      var $82=(($2+16)|0);
      var $83=HEAP32[(($82)>>2)];
      $nodeId=$83;
      var $84=$nodeId;
      var $85=(($2+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+((($84)*(36))&-1))|0);
      var $88=(($87+20)|0);
      var $89=$88;
      var $90=HEAP32[(($89)>>2)];
      var $91=(($2+16)|0);
      HEAP32[(($91)>>2)]=$90;
      var $92=$nodeId;
      var $93=(($2+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+((($92)*(36))&-1))|0);
      var $96=(($95+20)|0);
      var $97=$96;
      HEAP32[(($97)>>2)]=-1;
      var $98=$nodeId;
      var $99=(($2+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+((($98)*(36))&-1))|0);
      var $102=(($101+24)|0);
      HEAP32[(($102)>>2)]=-1;
      var $103=$nodeId;
      var $104=(($2+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+((($103)*(36))&-1))|0);
      var $107=(($106+28)|0);
      HEAP32[(($107)>>2)]=-1;
      var $108=$nodeId;
      var $109=(($2+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+((($108)*(36))&-1))|0);
      var $112=(($111+32)|0);
      HEAP32[(($112)>>2)]=0;
      var $113=$nodeId;
      var $114=(($2+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+((($113)*(36))&-1))|0);
      var $117=(($116+16)|0);
      HEAP32[(($117)>>2)]=0;
      var $118=(($2+8)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=((($119)+(1))|0);
      HEAP32[(($118)>>2)]=$120;
      var $121=$nodeId;
      return $121;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2DynamicTree8FreeNodeEi($this, $nodeId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$nodeId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|(0));
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|(0)) < (($9)|(0));
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5256040)|0), 97, ((5263256)|0), ((5254268)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $15=(($3+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=0 < (($16)|(0));
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5256040)|0), 98, ((5263256)|0), ((5251516)|0));
      throw "Reached an unreachable!"
      label = 8; break;
    case 8: 
      var $22=(($3+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($3+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+((($24)*(36))&-1))|0);
      var $28=(($27+20)|0);
      var $29=$28;
      HEAP32[(($29)>>2)]=$23;
      var $30=$2;
      var $31=(($3+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+((($30)*(36))&-1))|0);
      var $34=(($33+32)|0);
      HEAP32[(($34)>>2)]=-1;
      var $35=$2;
      var $36=(($3+16)|0);
      HEAP32[(($36)>>2)]=$35;
      var $37=(($3+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10b2TreeNode6IsLeafEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4)|(0))==-1;
  return $5;
}
function __ZN13b2DynamicTree10RemoveLeafEi($this, $leaf) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $parent;
      var $grandParent;
      var $sibling;
      var $index;
      var $child1;
      var $child2;
      $1=$this;
      $2=$leaf;
      var $3=$1;
      var $4=$2;
      var $5=(($3)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|(0))==(($6)|(0));
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=(($3)|0);
      HEAP32[(($9)>>2)]=-1;
      label = 15; break;
    case 3: 
      var $11=$2;
      var $12=(($3+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+((($11)*(36))&-1))|0);
      var $15=(($14+20)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      $parent=$17;
      var $18=$parent;
      var $19=(($3+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+((($18)*(36))&-1))|0);
      var $22=(($21+20)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      $grandParent=$24;
      var $25=$parent;
      var $26=(($3+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+((($25)*(36))&-1))|0);
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=(($30)|(0))==(($31)|(0));
      if ($32) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $34=$parent;
      var $35=(($3+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+((($34)*(36))&-1))|0);
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      $sibling=$39;
      label = 6; break;
    case 5: 
      var $41=$parent;
      var $42=(($3+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+((($41)*(36))&-1))|0);
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      $sibling=$46;
      label = 6; break;
    case 6: 
      var $48=$grandParent;
      var $49=(($48)|(0))!=-1;
      if ($49) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $51=$grandParent;
      var $52=(($3+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+((($51)*(36))&-1))|0);
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$parent;
      var $58=(($56)|(0))==(($57)|(0));
      if ($58) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $60=$sibling;
      var $61=$grandParent;
      var $62=(($3+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+((($61)*(36))&-1))|0);
      var $65=(($64+24)|0);
      HEAP32[(($65)>>2)]=$60;
      label = 10; break;
    case 9: 
      var $67=$sibling;
      var $68=$grandParent;
      var $69=(($3+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+((($68)*(36))&-1))|0);
      var $72=(($71+28)|0);
      HEAP32[(($72)>>2)]=$67;
      label = 10; break;
    case 10: 
      var $74=$grandParent;
      var $75=$sibling;
      var $76=(($3+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+((($75)*(36))&-1))|0);
      var $79=(($78+20)|0);
      var $80=$79;
      HEAP32[(($80)>>2)]=$74;
      var $81=$parent;
      __ZN13b2DynamicTree8FreeNodeEi($3, $81);
      var $82=$grandParent;
      $index=$82;
      label = 11; break;
    case 11: 
      var $84=$index;
      var $85=(($84)|(0))!=-1;
      if ($85) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $87=$index;
      var $88=__ZN13b2DynamicTree7BalanceEi($3, $87);
      $index=$88;
      var $89=$index;
      var $90=(($3+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+((($89)*(36))&-1))|0);
      var $93=(($92+24)|0);
      var $94=HEAP32[(($93)>>2)];
      $child1=$94;
      var $95=$index;
      var $96=(($3+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+((($95)*(36))&-1))|0);
      var $99=(($98+28)|0);
      var $100=HEAP32[(($99)>>2)];
      $child2=$100;
      var $101=$index;
      var $102=(($3+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+((($101)*(36))&-1))|0);
      var $105=(($104)|0);
      var $106=$child1;
      var $107=(($3+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+((($106)*(36))&-1))|0);
      var $110=(($109)|0);
      var $111=$child2;
      var $112=(($3+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+((($111)*(36))&-1))|0);
      var $115=(($114)|0);
      __ZN6b2AABB7CombineERKS_S1_($105, $110, $115);
      var $116=$child1;
      var $117=(($3+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+((($116)*(36))&-1))|0);
      var $120=(($119+32)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$child2;
      var $123=(($3+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+((($122)*(36))&-1))|0);
      var $126=(($125+32)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=__Z5b2MaxIiET_S0_S0_($121, $127);
      var $129=((($128)+(1))|0);
      var $130=$index;
      var $131=(($3+4)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+((($130)*(36))&-1))|0);
      var $134=(($133+32)|0);
      HEAP32[(($134)>>2)]=$129;
      var $135=$index;
      var $136=(($3+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137+((($135)*(36))&-1))|0);
      var $139=(($138+20)|0);
      var $140=$139;
      var $141=HEAP32[(($140)>>2)];
      $index=$141;
      label = 11; break;
    case 13: 
      label = 15; break;
    case 14: 
      var $144=$sibling;
      var $145=(($3)|0);
      HEAP32[(($145)>>2)]=$144;
      var $146=$sibling;
      var $147=(($3+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+((($146)*(36))&-1))|0);
      var $150=(($149+20)|0);
      var $151=$150;
      HEAP32[(($151)>>2)]=-1;
      var $152=$parent;
      __ZN13b2DynamicTree8FreeNodeEi($3, $152);
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2DynamicTree10InsertLeafEi($this, $leaf) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $leafAABB=__stackBase__;
      var $index;
      var $child1;
      var $child2;
      var $area;
      var $combinedAABB=(__stackBase__)+(16);
      var $combinedArea;
      var $cost;
      var $inheritanceCost;
      var $cost1;
      var $aabb=(__stackBase__)+(32);
      var $aabb1=(__stackBase__)+(48);
      var $oldArea;
      var $newArea;
      var $cost2;
      var $aabb2=(__stackBase__)+(64);
      var $aabb3=(__stackBase__)+(80);
      var $oldArea4;
      var $newArea5;
      var $sibling;
      var $oldParent;
      var $newParent;
      var $child16;
      var $child27;
      $1=$this;
      $2=$leaf;
      var $3=$1;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=((($5)+(1))|0);
      HEAP32[(($4)>>2)]=$6;
      var $7=(($3)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==-1;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$2;
      var $12=(($3)|0);
      HEAP32[(($12)>>2)]=$11;
      var $13=(($3)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($3+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+((($14)*(36))&-1))|0);
      var $18=(($17+20)|0);
      var $19=$18;
      HEAP32[(($19)>>2)]=-1;
      label = 33; break;
    case 3: 
      var $21=$2;
      var $22=(($3+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+((($21)*(36))&-1))|0);
      var $25=(($24)|0);
      var $26=$leafAABB;
      var $27=$25;
      assert(16 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];HEAP32[((($26)+(12))>>2)]=HEAP32[((($27)+(12))>>2)];
      var $28=(($3)|0);
      var $29=HEAP32[(($28)>>2)];
      $index=$29;
      label = 4; break;
    case 4: 
      var $31=$index;
      var $32=(($3+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+((($31)*(36))&-1))|0);
      var $35=__ZNK10b2TreeNode6IsLeafEv($34);
      var $36=(($35)&(1));
      var $37=(($36)|(0))==0;
      if ($37) { label = 5; break; } else { label = 18; break; }
    case 5: 
      var $39=$index;
      var $40=(($3+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+((($39)*(36))&-1))|0);
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      $child1=$44;
      var $45=$index;
      var $46=(($3+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+((($45)*(36))&-1))|0);
      var $49=(($48+28)|0);
      var $50=HEAP32[(($49)>>2)];
      $child2=$50;
      var $51=$index;
      var $52=(($3+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+((($51)*(36))&-1))|0);
      var $55=(($54)|0);
      var $56=__ZNK6b2AABB12GetPerimeterEv($55);
      $area=$56;
      __ZN6b2AABBC1Ev($combinedAABB);
      var $57=$index;
      var $58=(($3+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+((($57)*(36))&-1))|0);
      var $61=(($60)|0);
      __ZN6b2AABB7CombineERKS_S1_($combinedAABB, $61, $leafAABB);
      var $62=__ZNK6b2AABB12GetPerimeterEv($combinedAABB);
      $combinedArea=$62;
      var $63=$combinedArea;
      var $64=($63)*(2);
      $cost=$64;
      var $65=$combinedArea;
      var $66=$area;
      var $67=($65)-($66);
      var $68=($67)*(2);
      $inheritanceCost=$68;
      var $69=$child1;
      var $70=(($3+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+((($69)*(36))&-1))|0);
      var $73=__ZNK10b2TreeNode6IsLeafEv($72);
      if ($73) { label = 6; break; } else { label = 7; break; }
    case 6: 
      __ZN6b2AABBC1Ev($aabb);
      var $75=$child1;
      var $76=(($3+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+((($75)*(36))&-1))|0);
      var $79=(($78)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb, $leafAABB, $79);
      var $80=__ZNK6b2AABB12GetPerimeterEv($aabb);
      var $81=$inheritanceCost;
      var $82=($80)+($81);
      $cost1=$82;
      label = 8; break;
    case 7: 
      __ZN6b2AABBC1Ev($aabb1);
      var $84=$child1;
      var $85=(($3+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+((($84)*(36))&-1))|0);
      var $88=(($87)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb1, $leafAABB, $88);
      var $89=$child1;
      var $90=(($3+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+((($89)*(36))&-1))|0);
      var $93=(($92)|0);
      var $94=__ZNK6b2AABB12GetPerimeterEv($93);
      $oldArea=$94;
      var $95=__ZNK6b2AABB12GetPerimeterEv($aabb1);
      $newArea=$95;
      var $96=$newArea;
      var $97=$oldArea;
      var $98=($96)-($97);
      var $99=$inheritanceCost;
      var $100=($98)+($99);
      $cost1=$100;
      label = 8; break;
    case 8: 
      var $102=$child2;
      var $103=(($3+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+((($102)*(36))&-1))|0);
      var $106=__ZNK10b2TreeNode6IsLeafEv($105);
      if ($106) { label = 9; break; } else { label = 10; break; }
    case 9: 
      __ZN6b2AABBC1Ev($aabb2);
      var $108=$child2;
      var $109=(($3+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+((($108)*(36))&-1))|0);
      var $112=(($111)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb2, $leafAABB, $112);
      var $113=__ZNK6b2AABB12GetPerimeterEv($aabb2);
      var $114=$inheritanceCost;
      var $115=($113)+($114);
      $cost2=$115;
      label = 11; break;
    case 10: 
      __ZN6b2AABBC1Ev($aabb3);
      var $117=$child2;
      var $118=(($3+4)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+((($117)*(36))&-1))|0);
      var $121=(($120)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb3, $leafAABB, $121);
      var $122=$child2;
      var $123=(($3+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+((($122)*(36))&-1))|0);
      var $126=(($125)|0);
      var $127=__ZNK6b2AABB12GetPerimeterEv($126);
      $oldArea4=$127;
      var $128=__ZNK6b2AABB12GetPerimeterEv($aabb3);
      $newArea5=$128;
      var $129=$newArea5;
      var $130=$oldArea4;
      var $131=($129)-($130);
      var $132=$inheritanceCost;
      var $133=($131)+($132);
      $cost2=$133;
      label = 11; break;
    case 11: 
      var $135=$cost;
      var $136=$cost1;
      var $137=$135 < $136;
      if ($137) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $139=$cost;
      var $140=$cost2;
      var $141=$139 < $140;
      if ($141) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 18; break;
    case 14: 
      var $144=$cost1;
      var $145=$cost2;
      var $146=$144 < $145;
      if ($146) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $148=$child1;
      $index=$148;
      label = 17; break;
    case 16: 
      var $150=$child2;
      $index=$150;
      label = 17; break;
    case 17: 
      label = 4; break;
    case 18: 
      var $153=$index;
      $sibling=$153;
      var $154=$sibling;
      var $155=(($3+4)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+((($154)*(36))&-1))|0);
      var $158=(($157+20)|0);
      var $159=$158;
      var $160=HEAP32[(($159)>>2)];
      $oldParent=$160;
      var $161=__ZN13b2DynamicTree12AllocateNodeEv($3);
      $newParent=$161;
      var $162=$oldParent;
      var $163=$newParent;
      var $164=(($3+4)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165+((($163)*(36))&-1))|0);
      var $167=(($166+20)|0);
      var $168=$167;
      HEAP32[(($168)>>2)]=$162;
      var $169=$newParent;
      var $170=(($3+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+((($169)*(36))&-1))|0);
      var $173=(($172+16)|0);
      HEAP32[(($173)>>2)]=0;
      var $174=$newParent;
      var $175=(($3+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+((($174)*(36))&-1))|0);
      var $178=(($177)|0);
      var $179=$sibling;
      var $180=(($3+4)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+((($179)*(36))&-1))|0);
      var $183=(($182)|0);
      __ZN6b2AABB7CombineERKS_S1_($178, $leafAABB, $183);
      var $184=$sibling;
      var $185=(($3+4)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+((($184)*(36))&-1))|0);
      var $188=(($187+32)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=((($189)+(1))|0);
      var $191=$newParent;
      var $192=(($3+4)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+((($191)*(36))&-1))|0);
      var $195=(($194+32)|0);
      HEAP32[(($195)>>2)]=$190;
      var $196=$oldParent;
      var $197=(($196)|(0))!=-1;
      if ($197) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $199=$oldParent;
      var $200=(($3+4)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+((($199)*(36))&-1))|0);
      var $203=(($202+24)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$sibling;
      var $206=(($204)|(0))==(($205)|(0));
      if ($206) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $208=$newParent;
      var $209=$oldParent;
      var $210=(($3+4)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=(($211+((($209)*(36))&-1))|0);
      var $213=(($212+24)|0);
      HEAP32[(($213)>>2)]=$208;
      label = 22; break;
    case 21: 
      var $215=$newParent;
      var $216=$oldParent;
      var $217=(($3+4)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+((($216)*(36))&-1))|0);
      var $220=(($219+28)|0);
      HEAP32[(($220)>>2)]=$215;
      label = 22; break;
    case 22: 
      var $222=$sibling;
      var $223=$newParent;
      var $224=(($3+4)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225+((($223)*(36))&-1))|0);
      var $227=(($226+24)|0);
      HEAP32[(($227)>>2)]=$222;
      var $228=$2;
      var $229=$newParent;
      var $230=(($3+4)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231+((($229)*(36))&-1))|0);
      var $233=(($232+28)|0);
      HEAP32[(($233)>>2)]=$228;
      var $234=$newParent;
      var $235=$sibling;
      var $236=(($3+4)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+((($235)*(36))&-1))|0);
      var $239=(($238+20)|0);
      var $240=$239;
      HEAP32[(($240)>>2)]=$234;
      var $241=$newParent;
      var $242=$2;
      var $243=(($3+4)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244+((($242)*(36))&-1))|0);
      var $246=(($245+20)|0);
      var $247=$246;
      HEAP32[(($247)>>2)]=$241;
      label = 24; break;
    case 23: 
      var $249=$sibling;
      var $250=$newParent;
      var $251=(($3+4)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=(($252+((($250)*(36))&-1))|0);
      var $254=(($253+24)|0);
      HEAP32[(($254)>>2)]=$249;
      var $255=$2;
      var $256=$newParent;
      var $257=(($3+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258+((($256)*(36))&-1))|0);
      var $260=(($259+28)|0);
      HEAP32[(($260)>>2)]=$255;
      var $261=$newParent;
      var $262=$sibling;
      var $263=(($3+4)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264+((($262)*(36))&-1))|0);
      var $266=(($265+20)|0);
      var $267=$266;
      HEAP32[(($267)>>2)]=$261;
      var $268=$newParent;
      var $269=$2;
      var $270=(($3+4)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=(($271+((($269)*(36))&-1))|0);
      var $273=(($272+20)|0);
      var $274=$273;
      HEAP32[(($274)>>2)]=$268;
      var $275=$newParent;
      var $276=(($3)|0);
      HEAP32[(($276)>>2)]=$275;
      label = 24; break;
    case 24: 
      var $278=$2;
      var $279=(($3+4)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+((($278)*(36))&-1))|0);
      var $282=(($281+20)|0);
      var $283=$282;
      var $284=HEAP32[(($283)>>2)];
      $index=$284;
      label = 25; break;
    case 25: 
      var $286=$index;
      var $287=(($286)|(0))!=-1;
      if ($287) { label = 26; break; } else { label = 33; break; }
    case 26: 
      var $289=$index;
      var $290=__ZN13b2DynamicTree7BalanceEi($3, $289);
      $index=$290;
      var $291=$index;
      var $292=(($3+4)|0);
      var $293=HEAP32[(($292)>>2)];
      var $294=(($293+((($291)*(36))&-1))|0);
      var $295=(($294+24)|0);
      var $296=HEAP32[(($295)>>2)];
      $child16=$296;
      var $297=$index;
      var $298=(($3+4)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=(($299+((($297)*(36))&-1))|0);
      var $301=(($300+28)|0);
      var $302=HEAP32[(($301)>>2)];
      $child27=$302;
      var $303=$child16;
      var $304=(($303)|(0))!=-1;
      if ($304) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      ___assert_func(((5256040)|0), 307, ((5263404)|0), ((5248816)|0));
      throw "Reached an unreachable!"
      label = 29; break;
    case 29: 
      var $309=$child27;
      var $310=(($309)|(0))!=-1;
      if ($310) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      ___assert_func(((5256040)|0), 308, ((5263404)|0), ((5248376)|0));
      throw "Reached an unreachable!"
      label = 32; break;
    case 32: 
      var $315=$child16;
      var $316=(($3+4)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317+((($315)*(36))&-1))|0);
      var $319=(($318+32)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=$child27;
      var $322=(($3+4)|0);
      var $323=HEAP32[(($322)>>2)];
      var $324=(($323+((($321)*(36))&-1))|0);
      var $325=(($324+32)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=__Z5b2MaxIiET_S0_S0_($320, $326);
      var $328=((($327)+(1))|0);
      var $329=$index;
      var $330=(($3+4)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=(($331+((($329)*(36))&-1))|0);
      var $333=(($332+32)|0);
      HEAP32[(($333)>>2)]=$328;
      var $334=$index;
      var $335=(($3+4)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=(($336+((($334)*(36))&-1))|0);
      var $338=(($337)|0);
      var $339=$child16;
      var $340=(($3+4)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341+((($339)*(36))&-1))|0);
      var $343=(($342)|0);
      var $344=$child27;
      var $345=(($3+4)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=(($346+((($344)*(36))&-1))|0);
      var $348=(($347)|0);
      __ZN6b2AABB7CombineERKS_S1_($338, $343, $348);
      var $349=$index;
      var $350=(($3+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=(($351+((($349)*(36))&-1))|0);
      var $353=(($352+20)|0);
      var $354=$353;
      var $355=HEAP32[(($354)>>2)];
      $index=$355;
      label = 25; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2DynamicTree12DestroyProxyEi($this, $proxyId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|(0));
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|(0)) < (($9)|(0));
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5256040)|0), 126, ((5263328)|0), ((5250344)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($3+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+((($15)*(36))&-1))|0);
      var $19=__ZNK10b2TreeNode6IsLeafEv($18);
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5256040)|0), 127, ((5263328)|0), ((5249592)|0));
      throw "Reached an unreachable!"
      label = 8; break;
    case 8: 
      var $24=$2;
      __ZN13b2DynamicTree10RemoveLeafEi($3, $24);
      var $25=$2;
      __ZN13b2DynamicTree8FreeNodeEi($3, $25);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $b=__stackBase__;
      var $r=(__stackBase__)+(16);
      var $6=(__stackBase__)+(24);
      var $7=(__stackBase__)+(32);
      var $d=(__stackBase__)+(40);
      $2=$this;
      $3=$proxyId;
      $4=$aabb;
      $5=$displacement;
      var $8=$2;
      var $9=$3;
      var $10=0 <= (($9)|(0));
      if ($10) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $12=$3;
      var $13=(($8+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|(0)) < (($14)|(0));
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5256040)|0), 135, ((5263184)|0), ((5250344)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $20=$3;
      var $21=(($8+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+((($20)*(36))&-1))|0);
      var $24=__ZNK10b2TreeNode6IsLeafEv($23);
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5256040)|0), 137, ((5263184)|0), ((5249592)|0));
      throw "Reached an unreachable!"
      label = 8; break;
    case 8: 
      var $29=$3;
      var $30=(($8+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+((($29)*(36))&-1))|0);
      var $33=(($32)|0);
      var $34=$4;
      var $35=__ZNK6b2AABB8ContainsERKS_($33, $34);
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 17; break;
    case 10: 
      var $38=$3;
      __ZN13b2DynamicTree10RemoveLeafEi($8, $38);
      var $39=$4;
      var $40=$b;
      var $41=$39;
      assert(16 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];HEAP32[((($40)+(12))>>2)]=HEAP32[((($41)+(12))>>2)];
      __ZN6b2Vec2C1Eff($r, 0.10000000149011612, 0.10000000149011612);
      var $42=(($b)|0);
      var $43=(($b)|0);
      __ZmiRK6b2Vec2S1_($6, $43, $r);
      var $44=$42;
      var $45=$6;
      assert(8 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];
      var $46=(($b+8)|0);
      var $47=(($b+8)|0);
      __ZplRK6b2Vec2S1_($7, $47, $r);
      var $48=$46;
      var $49=$7;
      assert(8 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
      var $50=$5;
      __ZmlfRK6b2Vec2($d, 2, $50);
      var $51=(($d)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=$52 < 0;
      if ($53) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $55=(($d)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=(($b)|0);
      var $58=(($57)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=($59)+($56);
      HEAPF32[(($58)>>2)]=$60;
      label = 13; break;
    case 12: 
      var $62=(($d)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=(($b+8)|0);
      var $65=(($64)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=($66)+($63);
      HEAPF32[(($65)>>2)]=$67;
      label = 13; break;
    case 13: 
      var $69=(($d+4)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=$70 < 0;
      if ($71) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $73=(($d+4)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=(($b)|0);
      var $76=(($75+4)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=($77)+($74);
      HEAPF32[(($76)>>2)]=$78;
      label = 16; break;
    case 15: 
      var $80=(($d+4)|0);
      var $81=HEAPF32[(($80)>>2)];
      var $82=(($b+8)|0);
      var $83=(($82+4)|0);
      var $84=HEAPF32[(($83)>>2)];
      var $85=($84)+($81);
      HEAPF32[(($83)>>2)]=$85;
      label = 16; break;
    case 16: 
      var $87=$3;
      var $88=(($8+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+((($87)*(36))&-1))|0);
      var $91=(($90)|0);
      var $92=$91;
      var $93=$b;
      assert(16 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];HEAP32[((($92)+(8))>>2)]=HEAP32[((($93)+(8))>>2)];HEAP32[((($92)+(12))>>2)]=HEAP32[((($93)+(12))>>2)];
      var $94=$3;
      __ZN13b2DynamicTree10InsertLeafEi($8, $94);
      $1=1;
      label = 17; break;
    case 17: 
      var $96=$1;
      STACKTOP = __stackBase__;
      return $96;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2AABB8ContainsERKS_($this, $aabb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $result;
      $1=$this;
      $2=$aabb;
      var $3=$1;
      $result=1;
      var $4=$result;
      var $5=(($4) & 1);
      if ($5) { label = 2; break; } else { var $16 = 0;label = 3; break; }
    case 2: 
      var $7=(($3)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      var $10=$2;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=$9 <= $13;
      var $16 = $14;label = 3; break;
    case 3: 
      var $16;
      var $17=(($16)&(1));
      $result=$17;
      var $18=$result;
      var $19=(($18) & 1);
      if ($19) { label = 4; break; } else { var $30 = 0;label = 5; break; }
    case 4: 
      var $21=(($3)|0);
      var $22=(($21+4)|0);
      var $23=HEAPF32[(($22)>>2)];
      var $24=$2;
      var $25=(($24)|0);
      var $26=(($25+4)|0);
      var $27=HEAPF32[(($26)>>2)];
      var $28=$23 <= $27;
      var $30 = $28;label = 5; break;
    case 5: 
      var $30;
      var $31=(($30)&(1));
      $result=$31;
      var $32=$result;
      var $33=(($32) & 1);
      if ($33) { label = 6; break; } else { var $44 = 0;label = 7; break; }
    case 6: 
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=(($36)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=(($3+8)|0);
      var $40=(($39)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42=$38 <= $41;
      var $44 = $42;label = 7; break;
    case 7: 
      var $44;
      var $45=(($44)&(1));
      $result=$45;
      var $46=$result;
      var $47=(($46) & 1);
      if ($47) { label = 8; break; } else { var $58 = 0;label = 9; break; }
    case 8: 
      var $49=$2;
      var $50=(($49+8)|0);
      var $51=(($50+4)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($3+8)|0);
      var $54=(($53+4)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=$52 <= $55;
      var $58 = $56;label = 9; break;
    case 9: 
      var $58;
      var $59=(($58)&(1));
      $result=$59;
      var $60=$result;
      var $61=(($60) & 1);
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2AABB12GetPerimeterEv($this) {
  var label = 0;
  var $1;
  var $wx;
  var $wy;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($2)|0);
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)-($8);
  $wx=$9;
  var $10=(($2+8)|0);
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($2)|0);
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)-($15);
  $wy=$16;
  var $17=$wx;
  var $18=$wy;
  var $19=($17)+($18);
  var $20=($19)*(2);
  return $20;
}
function __ZNK13b2DynamicTree9GetHeightEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$this;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==-1;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=(($3)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($3+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+((($10)*(36))&-1))|0);
      var $14=(($13+32)|0);
      var $15=HEAP32[(($14)>>2)];
      $1=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2AABBC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2AABBC2Ev($2);
  return;
}
function __ZN6b2AABB7CombineERKS_S1_($this, $aabb1, $aabb2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  var $5=(__stackBase__)+(8);
  $1=$this;
  $2=$aabb1;
  $3=$aabb2;
  var $6=$1;
  var $7=(($6)|0);
  var $8=$2;
  var $9=(($8)|0);
  var $10=$3;
  var $11=(($10)|0);
  __Z5b2MinRK6b2Vec2S1_($4, $9, $11);
  var $12=$7;
  var $13=$4;
  assert(8 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
  var $14=(($6+8)|0);
  var $15=$2;
  var $16=(($15+8)|0);
  var $17=$3;
  var $18=(($17+8)|0);
  __Z5b2MaxRK6b2Vec2S1_($5, $16, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function __ZNK13b2DynamicTree12GetAreaRatioEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $root;
      var $rootArea;
      var $totalArea;
      var $i;
      var $node;
      $2=$this;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==-1;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 10; break;
    case 3: 
      var $9=(($3+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($3)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10+((($12)*(36))&-1))|0);
      $root=$13;
      var $14=$root;
      var $15=(($14)|0);
      var $16=__ZNK6b2AABB12GetPerimeterEv($15);
      $rootArea=$16;
      $totalArea=0;
      $i=0;
      label = 4; break;
    case 4: 
      var $18=$i;
      var $19=(($3+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($18)|(0)) < (($20)|(0));
      if ($21) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $23=(($3+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$i;
      var $26=(($24+((($25)*(36))&-1))|0);
      $node=$26;
      var $27=$node;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0)) < 0;
      if ($30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $33=$node;
      var $34=(($33)|0);
      var $35=__ZNK6b2AABB12GetPerimeterEv($34);
      var $36=$totalArea;
      var $37=($36)+($35);
      $totalArea=$37;
      label = 8; break;
    case 8: 
      var $39=$i;
      var $40=((($39)+(1))|0);
      $i=$40;
      label = 4; break;
    case 9: 
      var $42=$totalArea;
      var $43=$rootArea;
      var $44=($42)/($43);
      $1=$44;
      label = 10; break;
    case 10: 
      var $46=$1;
      return $46;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2DynamicTree7BalanceEi($this, $iA) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $A;
      var $iB;
      var $iC;
      var $B;
      var $C;
      var $balance;
      var $iF;
      var $iG;
      var $F;
      var $G;
      var $iD;
      var $iE;
      var $D;
      var $E;
      $2=$this;
      $3=$iA;
      var $4=$2;
      var $5=$3;
      var $6=(($5)|(0))!=-1;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5256040)|0), 382, ((5263292)|0), ((5247844)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $11=(($4+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$3;
      var $14=(($12+((($13)*(36))&-1))|0);
      $A=$14;
      var $15=$A;
      var $16=__ZNK10b2TreeNode6IsLeafEv($15);
      if ($16) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $18=$A;
      var $19=(($18+32)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0)) < 2;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$3;
      $1=$23;
      label = 60; break;
    case 7: 
      var $25=$A;
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      $iB=$27;
      var $28=$A;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      $iC=$30;
      var $31=$iB;
      var $32=0 <= (($31)|(0));
      if ($32) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $34=$iB;
      var $35=(($4+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($34)|(0)) < (($36)|(0));
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      ___assert_func(((5256040)|0), 392, ((5263292)|0), ((5247444)|0));
      throw "Reached an unreachable!"
      label = 11; break;
    case 11: 
      var $42=$iC;
      var $43=0 <= (($42)|(0));
      if ($43) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $45=$iC;
      var $46=(($4+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($45)|(0)) < (($47)|(0));
      if ($48) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      ___assert_func(((5256040)|0), 393, ((5263292)|0), ((5258016)|0));
      throw "Reached an unreachable!"
      label = 15; break;
    case 15: 
      var $53=(($4+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$iB;
      var $56=(($54+((($55)*(36))&-1))|0);
      $B=$56;
      var $57=(($4+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$iC;
      var $60=(($58+((($59)*(36))&-1))|0);
      $C=$60;
      var $61=$C;
      var $62=(($61+32)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$B;
      var $65=(($64+32)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=((($63)-($66))|0);
      $balance=$67;
      var $68=$balance;
      var $69=(($68)|(0)) > 1;
      if ($69) { label = 16; break; } else { label = 37; break; }
    case 16: 
      var $71=$C;
      var $72=(($71+24)|0);
      var $73=HEAP32[(($72)>>2)];
      $iF=$73;
      var $74=$C;
      var $75=(($74+28)|0);
      var $76=HEAP32[(($75)>>2)];
      $iG=$76;
      var $77=(($4+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$iF;
      var $80=(($78+((($79)*(36))&-1))|0);
      $F=$80;
      var $81=(($4+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$iG;
      var $84=(($82+((($83)*(36))&-1))|0);
      $G=$84;
      var $85=$iF;
      var $86=0 <= (($85)|(0));
      if ($86) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $88=$iF;
      var $89=(($4+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($88)|(0)) < (($90)|(0));
      if ($91) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      ___assert_func(((5256040)|0), 407, ((5263292)|0), ((5257720)|0));
      throw "Reached an unreachable!"
      label = 20; break;
    case 20: 
      var $96=$iG;
      var $97=0 <= (($96)|(0));
      if ($97) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $99=$iG;
      var $100=(($4+12)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($99)|(0)) < (($101)|(0));
      if ($102) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      ___assert_func(((5256040)|0), 408, ((5263292)|0), ((5257216)|0));
      throw "Reached an unreachable!"
      label = 24; break;
    case 24: 
      var $107=$3;
      var $108=$C;
      var $109=(($108+24)|0);
      HEAP32[(($109)>>2)]=$107;
      var $110=$A;
      var $111=(($110+20)|0);
      var $112=$111;
      var $113=HEAP32[(($112)>>2)];
      var $114=$C;
      var $115=(($114+20)|0);
      var $116=$115;
      HEAP32[(($116)>>2)]=$113;
      var $117=$iC;
      var $118=$A;
      var $119=(($118+20)|0);
      var $120=$119;
      HEAP32[(($120)>>2)]=$117;
      var $121=$C;
      var $122=(($121+20)|0);
      var $123=$122;
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124)|(0))!=-1;
      if ($125) { label = 25; break; } else { label = 32; break; }
    case 25: 
      var $127=$C;
      var $128=(($127+20)|0);
      var $129=$128;
      var $130=HEAP32[(($129)>>2)];
      var $131=(($4+4)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+((($130)*(36))&-1))|0);
      var $134=(($133+24)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$3;
      var $137=(($135)|(0))==(($136)|(0));
      if ($137) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $139=$iC;
      var $140=$C;
      var $141=(($140+20)|0);
      var $142=$141;
      var $143=HEAP32[(($142)>>2)];
      var $144=(($4+4)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+((($143)*(36))&-1))|0);
      var $147=(($146+24)|0);
      HEAP32[(($147)>>2)]=$139;
      label = 31; break;
    case 27: 
      var $149=$C;
      var $150=(($149+20)|0);
      var $151=$150;
      var $152=HEAP32[(($151)>>2)];
      var $153=(($4+4)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154+((($152)*(36))&-1))|0);
      var $156=(($155+28)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$3;
      var $159=(($157)|(0))==(($158)|(0));
      if ($159) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      ___assert_func(((5256040)|0), 424, ((5263292)|0), ((5256304)|0));
      throw "Reached an unreachable!"
      label = 30; break;
    case 30: 
      var $164=$iC;
      var $165=$C;
      var $166=(($165+20)|0);
      var $167=$166;
      var $168=HEAP32[(($167)>>2)];
      var $169=(($4+4)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170+((($168)*(36))&-1))|0);
      var $172=(($171+28)|0);
      HEAP32[(($172)>>2)]=$164;
      label = 31; break;
    case 31: 
      label = 33; break;
    case 32: 
      var $175=$iC;
      var $176=(($4)|0);
      HEAP32[(($176)>>2)]=$175;
      label = 33; break;
    case 33: 
      var $178=$F;
      var $179=(($178+32)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=$G;
      var $182=(($181+32)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($180)|(0)) > (($183)|(0));
      if ($184) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $186=$iF;
      var $187=$C;
      var $188=(($187+28)|0);
      HEAP32[(($188)>>2)]=$186;
      var $189=$iG;
      var $190=$A;
      var $191=(($190+28)|0);
      HEAP32[(($191)>>2)]=$189;
      var $192=$3;
      var $193=$G;
      var $194=(($193+20)|0);
      var $195=$194;
      HEAP32[(($195)>>2)]=$192;
      var $196=$A;
      var $197=(($196)|0);
      var $198=$B;
      var $199=(($198)|0);
      var $200=$G;
      var $201=(($200)|0);
      __ZN6b2AABB7CombineERKS_S1_($197, $199, $201);
      var $202=$C;
      var $203=(($202)|0);
      var $204=$A;
      var $205=(($204)|0);
      var $206=$F;
      var $207=(($206)|0);
      __ZN6b2AABB7CombineERKS_S1_($203, $205, $207);
      var $208=$B;
      var $209=(($208+32)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=$G;
      var $212=(($211+32)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=__Z5b2MaxIiET_S0_S0_($210, $213);
      var $215=((($214)+(1))|0);
      var $216=$A;
      var $217=(($216+32)|0);
      HEAP32[(($217)>>2)]=$215;
      var $218=$A;
      var $219=(($218+32)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$F;
      var $222=(($221+32)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=__Z5b2MaxIiET_S0_S0_($220, $223);
      var $225=((($224)+(1))|0);
      var $226=$C;
      var $227=(($226+32)|0);
      HEAP32[(($227)>>2)]=$225;
      label = 36; break;
    case 35: 
      var $229=$iG;
      var $230=$C;
      var $231=(($230+28)|0);
      HEAP32[(($231)>>2)]=$229;
      var $232=$iF;
      var $233=$A;
      var $234=(($233+28)|0);
      HEAP32[(($234)>>2)]=$232;
      var $235=$3;
      var $236=$F;
      var $237=(($236+20)|0);
      var $238=$237;
      HEAP32[(($238)>>2)]=$235;
      var $239=$A;
      var $240=(($239)|0);
      var $241=$B;
      var $242=(($241)|0);
      var $243=$F;
      var $244=(($243)|0);
      __ZN6b2AABB7CombineERKS_S1_($240, $242, $244);
      var $245=$C;
      var $246=(($245)|0);
      var $247=$A;
      var $248=(($247)|0);
      var $249=$G;
      var $250=(($249)|0);
      __ZN6b2AABB7CombineERKS_S1_($246, $248, $250);
      var $251=$B;
      var $252=(($251+32)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$F;
      var $255=(($254+32)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=__Z5b2MaxIiET_S0_S0_($253, $256);
      var $258=((($257)+(1))|0);
      var $259=$A;
      var $260=(($259+32)|0);
      HEAP32[(($260)>>2)]=$258;
      var $261=$A;
      var $262=(($261+32)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=$G;
      var $265=(($264+32)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=__Z5b2MaxIiET_S0_S0_($263, $266);
      var $268=((($267)+(1))|0);
      var $269=$C;
      var $270=(($269+32)|0);
      HEAP32[(($270)>>2)]=$268;
      label = 36; break;
    case 36: 
      var $272=$iC;
      $1=$272;
      label = 60; break;
    case 37: 
      var $274=$balance;
      var $275=(($274)|(0)) < -1;
      if ($275) { label = 38; break; } else { label = 59; break; }
    case 38: 
      var $277=$B;
      var $278=(($277+24)|0);
      var $279=HEAP32[(($278)>>2)];
      $iD=$279;
      var $280=$B;
      var $281=(($280+28)|0);
      var $282=HEAP32[(($281)>>2)];
      $iE=$282;
      var $283=(($4+4)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$iD;
      var $286=(($284+((($285)*(36))&-1))|0);
      $D=$286;
      var $287=(($4+4)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$iE;
      var $290=(($288+((($289)*(36))&-1))|0);
      $E=$290;
      var $291=$iD;
      var $292=0 <= (($291)|(0));
      if ($292) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $294=$iD;
      var $295=(($4+12)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($294)|(0)) < (($296)|(0));
      if ($297) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      ___assert_func(((5256040)|0), 467, ((5263292)|0), ((5255924)|0));
      throw "Reached an unreachable!"
      label = 42; break;
    case 42: 
      var $302=$iE;
      var $303=0 <= (($302)|(0));
      if ($303) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $305=$iE;
      var $306=(($4+12)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($305)|(0)) < (($307)|(0));
      if ($308) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 46; break;
    case 45: 
      ___assert_func(((5256040)|0), 468, ((5263292)|0), ((5255728)|0));
      throw "Reached an unreachable!"
      label = 46; break;
    case 46: 
      var $313=$3;
      var $314=$B;
      var $315=(($314+24)|0);
      HEAP32[(($315)>>2)]=$313;
      var $316=$A;
      var $317=(($316+20)|0);
      var $318=$317;
      var $319=HEAP32[(($318)>>2)];
      var $320=$B;
      var $321=(($320+20)|0);
      var $322=$321;
      HEAP32[(($322)>>2)]=$319;
      var $323=$iB;
      var $324=$A;
      var $325=(($324+20)|0);
      var $326=$325;
      HEAP32[(($326)>>2)]=$323;
      var $327=$B;
      var $328=(($327+20)|0);
      var $329=$328;
      var $330=HEAP32[(($329)>>2)];
      var $331=(($330)|(0))!=-1;
      if ($331) { label = 47; break; } else { label = 54; break; }
    case 47: 
      var $333=$B;
      var $334=(($333+20)|0);
      var $335=$334;
      var $336=HEAP32[(($335)>>2)];
      var $337=(($4+4)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($338+((($336)*(36))&-1))|0);
      var $340=(($339+24)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$3;
      var $343=(($341)|(0))==(($342)|(0));
      if ($343) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $345=$iB;
      var $346=$B;
      var $347=(($346+20)|0);
      var $348=$347;
      var $349=HEAP32[(($348)>>2)];
      var $350=(($4+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=(($351+((($349)*(36))&-1))|0);
      var $353=(($352+24)|0);
      HEAP32[(($353)>>2)]=$345;
      label = 53; break;
    case 49: 
      var $355=$B;
      var $356=(($355+20)|0);
      var $357=$356;
      var $358=HEAP32[(($357)>>2)];
      var $359=(($4+4)|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=(($360+((($358)*(36))&-1))|0);
      var $362=(($361+28)|0);
      var $363=HEAP32[(($362)>>2)];
      var $364=$3;
      var $365=(($363)|(0))==(($364)|(0));
      if ($365) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 52; break;
    case 51: 
      ___assert_func(((5256040)|0), 484, ((5263292)|0), ((5255496)|0));
      throw "Reached an unreachable!"
      label = 52; break;
    case 52: 
      var $370=$iB;
      var $371=$B;
      var $372=(($371+20)|0);
      var $373=$372;
      var $374=HEAP32[(($373)>>2)];
      var $375=(($4+4)|0);
      var $376=HEAP32[(($375)>>2)];
      var $377=(($376+((($374)*(36))&-1))|0);
      var $378=(($377+28)|0);
      HEAP32[(($378)>>2)]=$370;
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      var $381=$iB;
      var $382=(($4)|0);
      HEAP32[(($382)>>2)]=$381;
      label = 55; break;
    case 55: 
      var $384=$D;
      var $385=(($384+32)|0);
      var $386=HEAP32[(($385)>>2)];
      var $387=$E;
      var $388=(($387+32)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($386)|(0)) > (($389)|(0));
      if ($390) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $392=$iD;
      var $393=$B;
      var $394=(($393+28)|0);
      HEAP32[(($394)>>2)]=$392;
      var $395=$iE;
      var $396=$A;
      var $397=(($396+24)|0);
      HEAP32[(($397)>>2)]=$395;
      var $398=$3;
      var $399=$E;
      var $400=(($399+20)|0);
      var $401=$400;
      HEAP32[(($401)>>2)]=$398;
      var $402=$A;
      var $403=(($402)|0);
      var $404=$C;
      var $405=(($404)|0);
      var $406=$E;
      var $407=(($406)|0);
      __ZN6b2AABB7CombineERKS_S1_($403, $405, $407);
      var $408=$B;
      var $409=(($408)|0);
      var $410=$A;
      var $411=(($410)|0);
      var $412=$D;
      var $413=(($412)|0);
      __ZN6b2AABB7CombineERKS_S1_($409, $411, $413);
      var $414=$C;
      var $415=(($414+32)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=$E;
      var $418=(($417+32)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=__Z5b2MaxIiET_S0_S0_($416, $419);
      var $421=((($420)+(1))|0);
      var $422=$A;
      var $423=(($422+32)|0);
      HEAP32[(($423)>>2)]=$421;
      var $424=$A;
      var $425=(($424+32)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=$D;
      var $428=(($427+32)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=__Z5b2MaxIiET_S0_S0_($426, $429);
      var $431=((($430)+(1))|0);
      var $432=$B;
      var $433=(($432+32)|0);
      HEAP32[(($433)>>2)]=$431;
      label = 58; break;
    case 57: 
      var $435=$iE;
      var $436=$B;
      var $437=(($436+28)|0);
      HEAP32[(($437)>>2)]=$435;
      var $438=$iD;
      var $439=$A;
      var $440=(($439+24)|0);
      HEAP32[(($440)>>2)]=$438;
      var $441=$3;
      var $442=$D;
      var $443=(($442+20)|0);
      var $444=$443;
      HEAP32[(($444)>>2)]=$441;
      var $445=$A;
      var $446=(($445)|0);
      var $447=$C;
      var $448=(($447)|0);
      var $449=$D;
      var $450=(($449)|0);
      __ZN6b2AABB7CombineERKS_S1_($446, $448, $450);
      var $451=$B;
      var $452=(($451)|0);
      var $453=$A;
      var $454=(($453)|0);
      var $455=$E;
      var $456=(($455)|0);
      __ZN6b2AABB7CombineERKS_S1_($452, $454, $456);
      var $457=$C;
      var $458=(($457+32)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=$D;
      var $461=(($460+32)|0);
      var $462=HEAP32[(($461)>>2)];
      var $463=__Z5b2MaxIiET_S0_S0_($459, $462);
      var $464=((($463)+(1))|0);
      var $465=$A;
      var $466=(($465+32)|0);
      HEAP32[(($466)>>2)]=$464;
      var $467=$A;
      var $468=(($467+32)|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=$E;
      var $471=(($470+32)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=__Z5b2MaxIiET_S0_S0_($469, $472);
      var $474=((($473)+(1))|0);
      var $475=$B;
      var $476=(($475+32)|0);
      HEAP32[(($476)>>2)]=$474;
      label = 58; break;
    case 58: 
      var $478=$iB;
      $1=$478;
      label = 60; break;
    case 59: 
      var $480=$3;
      $1=$480;
      label = 60; break;
    case 60: 
      var $482=$1;
      return $482;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2AbsIiET_S0_($a) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$a;
      var $2=$1;
      var $3=(($2)|(0)) > 0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=$1;
      var $10 = $5;label = 4; break;
    case 3: 
      var $7=$1;
      var $8=(((-$7))|0);
      var $10 = $8;label = 4; break;
    case 4: 
      var $10;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function __ZeqRK6b2Vec2S1_($a, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$a;
      $2=$b;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAPF32[(($4)>>2)];
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=$5 == $8;
      if ($9) { label = 2; break; } else { var $19 = 0;label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=HEAPF32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=$13 == $16;
      var $19 = $17;label = 3; break;
    case 3: 
      var $19;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree13ComputeHeightEv($this) {
  var label = 0;
  var $1;
  var $height;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=__ZNK13b2DynamicTree13ComputeHeightEi($2, $4);
  $height=$5;
  var $6=$height;
  return $6;
}
function __ZNK13b2DynamicTree13ComputeHeightEi($this, $nodeId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $node;
      var $height1;
      var $height2;
      $2=$this;
      $3=$nodeId;
      var $4=$2;
      var $5=$3;
      var $6=0 <= (($5)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($4+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|(0)) < (($10)|(0));
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5256040)|0), 563, ((5259448)|0), ((5254268)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $16=(($4+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$3;
      var $19=(($17+((($18)*(36))&-1))|0);
      $node=$19;
      var $20=$node;
      var $21=__ZNK10b2TreeNode6IsLeafEv($20);
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 8; break;
    case 7: 
      var $24=$node;
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=__ZNK13b2DynamicTree13ComputeHeightEi($4, $26);
      $height1=$27;
      var $28=$node;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=__ZNK13b2DynamicTree13ComputeHeightEi($4, $30);
      $height2=$31;
      var $32=$height1;
      var $33=$height2;
      var $34=__Z5b2MaxIiET_S0_S0_($32, $33);
      var $35=((($34)+(1))|0);
      $1=$35;
      label = 8; break;
    case 8: 
      var $37=$1;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree17ValidateStructureEi($this, $index) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $node;
      var $child1;
      var $child2;
      $1=$this;
      $2=$index;
      var $3=$1;
      var $4=$2;
      var $5=(($4)|(0))==-1;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 34; break;
    case 3: 
      var $8=$2;
      var $9=(($3)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|(0))==(($10)|(0));
      if ($11) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $13=$2;
      var $14=(($3+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+((($13)*(36))&-1))|0);
      var $17=(($16+20)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))==-1;
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5256040)|0), 591, ((5259300)|0), ((5255152)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $26=(($3+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($27+((($28)*(36))&-1))|0);
      $node=$29;
      var $30=$node;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      $child1=$32;
      var $33=$node;
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      $child2=$35;
      var $36=$node;
      var $37=__ZNK10b2TreeNode6IsLeafEv($36);
      if ($37) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $39=$child1;
      var $40=(($39)|(0))==-1;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      ___assert_func(((5256040)|0), 601, ((5259300)|0), ((5255032)|0));
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      var $45=$child2;
      var $46=(($45)|(0))==-1;
      if ($46) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      ___assert_func(((5256040)|0), 602, ((5259300)|0), ((5254912)|0));
      throw "Reached an unreachable!"
      label = 15; break;
    case 15: 
      var $51=$node;
      var $52=(($51+32)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))==0;
      if ($54) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      ___assert_func(((5256040)|0), 603, ((5259300)|0), ((5254720)|0));
      throw "Reached an unreachable!"
      label = 18; break;
    case 18: 
      label = 34; break;
    case 19: 
      var $60=$child1;
      var $61=0 <= (($60)|(0));
      if ($61) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $63=$child1;
      var $64=(($3+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($63)|(0)) < (($65)|(0));
      if ($66) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      ___assert_func(((5256040)|0), 607, ((5259300)|0), ((5254516)|0));
      throw "Reached an unreachable!"
      label = 23; break;
    case 23: 
      var $71=$child2;
      var $72=0 <= (($71)|(0));
      if ($72) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $74=$child2;
      var $75=(($3+12)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($74)|(0)) < (($76)|(0));
      if ($77) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      ___assert_func(((5256040)|0), 608, ((5259300)|0), ((5254104)|0));
      throw "Reached an unreachable!"
      label = 27; break;
    case 27: 
      var $82=$child1;
      var $83=(($3+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+((($82)*(36))&-1))|0);
      var $86=(($85+20)|0);
      var $87=$86;
      var $88=HEAP32[(($87)>>2)];
      var $89=$2;
      var $90=(($88)|(0))==(($89)|(0));
      if ($90) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      ___assert_func(((5256040)|0), 610, ((5259300)|0), ((5253576)|0));
      throw "Reached an unreachable!"
      label = 30; break;
    case 30: 
      var $95=$child2;
      var $96=(($3+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+((($95)*(36))&-1))|0);
      var $99=(($98+20)|0);
      var $100=$99;
      var $101=HEAP32[(($100)>>2)];
      var $102=$2;
      var $103=(($101)|(0))==(($102)|(0));
      if ($103) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      ___assert_func(((5256040)|0), 611, ((5259300)|0), ((5253172)|0));
      throw "Reached an unreachable!"
      label = 33; break;
    case 33: 
      var $108=$child1;
      __ZNK13b2DynamicTree17ValidateStructureEi($3, $108);
      var $109=$child2;
      __ZNK13b2DynamicTree17ValidateStructureEi($3, $109);
      label = 34; break;
    case 34: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree15ValidateMetricsEi($this, $index) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $node;
      var $child1;
      var $child2;
      var $height1;
      var $height2;
      var $height;
      var $aabb=__stackBase__;
      $1=$this;
      $2=$index;
      var $3=$1;
      var $4=$2;
      var $5=(($4)|(0))==-1;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 32; break;
    case 3: 
      var $8=(($3+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$2;
      var $11=(($9+((($10)*(36))&-1))|0);
      $node=$11;
      var $12=$node;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      $child1=$14;
      var $15=$node;
      var $16=(($15+28)|0);
      var $17=HEAP32[(($16)>>2)];
      $child2=$17;
      var $18=$node;
      var $19=__ZNK10b2TreeNode6IsLeafEv($18);
      if ($19) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $21=$child1;
      var $22=(($21)|(0))==-1;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5256040)|0), 631, ((5259352)|0), ((5255032)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $27=$child2;
      var $28=(($27)|(0))==-1;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      ___assert_func(((5256040)|0), 632, ((5259352)|0), ((5254912)|0));
      throw "Reached an unreachable!"
      label = 10; break;
    case 10: 
      var $33=$node;
      var $34=(($33+32)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))==0;
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      ___assert_func(((5256040)|0), 633, ((5259352)|0), ((5254720)|0));
      throw "Reached an unreachable!"
      label = 13; break;
    case 13: 
      label = 32; break;
    case 14: 
      var $42=$child1;
      var $43=0 <= (($42)|(0));
      if ($43) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $45=$child1;
      var $46=(($3+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($45)|(0)) < (($47)|(0));
      if ($48) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      ___assert_func(((5256040)|0), 637, ((5259352)|0), ((5254516)|0));
      throw "Reached an unreachable!"
      label = 18; break;
    case 18: 
      var $53=$child2;
      var $54=0 <= (($53)|(0));
      if ($54) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $56=$child2;
      var $57=(($3+12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($56)|(0)) < (($58)|(0));
      if ($59) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      ___assert_func(((5256040)|0), 638, ((5259352)|0), ((5254104)|0));
      throw "Reached an unreachable!"
      label = 22; break;
    case 22: 
      var $64=$child1;
      var $65=(($3+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($64)*(36))&-1))|0);
      var $68=(($67+32)|0);
      var $69=HEAP32[(($68)>>2)];
      $height1=$69;
      var $70=$child2;
      var $71=(($3+4)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+((($70)*(36))&-1))|0);
      var $74=(($73+32)|0);
      var $75=HEAP32[(($74)>>2)];
      $height2=$75;
      var $76=$height1;
      var $77=$height2;
      var $78=__Z5b2MaxIiET_S0_S0_($76, $77);
      var $79=((($78)+(1))|0);
      $height=$79;
      var $80=$node;
      var $81=(($80+32)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$height;
      var $84=(($82)|(0))==(($83)|(0));
      if ($84) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      ___assert_func(((5256040)|0), 644, ((5259352)|0), ((5252988)|0));
      throw "Reached an unreachable!"
      label = 25; break;
    case 25: 
      __ZN6b2AABBC1Ev($aabb);
      var $89=$child1;
      var $90=(($3+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+((($89)*(36))&-1))|0);
      var $93=(($92)|0);
      var $94=$child2;
      var $95=(($3+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+((($94)*(36))&-1))|0);
      var $98=(($97)|0);
      __ZN6b2AABB7CombineERKS_S1_($aabb, $93, $98);
      var $99=(($aabb)|0);
      var $100=$node;
      var $101=(($100)|0);
      var $102=(($101)|0);
      var $103=__ZeqRK6b2Vec2S1_($99, $102);
      if ($103) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      ___assert_func(((5256040)|0), 649, ((5259352)|0), ((5252656)|0));
      throw "Reached an unreachable!"
      label = 28; break;
    case 28: 
      var $108=(($aabb+8)|0);
      var $109=$node;
      var $110=(($109)|0);
      var $111=(($110+8)|0);
      var $112=__ZeqRK6b2Vec2S1_($108, $111);
      if ($112) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      ___assert_func(((5256040)|0), 650, ((5259352)|0), ((5252440)|0));
      throw "Reached an unreachable!"
      label = 31; break;
    case 31: 
      var $117=$child1;
      __ZNK13b2DynamicTree15ValidateMetricsEi($3, $117);
      var $118=$child2;
      __ZNK13b2DynamicTree15ValidateMetricsEi($3, $118);
      label = 32; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree8ValidateEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $freeCount;
      var $freeIndex;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      __ZNK13b2DynamicTree17ValidateStructureEi($2, $4);
      var $5=(($2)|0);
      var $6=HEAP32[(($5)>>2)];
      __ZNK13b2DynamicTree15ValidateMetricsEi($2, $6);
      $freeCount=0;
      var $7=(($2+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $freeIndex=$8;
      label = 2; break;
    case 2: 
      var $10=$freeIndex;
      var $11=(($10)|(0))!=-1;
      if ($11) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $13=$freeIndex;
      var $14=0 <= (($13)|(0));
      if ($14) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $16=$freeIndex;
      var $17=(($2+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|(0)) < (($18)|(0));
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5256040)|0), 665, ((5259168)|0), ((5252004)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $24=$freeIndex;
      var $25=(($2+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+((($24)*(36))&-1))|0);
      var $28=(($27+20)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      $freeIndex=$30;
      var $31=$freeCount;
      var $32=((($31)+(1))|0);
      $freeCount=$32;
      label = 2; break;
    case 8: 
      var $34=__ZNK13b2DynamicTree9GetHeightEv($2);
      var $35=__ZNK13b2DynamicTree13ComputeHeightEv($2);
      var $36=(($34)|(0))==(($35)|(0));
      if ($36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      ___assert_func(((5256040)|0), 670, ((5259168)|0), ((5251972)|0));
      throw "Reached an unreachable!"
      label = 11; break;
    case 11: 
      var $41=(($2+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$freeCount;
      var $44=((($42)+($43))|0);
      var $45=(($2+12)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($44)|(0))==(($46)|(0));
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      ___assert_func(((5256040)|0), 672, ((5259168)|0), ((5251784)|0));
      throw "Reached an unreachable!"
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree13GetMaxBalanceEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $maxBalance;
      var $i;
      var $node;
      var $child1;
      var $child2;
      var $balance;
      $1=$this;
      var $2=$1;
      $maxBalance=0;
      $i=0;
      label = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|(0)) < (($6)|(0));
      if ($7) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $9=(($2+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$i;
      var $12=(($10+((($11)*(36))&-1))|0);
      $node=$12;
      var $13=$node;
      var $14=(($13+32)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0)) <= 1;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 9; break;
    case 5: 
      var $19=$node;
      var $20=__ZNK10b2TreeNode6IsLeafEv($19);
      var $21=(($20)&(1));
      var $22=(($21)|(0))==0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5256040)|0), 686, ((5259404)|0), ((5251660)|0));
      throw "Reached an unreachable!"
      label = 8; break;
    case 8: 
      var $27=$node;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      $child1=$29;
      var $30=$node;
      var $31=(($30+28)|0);
      var $32=HEAP32[(($31)>>2)];
      $child2=$32;
      var $33=$child2;
      var $34=(($2+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+((($33)*(36))&-1))|0);
      var $37=(($36+32)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$child1;
      var $40=(($2+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+((($39)*(36))&-1))|0);
      var $43=(($42+32)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($38)-($44))|0);
      var $46=__Z5b2AbsIiET_S0_($45);
      $balance=$46;
      var $47=$maxBalance;
      var $48=$balance;
      var $49=__Z5b2MaxIiET_S0_S0_($47, $48);
      $maxBalance=$49;
      label = 9; break;
    case 9: 
      var $51=$i;
      var $52=((($51)+(1))|0);
      $i=$52;
      label = 2; break;
    case 10: 
      var $54=$maxBalance;
      return $54;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2MaxIfET_S0_S0_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3 > $4;
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  return $8;
}
function __ZN13b2DynamicTree15RebuildBottomUpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $nodes;
      var $count;
      var $i;
      var $minCost;
      var $iMin;
      var $jMin;
      var $i1;
      var $aabbi=__stackBase__;
      var $j;
      var $aabbj=(__stackBase__)+(16);
      var $b=(__stackBase__)+(32);
      var $cost;
      var $index1;
      var $index2;
      var $child1;
      var $child2;
      var $parentIndex;
      var $parent;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=($4<<2);
      var $6=__Z7b2Alloci($5);
      var $7=$6;
      $nodes=$7;
      $count=0;
      $i=0;
      label = 2; break;
    case 2: 
      var $9=$i;
      var $10=(($2+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($9)|(0)) < (($11)|(0));
      if ($12) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $14=$i;
      var $15=(($2+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+((($14)*(36))&-1))|0);
      var $18=(($17+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0)) < 0;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 9; break;
    case 5: 
      var $23=$i;
      var $24=(($2+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+((($23)*(36))&-1))|0);
      var $27=__ZNK10b2TreeNode6IsLeafEv($26);
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$i;
      var $30=(($2+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+((($29)*(36))&-1))|0);
      var $33=(($32+20)|0);
      var $34=$33;
      HEAP32[(($34)>>2)]=-1;
      var $35=$i;
      var $36=$count;
      var $37=$nodes;
      var $38=(($37+($36<<2))|0);
      HEAP32[(($38)>>2)]=$35;
      var $39=$count;
      var $40=((($39)+(1))|0);
      $count=$40;
      label = 8; break;
    case 7: 
      var $42=$i;
      __ZN13b2DynamicTree8FreeNodeEi($2, $42);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $45=$i;
      var $46=((($45)+(1))|0);
      $i=$46;
      label = 2; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $49=$count;
      var $50=(($49)|(0)) > 1;
      if ($50) { label = 12; break; } else { label = 23; break; }
    case 12: 
      $minCost=3.4028234663852886e+38;
      $iMin=-1;
      $jMin=-1;
      $i1=0;
      label = 13; break;
    case 13: 
      var $53=$i1;
      var $54=$count;
      var $55=(($53)|(0)) < (($54)|(0));
      if ($55) { label = 14; break; } else { label = 22; break; }
    case 14: 
      var $57=$i1;
      var $58=$nodes;
      var $59=(($58+($57<<2))|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($2+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+((($60)*(36))&-1))|0);
      var $64=(($63)|0);
      var $65=$aabbi;
      var $66=$64;
      assert(16 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];HEAP32[((($65)+(12))>>2)]=HEAP32[((($66)+(12))>>2)];
      var $67=$i1;
      var $68=((($67)+(1))|0);
      $j=$68;
      label = 15; break;
    case 15: 
      var $70=$j;
      var $71=$count;
      var $72=(($70)|(0)) < (($71)|(0));
      if ($72) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $74=$j;
      var $75=$nodes;
      var $76=(($75+($74<<2))|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($2+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+((($77)*(36))&-1))|0);
      var $81=(($80)|0);
      var $82=$aabbj;
      var $83=$81;
      assert(16 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($83)+(8))>>2)];HEAP32[((($82)+(12))>>2)]=HEAP32[((($83)+(12))>>2)];
      __ZN6b2AABBC1Ev($b);
      __ZN6b2AABB7CombineERKS_S1_($b, $aabbi, $aabbj);
      var $84=__ZNK6b2AABB12GetPerimeterEv($b);
      $cost=$84;
      var $85=$cost;
      var $86=$minCost;
      var $87=$85 < $86;
      if ($87) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $89=$i1;
      $iMin=$89;
      var $90=$j;
      $jMin=$90;
      var $91=$cost;
      $minCost=$91;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $94=$j;
      var $95=((($94)+(1))|0);
      $j=$95;
      label = 15; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $98=$i1;
      var $99=((($98)+(1))|0);
      $i1=$99;
      label = 13; break;
    case 22: 
      var $101=$iMin;
      var $102=$nodes;
      var $103=(($102+($101<<2))|0);
      var $104=HEAP32[(($103)>>2)];
      $index1=$104;
      var $105=$jMin;
      var $106=$nodes;
      var $107=(($106+($105<<2))|0);
      var $108=HEAP32[(($107)>>2)];
      $index2=$108;
      var $109=(($2+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$index1;
      var $112=(($110+((($111)*(36))&-1))|0);
      $child1=$112;
      var $113=(($2+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$index2;
      var $116=(($114+((($115)*(36))&-1))|0);
      $child2=$116;
      var $117=__ZN13b2DynamicTree12AllocateNodeEv($2);
      $parentIndex=$117;
      var $118=(($2+4)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$parentIndex;
      var $121=(($119+((($120)*(36))&-1))|0);
      $parent=$121;
      var $122=$index1;
      var $123=$parent;
      var $124=(($123+24)|0);
      HEAP32[(($124)>>2)]=$122;
      var $125=$index2;
      var $126=$parent;
      var $127=(($126+28)|0);
      HEAP32[(($127)>>2)]=$125;
      var $128=$child1;
      var $129=(($128+32)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$child2;
      var $132=(($131+32)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=__Z5b2MaxIiET_S0_S0_($130, $133);
      var $135=((($134)+(1))|0);
      var $136=$parent;
      var $137=(($136+32)|0);
      HEAP32[(($137)>>2)]=$135;
      var $138=$parent;
      var $139=(($138)|0);
      var $140=$child1;
      var $141=(($140)|0);
      var $142=$child2;
      var $143=(($142)|0);
      __ZN6b2AABB7CombineERKS_S1_($139, $141, $143);
      var $144=$parent;
      var $145=(($144+20)|0);
      var $146=$145;
      HEAP32[(($146)>>2)]=-1;
      var $147=$parentIndex;
      var $148=$child1;
      var $149=(($148+20)|0);
      var $150=$149;
      HEAP32[(($150)>>2)]=$147;
      var $151=$parentIndex;
      var $152=$child2;
      var $153=(($152+20)|0);
      var $154=$153;
      HEAP32[(($154)>>2)]=$151;
      var $155=$count;
      var $156=((($155)-(1))|0);
      var $157=$nodes;
      var $158=(($157+($156<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$jMin;
      var $161=$nodes;
      var $162=(($161+($160<<2))|0);
      HEAP32[(($162)>>2)]=$159;
      var $163=$parentIndex;
      var $164=$iMin;
      var $165=$nodes;
      var $166=(($165+($164<<2))|0);
      HEAP32[(($166)>>2)]=$163;
      var $167=$count;
      var $168=((($167)-(1))|0);
      $count=$168;
      label = 11; break;
    case 23: 
      var $170=$nodes;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($2)|0);
      HEAP32[(($173)>>2)]=$172;
      var $174=$nodes;
      var $175=$174;
      __Z6b2FreePv($175);
      __ZNK13b2DynamicTree8ValidateEv($2);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2MinRK6b2Vec2S1_($agg_result, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=__Z5b2MinIfET_S0_S0_($5, $8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=__Z5b2MinIfET_S0_S0_($12, $15);
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  return;
}
function __Z5b2MaxRK6b2Vec2S1_($agg_result, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=__Z5b2MaxIfET_S0_S0_($5, $8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=__Z5b2MaxIfET_S0_S0_($12, $15);
  __ZN6b2Vec2C1Eff($agg_result, $9, $16);
  return;
}
function __ZN6b2AABBC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  return;
}
function __ZN7b2Sweep9NormalizeEv($this) {
  var label = 0;
  var $1;
  var $twoPi;
  var $d;
  $1=$this;
  var $2=$1;
  $twoPi=6.2831854820251465;
  var $3=$twoPi;
  var $4=(($2+24)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$twoPi;
  var $7=($5)/($6);
  var $8=Math.floor($7);
  var $9=($3)*($8);
  $d=$9;
  var $10=$d;
  var $11=(($2+24)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=($12)-($10);
  HEAPF32[(($11)>>2)]=$13;
  var $14=$d;
  var $15=(($2+28)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=($16)-($14);
  HEAPF32[(($15)>>2)]=$17;
  return;
}
function __ZNK7b2Sweep12GetTransformEP11b2Transformf($this, $xf, $beta) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  var $5=(__stackBase__)+(8);
  var $6=(__stackBase__)+(16);
  var $angle;
  var $7=(__stackBase__)+(24);
  $1=$this;
  $2=$xf;
  $3=$beta;
  var $8=$1;
  var $9=$2;
  var $10=(($9)|0);
  var $11=$3;
  var $12=(1)-($11);
  var $13=(($8+8)|0);
  __ZmlfRK6b2Vec2($5, $12, $13);
  var $14=$3;
  var $15=(($8+16)|0);
  __ZmlfRK6b2Vec2($6, $14, $15);
  __ZplRK6b2Vec2S1_($4, $5, $6);
  var $16=$10;
  var $17=$4;
  assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
  var $18=$3;
  var $19=(1)-($18);
  var $20=(($8+24)|0);
  var $21=HEAPF32[(($20)>>2)];
  var $22=($19)*($21);
  var $23=$3;
  var $24=(($8+28)|0);
  var $25=HEAPF32[(($24)>>2)];
  var $26=($23)*($25);
  var $27=($22)+($26);
  $angle=$27;
  var $28=$2;
  var $29=(($28+8)|0);
  var $30=$angle;
  __ZN5b2Rot3SetEf($29, $30);
  var $31=$2;
  var $32=(($31)|0);
  var $33=$2;
  var $34=(($33+8)|0);
  var $35=(($8)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($7, $34, $35);
  __ZN6b2Vec2mIERKS_($32, $7);
  STACKTOP = __stackBase__;
  return;
}
function __ZN20b2SeparationFunctionC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN20b2SeparationFunctionC2Ev($2);
  return;
}
function __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 340)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $proxyA;
      var $proxyB;
      var $sweepA=__stackBase__;
      var $sweepB=(__stackBase__)+(36);
      var $tMax;
      var $totalRadius;
      var $target;
      var $tolerance;
      var $t1;
      var $k_maxIterations;
      var $iter;
      var $cache=(__stackBase__)+(72);
      var $distanceInput=(__stackBase__)+(84);
      var $xfA=(__stackBase__)+(176);
      var $xfB=(__stackBase__)+(192);
      var $distanceOutput=(__stackBase__)+(208);
      var $fcn=(__stackBase__)+(232);
      var $done;
      var $t2;
      var $pushBackIter;
      var $indexA=(__stackBase__)+(332);
      var $indexB=(__stackBase__)+(336);
      var $s2;
      var $s1;
      var $rootIterCount;
      var $a1;
      var $a2;
      var $t;
      var $s;
      $1=$output;
      $2=$input;
      var $3=HEAP32[((5247036)>>2)];
      var $4=((($3)+(1))|0);
      HEAP32[((5247036)>>2)]=$4;
      var $5=$1;
      var $6=(($5)|0);
      HEAP32[(($6)>>2)]=0;
      var $7=$2;
      var $8=(($7+128)|0);
      var $9=HEAPF32[(($8)>>2)];
      var $10=$1;
      var $11=(($10+4)|0);
      HEAPF32[(($11)>>2)]=$9;
      var $12=$2;
      var $13=(($12)|0);
      $proxyA=$13;
      var $14=$2;
      var $15=(($14+28)|0);
      $proxyB=$15;
      var $16=$2;
      var $17=(($16+56)|0);
      var $18=$sweepA;
      var $19=$17;
      assert(36 % 1 === 0);_memcpy($18, $19, 36);
      var $20=$2;
      var $21=(($20+92)|0);
      var $22=$sweepB;
      var $23=$21;
      assert(36 % 1 === 0);_memcpy($22, $23, 36);
      __ZN7b2Sweep9NormalizeEv($sweepA);
      __ZN7b2Sweep9NormalizeEv($sweepB);
      var $24=$2;
      var $25=(($24+128)|0);
      var $26=HEAPF32[(($25)>>2)];
      $tMax=$26;
      var $27=$proxyA;
      var $28=(($27+24)|0);
      var $29=HEAPF32[(($28)>>2)];
      var $30=$proxyB;
      var $31=(($30+24)|0);
      var $32=HEAPF32[(($31)>>2)];
      var $33=($29)+($32);
      $totalRadius=$33;
      var $34=$totalRadius;
      var $35=($34)-(0.014999999664723873);
      var $36=__Z5b2MaxIfET_S0_S0_(0.004999999888241291, $35);
      $target=$36;
      $tolerance=0.0012499999720603228;
      var $37=$target;
      var $38=$tolerance;
      var $39=$37 > $38;
      if ($39) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5250808)|0), 280, ((5264212)|0), ((5256136)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      $t1=0;
      $k_maxIterations=20;
      $iter=0;
      var $44=(($cache+4)|0);
      HEAP16[(($44)>>1)]=0;
      __ZN15b2DistanceInputC1Ev($distanceInput);
      var $45=(($distanceInput)|0);
      var $46=$2;
      var $47=(($46)|0);
      var $48=$45;
      var $49=$47;
      assert(28 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];HEAP32[((($48)+(12))>>2)]=HEAP32[((($49)+(12))>>2)];HEAP32[((($48)+(16))>>2)]=HEAP32[((($49)+(16))>>2)];HEAP32[((($48)+(20))>>2)]=HEAP32[((($49)+(20))>>2)];HEAP32[((($48)+(24))>>2)]=HEAP32[((($49)+(24))>>2)];
      var $50=(($distanceInput+28)|0);
      var $51=$2;
      var $52=(($51+28)|0);
      var $53=$50;
      var $54=$52;
      assert(28 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];HEAP32[((($53)+(12))>>2)]=HEAP32[((($54)+(12))>>2)];HEAP32[((($53)+(16))>>2)]=HEAP32[((($54)+(16))>>2)];HEAP32[((($53)+(20))>>2)]=HEAP32[((($54)+(20))>>2)];HEAP32[((($53)+(24))>>2)]=HEAP32[((($54)+(24))>>2)];
      var $55=(($distanceInput+88)|0);
      HEAP8[($55)]=0;
      label = 5; break;
    case 5: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $57=$t1;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepA, $xfA, $57);
      var $58=$t1;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepB, $xfB, $58);
      var $59=(($distanceInput+56)|0);
      var $60=$59;
      var $61=$xfA;
      assert(16 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];HEAP32[((($60)+(12))>>2)]=HEAP32[((($61)+(12))>>2)];
      var $62=(($distanceInput+72)|0);
      var $63=$62;
      var $64=$xfB;
      assert(16 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];HEAP32[((($63)+(12))>>2)]=HEAP32[((($64)+(12))>>2)];
      __ZN16b2DistanceOutputC1Ev($distanceOutput);
      __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($distanceOutput, $cache, $distanceInput);
      var $65=(($distanceOutput+16)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=$66 <= 0;
      if ($67) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $69=$1;
      var $70=(($69)|0);
      HEAP32[(($70)>>2)]=2;
      var $71=$1;
      var $72=(($71+4)|0);
      HEAPF32[(($72)>>2)]=0;
      label = 38; break;
    case 7: 
      var $74=(($distanceOutput+16)|0);
      var $75=HEAPF32[(($74)>>2)];
      var $76=$target;
      var $77=$tolerance;
      var $78=($76)+($77);
      var $79=$75 < $78;
      if ($79) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $81=$1;
      var $82=(($81)|0);
      HEAP32[(($82)>>2)]=3;
      var $83=$t1;
      var $84=$1;
      var $85=(($84+4)|0);
      HEAPF32[(($85)>>2)]=$83;
      label = 38; break;
    case 9: 
      __ZN20b2SeparationFunctionC1Ev($fcn);
      var $87=$proxyA;
      var $88=$proxyB;
      var $89=$t1;
      var $90=__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($fcn, $cache, $87, $sweepA, $88, $sweepB, $89);
      $done=0;
      var $91=$tMax;
      $t2=$91;
      $pushBackIter=0;
      label = 10; break;
    case 10: 
      var $93=$t2;
      var $94=__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($fcn, $indexA, $indexB, $93);
      $s2=$94;
      var $95=$s2;
      var $96=$target;
      var $97=$tolerance;
      var $98=($96)+($97);
      var $99=$95 > $98;
      if ($99) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $101=$1;
      var $102=(($101)|0);
      HEAP32[(($102)>>2)]=4;
      var $103=$tMax;
      var $104=$1;
      var $105=(($104+4)|0);
      HEAPF32[(($105)>>2)]=$103;
      $done=1;
      label = 33; break;
    case 12: 
      var $107=$s2;
      var $108=$target;
      var $109=$tolerance;
      var $110=($108)-($109);
      var $111=$107 > $110;
      if ($111) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $113=$t2;
      $t1=$113;
      label = 33; break;
    case 14: 
      var $115=HEAP32[(($indexA)>>2)];
      var $116=HEAP32[(($indexB)>>2)];
      var $117=$t1;
      var $118=__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $115, $116, $117);
      $s1=$118;
      var $119=$s1;
      var $120=$target;
      var $121=$tolerance;
      var $122=($120)-($121);
      var $123=$119 < $122;
      if ($123) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $125=$1;
      var $126=(($125)|0);
      HEAP32[(($126)>>2)]=1;
      var $127=$t1;
      var $128=$1;
      var $129=(($128+4)|0);
      HEAPF32[(($129)>>2)]=$127;
      $done=1;
      label = 33; break;
    case 16: 
      var $131=$s1;
      var $132=$target;
      var $133=$tolerance;
      var $134=($132)+($133);
      var $135=$131 <= $134;
      if ($135) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $137=$1;
      var $138=(($137)|0);
      HEAP32[(($138)>>2)]=3;
      var $139=$t1;
      var $140=$1;
      var $141=(($140+4)|0);
      HEAPF32[(($141)>>2)]=$139;
      $done=1;
      label = 33; break;
    case 18: 
      $rootIterCount=0;
      var $143=$t1;
      $a1=$143;
      var $144=$t2;
      $a2=$144;
      label = 19; break;
    case 19: 
      var $146=$rootIterCount;
      var $147=$146 & 1;
      var $148=(($147)|(0))!=0;
      if ($148) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $150=$a1;
      var $151=$target;
      var $152=$s1;
      var $153=($151)-($152);
      var $154=$a2;
      var $155=$a1;
      var $156=($154)-($155);
      var $157=($153)*($156);
      var $158=$s2;
      var $159=$s1;
      var $160=($158)-($159);
      var $161=($157)/($160);
      var $162=($150)+($161);
      $t=$162;
      label = 22; break;
    case 21: 
      var $164=$a1;
      var $165=$a2;
      var $166=($164)+($165);
      var $167=($166)*(0.5);
      $t=$167;
      label = 22; break;
    case 22: 
      var $169=HEAP32[(($indexA)>>2)];
      var $170=HEAP32[(($indexB)>>2)];
      var $171=$t;
      var $172=__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $169, $170, $171);
      $s=$172;
      var $173=$s;
      var $174=$target;
      var $175=($173)-($174);
      var $176=__Z5b2AbsIfET_S0_($175);
      var $177=$tolerance;
      var $178=$176 < $177;
      if ($178) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $180=$t;
      $t2=$180;
      label = 30; break;
    case 24: 
      var $182=$s;
      var $183=$target;
      var $184=$182 > $183;
      if ($184) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $186=$t;
      $a1=$186;
      var $187=$s;
      $s1=$187;
      label = 27; break;
    case 26: 
      var $189=$t;
      $a2=$189;
      var $190=$s;
      $s2=$190;
      label = 27; break;
    case 27: 
      var $192=$rootIterCount;
      var $193=((($192)+(1))|0);
      $rootIterCount=$193;
      var $194=HEAP32[((5247020)>>2)];
      var $195=((($194)+(1))|0);
      HEAP32[((5247020)>>2)]=$195;
      var $196=$rootIterCount;
      var $197=(($196)|(0))==50;
      if ($197) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      label = 19; break;
    case 30: 
      var $201=HEAP32[((5247024)>>2)];
      var $202=$rootIterCount;
      var $203=__Z5b2MaxIiET_S0_S0_($201, $202);
      HEAP32[((5247024)>>2)]=$203;
      var $204=$pushBackIter;
      var $205=((($204)+(1))|0);
      $pushBackIter=$205;
      var $206=$pushBackIter;
      var $207=(($206)|(0))==8;
      if ($207) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      label = 10; break;
    case 33: 
      var $211=$iter;
      var $212=((($211)+(1))|0);
      $iter=$212;
      var $213=HEAP32[((5247032)>>2)];
      var $214=((($213)+(1))|0);
      HEAP32[((5247032)>>2)]=$214;
      var $215=$done;
      var $216=(($215) & 1);
      if ($216) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 38; break;
    case 35: 
      var $219=$iter;
      var $220=(($219)|(0))==20;
      if ($220) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $222=$1;
      var $223=(($222)|0);
      HEAP32[(($223)>>2)]=1;
      var $224=$t1;
      var $225=$1;
      var $226=(($225+4)|0);
      HEAPF32[(($226)>>2)]=$224;
      label = 38; break;
    case 37: 
      label = 5; break;
    case 38: 
      var $229=HEAP32[((5247028)>>2)];
      var $230=$iter;
      var $231=__Z5b2MaxIiET_S0_S0_($229, $230);
      HEAP32[((5247028)>>2)]=$231;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2ShapeD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN20b2SeparationFunctionC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  __ZN7b2SweepC1Ev($3);
  var $4=(($2+44)|0);
  __ZN7b2SweepC1Ev($4);
  var $5=(($2+84)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+92)|0);
  __ZN6b2Vec2C1Ev($6);
  return;
}
function __ZN7b2SweepC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2SweepC2Ev($2);
  return;
}
function __ZN7b2SweepC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+16)|0);
  __ZN6b2Vec2C1Ev($5);
  return;
}
function __ZN5b2Rot3SetEf($this, $angle) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$angle;
  var $3=$1;
  var $4=$2;
  var $5=Math.sin($4);
  var $6=(($3)|0);
  HEAPF32[(($6)>>2)]=$5;
  var $7=$2;
  var $8=Math.cos($7);
  var $9=(($3+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  return;
}
function __ZN12b2ChainShapeD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN12b2ChainShapeD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2ChainShape13SetPrevVertexERK6b2Vec2($this, $prevVertex) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$prevVertex;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  var $8=(($3+36)|0);
  HEAP8[($8)]=1;
  return;
}
function __ZN12b2ChainShape13SetNextVertexERK6b2Vec2($this, $nextVertex) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$nextVertex;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  var $8=(($3+37)|0);
  HEAP8[($8)]=1;
  return;
}
function __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($this, $cache, $proxyA, $sweepA, $proxyB, $sweepB, $t1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 264)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $count;
      var $xfA=__stackBase__;
      var $xfB=(__stackBase__)+(16);
      var $localPointA=(__stackBase__)+(32);
      var $localPointB=(__stackBase__)+(40);
      var $pointA=(__stackBase__)+(48);
      var $pointB=(__stackBase__)+(56);
      var $9=(__stackBase__)+(64);
      var $s;
      var $localPointB1=(__stackBase__)+(72);
      var $localPointB2=(__stackBase__)+(80);
      var $10=(__stackBase__)+(88);
      var $11=(__stackBase__)+(96);
      var $normal=(__stackBase__)+(104);
      var $12=(__stackBase__)+(112);
      var $13=(__stackBase__)+(120);
      var $pointB1=(__stackBase__)+(128);
      var $localPointA2=(__stackBase__)+(136);
      var $pointA3=(__stackBase__)+(144);
      var $s4;
      var $14=(__stackBase__)+(152);
      var $15=(__stackBase__)+(160);
      var $localPointA1=(__stackBase__)+(168);
      var $localPointA25=(__stackBase__)+(176);
      var $16=(__stackBase__)+(184);
      var $17=(__stackBase__)+(192);
      var $normal6=(__stackBase__)+(200);
      var $18=(__stackBase__)+(208);
      var $19=(__stackBase__)+(216);
      var $pointA7=(__stackBase__)+(224);
      var $localPointB8=(__stackBase__)+(232);
      var $pointB9=(__stackBase__)+(240);
      var $s10;
      var $20=(__stackBase__)+(248);
      var $21=(__stackBase__)+(256);
      $2=$this;
      $3=$cache;
      $4=$proxyA;
      $5=$sweepA;
      $6=$proxyB;
      $7=$sweepB;
      $8=$t1;
      var $22=$2;
      var $23=$4;
      var $24=(($22)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=$6;
      var $26=(($22+4)|0);
      HEAP32[(($26)>>2)]=$25;
      var $27=$3;
      var $28=(($27+4)|0);
      var $29=HEAP16[(($28)>>1)];
      var $30=(($29)&(65535));
      $count=$30;
      var $31=$count;
      var $32=0 < (($31)|(0));
      if ($32) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $34=$count;
      var $35=(($34)|(0)) < 3;
      if ($35) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5250808)|0), 50, ((5261964)|0), ((5249176)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $40=(($22+8)|0);
      var $41=$5;
      var $42=$40;
      var $43=$41;
      assert(36 % 1 === 0);_memcpy($42, $43, 36);
      var $44=(($22+44)|0);
      var $45=$7;
      var $46=$44;
      var $47=$45;
      assert(36 % 1 === 0);_memcpy($46, $47, 36);
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $48=(($22+8)|0);
      var $49=$8;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($48, $xfA, $49);
      var $50=(($22+44)|0);
      var $51=$8;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($50, $xfB, $51);
      var $52=$count;
      var $53=(($52)|(0))==1;
      if ($53) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $55=(($22+80)|0);
      HEAP32[(($55)>>2)]=0;
      var $56=(($22)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$3;
      var $59=(($58+6)|0);
      var $60=(($59)|0);
      var $61=HEAP8[($60)];
      var $62=(($61)&(255));
      var $63=__ZNK15b2DistanceProxy9GetVertexEi($57, $62);
      var $64=$localPointA;
      var $65=$63;
      assert(8 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];
      var $66=(($22+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$3;
      var $69=(($68+9)|0);
      var $70=(($69)|0);
      var $71=HEAP8[($70)];
      var $72=(($71)&(255));
      var $73=__ZNK15b2DistanceProxy9GetVertexEi($67, $72);
      var $74=$localPointB;
      var $75=$73;
      assert(8 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
      var $76=(($22+92)|0);
      __ZmiRK6b2Vec2S1_($9, $pointB, $pointA);
      var $77=$76;
      var $78=$9;
      assert(8 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];
      var $79=(($22+92)|0);
      var $80=__ZN6b2Vec29NormalizeEv($79);
      $s=$80;
      var $81=$s;
      $1=$81;
      label = 14; break;
    case 7: 
      var $83=$3;
      var $84=(($83+6)|0);
      var $85=(($84)|0);
      var $86=HEAP8[($85)];
      var $87=(($86)&(255));
      var $88=$3;
      var $89=(($88+6)|0);
      var $90=(($89+1)|0);
      var $91=HEAP8[($90)];
      var $92=(($91)&(255));
      var $93=(($87)|(0))==(($92)|(0));
      if ($93) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $95=(($22+80)|0);
      HEAP32[(($95)>>2)]=2;
      var $96=$6;
      var $97=$3;
      var $98=(($97+9)|0);
      var $99=(($98)|0);
      var $100=HEAP8[($99)];
      var $101=(($100)&(255));
      var $102=__ZNK15b2DistanceProxy9GetVertexEi($96, $101);
      var $103=$localPointB1;
      var $104=$102;
      assert(8 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
      var $105=$6;
      var $106=$3;
      var $107=(($106+9)|0);
      var $108=(($107+1)|0);
      var $109=HEAP8[($108)];
      var $110=(($109)&(255));
      var $111=__ZNK15b2DistanceProxy9GetVertexEi($105, $110);
      var $112=$localPointB2;
      var $113=$111;
      assert(8 % 1 === 0);HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($112)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];
      var $114=(($22+92)|0);
      __ZmiRK6b2Vec2S1_($11, $localPointB2, $localPointB1);
      __Z7b2CrossRK6b2Vec2f($10, $11, 1);
      var $115=$114;
      var $116=$10;
      assert(8 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];
      var $117=(($22+92)|0);
      var $118=__ZN6b2Vec29NormalizeEv($117);
      var $119=(($xfB+8)|0);
      var $120=(($22+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal, $119, $120);
      var $121=(($22+84)|0);
      __ZplRK6b2Vec2S1_($13, $localPointB1, $localPointB2);
      __ZmlfRK6b2Vec2($12, 0.5, $13);
      var $122=$121;
      var $123=$12;
      assert(8 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];
      var $124=(($22+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB1, $xfB, $124);
      var $125=$4;
      var $126=$3;
      var $127=(($126+6)|0);
      var $128=(($127)|0);
      var $129=HEAP8[($128)];
      var $130=(($129)&(255));
      var $131=__ZNK15b2DistanceProxy9GetVertexEi($125, $130);
      var $132=$localPointA2;
      var $133=$131;
      assert(8 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA3, $xfA, $localPointA2);
      __ZmiRK6b2Vec2S1_($14, $pointA3, $pointB1);
      var $134=__Z5b2DotRK6b2Vec2S1_($14, $normal);
      $s4=$134;
      var $135=$s4;
      var $136=$135 < 0;
      if ($136) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $138=(($22+92)|0);
      var $139=(($22+92)|0);
      __ZNK6b2Vec2ngEv($15, $139);
      var $140=$138;
      var $141=$15;
      assert(8 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];
      var $142=$s4;
      var $143=(-$142);
      $s4=$143;
      label = 10; break;
    case 10: 
      var $145=$s4;
      $1=$145;
      label = 14; break;
    case 11: 
      var $147=(($22+80)|0);
      HEAP32[(($147)>>2)]=1;
      var $148=(($22)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$3;
      var $151=(($150+6)|0);
      var $152=(($151)|0);
      var $153=HEAP8[($152)];
      var $154=(($153)&(255));
      var $155=__ZNK15b2DistanceProxy9GetVertexEi($149, $154);
      var $156=$localPointA1;
      var $157=$155;
      assert(8 % 1 === 0);HEAP32[(($156)>>2)]=HEAP32[(($157)>>2)];HEAP32[((($156)+(4))>>2)]=HEAP32[((($157)+(4))>>2)];
      var $158=(($22)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$3;
      var $161=(($160+6)|0);
      var $162=(($161+1)|0);
      var $163=HEAP8[($162)];
      var $164=(($163)&(255));
      var $165=__ZNK15b2DistanceProxy9GetVertexEi($159, $164);
      var $166=$localPointA25;
      var $167=$165;
      assert(8 % 1 === 0);HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[((($166)+(4))>>2)]=HEAP32[((($167)+(4))>>2)];
      var $168=(($22+92)|0);
      __ZmiRK6b2Vec2S1_($17, $localPointA25, $localPointA1);
      __Z7b2CrossRK6b2Vec2f($16, $17, 1);
      var $169=$168;
      var $170=$16;
      assert(8 % 1 === 0);HEAP32[(($169)>>2)]=HEAP32[(($170)>>2)];HEAP32[((($169)+(4))>>2)]=HEAP32[((($170)+(4))>>2)];
      var $171=(($22+92)|0);
      var $172=__ZN6b2Vec29NormalizeEv($171);
      var $173=(($xfA+8)|0);
      var $174=(($22+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $173, $174);
      var $175=(($22+84)|0);
      __ZplRK6b2Vec2S1_($19, $localPointA1, $localPointA25);
      __ZmlfRK6b2Vec2($18, 0.5, $19);
      var $176=$175;
      var $177=$18;
      assert(8 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];
      var $178=(($22+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA7, $xfA, $178);
      var $179=(($22+4)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=$3;
      var $182=(($181+9)|0);
      var $183=(($182)|0);
      var $184=HEAP8[($183)];
      var $185=(($184)&(255));
      var $186=__ZNK15b2DistanceProxy9GetVertexEi($180, $185);
      var $187=$localPointB8;
      var $188=$186;
      assert(8 % 1 === 0);HEAP32[(($187)>>2)]=HEAP32[(($188)>>2)];HEAP32[((($187)+(4))>>2)]=HEAP32[((($188)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB9, $xfB, $localPointB8);
      __ZmiRK6b2Vec2S1_($20, $pointB9, $pointA7);
      var $189=__Z5b2DotRK6b2Vec2S1_($20, $normal6);
      $s10=$189;
      var $190=$s10;
      var $191=$190 < 0;
      if ($191) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $193=(($22+92)|0);
      var $194=(($22+92)|0);
      __ZNK6b2Vec2ngEv($21, $194);
      var $195=$193;
      var $196=$21;
      assert(8 % 1 === 0);HEAP32[(($195)>>2)]=HEAP32[(($196)>>2)];HEAP32[((($195)+(4))>>2)]=HEAP32[((($196)+(4))>>2)];
      var $197=$s10;
      var $198=(-$197);
      $s10=$198;
      label = 13; break;
    case 13: 
      var $200=$s10;
      $1=$200;
      label = 14; break;
    case 14: 
      var $202=$1;
      STACKTOP = __stackBase__;
      return $202;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($this, $indexA, $indexB, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 208)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xfA=__stackBase__;
      var $xfB=(__stackBase__)+(16);
      var $axisA=(__stackBase__)+(32);
      var $axisB=(__stackBase__)+(40);
      var $6=(__stackBase__)+(48);
      var $localPointA=(__stackBase__)+(56);
      var $localPointB=(__stackBase__)+(64);
      var $pointA=(__stackBase__)+(72);
      var $pointB=(__stackBase__)+(80);
      var $separation;
      var $7=(__stackBase__)+(88);
      var $normal=(__stackBase__)+(96);
      var $pointA1=(__stackBase__)+(104);
      var $axisB2=(__stackBase__)+(112);
      var $8=(__stackBase__)+(120);
      var $localPointB3=(__stackBase__)+(128);
      var $pointB4=(__stackBase__)+(136);
      var $separation5;
      var $9=(__stackBase__)+(144);
      var $normal6=(__stackBase__)+(152);
      var $pointB7=(__stackBase__)+(160);
      var $axisA8=(__stackBase__)+(168);
      var $10=(__stackBase__)+(176);
      var $localPointA9=(__stackBase__)+(184);
      var $pointA10=(__stackBase__)+(192);
      var $separation11;
      var $11=(__stackBase__)+(200);
      $2=$this;
      $3=$indexA;
      $4=$indexB;
      $5=$t;
      var $12=$2;
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $13=(($12+8)|0);
      var $14=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($13, $xfA, $14);
      var $15=(($12+44)|0);
      var $16=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($15, $xfB, $16);
      var $17=(($12+80)|0);
      var $18=HEAP32[(($17)>>2)];
      if ((($18)|(0))==0) {
        label = 2; break;
      }
      else if ((($18)|(0))==1) {
        label = 3; break;
      }
      else if ((($18)|(0))==2) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 2: 
      var $20=(($xfA+8)|0);
      var $21=(($12+92)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA, $20, $21);
      var $22=(($xfB+8)|0);
      var $23=(($12+92)|0);
      __ZNK6b2Vec2ngEv($6, $23);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB, $22, $6);
      var $24=(($12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($25, $axisA);
      var $27=$3;
      HEAP32[(($27)>>2)]=$26;
      var $28=(($12+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($29, $axisB);
      var $31=$4;
      HEAP32[(($31)>>2)]=$30;
      var $32=(($12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$3;
      var $35=HEAP32[(($34)>>2)];
      var $36=__ZNK15b2DistanceProxy9GetVertexEi($33, $35);
      var $37=$localPointA;
      var $38=$36;
      assert(8 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];
      var $39=(($12+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$4;
      var $42=HEAP32[(($41)>>2)];
      var $43=__ZNK15b2DistanceProxy9GetVertexEi($40, $42);
      var $44=$localPointB;
      var $45=$43;
      assert(8 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
      __ZmiRK6b2Vec2S1_($7, $pointB, $pointA);
      var $46=(($12+92)|0);
      var $47=__Z5b2DotRK6b2Vec2S1_($7, $46);
      $separation=$47;
      var $48=$separation;
      $1=$48;
      label = 6; break;
    case 3: 
      var $50=(($xfA+8)|0);
      var $51=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal, $50, $51);
      var $52=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1, $xfA, $52);
      var $53=(($xfB+8)|0);
      __ZNK6b2Vec2ngEv($8, $normal);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2, $53, $8);
      var $54=$3;
      HEAP32[(($54)>>2)]=-1;
      var $55=(($12+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($56, $axisB2);
      var $58=$4;
      HEAP32[(($58)>>2)]=$57;
      var $59=(($12+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$4;
      var $62=HEAP32[(($61)>>2)];
      var $63=__ZNK15b2DistanceProxy9GetVertexEi($60, $62);
      var $64=$localPointB3;
      var $65=$63;
      assert(8 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4, $xfB, $localPointB3);
      __ZmiRK6b2Vec2S1_($9, $pointB4, $pointA1);
      var $66=__Z5b2DotRK6b2Vec2S1_($9, $normal);
      $separation5=$66;
      var $67=$separation5;
      $1=$67;
      label = 6; break;
    case 4: 
      var $69=(($xfB+8)|0);
      var $70=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $69, $70);
      var $71=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7, $xfB, $71);
      var $72=(($xfA+8)|0);
      __ZNK6b2Vec2ngEv($10, $normal6);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8, $72, $10);
      var $73=$4;
      HEAP32[(($73)>>2)]=-1;
      var $74=(($12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($75, $axisA8);
      var $77=$3;
      HEAP32[(($77)>>2)]=$76;
      var $78=(($12)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$3;
      var $81=HEAP32[(($80)>>2)];
      var $82=__ZNK15b2DistanceProxy9GetVertexEi($79, $81);
      var $83=$localPointA9;
      var $84=$82;
      assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10, $xfA, $localPointA9);
      __ZmiRK6b2Vec2S1_($11, $pointA10, $pointB7);
      var $85=__Z5b2DotRK6b2Vec2S1_($11, $normal6);
      $separation11=$85;
      var $86=$separation11;
      $1=$86;
      label = 6; break;
    case 5: 
      ___assert_func(((5250808)|0), 183, ((5258840)|0), ((5253260)|0));
      throw "Reached an unreachable!"
    case 6: 
      var $89=$1;
      STACKTOP = __stackBase__;
      return $89;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK20b2SeparationFunction8EvaluateEiif($this, $indexA, $indexB, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 208)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xfA=__stackBase__;
      var $xfB=(__stackBase__)+(16);
      var $axisA=(__stackBase__)+(32);
      var $axisB=(__stackBase__)+(40);
      var $6=(__stackBase__)+(48);
      var $localPointA=(__stackBase__)+(56);
      var $localPointB=(__stackBase__)+(64);
      var $pointA=(__stackBase__)+(72);
      var $pointB=(__stackBase__)+(80);
      var $separation;
      var $7=(__stackBase__)+(88);
      var $normal=(__stackBase__)+(96);
      var $pointA1=(__stackBase__)+(104);
      var $axisB2=(__stackBase__)+(112);
      var $8=(__stackBase__)+(120);
      var $localPointB3=(__stackBase__)+(128);
      var $pointB4=(__stackBase__)+(136);
      var $separation5;
      var $9=(__stackBase__)+(144);
      var $normal6=(__stackBase__)+(152);
      var $pointB7=(__stackBase__)+(160);
      var $axisA8=(__stackBase__)+(168);
      var $10=(__stackBase__)+(176);
      var $localPointA9=(__stackBase__)+(184);
      var $pointA10=(__stackBase__)+(192);
      var $separation11;
      var $11=(__stackBase__)+(200);
      $2=$this;
      $3=$indexA;
      $4=$indexB;
      $5=$t;
      var $12=$2;
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $13=(($12+8)|0);
      var $14=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($13, $xfA, $14);
      var $15=(($12+44)|0);
      var $16=$5;
      __ZNK7b2Sweep12GetTransformEP11b2Transformf($15, $xfB, $16);
      var $17=(($12+80)|0);
      var $18=HEAP32[(($17)>>2)];
      if ((($18)|(0))==0) {
        label = 2; break;
      }
      else if ((($18)|(0))==1) {
        label = 3; break;
      }
      else if ((($18)|(0))==2) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 2: 
      var $20=(($xfA+8)|0);
      var $21=(($12+92)|0);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA, $20, $21);
      var $22=(($xfB+8)|0);
      var $23=(($12+92)|0);
      __ZNK6b2Vec2ngEv($6, $23);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB, $22, $6);
      var $24=(($12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$3;
      var $27=__ZNK15b2DistanceProxy9GetVertexEi($25, $26);
      var $28=$localPointA;
      var $29=$27;
      assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
      var $30=(($12+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$4;
      var $33=__ZNK15b2DistanceProxy9GetVertexEi($31, $32);
      var $34=$localPointB;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
      __ZmiRK6b2Vec2S1_($7, $pointB, $pointA);
      var $36=(($12+92)|0);
      var $37=__Z5b2DotRK6b2Vec2S1_($7, $36);
      $separation=$37;
      var $38=$separation;
      $1=$38;
      label = 6; break;
    case 3: 
      var $40=(($xfA+8)|0);
      var $41=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal, $40, $41);
      var $42=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1, $xfA, $42);
      var $43=(($xfB+8)|0);
      __ZNK6b2Vec2ngEv($8, $normal);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2, $43, $8);
      var $44=(($12+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$4;
      var $47=__ZNK15b2DistanceProxy9GetVertexEi($45, $46);
      var $48=$localPointB3;
      var $49=$47;
      assert(8 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4, $xfB, $localPointB3);
      __ZmiRK6b2Vec2S1_($9, $pointB4, $pointA1);
      var $50=__Z5b2DotRK6b2Vec2S1_($9, $normal);
      $separation5=$50;
      var $51=$separation5;
      $1=$51;
      label = 6; break;
    case 4: 
      var $53=(($xfB+8)|0);
      var $54=(($12+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $53, $54);
      var $55=(($12+84)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7, $xfB, $55);
      var $56=(($xfA+8)|0);
      __ZNK6b2Vec2ngEv($10, $normal6);
      __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8, $56, $10);
      var $57=(($12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$3;
      var $60=__ZNK15b2DistanceProxy9GetVertexEi($58, $59);
      var $61=$localPointA9;
      var $62=$60;
      assert(8 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10, $xfA, $localPointA9);
      __ZmiRK6b2Vec2S1_($11, $pointA10, $pointB7);
      var $63=__Z5b2DotRK6b2Vec2S1_($11, $normal6);
      $separation11=$63;
      var $64=$separation11;
      $1=$64;
      label = 6; break;
    case 5: 
      ___assert_func(((5250808)|0), 242, ((5258772)|0), ((5253260)|0));
      throw "Reached an unreachable!"
    case 6: 
      var $67=$1;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2ChainShapeD2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      HEAP32[(($5)>>2)]=((5265300)|0);
      var $6=(($4+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      (function() { try { __THREW__ = 0; return __Z6b2FreePv($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=(($4+12)|0);
      HEAP32[(($10)>>2)]=0;
      var $11=(($4+16)|0);
      HEAP32[(($11)>>2)]=0;
      var $12=$4;
      __ZN7b2ShapeD2Ev($12);
      return;
    case 3: 
      var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
      var $15=$14$0;
      $2=$15;
      var $16=$14$1;
      $3=$16;
      var $17=$4;
      (function() { try { __THREW__ = 0; return __ZN7b2ShapeD2Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    case 6: 
      var $25$0 = ___cxa_find_matching_catch(-1, -1,0); $25$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2ChainShape10CreateLoopEPK6b2Vec2i($this, $vertices, $count) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$vertices;
      $3=$count;
      var $4=$1;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=(($4+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5250288)|0), 34, ((5263628)|0), ((5255884)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $16=$3;
      var $17=(($16)|(0)) >= 3;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5250288)|0), 35, ((5263628)|0), ((5253012)|0));
      throw "Reached an unreachable!"
      label = 8; break;
    case 8: 
      var $22=$3;
      var $23=((($22)+(1))|0);
      var $24=(($4+16)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($4+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=($26<<3);
      var $28=__Z7b2Alloci($27);
      var $29=$28;
      var $30=(($4+12)|0);
      HEAP32[(($30)>>2)]=$29;
      var $31=(($4+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      var $34=$2;
      var $35=$34;
      var $36=$3;
      var $37=($36<<3);
      assert($37 % 1 === 0);_memcpy($33, $35, $37);
      var $38=$3;
      var $39=(($4+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+($38<<3))|0);
      var $42=(($4+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0);
      var $45=$41;
      var $46=$44;
      assert(8 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];
      var $47=(($4+20)|0);
      var $48=(($4+16)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)-(2))|0);
      var $51=(($4+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($50<<3))|0);
      var $54=$47;
      var $55=$53;
      assert(8 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];
      var $56=(($4+28)|0);
      var $57=(($4+12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+8)|0);
      var $60=$56;
      var $61=$59;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=(($4+36)|0);
      HEAP8[($62)]=1;
      var $63=(($4+37)|0);
      HEAP8[($63)]=1;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($this, $vertices, $count) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$vertices;
      $3=$count;
      var $4=$1;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=(($4+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5250288)|0), 48, ((5263572)|0), ((5255884)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $16=$3;
      var $17=(($16)|(0)) >= 2;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5250288)|0), 49, ((5263572)|0), ((5250856)|0));
      throw "Reached an unreachable!"
      label = 8; break;
    case 8: 
      var $22=$3;
      var $23=(($4+16)|0);
      HEAP32[(($23)>>2)]=$22;
      var $24=$3;
      var $25=($24<<3);
      var $26=__Z7b2Alloci($25);
      var $27=$26;
      var $28=(($4+12)|0);
      HEAP32[(($28)>>2)]=$27;
      var $29=(($4+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=$2;
      var $33=$32;
      var $34=(($4+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=($35<<3);
      assert($36 % 1 === 0);_memcpy($31, $33, $36);
      var $37=(($4+36)|0);
      HEAP8[($37)]=0;
      var $38=(($4+37)|0);
      HEAP8[($38)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$xf;
  $3=$p;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  return 0;
}
function __ZNK13b2CircleShape13GetChildCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return 1;
}
function __ZN7b2ShapeC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((5264404)|0);
  return;
}
function __ZNK12b2ChainShape13GetChildCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=((($4)-(1))|0);
  return $5;
}
function __ZNK12b2ChainShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 40);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|(0))==0;
      if ($7) { var $11 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$6;
      __ZN12b2ChainShapeC1Ev($9);
      var $11 = $9;label = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=(($3+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($3+16)|0);
      var $16=HEAP32[(($15)>>2)];
      __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($12, $14, $16);
      var $17=$clone;
      var $18=(($17+20)|0);
      var $19=(($3+20)|0);
      var $20=$18;
      var $21=$19;
      assert(8 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
      var $22=$clone;
      var $23=(($22+28)|0);
      var $24=(($3+28)|0);
      var $25=$23;
      var $26=$24;
      assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      var $27=(($3+36)|0);
      var $28=HEAP8[($27)];
      var $29=(($28) & 1);
      var $30=$clone;
      var $31=(($30+36)|0);
      var $32=(($29)&(1));
      HEAP8[($31)]=$32;
      var $33=(($3+37)|0);
      var $34=HEAP8[($33)];
      var $35=(($34) & 1);
      var $36=$clone;
      var $37=(($36+37)|0);
      var $38=(($35)&(1));
      HEAP8[($37)]=$38;
      var $39=$clone;
      var $40=$39;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2ChainShapeC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2ChainShapeC2Ev($2);
  return;
}
function __ZN11b2EdgeShapeC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2EdgeShapeC2Ev($2);
  return;
}
function __ZN11b2EdgeShapeD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2EdgeShapeD2Ev($2);
  return;
}
function __ZNK12b2ChainShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$massData;
  $3=$density;
  var $4=$1;
  var $5=$2;
  var $6=(($5)|0);
  HEAPF32[(($6)>>2)]=0;
  var $7=$2;
  var $8=(($7+4)|0);
  __ZN6b2Vec27SetZeroEv($8);
  var $9=$2;
  var $10=(($9+12)|0);
  HEAPF32[(($10)>>2)]=0;
  return;
}
function __ZN11b2EdgeShapeD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2ShapeD2Ev($3);
  return;
}
function __ZN7b2ShapeD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2ShapeD2Ev($2);
  return;
}
function __ZN7b2ShapeD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN7b2ShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2CircleShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 20);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|(0))==0;
      if ($7) { var $11 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$6;
      __ZN13b2CircleShapeC1Ev($9);
      var $11 = $9;label = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=__ZN13b2CircleShapeaSERKS_($12, $3);
      var $14=$clone;
      var $15=$14;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2CircleShapeC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2CircleShapeC2Ev($2);
  return;
}
function __ZN13b2CircleShapeaSERKS_($this, $0) {
  var label = 0;
  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$4;
  var $6=$3;
  var $7=$6;
  var $8=__ZN7b2ShapeaSERKS_($5, $7);
  var $9=(($4+12)|0);
  var $10=$3;
  var $11=(($10+12)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
  return $4;
}
function __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2($this, $transform, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $center=__stackBase__;
  var $4=(__stackBase__)+(8);
  var $d=(__stackBase__)+(16);
  $1=$this;
  $2=$transform;
  $3=$p;
  var $5=$1;
  var $6=$2;
  var $7=(($6)|0);
  var $8=$2;
  var $9=(($8+8)|0);
  var $10=(($5+12)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($4, $9, $10);
  __ZplRK6b2Vec2S1_($center, $7, $4);
  var $11=$3;
  __ZmiRK6b2Vec2S1_($d, $11, $center);
  var $12=__Z5b2DotRK6b2Vec2S1_($d, $d);
  var $13=$5;
  var $14=(($13+8)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$5;
  var $17=(($16+8)|0);
  var $18=HEAPF32[(($17)>>2)];
  var $19=($15)*($18);
  var $20=$12 <= $19;
  STACKTOP = __stackBase__;
  return $20;
}
function __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $transform, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $position=__stackBase__;
      var $8=(__stackBase__)+(8);
      var $s=(__stackBase__)+(16);
      var $b;
      var $r=(__stackBase__)+(24);
      var $c;
      var $rr;
      var $sigma;
      var $a;
      var $9=(__stackBase__)+(32);
      var $10=(__stackBase__)+(40);
      $3=$this;
      $4=$output;
      $5=$input;
      $6=$transform;
      $7=$childIndex;
      var $11=$3;
      var $12=$6;
      var $13=(($12)|0);
      var $14=$6;
      var $15=(($14+8)|0);
      var $16=(($11+12)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($8, $15, $16);
      __ZplRK6b2Vec2S1_($position, $13, $8);
      var $17=$5;
      var $18=(($17)|0);
      __ZmiRK6b2Vec2S1_($s, $18, $position);
      var $19=__Z5b2DotRK6b2Vec2S1_($s, $s);
      var $20=$11;
      var $21=(($20+8)|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=$11;
      var $24=(($23+8)|0);
      var $25=HEAPF32[(($24)>>2)];
      var $26=($22)*($25);
      var $27=($19)-($26);
      $b=$27;
      var $28=$5;
      var $29=(($28+8)|0);
      var $30=$5;
      var $31=(($30)|0);
      __ZmiRK6b2Vec2S1_($r, $29, $31);
      var $32=__Z5b2DotRK6b2Vec2S1_($s, $r);
      $c=$32;
      var $33=__Z5b2DotRK6b2Vec2S1_($r, $r);
      $rr=$33;
      var $34=$c;
      var $35=$c;
      var $36=($34)*($35);
      var $37=$rr;
      var $38=$b;
      var $39=($37)*($38);
      var $40=($36)-($39);
      $sigma=$40;
      var $41=$sigma;
      var $42=$41 < 0;
      if ($42) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $44=$rr;
      var $45=$44 < 1.1920928955078125e-7;
      if ($45) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $2=0;
      label = 8; break;
    case 4: 
      var $48=$c;
      var $49=$sigma;
      $1=$49;
      var $50=$1;
      var $51=Math.sqrt($50);
      var $52=($48)+($51);
      var $53=(-$52);
      $a=$53;
      var $54=$a;
      var $55=0 <= $54;
      if ($55) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $57=$a;
      var $58=$5;
      var $59=(($58+16)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=$rr;
      var $62=($60)*($61);
      var $63=$57 <= $62;
      if ($63) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $65=$rr;
      var $66=$a;
      var $67=($66)/($65);
      $a=$67;
      var $68=$a;
      var $69=$4;
      var $70=(($69+8)|0);
      HEAPF32[(($70)>>2)]=$68;
      var $71=$4;
      var $72=(($71)|0);
      var $73=$a;
      __ZmlfRK6b2Vec2($10, $73, $r);
      __ZplRK6b2Vec2S1_($9, $s, $10);
      var $74=$72;
      var $75=$9;
      assert(8 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];
      var $76=$4;
      var $77=(($76)|0);
      var $78=__ZN6b2Vec29NormalizeEv($77);
      $2=1;
      label = 8; break;
    case 7: 
      $2=0;
      label = 8; break;
    case 8: 
      var $81=$2;
      STACKTOP = __stackBase__;
      return $81;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $transform, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $p=__stackBase__;
  var $5=(__stackBase__)+(8);
  $1=$this;
  $2=$aabb;
  $3=$transform;
  $4=$childIndex;
  var $6=$1;
  var $7=$3;
  var $8=(($7)|0);
  var $9=$3;
  var $10=(($9+8)|0);
  var $11=(($6+12)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($5, $10, $11);
  __ZplRK6b2Vec2S1_($p, $8, $5);
  var $12=$2;
  var $13=(($12)|0);
  var $14=(($p)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=$6;
  var $17=(($16+8)|0);
  var $18=HEAPF32[(($17)>>2)];
  var $19=($15)-($18);
  var $20=(($p+4)|0);
  var $21=HEAPF32[(($20)>>2)];
  var $22=$6;
  var $23=(($22+8)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=($21)-($24);
  __ZN6b2Vec23SetEff($13, $19, $25);
  var $26=$2;
  var $27=(($26+8)|0);
  var $28=(($p)|0);
  var $29=HEAPF32[(($28)>>2)];
  var $30=$6;
  var $31=(($30+8)|0);
  var $32=HEAPF32[(($31)>>2)];
  var $33=($29)+($32);
  var $34=(($p+4)|0);
  var $35=HEAPF32[(($34)>>2)];
  var $36=$6;
  var $37=(($36+8)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=($35)+($38);
  __ZN6b2Vec23SetEff($27, $33, $39);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK13b2CircleShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$massData;
  $3=$density;
  var $4=$1;
  var $5=$3;
  var $6=($5)*(3.1415927410125732);
  var $7=$4;
  var $8=(($7+8)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=($6)*($9);
  var $11=$4;
  var $12=(($11+8)|0);
  var $13=HEAPF32[(($12)>>2)];
  var $14=($10)*($13);
  var $15=$2;
  var $16=(($15)|0);
  HEAPF32[(($16)>>2)]=$14;
  var $17=$2;
  var $18=(($17+4)|0);
  var $19=(($4+12)|0);
  var $20=$18;
  var $21=$19;
  assert(8 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
  var $22=$2;
  var $23=(($22)|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=$4;
  var $26=(($25+8)|0);
  var $27=HEAPF32[(($26)>>2)];
  var $28=($27)*(0.5);
  var $29=$4;
  var $30=(($29+8)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=($28)*($31);
  var $33=(($4+12)|0);
  var $34=(($4+12)|0);
  var $35=__Z5b2DotRK6b2Vec2S1_($33, $34);
  var $36=($32)+($35);
  var $37=($24)*($36);
  var $38=$2;
  var $39=(($38+12)|0);
  HEAPF32[(($39)>>2)]=$37;
  return;
}
function __ZN13b2CircleShapeD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2CircleShapeD2Ev($2);
  return;
}
function __ZN13b2CircleShapeD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN13b2CircleShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this, $edge, $index) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$edge;
      $3=$index;
      var $4=$1;
      var $5=$3;
      var $6=0 <= (($5)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($4+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($10)-(1))|0);
      var $12=(($8)|(0)) < (($11)|(0));
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5250288)|0), 89, ((5259712)|0), ((5249808)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $17=$2;
      var $18=$17;
      var $19=(($18+4)|0);
      HEAP32[(($19)>>2)]=1;
      var $20=$4;
      var $21=(($20+8)|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=$2;
      var $24=$23;
      var $25=(($24+8)|0);
      HEAPF32[(($25)>>2)]=$22;
      var $26=$2;
      var $27=(($26+12)|0);
      var $28=$3;
      var $29=(($28)|0);
      var $30=(($4+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($29<<3))|0);
      var $33=$27;
      var $34=$32;
      assert(8 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
      var $35=$2;
      var $36=(($35+20)|0);
      var $37=$3;
      var $38=((($37)+(1))|0);
      var $39=(($4+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+($38<<3))|0);
      var $42=$36;
      var $43=$41;
      assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
      var $44=$3;
      var $45=(($44)|(0)) > 0;
      if ($45) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $47=$2;
      var $48=(($47+28)|0);
      var $49=$3;
      var $50=((($49)-(1))|0);
      var $51=(($4+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($50<<3))|0);
      var $54=$48;
      var $55=$53;
      assert(8 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];
      var $56=$2;
      var $57=(($56+44)|0);
      HEAP8[($57)]=1;
      label = 8; break;
    case 7: 
      var $59=$2;
      var $60=(($59+28)|0);
      var $61=(($4+20)|0);
      var $62=$60;
      var $63=$61;
      assert(8 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];
      var $64=(($4+36)|0);
      var $65=HEAP8[($64)];
      var $66=(($65) & 1);
      var $67=$2;
      var $68=(($67+44)|0);
      var $69=(($66)&(1));
      HEAP8[($68)]=$69;
      label = 8; break;
    case 8: 
      var $71=$3;
      var $72=(($4+16)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)-(2))|0);
      var $75=(($71)|(0)) < (($74)|(0));
      if ($75) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $77=$2;
      var $78=(($77+36)|0);
      var $79=$3;
      var $80=((($79)+(2))|0);
      var $81=(($4+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+($80<<3))|0);
      var $84=$78;
      var $85=$83;
      assert(8 % 1 === 0);HEAP32[(($84)>>2)]=HEAP32[(($85)>>2)];HEAP32[((($84)+(4))>>2)]=HEAP32[((($85)+(4))>>2)];
      var $86=$2;
      var $87=(($86+45)|0);
      HEAP8[($87)]=1;
      label = 11; break;
    case 10: 
      var $89=$2;
      var $90=(($89+36)|0);
      var $91=(($4+28)|0);
      var $92=$90;
      var $93=$91;
      assert(8 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];
      var $94=(($4+37)|0);
      var $95=HEAP8[($94)];
      var $96=(($95) & 1);
      var $97=$2;
      var $98=(($97+45)|0);
      var $99=(($96)&(1));
      HEAP8[($98)]=$99;
      label = 11; break;
    case 11: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $edgeShape=__stackBase__;
      var $i1;
      var $i2;
      var $6;
      var $7;
      var $8;
      $1=$this;
      $2=$output;
      $3=$input;
      $4=$xf;
      $5=$childIndex;
      var $9=$1;
      var $10=$5;
      var $11=(($9+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|(0)) < (($12)|(0));
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5250288)|0), 129, ((5259600)|0), ((5249108)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      __ZN11b2EdgeShapeC1Ev($edgeShape);
      var $18=$5;
      $i1=$18;
      var $19=$5;
      var $20=((($19)+(1))|0);
      $i2=$20;
      var $21=$i2;
      var $22=(($9+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($21)|(0))==(($23)|(0));
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $i2=0;
      label = 6; break;
    case 6: 
      var $27=(($edgeShape+12)|0);
      var $28=$i1;
      var $29=(($9+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+($28<<3))|0);
      var $32=$27;
      var $33=$31;
      assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
      var $34=(($edgeShape+20)|0);
      var $35=$i2;
      var $36=(($9+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($35<<3))|0);
      var $39=$34;
      var $40=$38;
      assert(8 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
      var $41=$2;
      var $42=$3;
      var $43=$4;
      var $44 = (function() { try { __THREW__ = 0; return __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($edgeShape, $41, $42, $43, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $8=1;
      __ZN11b2EdgeShapeD1Ev($edgeShape);
      STACKTOP = __stackBase__;
      return $44;
    case 8: 
      var $47$0 = ___cxa_find_matching_catch(-1, -1); $47$1 = tempRet0;
      var $48=$47$0;
      $6=$48;
      var $49=$47$1;
      $7=$49;
      (function() { try { __THREW__ = 0; return __ZN11b2EdgeShapeD1Ev($edgeShape) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 11; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $52=$6;
      var $53=$7;
      var $54$0=$52;
      var $54$1=0;
      var $55$0=$54$0;
      var $55$1=$53;
      ___resumeException($55$0)
    case 11: 
      var $57$0 = ___cxa_find_matching_catch(-1, -1,0); $57$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i1;
      var $i2;
      var $v1=__stackBase__;
      var $v2=(__stackBase__)+(8);
      var $5=(__stackBase__)+(16);
      var $6=(__stackBase__)+(24);
      $1=$this;
      $2=$aabb;
      $3=$xf;
      $4=$childIndex;
      var $7=$1;
      var $8=$4;
      var $9=(($7+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|(0)) < (($10)|(0));
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5250288)|0), 148, ((5259772)|0), ((5249108)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $16=$4;
      $i1=$16;
      var $17=$4;
      var $18=((($17)+(1))|0);
      $i2=$18;
      var $19=$i2;
      var $20=(($7+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($19)|(0))==(($21)|(0));
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $i2=0;
      label = 6; break;
    case 6: 
      var $25=$3;
      var $26=$i1;
      var $27=(($7+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+($26<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $25, $29);
      var $30=$3;
      var $31=$i2;
      var $32=(($7+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+($31<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $30, $34);
      var $35=$2;
      var $36=(($35)|0);
      __Z5b2MinRK6b2Vec2S1_($5, $v1, $v2);
      var $37=$36;
      var $38=$5;
      assert(8 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];
      var $39=$2;
      var $40=(($39+8)|0);
      __Z5b2MaxRK6b2Vec2S1_($6, $v1, $v2);
      var $41=$40;
      var $42=$6;
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2EdgeShapeC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((5265500)|0);
      var $7=(($4+12)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=(($4+20)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=(($4+28)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=(($4+36)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$4;
      var $16=(($15+4)|0);
      HEAP32[(($16)>>2)]=1;
      var $17=$4;
      var $18=(($17+8)|0);
      HEAPF32[(($18)>>2)]=0.009999999776482582;
      var $19=(($4+28)|0);
      var $20=(($19)|0);
      HEAPF32[(($20)>>2)]=0;
      var $21=(($4+28)|0);
      var $22=(($21+4)|0);
      HEAPF32[(($22)>>2)]=0;
      var $23=(($4+36)|0);
      var $24=(($23)|0);
      HEAPF32[(($24)>>2)]=0;
      var $25=(($4+36)|0);
      var $26=(($25+4)|0);
      HEAPF32[(($26)>>2)]=0;
      var $27=(($4+44)|0);
      HEAP8[($27)]=0;
      var $28=(($4+45)|0);
      HEAP8[($28)]=0;
      return;
    case 6: 
      var $30$0 = ___cxa_find_matching_catch(-1, -1); $30$1 = tempRet0;
      var $31=$30$0;
      $2=$31;
      var $32=$30$1;
      $3=$32;
      var $33=$4;
      (function() { try { __THREW__ = 0; return __ZN7b2ShapeD2Ev($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 9; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $36=$2;
      var $37=$3;
      var $38$0=$36;
      var $38$1=0;
      var $39$0=$38$0;
      var $39$1=$37;
      ___resumeException($39$0)
    case 9: 
      var $41$0 = ___cxa_find_matching_catch(-1, -1,0); $41$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2ChainShapeC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((5265300)|0);
      var $7=(($4+20)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=(($4+28)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$4;
      var $12=(($11+4)|0);
      HEAP32[(($12)>>2)]=3;
      var $13=$4;
      var $14=(($13+8)|0);
      HEAPF32[(($14)>>2)]=0.009999999776482582;
      var $15=(($4+12)|0);
      HEAP32[(($15)>>2)]=0;
      var $16=(($4+16)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=(($4+36)|0);
      HEAP8[($17)]=0;
      var $18=(($4+37)|0);
      HEAP8[($18)]=0;
      return;
    case 4: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      var $23=$4;
      (function() { try { __THREW__ = 0; return __ZN7b2ShapeD2Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $26=$2;
      var $27=$3;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    case 7: 
      var $31$0 = ___cxa_find_matching_catch(-1, -1,0); $31$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK11b2EdgeShape13GetChildCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return 1;
}
function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$xf;
  $3=$p;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  return 0;
}
function __ZNK14b2PolygonShape13GetChildCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return 1;
}
function __ZN7b2ShapeaSERKS_($this, $0) {
  var label = 0;
  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$3;
  var $6=(($5+4)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($4+4)|0);
  HEAP32[(($8)>>2)]=$7;
  var $9=$3;
  var $10=(($9+8)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=(($4+8)|0);
  HEAPF32[(($12)>>2)]=$11;
  return $4;
}
function __ZN13b2CircleShapeD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2ShapeD2Ev($3);
  return;
}
function __ZN11b2EdgeShape3SetERK6b2Vec2S2_($this, $v1, $v2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$v1;
  $3=$v2;
  var $4=$1;
  var $5=(($4+12)|0);
  var $6=$2;
  var $7=$5;
  var $8=$6;
  assert(8 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];
  var $9=(($4+20)|0);
  var $10=$3;
  var $11=$9;
  var $12=$10;
  assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
  var $13=(($4+44)|0);
  HEAP8[($13)]=0;
  var $14=(($4+45)|0);
  HEAP8[($14)]=0;
  return;
}
function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 48);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|(0))==0;
      if ($7) { var $11 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$6;
      __ZN11b2EdgeShapeC1Ev($9);
      var $11 = $9;label = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=__ZN11b2EdgeShapeaSERKS_($12, $3);
      var $14=$clone;
      var $15=$14;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2EdgeShapeaSERKS_($this, $0) {
  var label = 0;
  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$4;
  var $6=$3;
  var $7=$6;
  var $8=__ZN7b2ShapeaSERKS_($5, $7);
  var $9=(($4+12)|0);
  var $10=$3;
  var $11=(($10+12)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
  var $14=(($4+20)|0);
  var $15=$3;
  var $16=(($15+20)|0);
  var $17=$14;
  var $18=$16;
  assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
  var $19=(($4+28)|0);
  var $20=$3;
  var $21=(($20+28)|0);
  var $22=$19;
  var $23=$21;
  assert(8 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
  var $24=(($4+36)|0);
  var $25=$3;
  var $26=(($25+36)|0);
  var $27=$24;
  var $28=$26;
  assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
  var $29=$3;
  var $30=(($29+44)|0);
  var $31=HEAP8[($30)];
  var $32=(($31) & 1);
  var $33=(($4+44)|0);
  var $34=(($32)&(1));
  HEAP8[($33)]=$34;
  var $35=$3;
  var $36=(($35+45)|0);
  var $37=HEAP8[($36)];
  var $38=(($37) & 1);
  var $39=(($4+45)|0);
  var $40=(($38)&(1));
  HEAP8[($39)]=$40;
  return $4;
}
function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $p1=__stackBase__;
      var $7=(__stackBase__)+(8);
      var $p2=(__stackBase__)+(16);
      var $8=(__stackBase__)+(24);
      var $d=(__stackBase__)+(32);
      var $v1=(__stackBase__)+(40);
      var $v2=(__stackBase__)+(48);
      var $e=(__stackBase__)+(56);
      var $normal=(__stackBase__)+(64);
      var $numerator;
      var $9=(__stackBase__)+(72);
      var $denominator;
      var $t;
      var $q=(__stackBase__)+(80);
      var $10=(__stackBase__)+(88);
      var $r=(__stackBase__)+(96);
      var $rr;
      var $s;
      var $11=(__stackBase__)+(104);
      var $12=(__stackBase__)+(112);
      $2=$this;
      $3=$output;
      $4=$input;
      $5=$xf;
      $6=$childIndex;
      var $13=$2;
      var $14=$5;
      var $15=(($14+8)|0);
      var $16=$4;
      var $17=(($16)|0);
      var $18=$5;
      var $19=(($18)|0);
      __ZmiRK6b2Vec2S1_($7, $17, $19);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p1, $15, $7);
      var $20=$5;
      var $21=(($20+8)|0);
      var $22=$4;
      var $23=(($22+8)|0);
      var $24=$5;
      var $25=(($24)|0);
      __ZmiRK6b2Vec2S1_($8, $23, $25);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p2, $21, $8);
      __ZmiRK6b2Vec2S1_($d, $p2, $p1);
      var $26=(($13+12)|0);
      var $27=$v1;
      var $28=$26;
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=(($13+20)|0);
      var $30=$v2;
      var $31=$29;
      assert(8 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($e, $v2, $v1);
      var $32=(($e+4)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=(($e)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=(-$35);
      __ZN6b2Vec2C1Eff($normal, $33, $36);
      var $37=__ZN6b2Vec29NormalizeEv($normal);
      __ZmiRK6b2Vec2S1_($9, $v1, $p1);
      var $38=__Z5b2DotRK6b2Vec2S1_($normal, $9);
      $numerator=$38;
      var $39=__Z5b2DotRK6b2Vec2S1_($normal, $d);
      $denominator=$39;
      var $40=$denominator;
      var $41=$40 == 0;
      if ($41) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 15; break;
    case 3: 
      var $44=$numerator;
      var $45=$denominator;
      var $46=($44)/($45);
      $t=$46;
      var $47=$t;
      var $48=$47 < 0;
      if ($48) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $50=$4;
      var $51=(($50+16)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=$t;
      var $54=$52 < $53;
      if ($54) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 15; break;
    case 6: 
      var $57=$t;
      __ZmlfRK6b2Vec2($10, $57, $d);
      __ZplRK6b2Vec2S1_($q, $p1, $10);
      __ZmiRK6b2Vec2S1_($r, $v2, $v1);
      var $58=__Z5b2DotRK6b2Vec2S1_($r, $r);
      $rr=$58;
      var $59=$rr;
      var $60=$59 == 0;
      if ($60) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 15; break;
    case 8: 
      __ZmiRK6b2Vec2S1_($11, $q, $v1);
      var $63=__Z5b2DotRK6b2Vec2S1_($11, $r);
      var $64=$rr;
      var $65=($63)/($64);
      $s=$65;
      var $66=$s;
      var $67=$66 < 0;
      if ($67) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $69=$s;
      var $70=1 < $69;
      if ($70) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 15; break;
    case 11: 
      var $73=$t;
      var $74=$3;
      var $75=(($74+8)|0);
      HEAPF32[(($75)>>2)]=$73;
      var $76=$numerator;
      var $77=$76 > 0;
      if ($77) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $79=$3;
      var $80=(($79)|0);
      __ZNK6b2Vec2ngEv($12, $normal);
      var $81=$80;
      var $82=$12;
      assert(8 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];
      label = 14; break;
    case 13: 
      var $84=$3;
      var $85=(($84)|0);
      var $86=$85;
      var $87=$normal;
      assert(8 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];
      label = 14; break;
    case 14: 
      $1=1;
      label = 15; break;
    case 15: 
      var $90=$1;
      STACKTOP = __stackBase__;
      return $90;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $v1=__stackBase__;
  var $v2=(__stackBase__)+(8);
  var $lower=(__stackBase__)+(16);
  var $upper=(__stackBase__)+(24);
  var $r=(__stackBase__)+(32);
  var $5=(__stackBase__)+(40);
  var $6=(__stackBase__)+(48);
  $1=$this;
  $2=$aabb;
  $3=$xf;
  $4=$childIndex;
  var $7=$1;
  var $8=$3;
  var $9=(($7+12)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $8, $9);
  var $10=$3;
  var $11=(($7+20)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $10, $11);
  __Z5b2MinRK6b2Vec2S1_($lower, $v1, $v2);
  __Z5b2MaxRK6b2Vec2S1_($upper, $v1, $v2);
  var $12=$7;
  var $13=(($12+8)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAPF32[(($16)>>2)];
  __ZN6b2Vec2C1Eff($r, $14, $17);
  var $18=$2;
  var $19=(($18)|0);
  __ZmiRK6b2Vec2S1_($5, $lower, $r);
  var $20=$19;
  var $21=$5;
  assert(8 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
  var $22=$2;
  var $23=(($22+8)|0);
  __ZplRK6b2Vec2S1_($6, $upper, $r);
  var $24=$23;
  var $25=$6;
  assert(8 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  var $5=(__stackBase__)+(8);
  $1=$this;
  $2=$massData;
  $3=$density;
  var $6=$1;
  var $7=$2;
  var $8=(($7)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=$2;
  var $10=(($9+4)|0);
  var $11=(($6+12)|0);
  var $12=(($6+20)|0);
  __ZplRK6b2Vec2S1_($5, $11, $12);
  __ZmlfRK6b2Vec2($4, 0.5, $5);
  var $13=$10;
  var $14=$4;
  assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
  var $15=$2;
  var $16=(($15+12)|0);
  HEAPF32[(($16)>>2)]=0;
  STACKTOP = __stackBase__;
  return;
}
function __ZN11b2EdgeShapeD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN11b2EdgeShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $clone;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=$2;
      var $5=__ZN16b2BlockAllocator8AllocateEi($4, 152);
      $mem=$5;
      var $6=$mem;
      var $7=(($6)|(0))==0;
      if ($7) { var $11 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$6;
      __ZN14b2PolygonShapeC1Ev($9);
      var $11 = $9;label = 3; break;
    case 3: 
      var $11;
      $clone=$11;
      var $12=$clone;
      var $13=__ZN14b2PolygonShapeaSERKS_($12, $3);
      var $14=$clone;
      var $15=$14;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2PolygonShapeC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2PolygonShapeC2Ev($2);
  return;
}
function __ZN14b2PolygonShapeaSERKS_($this, $0) {
  var label = 0;
  var $2;
  var $3;
  $2=$this;
  $3=$0;
  var $4=$2;
  var $5=$4;
  var $6=$3;
  var $7=$6;
  var $8=__ZN7b2ShapeaSERKS_($5, $7);
  var $9=(($4+12)|0);
  var $10=$3;
  var $11=(($10+12)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
  var $14=(($4+20)|0);
  var $15=$14;
  var $16=$3;
  var $17=(($16+20)|0);
  var $18=$17;
  assert(64 % 1 === 0);_memcpy($15, $18, 64);
  var $19=(($4+84)|0);
  var $20=$19;
  var $21=$3;
  var $22=(($21+84)|0);
  var $23=$22;
  assert(64 % 1 === 0);_memcpy($20, $23, 64);
  var $24=$3;
  var $25=(($24+148)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=(($4+148)|0);
  HEAP32[(($27)>>2)]=$26;
  return $4;
}
function __ZN14b2PolygonShape8SetAsBoxEff($this, $hx, $hy) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$hx;
  $3=$hy;
  var $4=$1;
  var $5=(($4+148)|0);
  HEAP32[(($5)>>2)]=4;
  var $6=(($4+20)|0);
  var $7=(($6)|0);
  var $8=$2;
  var $9=(-$8);
  var $10=$3;
  var $11=(-$10);
  __ZN6b2Vec23SetEff($7, $9, $11);
  var $12=(($4+20)|0);
  var $13=(($12+8)|0);
  var $14=$2;
  var $15=$3;
  var $16=(-$15);
  __ZN6b2Vec23SetEff($13, $14, $16);
  var $17=(($4+20)|0);
  var $18=(($17+16)|0);
  var $19=$2;
  var $20=$3;
  __ZN6b2Vec23SetEff($18, $19, $20);
  var $21=(($4+20)|0);
  var $22=(($21+24)|0);
  var $23=$2;
  var $24=(-$23);
  var $25=$3;
  __ZN6b2Vec23SetEff($22, $24, $25);
  var $26=(($4+84)|0);
  var $27=(($26)|0);
  __ZN6b2Vec23SetEff($27, 0, -1);
  var $28=(($4+84)|0);
  var $29=(($28+8)|0);
  __ZN6b2Vec23SetEff($29, 1, 0);
  var $30=(($4+84)|0);
  var $31=(($30+16)|0);
  __ZN6b2Vec23SetEff($31, 0, 1);
  var $32=(($4+84)|0);
  var $33=(($32+24)|0);
  __ZN6b2Vec23SetEff($33, -1, 0);
  var $34=(($4+12)|0);
  __ZN6b2Vec27SetZeroEv($34);
  return;
}
function __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($this, $hx, $hy, $center, $angle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xf=__stackBase__;
      var $i;
      var $6=(__stackBase__)+(16);
      var $7=(__stackBase__)+(24);
      $1=$this;
      $2=$hx;
      $3=$hy;
      $4=$center;
      $5=$angle;
      var $8=$1;
      var $9=(($8+148)|0);
      HEAP32[(($9)>>2)]=4;
      var $10=(($8+20)|0);
      var $11=(($10)|0);
      var $12=$2;
      var $13=(-$12);
      var $14=$3;
      var $15=(-$14);
      __ZN6b2Vec23SetEff($11, $13, $15);
      var $16=(($8+20)|0);
      var $17=(($16+8)|0);
      var $18=$2;
      var $19=$3;
      var $20=(-$19);
      __ZN6b2Vec23SetEff($17, $18, $20);
      var $21=(($8+20)|0);
      var $22=(($21+16)|0);
      var $23=$2;
      var $24=$3;
      __ZN6b2Vec23SetEff($22, $23, $24);
      var $25=(($8+20)|0);
      var $26=(($25+24)|0);
      var $27=$2;
      var $28=(-$27);
      var $29=$3;
      __ZN6b2Vec23SetEff($26, $28, $29);
      var $30=(($8+84)|0);
      var $31=(($30)|0);
      __ZN6b2Vec23SetEff($31, 0, -1);
      var $32=(($8+84)|0);
      var $33=(($32+8)|0);
      __ZN6b2Vec23SetEff($33, 1, 0);
      var $34=(($8+84)|0);
      var $35=(($34+16)|0);
      __ZN6b2Vec23SetEff($35, 0, 1);
      var $36=(($8+84)|0);
      var $37=(($36+24)|0);
      __ZN6b2Vec23SetEff($37, -1, 0);
      var $38=(($8+12)|0);
      var $39=$4;
      var $40=$38;
      var $41=$39;
      assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
      __ZN11b2TransformC1Ev($xf);
      var $42=(($xf)|0);
      var $43=$4;
      var $44=$42;
      var $45=$43;
      assert(8 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];
      var $46=(($xf+8)|0);
      var $47=$5;
      __ZN5b2Rot3SetEf($46, $47);
      $i=0;
      label = 2; break;
    case 2: 
      var $49=$i;
      var $50=(($8+148)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($49)|(0)) < (($51)|(0));
      if ($52) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $54=$i;
      var $55=(($8+20)|0);
      var $56=(($55+($54<<3))|0);
      var $57=$i;
      var $58=(($8+20)|0);
      var $59=(($58+($57<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $xf, $59);
      var $60=$56;
      var $61=$6;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=$i;
      var $63=(($8+84)|0);
      var $64=(($63+($62<<3))|0);
      var $65=(($xf+8)|0);
      var $66=$i;
      var $67=(($8+84)|0);
      var $68=(($67+($66<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $65, $68);
      var $69=$64;
      var $70=$7;
      assert(8 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];
      label = 4; break;
    case 4: 
      var $72=$i;
      var $73=((($72)+(1))|0);
      $i=$73;
      label = 2; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2CircleShapeC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((5265152)|0);
      var $7=(($4+12)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=$4;
      var $10=(($9+4)|0);
      HEAP32[(($10)>>2)]=0;
      var $11=$4;
      var $12=(($11+8)|0);
      HEAPF32[(($12)>>2)]=0;
      var $13=(($4+12)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
    case 3: 
      return;
    case 4: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      var $19=$4;
      (function() { try { __THREW__ = 0; return __ZN7b2ShapeD2Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 7; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $22=$2;
      var $23=$3;
      var $24$0=$22;
      var $24$1=0;
      var $25$0=$24$0;
      var $25$1=$23;
      ___resumeException($25$0)
    case 7: 
      var $27$0 = ___cxa_find_matching_catch(-1, -1,0); $27$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2PolygonShape3SetEPK6b2Vec2i($this, $vertices, $count) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $i1;
      var $i12;
      var $i2;
      var $edge=__stackBase__;
      var $4=(__stackBase__)+(8);
      var $5=(__stackBase__)+(16);
      $1=$this;
      $2=$vertices;
      $3=$count;
      var $6=$1;
      var $7=$3;
      var $8=3 <= (($7)|(0));
      if ($8) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $10=$3;
      var $11=(($10)|(0)) <= 8;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5249536)|0), 122, ((5263080)|0), ((5255636)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $16=$3;
      var $17=(($6+148)|0);
      HEAP32[(($17)>>2)]=$16;
      $i=0;
      label = 6; break;
    case 6: 
      var $19=$i;
      var $20=(($6+148)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($19)|(0)) < (($21)|(0));
      if ($22) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $24=$i;
      var $25=(($6+20)|0);
      var $26=(($25+($24<<3))|0);
      var $27=$i;
      var $28=$2;
      var $29=(($28+($27<<3))|0);
      var $30=$26;
      var $31=$29;
      assert(8 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];
      label = 8; break;
    case 8: 
      var $33=$i;
      var $34=((($33)+(1))|0);
      $i=$34;
      label = 6; break;
    case 9: 
      $i1=0;
      label = 10; break;
    case 10: 
      var $37=$i1;
      var $38=(($6+148)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($37)|(0)) < (($39)|(0));
      if ($40) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $42=$i1;
      $i12=$42;
      var $43=$i1;
      var $44=((($43)+(1))|0);
      var $45=(($6+148)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($44)|(0)) < (($46)|(0));
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $49=$i1;
      var $50=((($49)+(1))|0);
      var $53 = $50;label = 14; break;
    case 13: 
      var $53 = 0;label = 14; break;
    case 14: 
      var $53;
      $i2=$53;
      var $54=$i2;
      var $55=(($6+20)|0);
      var $56=(($55+($54<<3))|0);
      var $57=$i12;
      var $58=(($6+20)|0);
      var $59=(($58+($57<<3))|0);
      __ZmiRK6b2Vec2S1_($edge, $56, $59);
      var $60=__ZNK6b2Vec213LengthSquaredEv($edge);
      var $61=$60 > 1.4210854715202004e-14;
      if ($61) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      ___assert_func(((5249536)|0), 137, ((5263080)|0), ((5252768)|0));
      throw "Reached an unreachable!"
      label = 17; break;
    case 17: 
      var $66=$i1;
      var $67=(($6+84)|0);
      var $68=(($67+($66<<3))|0);
      __Z7b2CrossRK6b2Vec2f($4, $edge, 1);
      var $69=$68;
      var $70=$4;
      assert(8 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];
      var $71=$i1;
      var $72=(($6+84)|0);
      var $73=(($72+($71<<3))|0);
      var $74=__ZN6b2Vec29NormalizeEv($73);
      label = 18; break;
    case 18: 
      var $76=$i1;
      var $77=((($76)+(1))|0);
      $i1=$77;
      label = 10; break;
    case 19: 
      var $79=(($6+12)|0);
      var $80=(($6+20)|0);
      var $81=(($80)|0);
      var $82=(($6+148)|0);
      var $83=HEAP32[(($82)>>2)];
      __ZL15ComputeCentroidPK6b2Vec2i($5, $81, $83);
      var $84=$79;
      var $85=$5;
      assert(8 % 1 === 0);HEAP32[(($84)>>2)]=HEAP32[(($85)>>2)];HEAP32[((($84)+(4))>>2)]=HEAP32[((($85)+(4))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZL15ComputeCentroidPK6b2Vec2i($agg_result, $vs, $count) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $area;
      var $pRef=__stackBase__;
      var $inv3;
      var $i;
      var $p1=(__stackBase__)+(8);
      var $p2=(__stackBase__)+(16);
      var $p3=(__stackBase__)+(24);
      var $e1=(__stackBase__)+(32);
      var $e2=(__stackBase__)+(40);
      var $D;
      var $triangleArea;
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      $1=$vs;
      $2=$count;
      var $6=$2;
      var $7=(($6)|(0)) >= 3;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5249536)|0), 76, ((5264036)|0), ((5248452)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      __ZN6b2Vec2C1Ev($agg_result);
      __ZN6b2Vec23SetEff($agg_result, 0, 0);
      $area=0;
      __ZN6b2Vec2C1Eff($pRef, 0, 0);
      $inv3=0.3333333432674408;
      $i=0;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $14=$2;
      var $15=(($13)|(0)) < (($14)|(0));
      if ($15) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $17=$p1;
      var $18=$pRef;
      assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
      var $19=$i;
      var $20=$1;
      var $21=(($20+($19<<3))|0);
      var $22=$p2;
      var $23=$21;
      assert(8 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
      var $24=$i;
      var $25=((($24)+(1))|0);
      var $26=$2;
      var $27=(($25)|(0)) < (($26)|(0));
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      var $31=$1;
      var $32=(($31+($30<<3))|0);
      var $37 = $32;label = 9; break;
    case 8: 
      var $34=$1;
      var $35=(($34)|0);
      var $37 = $35;label = 9; break;
    case 9: 
      var $37;
      var $38=$p3;
      var $39=$37;
      assert(8 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($e1, $p2, $p1);
      __ZmiRK6b2Vec2S1_($e2, $p3, $p1);
      var $40=__Z7b2CrossRK6b2Vec2S1_($e1, $e2);
      $D=$40;
      var $41=$D;
      var $42=($41)*(0.5);
      $triangleArea=$42;
      var $43=$triangleArea;
      var $44=$area;
      var $45=($44)+($43);
      $area=$45;
      var $46=$triangleArea;
      var $47=($46)*(0.3333333432674408);
      __ZplRK6b2Vec2S1_($5, $p1, $p2);
      __ZplRK6b2Vec2S1_($4, $5, $p3);
      __ZmlfRK6b2Vec2($3, $47, $4);
      __ZN6b2Vec2pLERKS_($agg_result, $3);
      label = 10; break;
    case 10: 
      var $49=$i;
      var $50=((($49)+(1))|0);
      $i=$50;
      label = 5; break;
    case 11: 
      var $52=$area;
      var $53=$52 > 1.1920928955078125e-7;
      if ($53) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      ___assert_func(((5249536)|0), 115, ((5264036)|0), ((5249084)|0));
      throw "Reached an unreachable!"
      label = 14; break;
    case 14: 
      var $58=$area;
      var $59=(1)/($58);
      __ZN6b2Vec2mLEf($agg_result, $59);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec2mLEf($this, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($6)*($4);
  HEAPF32[(($5)>>2)]=$7;
  var $8=$2;
  var $9=(($3+4)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=($10)*($8);
  HEAPF32[(($9)>>2)]=$11;
  return;
}
function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pLocal=__stackBase__;
      var $5=(__stackBase__)+(8);
      var $i;
      var $dot;
      var $6=(__stackBase__)+(16);
      $2=$this;
      $3=$xf;
      $4=$p;
      var $7=$2;
      var $8=$3;
      var $9=(($8+8)|0);
      var $10=$4;
      var $11=$3;
      var $12=(($11)|0);
      __ZmiRK6b2Vec2S1_($5, $10, $12);
      __Z6b2MulTRK5b2RotRK6b2Vec2($pLocal, $9, $5);
      $i=0;
      label = 2; break;
    case 2: 
      var $14=$i;
      var $15=(($7+148)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($14)|(0)) < (($16)|(0));
      if ($17) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $19=$i;
      var $20=(($7+84)|0);
      var $21=(($20+($19<<3))|0);
      var $22=$i;
      var $23=(($7+20)|0);
      var $24=(($23+($22<<3))|0);
      __ZmiRK6b2Vec2S1_($6, $pLocal, $24);
      var $25=__Z5b2DotRK6b2Vec2S1_($21, $6);
      $dot=$25;
      var $26=$dot;
      var $27=$26 > 0;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $31=$i;
      var $32=((($31)+(1))|0);
      $i=$32;
      label = 2; break;
    case 7: 
      $1=1;
      label = 8; break;
    case 8: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lower=__stackBase__;
      var $upper=(__stackBase__)+(8);
      var $i;
      var $v=(__stackBase__)+(16);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(32);
      var $r=(__stackBase__)+(40);
      var $7=(__stackBase__)+(48);
      var $8=(__stackBase__)+(56);
      $1=$this;
      $2=$aabb;
      $3=$xf;
      $4=$childIndex;
      var $9=$1;
      var $10=$3;
      var $11=(($9+20)|0);
      var $12=(($11)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($lower, $10, $12);
      var $13=$upper;
      var $14=$lower;
      assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
      $i=1;
      label = 2; break;
    case 2: 
      var $16=$i;
      var $17=(($9+148)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|(0)) < (($18)|(0));
      if ($19) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $21=$3;
      var $22=$i;
      var $23=(($9+20)|0);
      var $24=(($23+($22<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v, $21, $24);
      __Z5b2MinRK6b2Vec2S1_($5, $lower, $v);
      var $25=$lower;
      var $26=$5;
      assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      __Z5b2MaxRK6b2Vec2S1_($6, $upper, $v);
      var $27=$upper;
      var $28=$6;
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      label = 4; break;
    case 4: 
      var $30=$i;
      var $31=((($30)+(1))|0);
      $i=$31;
      label = 2; break;
    case 5: 
      var $33=$9;
      var $34=(($33+8)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=$9;
      var $37=(($36+8)|0);
      var $38=HEAPF32[(($37)>>2)];
      __ZN6b2Vec2C1Eff($r, $35, $38);
      var $39=$2;
      var $40=(($39)|0);
      __ZmiRK6b2Vec2S1_($7, $lower, $r);
      var $41=$40;
      var $42=$7;
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      var $43=$2;
      var $44=(($43+8)|0);
      __ZplRK6b2Vec2S1_($8, $upper, $r);
      var $45=$44;
      var $46=$8;
      assert(8 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2PolygonShapeD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2PolygonShapeD2Ev($2);
  return;
}
function __ZN14b2PolygonShapeD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN14b2PolygonShapeD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2PolygonShapeD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2ShapeD2Ev($3);
  return;
}
function __ZN16b2BlockAllocatorD2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      $1=$this;
      var $2=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|(0)) < (($6)|(0));
      if ($7) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $9=$i;
      var $10=(($2)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+($9<<3))|0);
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      __Z6b2FreePv($15);
      label = 4; break;
    case 4: 
      var $17=$i;
      var $18=((($17)+(1))|0);
      $i=$18;
      label = 2; break;
    case 5: 
      var $20=(($2)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      __Z6b2FreePv($22);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $p1=__stackBase__;
      var $7=(__stackBase__)+(8);
      var $p2=(__stackBase__)+(16);
      var $8=(__stackBase__)+(24);
      var $d=(__stackBase__)+(32);
      var $lower;
      var $upper;
      var $index;
      var $i;
      var $numerator;
      var $9=(__stackBase__)+(40);
      var $denominator;
      var $10=(__stackBase__)+(48);
      $2=$this;
      $3=$output;
      $4=$input;
      $5=$xf;
      $6=$childIndex;
      var $11=$2;
      var $12=$5;
      var $13=(($12+8)|0);
      var $14=$4;
      var $15=(($14)|0);
      var $16=$5;
      var $17=(($16)|0);
      __ZmiRK6b2Vec2S1_($7, $15, $17);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p1, $13, $7);
      var $18=$5;
      var $19=(($18+8)|0);
      var $20=$4;
      var $21=(($20+8)|0);
      var $22=$5;
      var $23=(($22)|0);
      __ZmiRK6b2Vec2S1_($8, $21, $23);
      __Z6b2MulTRK5b2RotRK6b2Vec2($p2, $19, $8);
      __ZmiRK6b2Vec2S1_($d, $p2, $p1);
      $lower=0;
      var $24=$4;
      var $25=(($24+16)|0);
      var $26=HEAPF32[(($25)>>2)];
      $upper=$26;
      $index=-1;
      $i=0;
      label = 2; break;
    case 2: 
      var $28=$i;
      var $29=(($11+148)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($28)|(0)) < (($30)|(0));
      if ($31) { label = 3; break; } else { label = 19; break; }
    case 3: 
      var $33=$i;
      var $34=(($11+84)|0);
      var $35=(($34+($33<<3))|0);
      var $36=$i;
      var $37=(($11+20)|0);
      var $38=(($37+($36<<3))|0);
      __ZmiRK6b2Vec2S1_($9, $38, $p1);
      var $39=__Z5b2DotRK6b2Vec2S1_($35, $9);
      $numerator=$39;
      var $40=$i;
      var $41=(($11+84)|0);
      var $42=(($41+($40<<3))|0);
      var $43=__Z5b2DotRK6b2Vec2S1_($42, $d);
      $denominator=$43;
      var $44=$denominator;
      var $45=$44 == 0;
      if ($45) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $47=$numerator;
      var $48=$47 < 0;
      if ($48) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 26; break;
    case 6: 
      label = 15; break;
    case 7: 
      var $52=$denominator;
      var $53=$52 < 0;
      if ($53) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $55=$numerator;
      var $56=$lower;
      var $57=$denominator;
      var $58=($56)*($57);
      var $59=$55 < $58;
      if ($59) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $61=$numerator;
      var $62=$denominator;
      var $63=($61)/($62);
      $lower=$63;
      var $64=$i;
      $index=$64;
      label = 14; break;
    case 10: 
      var $66=$denominator;
      var $67=$66 > 0;
      if ($67) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $69=$numerator;
      var $70=$upper;
      var $71=$denominator;
      var $72=($70)*($71);
      var $73=$69 < $72;
      if ($73) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $75=$numerator;
      var $76=$denominator;
      var $77=($75)/($76);
      $upper=$77;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $81=$upper;
      var $82=$lower;
      var $83=$81 < $82;
      if ($83) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $1=0;
      label = 26; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $87=$i;
      var $88=((($87)+(1))|0);
      $i=$88;
      label = 2; break;
    case 19: 
      var $90=$lower;
      var $91=0 <= $90;
      if ($91) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $93=$lower;
      var $94=$4;
      var $95=(($94+16)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=$93 <= $96;
      if ($97) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      ___assert_func(((5249536)|0), 249, ((5258980)|0), ((5250708)|0));
      throw "Reached an unreachable!"
      label = 23; break;
    case 23: 
      var $102=$index;
      var $103=(($102)|(0)) >= 0;
      if ($103) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $105=$lower;
      var $106=$3;
      var $107=(($106+8)|0);
      HEAPF32[(($107)>>2)]=$105;
      var $108=$3;
      var $109=(($108)|0);
      var $110=$5;
      var $111=(($110+8)|0);
      var $112=$index;
      var $113=(($11+84)|0);
      var $114=(($113+($112<<3))|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($10, $111, $114);
      var $115=$109;
      var $116=$10;
      assert(8 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];
      $1=1;
      label = 26; break;
    case 25: 
      $1=0;
      label = 26; break;
    case 26: 
      var $119=$1;
      STACKTOP = __stackBase__;
      return $119;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $center=__stackBase__;
      var $area;
      var $I;
      var $s=(__stackBase__)+(8);
      var $i;
      var $k_inv3;
      var $i1;
      var $e1=(__stackBase__)+(16);
      var $e2=(__stackBase__)+(24);
      var $D;
      var $triangleArea;
      var $4=(__stackBase__)+(32);
      var $5=(__stackBase__)+(40);
      var $ex1;
      var $ey1;
      var $ex2;
      var $ey2;
      var $intx2;
      var $inty2;
      var $6=(__stackBase__)+(48);
      $1=$this;
      $2=$massData;
      $3=$density;
      var $7=$1;
      var $8=(($7+148)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0)) >= 3;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5249536)|0), 306, ((5259096)|0), ((5249788)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      __ZN6b2Vec2C1Ev($center);
      __ZN6b2Vec23SetEff($center, 0, 0);
      $area=0;
      $I=0;
      __ZN6b2Vec2C1Eff($s, 0, 0);
      $i=0;
      label = 5; break;
    case 5: 
      var $16=$i;
      var $17=(($7+148)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|(0)) < (($18)|(0));
      if ($19) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $21=$i;
      var $22=(($7+20)|0);
      var $23=(($22+($21<<3))|0);
      __ZN6b2Vec2pLERKS_($s, $23);
      label = 7; break;
    case 7: 
      var $25=$i;
      var $26=((($25)+(1))|0);
      $i=$26;
      label = 5; break;
    case 8: 
      var $28=(($7+148)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0));
      var $31=(1)/($30);
      __ZN6b2Vec2mLEf($s, $31);
      $k_inv3=0.3333333432674408;
      $i1=0;
      label = 9; break;
    case 9: 
      var $33=$i1;
      var $34=(($7+148)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($33)|(0)) < (($35)|(0));
      if ($36) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $38=$i1;
      var $39=(($7+20)|0);
      var $40=(($39+($38<<3))|0);
      __ZmiRK6b2Vec2S1_($e1, $40, $s);
      var $41=$i1;
      var $42=((($41)+(1))|0);
      var $43=(($7+148)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($42)|(0)) < (($44)|(0));
      if ($45) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $47=$i1;
      var $48=((($47)+(1))|0);
      var $49=(($7+20)|0);
      var $50=(($49+($48<<3))|0);
      __ZmiRK6b2Vec2S1_($e2, $50, $s);
      label = 13; break;
    case 12: 
      var $52=(($7+20)|0);
      var $53=(($52)|0);
      __ZmiRK6b2Vec2S1_($e2, $53, $s);
      label = 13; break;
    case 13: 
      var $55=__Z7b2CrossRK6b2Vec2S1_($e1, $e2);
      $D=$55;
      var $56=$D;
      var $57=($56)*(0.5);
      $triangleArea=$57;
      var $58=$triangleArea;
      var $59=$area;
      var $60=($59)+($58);
      $area=$60;
      var $61=$triangleArea;
      var $62=($61)*(0.3333333432674408);
      __ZplRK6b2Vec2S1_($5, $e1, $e2);
      __ZmlfRK6b2Vec2($4, $62, $5);
      __ZN6b2Vec2pLERKS_($center, $4);
      var $63=(($e1)|0);
      var $64=HEAPF32[(($63)>>2)];
      $ex1=$64;
      var $65=(($e1+4)|0);
      var $66=HEAPF32[(($65)>>2)];
      $ey1=$66;
      var $67=(($e2)|0);
      var $68=HEAPF32[(($67)>>2)];
      $ex2=$68;
      var $69=(($e2+4)|0);
      var $70=HEAPF32[(($69)>>2)];
      $ey2=$70;
      var $71=$ex1;
      var $72=$ex1;
      var $73=($71)*($72);
      var $74=$ex2;
      var $75=$ex1;
      var $76=($74)*($75);
      var $77=($73)+($76);
      var $78=$ex2;
      var $79=$ex2;
      var $80=($78)*($79);
      var $81=($77)+($80);
      $intx2=$81;
      var $82=$ey1;
      var $83=$ey1;
      var $84=($82)*($83);
      var $85=$ey2;
      var $86=$ey1;
      var $87=($85)*($86);
      var $88=($84)+($87);
      var $89=$ey2;
      var $90=$ey2;
      var $91=($89)*($90);
      var $92=($88)+($91);
      $inty2=$92;
      var $93=$D;
      var $94=($93)*(0.0833333358168602);
      var $95=$intx2;
      var $96=$inty2;
      var $97=($95)+($96);
      var $98=($94)*($97);
      var $99=$I;
      var $100=($99)+($98);
      $I=$100;
      label = 14; break;
    case 14: 
      var $102=$i1;
      var $103=((($102)+(1))|0);
      $i1=$103;
      label = 9; break;
    case 15: 
      var $105=$3;
      var $106=$area;
      var $107=($105)*($106);
      var $108=$2;
      var $109=(($108)|0);
      HEAPF32[(($109)>>2)]=$107;
      var $110=$area;
      var $111=$110 > 1.1920928955078125e-7;
      if ($111) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      ___assert_func(((5249536)|0), 352, ((5259096)|0), ((5249084)|0));
      throw "Reached an unreachable!"
      label = 18; break;
    case 18: 
      var $116=$area;
      var $117=(1)/($116);
      __ZN6b2Vec2mLEf($center, $117);
      var $118=$2;
      var $119=(($118+4)|0);
      __ZplRK6b2Vec2S1_($6, $center, $s);
      var $120=$119;
      var $121=$6;
      assert(8 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($121)+(4))>>2)];
      var $122=$3;
      var $123=$I;
      var $124=($122)*($123);
      var $125=$2;
      var $126=(($125+12)|0);
      HEAPF32[(($126)>>2)]=$124;
      var $127=$2;
      var $128=(($127)|0);
      var $129=HEAPF32[(($128)>>2)];
      var $130=$2;
      var $131=(($130+4)|0);
      var $132=$2;
      var $133=(($132+4)|0);
      var $134=__Z5b2DotRK6b2Vec2S1_($131, $133);
      var $135=__Z5b2DotRK6b2Vec2S1_($center, $center);
      var $136=($134)-($135);
      var $137=($129)*($136);
      var $138=$2;
      var $139=(($138+12)|0);
      var $140=HEAPF32[(($139)>>2)];
      var $141=($140)+($137);
      HEAPF32[(($139)>>2)]=$141;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2PolygonShapeC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=$4;
      __ZN7b2ShapeC2Ev($5);
      var $6=$4;
      HEAP32[(($6)>>2)]=((5265056)|0);
      var $7=(($4+12)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 10; break; }
    case 2: 
      var $9=(($4+20)|0);
      var $10=(($9)|0);
      var $11=(($10+64)|0);
      var $13 = $10;label = 3; break;
    case 3: 
      var $13;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $15=(($13+8)|0);
      var $16=(($15)|(0))==(($11)|(0));
      if ($16) { label = 5; break; } else { var $13 = $15;label = 3; break; }
    case 5: 
      var $18=(($4+84)|0);
      var $19=(($18)|0);
      var $20=(($19+64)|0);
      var $22 = $19;label = 6; break;
    case 6: 
      var $22;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $24=(($22+8)|0);
      var $25=(($24)|(0))==(($20)|(0));
      if ($25) { label = 8; break; } else { var $22 = $24;label = 6; break; }
    case 8: 
      var $27=$4;
      var $28=(($27+4)|0);
      HEAP32[(($28)>>2)]=2;
      var $29=$4;
      var $30=(($29+8)|0);
      HEAPF32[(($30)>>2)]=0.009999999776482582;
      var $31=(($4+148)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=(($4+12)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
    case 9: 
      return;
    case 10: 
      var $35$0 = ___cxa_find_matching_catch(-1, -1); $35$1 = tempRet0;
      var $36=$35$0;
      $2=$36;
      var $37=$35$1;
      $3=$37;
      var $38=$4;
      (function() { try { __THREW__ = 0; return __ZN7b2ShapeD2Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 13; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $41=$2;
      var $42=$3;
      var $43$0=$41;
      var $43$1=0;
      var $44$0=$43$0;
      var $44$1=$42;
      ___resumeException($44$0)
    case 13: 
      var $46$0 = ___cxa_find_matching_catch(-1, -1,0); $46$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2BlockAllocatorC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $j;
      var $i;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      HEAP32[(($3)>>2)]=128;
      var $4=(($2+4)|0);
      HEAP32[(($4)>>2)]=0;
      var $5=(($2+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=($6<<3);
      var $8=__Z7b2Alloci($7);
      var $9=$8;
      var $10=(($2)|0);
      HEAP32[(($10)>>2)]=$9;
      var $11=(($2)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($2+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=($15<<3);
      _memset($13, 0, $16);
      var $17=(($2+12)|0);
      var $18=$17;
      _memset($18, 0, 56);
      var $19=HEAP8[(5266828)];
      var $20=(($19) & 1);
      var $21=(($20)&(1));
      var $22=(($21)|(0))==0;
      if ($22) { label = 2; break; } else { label = 13; break; }
    case 2: 
      $j=0;
      $i=1;
      label = 3; break;
    case 3: 
      var $25=$i;
      var $26=(($25)|(0)) <= 640;
      if ($26) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $28=$j;
      var $29=(($28)|(0)) < 14;
      if ($29) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5248956)|0), 73, ((5262484)|0), ((5255476)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $34=$i;
      var $35=$j;
      var $36=((5267476+($35<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34)|(0)) <= (($37)|(0));
      if ($38) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $40=$j;
      var $41=(($40) & 255);
      var $42=$i;
      var $43=((5266832+$42)|0);
      HEAP8[($43)]=$41;
      label = 10; break;
    case 9: 
      var $45=$j;
      var $46=((($45)+(1))|0);
      $j=$46;
      var $47=$j;
      var $48=(($47) & 255);
      var $49=$i;
      var $50=((5266832+$49)|0);
      HEAP8[($50)]=$48;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $53=$i;
      var $54=((($53)+(1))|0);
      $i=$54;
      label = 3; break;
    case 12: 
      HEAP8[(5266828)]=1;
      label = 13; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Draw11DrawPolygonEPK6b2Vec2iRK7b2Color($this, $vertices, $vertexCount, $color) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$vertices;
  $3=$vertexCount;
  $4=$color;
  var $5=$1;
  return;
}
function __ZN6b2Draw16DrawSolidPolygonEPK6b2Vec2iRK7b2Color($this, $vertices, $vertexCount, $color) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$vertices;
  $3=$vertexCount;
  $4=$color;
  var $5=$1;
  return;
}
function __ZN6b2Draw10DrawCircleERK6b2Vec2fRK7b2Color($this, $center, $radius, $color) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$center;
  $3=$radius;
  $4=$color;
  var $5=$1;
  return;
}
function __ZN6b2Draw15DrawSolidCircleERK6b2Vec2fS2_RK7b2Color($this, $center, $radius, $axis, $color) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$this;
  $2=$center;
  $3=$radius;
  $4=$axis;
  $5=$color;
  var $6=$1;
  return;
}
function __ZN6b2Draw11DrawSegmentERK6b2Vec2S2_RK7b2Color($this, $p1, $p2, $color) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$p1;
  $3=$p2;
  $4=$color;
  var $5=$1;
  return;
}
function __ZN6b2Draw13DrawTransformERK11b2Transform($this, $xf) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$xf;
  var $3=$1;
  return;
}
function __ZN6b2DrawD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN6b2DrawC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((5264500)|0);
  var $4=(($2+4)|0);
  HEAP32[(($4)>>2)]=0;
  return;
}
function __ZN6b2Draw8SetFlagsEj($this, $flags) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$flags;
  var $3=$1;
  var $4=$2;
  var $5=(($3+4)|0);
  HEAP32[(($5)>>2)]=$4;
  return;
}
function __ZNK6b2Draw8GetFlagsEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN6b2Draw11AppendFlagsEj($this, $flags) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$flags;
  var $3=$1;
  var $4=$2;
  var $5=(($3+4)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6 | $4;
  HEAP32[(($5)>>2)]=$7;
  return;
}
function __ZN6b2Draw10ClearFlagsEj($this, $flags) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$flags;
  var $3=$1;
  var $4=$2;
  var $5=$4 ^ -1;
  var $6=(($3+4)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$7 & $5;
  HEAP32[(($6)>>2)]=$8;
  return;
}
function __Z5b2DotRK6b2Vec3S1_($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)*($8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)*($15);
  var $17=($9)+($16);
  var $18=$1;
  var $19=(($18+8)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=$2;
  var $22=(($21+8)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=($20)*($23);
  var $25=($17)+($24);
  return $25;
}
function __ZNK7b2Mat3312GetInverse22EPS_($this, $M) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $a;
      var $b;
      var $c;
      var $d;
      var $det;
      $1=$this;
      $2=$M;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAPF32[(($5)>>2)];
      $a=$6;
      var $7=(($3+12)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      $b=$9;
      var $10=(($3)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      $c=$12;
      var $13=(($3+12)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      $d=$15;
      var $16=$a;
      var $17=$d;
      var $18=($16)*($17);
      var $19=$b;
      var $20=$c;
      var $21=($19)*($20);
      var $22=($18)-($21);
      $det=$22;
      var $23=$det;
      var $24=$23 != 0;
      if ($24) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $26=$det;
      var $27=(1)/($26);
      $det=$27;
      label = 3; break;
    case 3: 
      var $29=$det;
      var $30=$d;
      var $31=($29)*($30);
      var $32=$2;
      var $33=(($32)|0);
      var $34=(($33)|0);
      HEAPF32[(($34)>>2)]=$31;
      var $35=$det;
      var $36=(-$35);
      var $37=$b;
      var $38=($36)*($37);
      var $39=$2;
      var $40=(($39+12)|0);
      var $41=(($40)|0);
      HEAPF32[(($41)>>2)]=$38;
      var $42=$2;
      var $43=(($42)|0);
      var $44=(($43+8)|0);
      HEAPF32[(($44)>>2)]=0;
      var $45=$det;
      var $46=(-$45);
      var $47=$c;
      var $48=($46)*($47);
      var $49=$2;
      var $50=(($49)|0);
      var $51=(($50+4)|0);
      HEAPF32[(($51)>>2)]=$48;
      var $52=$det;
      var $53=$a;
      var $54=($52)*($53);
      var $55=$2;
      var $56=(($55+12)|0);
      var $57=(($56+4)|0);
      HEAPF32[(($57)>>2)]=$54;
      var $58=$2;
      var $59=(($58+12)|0);
      var $60=(($59+8)|0);
      HEAPF32[(($60)>>2)]=0;
      var $61=$2;
      var $62=(($61+24)|0);
      var $63=(($62)|0);
      HEAPF32[(($63)>>2)]=0;
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=(($65+4)|0);
      HEAPF32[(($66)>>2)]=0;
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=(($68+8)|0);
      HEAPF32[(($69)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2BlockAllocator5ClearEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      $1=$this;
      var $2=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|(0)) < (($6)|(0));
      if ($7) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $9=$i;
      var $10=(($2)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+($9<<3))|0);
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      __Z6b2FreePv($15);
      label = 4; break;
    case 4: 
      var $17=$i;
      var $18=((($17)+(1))|0);
      $i=$18;
      label = 2; break;
    case 5: 
      var $20=(($2+4)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=(($2)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=(($2+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=($25<<3);
      _memset($23, 0, $26);
      var $27=(($2+12)|0);
      var $28=$27;
      _memset($28, 0, 56);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2DrawD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2DrawD2Ev($2);
  return;
}
function __ZN6b2DrawD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN6b2DrawD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function ___cxx_global_var_init() {
  var label = 0;
  __ZN6b2Vec2C1Eff(5247060, 0, 0);
  return;
}
function __ZNK7b2Mat337Solve33ERK6b2Vec3($agg_result, $this, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $det;
      var $3=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      $1=$this;
      $2=$b;
      var $7=$1;
      var $8=(($7)|0);
      var $9=(($7+12)|0);
      var $10=(($7+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($3, $9, $10);
      var $11=__Z5b2DotRK6b2Vec3S1_($8, $3);
      $det=$11;
      var $12=$det;
      var $13=$12 != 0;
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $15=$det;
      var $16=(1)/($15);
      $det=$16;
      label = 3; break;
    case 3: 
      __ZN6b2Vec3C1Ev($agg_result);
      var $18=$det;
      var $19=$2;
      var $20=(($7+12)|0);
      var $21=(($7+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($4, $20, $21);
      var $22=__Z5b2DotRK6b2Vec3S1_($19, $4);
      var $23=($18)*($22);
      var $24=(($agg_result)|0);
      HEAPF32[(($24)>>2)]=$23;
      var $25=$det;
      var $26=(($7)|0);
      var $27=$2;
      var $28=(($7+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($5, $27, $28);
      var $29=__Z5b2DotRK6b2Vec3S1_($26, $5);
      var $30=($25)*($29);
      var $31=(($agg_result+4)|0);
      HEAPF32[(($31)>>2)]=$30;
      var $32=$det;
      var $33=(($7)|0);
      var $34=(($7+12)|0);
      var $35=$2;
      __Z7b2CrossRK6b2Vec3S1_($6, $34, $35);
      var $36=__Z5b2DotRK6b2Vec3S1_($33, $6);
      var $37=($32)*($36);
      var $38=(($agg_result+8)|0);
      HEAPF32[(($38)>>2)]=$37;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z7b2CrossRK6b2Vec3S1_($agg_result, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6+8)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)*($8);
  var $10=$1;
  var $11=(($10+8)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)*($15);
  var $17=($9)-($16);
  var $18=$1;
  var $19=(($18+8)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=$2;
  var $22=(($21)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=($20)*($23);
  var $25=$1;
  var $26=(($25)|0);
  var $27=HEAPF32[(($26)>>2)];
  var $28=$2;
  var $29=(($28+8)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=($27)*($30);
  var $32=($24)-($31);
  var $33=$1;
  var $34=(($33)|0);
  var $35=HEAPF32[(($34)>>2)];
  var $36=$2;
  var $37=(($36+4)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=($35)*($38);
  var $40=$1;
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$2;
  var $44=(($43)|0);
  var $45=HEAPF32[(($44)>>2)];
  var $46=($42)*($45);
  var $47=($39)-($46);
  __ZN6b2Vec3C1Efff($agg_result, $17, $32, $47);
  return;
}
function __ZN6b2Vec3C1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec3C2Ev($2);
  return;
}
function __ZNK7b2Mat337Solve22ERK6b2Vec2($agg_result, $this, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $a11;
      var $a12;
      var $a21;
      var $a22;
      var $det;
      $1=$this;
      $2=$b;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAPF32[(($5)>>2)];
      $a11=$6;
      var $7=(($3+12)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      $a12=$9;
      var $10=(($3)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      $a21=$12;
      var $13=(($3+12)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      $a22=$15;
      var $16=$a11;
      var $17=$a22;
      var $18=($16)*($17);
      var $19=$a12;
      var $20=$a21;
      var $21=($19)*($20);
      var $22=($18)-($21);
      $det=$22;
      var $23=$det;
      var $24=$23 != 0;
      if ($24) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $26=$det;
      var $27=(1)/($26);
      $det=$27;
      label = 3; break;
    case 3: 
      __ZN6b2Vec2C1Ev($agg_result);
      var $29=$det;
      var $30=$a22;
      var $31=$2;
      var $32=(($31)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=($30)*($33);
      var $35=$a12;
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=($35)*($38);
      var $40=($34)-($39);
      var $41=($29)*($40);
      var $42=(($agg_result)|0);
      HEAPF32[(($42)>>2)]=$41;
      var $43=$det;
      var $44=$a11;
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=($44)*($47);
      var $49=$a21;
      var $50=$2;
      var $51=(($50)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=($49)*($52);
      var $54=($48)-($53);
      var $55=($43)*($54);
      var $56=(($agg_result+4)|0);
      HEAPF32[(($56)>>2)]=$55;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2BlockAllocator8AllocateEi($this, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $index;
      var $block;
      var $oldChunks;
      var $chunk;
      var $blockSize;
      var $blockCount;
      var $i;
      var $block1;
      var $next;
      var $last;
      $2=$this;
      $3=$size;
      var $4=$2;
      var $5=$3;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 24; break;
    case 3: 
      var $9=$3;
      var $10=0 < (($9)|(0));
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((5248956)|0), 104, ((5262524)|0), ((5252644)|0));
      throw "Reached an unreachable!"
      label = 6; break;
    case 6: 
      var $15=$3;
      var $16=(($15)|(0)) > 640;
      if ($16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$3;
      var $19=__Z7b2Alloci($18);
      $1=$19;
      label = 24; break;
    case 8: 
      var $21=$3;
      var $22=((5266832+$21)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      $index=$24;
      var $25=$index;
      var $26=0 <= (($25)|(0));
      if ($26) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $28=$index;
      var $29=(($28)|(0)) < 14;
      if ($29) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      ___assert_func(((5248956)|0), 112, ((5262524)|0), ((5250672)|0));
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      var $34=$index;
      var $35=(($4+12)|0);
      var $36=(($35+($34<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $40=$index;
      var $41=(($4+12)|0);
      var $42=(($41+($40<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      $block=$43;
      var $44=$block;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$index;
      var $48=(($4+12)|0);
      var $49=(($48+($47<<2))|0);
      HEAP32[(($49)>>2)]=$46;
      var $50=$block;
      var $51=$50;
      $1=$51;
      label = 24; break;
    case 14: 
      var $53=(($4+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($4+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($54)|(0))==(($56)|(0));
      if ($57) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $59=(($4)|0);
      var $60=HEAP32[(($59)>>2)];
      $oldChunks=$60;
      var $61=(($4+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)+(128))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=(($4+8)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=($65<<3);
      var $67=__Z7b2Alloci($66);
      var $68=$67;
      var $69=(($4)|0);
      HEAP32[(($69)>>2)]=$68;
      var $70=(($4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      var $73=$oldChunks;
      var $74=$73;
      var $75=(($4+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=($76<<3);
      assert($77 % 1 === 0);_memcpy($72, $74, $77);
      var $78=(($4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($4+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($79+($81<<3))|0);
      var $83=$82;
      _memset($83, 0, 1024);
      var $84=$oldChunks;
      var $85=$84;
      __Z6b2FreePv($85);
      label = 16; break;
    case 16: 
      var $87=(($4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($4+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($88+($90<<3))|0);
      $chunk=$91;
      var $92=__Z7b2Alloci(16384);
      var $93=$92;
      var $94=$chunk;
      var $95=(($94+4)|0);
      HEAP32[(($95)>>2)]=$93;
      var $96=$index;
      var $97=((5267476+($96<<2))|0);
      var $98=HEAP32[(($97)>>2)];
      $blockSize=$98;
      var $99=$blockSize;
      var $100=$chunk;
      var $101=(($100)|0);
      HEAP32[(($101)>>2)]=$99;
      var $102=$blockSize;
      var $103=(((16384)/((($102)|(0))))&-1);
      $blockCount=$103;
      var $104=$blockCount;
      var $105=$blockSize;
      var $106=Math.imul($104,$105);
      var $107=(($106)|(0)) <= 16384;
      if ($107) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      ___assert_func(((5248956)|0), 140, ((5262524)|0), ((5249748)|0));
      throw "Reached an unreachable!"
      label = 19; break;
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $113=$i;
      var $114=$blockCount;
      var $115=((($114)-(1))|0);
      var $116=(($113)|(0)) < (($115)|(0));
      if ($116) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $118=$chunk;
      var $119=(($118+4)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$120;
      var $122=$blockSize;
      var $123=$i;
      var $124=Math.imul($122,$123);
      var $125=(($121+$124)|0);
      var $126=$125;
      $block1=$126;
      var $127=$chunk;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129;
      var $131=$blockSize;
      var $132=$i;
      var $133=((($132)+(1))|0);
      var $134=Math.imul($131,$133);
      var $135=(($130+$134)|0);
      var $136=$135;
      $next=$136;
      var $137=$next;
      var $138=$block1;
      var $139=(($138)|0);
      HEAP32[(($139)>>2)]=$137;
      label = 22; break;
    case 22: 
      var $141=$i;
      var $142=((($141)+(1))|0);
      $i=$142;
      label = 20; break;
    case 23: 
      var $144=$chunk;
      var $145=(($144+4)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$146;
      var $148=$blockSize;
      var $149=$blockCount;
      var $150=((($149)-(1))|0);
      var $151=Math.imul($148,$150);
      var $152=(($147+$151)|0);
      var $153=$152;
      $last=$153;
      var $154=$last;
      var $155=(($154)|0);
      HEAP32[(($155)>>2)]=0;
      var $156=$chunk;
      var $157=(($156+4)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$index;
      var $162=(($4+12)|0);
      var $163=(($162+($161<<2))|0);
      HEAP32[(($163)>>2)]=$160;
      var $164=(($4+4)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=((($165)+(1))|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=$chunk;
      var $168=(($167+4)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$169;
      $1=$170;
      label = 24; break;
    case 24: 
      var $172=$1;
      return $172;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2BlockAllocator4FreeEPvi($this, $p, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $index;
      var $block;
      $1=$this;
      $2=$p;
      $3=$size;
      var $4=$1;
      var $5=$3;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 13; break;
    case 3: 
      var $9=$3;
      var $10=0 < (($9)|(0));
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((5248956)|0), 164, ((5262564)|0), ((5252644)|0));
      throw "Reached an unreachable!"
      label = 6; break;
    case 6: 
      var $15=$3;
      var $16=(($15)|(0)) > 640;
      if ($16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$2;
      __Z6b2FreePv($18);
      label = 13; break;
    case 8: 
      var $20=$3;
      var $21=((5266832+$20)|0);
      var $22=HEAP8[($21)];
      var $23=(($22)&(255));
      $index=$23;
      var $24=$index;
      var $25=0 <= (($24)|(0));
      if ($25) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $27=$index;
      var $28=(($27)|(0)) < 14;
      if ($28) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      ___assert_func(((5248956)|0), 173, ((5262564)|0), ((5250672)|0));
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      var $33=$2;
      var $34=$33;
      $block=$34;
      var $35=$index;
      var $36=(($4+12)|0);
      var $37=(($36+($35<<2))|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$block;
      var $40=(($39)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$block;
      var $42=$index;
      var $43=(($4+12)|0);
      var $44=(($43+($42<<2))|0);
      HEAP32[(($44)>>2)]=$41;
      label = 13; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec3C2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN7b2TimerC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN7b2Timer5ResetEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZNK7b2Timer15GetMillisecondsEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return 0;
}
function __ZN6b2BodyD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __Z9b2IsValidf($x) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $infinity;
      $2=$x;
      var $3=$2;
      var $4=$2;
      var $5=$3 != $4;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      $infinity=Infinity;
      var $8=$infinity;
      var $9=(-$8);
      var $10=$2;
      var $11=$9 < $10;
      if ($11) { label = 4; break; } else { var $17 = 0;label = 5; break; }
    case 4: 
      var $13=$2;
      var $14=$infinity;
      var $15=$13 < $14;
      var $17 = $15;label = 5; break;
    case 5: 
      var $17;
      $1=$17;
      label = 6; break;
    case 6: 
      var $19=$1;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec3C2Efff($this, $x, $y, $z) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$x;
  $3=$y;
  $4=$z;
  var $5=$1;
  var $6=(($5)|0);
  var $7=$2;
  HEAPF32[(($6)>>2)]=$7;
  var $8=(($5+4)|0);
  var $9=$3;
  HEAPF32[(($8)>>2)]=$9;
  var $10=(($5+8)|0);
  var $11=$4;
  HEAPF32[(($10)>>2)]=$11;
  return;
}
function __ZN16b2StackAllocatorC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102412)|0);
  var $4=(($2+102400)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+102404)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+102408)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+102796)|0);
  HEAP32[(($7)>>2)]=0;
  return;
}
function __ZNK16b2StackAllocator16GetMaxAllocationEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102408)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK7b2World8IsLockedEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102868)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 2;
  var $6=(($5)|(0))==2;
  return $6;
}
function __ZNK7b2Mat3315GetSymInverse33EPS_($this, $M) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $det;
      var $3=__stackBase__;
      var $a11;
      var $a12;
      var $a13;
      var $a22;
      var $a23;
      var $a33;
      $1=$this;
      $2=$M;
      var $4=$1;
      var $5=(($4)|0);
      var $6=(($4+12)|0);
      var $7=(($4+24)|0);
      __Z7b2CrossRK6b2Vec3S1_($3, $6, $7);
      var $8=__Z5b2DotRK6b2Vec3S1_($5, $3);
      $det=$8;
      var $9=$det;
      var $10=$9 != 0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$det;
      var $13=(1)/($12);
      $det=$13;
      label = 3; break;
    case 3: 
      var $15=(($4)|0);
      var $16=(($15)|0);
      var $17=HEAPF32[(($16)>>2)];
      $a11=$17;
      var $18=(($4+12)|0);
      var $19=(($18)|0);
      var $20=HEAPF32[(($19)>>2)];
      $a12=$20;
      var $21=(($4+24)|0);
      var $22=(($21)|0);
      var $23=HEAPF32[(($22)>>2)];
      $a13=$23;
      var $24=(($4+12)|0);
      var $25=(($24+4)|0);
      var $26=HEAPF32[(($25)>>2)];
      $a22=$26;
      var $27=(($4+24)|0);
      var $28=(($27+4)|0);
      var $29=HEAPF32[(($28)>>2)];
      $a23=$29;
      var $30=(($4+24)|0);
      var $31=(($30+8)|0);
      var $32=HEAPF32[(($31)>>2)];
      $a33=$32;
      var $33=$det;
      var $34=$a22;
      var $35=$a33;
      var $36=($34)*($35);
      var $37=$a23;
      var $38=$a23;
      var $39=($37)*($38);
      var $40=($36)-($39);
      var $41=($33)*($40);
      var $42=$2;
      var $43=(($42)|0);
      var $44=(($43)|0);
      HEAPF32[(($44)>>2)]=$41;
      var $45=$det;
      var $46=$a13;
      var $47=$a23;
      var $48=($46)*($47);
      var $49=$a12;
      var $50=$a33;
      var $51=($49)*($50);
      var $52=($48)-($51);
      var $53=($45)*($52);
      var $54=$2;
      var $55=(($54)|0);
      var $56=(($55+4)|0);
      HEAPF32[(($56)>>2)]=$53;
      var $57=$det;
      var $58=$a12;
      var $59=$a23;
      var $60=($58)*($59);
      var $61=$a13;
      var $62=$a22;
      var $63=($61)*($62);
      var $64=($60)-($63);
      var $65=($57)*($64);
      var $66=$2;
      var $67=(($66)|0);
      var $68=(($67+8)|0);
      HEAPF32[(($68)>>2)]=$65;
      var $69=$2;
      var $70=(($69)|0);
      var $71=(($70+4)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+12)|0);
      var $75=(($74)|0);
      HEAPF32[(($75)>>2)]=$72;
      var $76=$det;
      var $77=$a11;
      var $78=$a33;
      var $79=($77)*($78);
      var $80=$a13;
      var $81=$a13;
      var $82=($80)*($81);
      var $83=($79)-($82);
      var $84=($76)*($83);
      var $85=$2;
      var $86=(($85+12)|0);
      var $87=(($86+4)|0);
      HEAPF32[(($87)>>2)]=$84;
      var $88=$det;
      var $89=$a13;
      var $90=$a12;
      var $91=($89)*($90);
      var $92=$a11;
      var $93=$a23;
      var $94=($92)*($93);
      var $95=($91)-($94);
      var $96=($88)*($95);
      var $97=$2;
      var $98=(($97+12)|0);
      var $99=(($98+8)|0);
      HEAPF32[(($99)>>2)]=$96;
      var $100=$2;
      var $101=(($100)|0);
      var $102=(($101+8)|0);
      var $103=HEAPF32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+24)|0);
      var $106=(($105)|0);
      HEAPF32[(($106)>>2)]=$103;
      var $107=$2;
      var $108=(($107+12)|0);
      var $109=(($108+8)|0);
      var $110=HEAPF32[(($109)>>2)];
      var $111=$2;
      var $112=(($111+24)|0);
      var $113=(($112+4)|0);
      HEAPF32[(($113)>>2)]=$110;
      var $114=$det;
      var $115=$a11;
      var $116=$a22;
      var $117=($115)*($116);
      var $118=$a12;
      var $119=$a12;
      var $120=($118)*($119);
      var $121=($117)-($120);
      var $122=($114)*($121);
      var $123=$2;
      var $124=(($123+24)|0);
      var $125=(($124+8)|0);
      HEAPF32[(($125)>>2)]=$122;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec3C1Efff($this, $x, $y, $z) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$x;
  $3=$y;
  $4=$z;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN6b2Vec3C2Efff($5, $6, $7, $8);
  return;
}
function __GLOBAL__I_a() {
  var label = 0;
  ___cxx_global_var_init();
  return;
}
function __Z7b2Alloci($size) {
  var label = 0;
  var $1;
  $1=$size;
  var $2=$1;
  var $3=_malloc($2);
  return $3;
}
function __Z6b2FreePv($mem) {
  var label = 0;
  var $1;
  $1=$mem;
  var $2=$1;
  _free($2);
  return;
}
function __Z5b2LogPKcz($string, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $args=__stackBase__;
  $1=$string;
  var $2=$args;
  HEAP32[(($2)>>2)]=varrp;
  var $3=$1;
  var $4=HEAP32[(($args)>>2)];
  var $5=_printf($3, $4);
  var $6=$args;
  STACKTOP = __stackBase__;
  return;
}
function __ZNK6b2Vec27IsValidEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAPF32[(($3)>>2)];
      var $5=__Z9b2IsValidf($4);
      if ($5) { label = 2; break; } else { var $11 = 0;label = 3; break; }
    case 2: 
      var $7=(($2+4)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=__Z9b2IsValidf($8);
      var $11 = $9;label = 3; break;
    case 3: 
      var $11;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2StackAllocatorD2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2+102400)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5248280)|0), 32, ((5262124)|0), ((5255136)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $10=(($2+102796)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5248280)|0), 33, ((5262124)|0), ((5252244)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2StackAllocator8AllocateEi($this, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $entry;
      $1=$this;
      $2=$size;
      var $3=$1;
      var $4=(($3+102796)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 32;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5248280)|0), 38, ((5262164)|0), ((5250580)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $11=(($3+102412)|0);
      var $12=(($11)|0);
      var $13=(($3+102796)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12+((($14)*(12))&-1))|0);
      $entry=$15;
      var $16=$2;
      var $17=$entry;
      var $18=(($17+4)|0);
      HEAP32[(($18)>>2)]=$16;
      var $19=(($3+102400)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=((($20)+($21))|0);
      var $23=(($22)|(0)) > 102400;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$2;
      var $26=__Z7b2Alloci($25);
      var $27=$entry;
      var $28=(($27)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$entry;
      var $30=(($29+8)|0);
      HEAP8[($30)]=1;
      label = 7; break;
    case 6: 
      var $32=(($3)|0);
      var $33=(($32)|0);
      var $34=(($3+102400)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($33+$35)|0);
      var $37=$entry;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$entry;
      var $40=(($39+8)|0);
      HEAP8[($40)]=0;
      var $41=$2;
      var $42=(($3+102400)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)+($41))|0);
      HEAP32[(($42)>>2)]=$44;
      label = 7; break;
    case 7: 
      var $46=$2;
      var $47=(($3+102404)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+($46))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($3+102408)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($3+102404)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=__Z5b2MaxIiET_S0_S0_($51, $53);
      var $55=(($3+102408)|0);
      HEAP32[(($55)>>2)]=$54;
      var $56=(($3+102796)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)+(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=$entry;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2StackAllocator4FreeEPv($this, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $entry;
      $1=$this;
      $2=$p;
      var $3=$1;
      var $4=(($3+102796)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) > 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5248280)|0), 63, ((5262204)|0), ((5249728)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $11=(($3+102412)|0);
      var $12=(($11)|0);
      var $13=(($3+102796)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12+((($14)*(12))&-1))|0);
      var $16=((($15)-(12))|0);
      $entry=$16;
      var $17=$2;
      var $18=$entry;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|(0))==(($20)|(0));
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5248280)|0), 65, ((5262204)|0), ((5249064)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $26=$entry;
      var $27=(($26+8)|0);
      var $28=HEAP8[($27)];
      var $29=(($28) & 1);
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $31=$2;
      __Z6b2FreePv($31);
      label = 10; break;
    case 9: 
      var $33=$entry;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($3+102400)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)-($35))|0);
      HEAP32[(($36)>>2)]=$38;
      label = 10; break;
    case 10: 
      var $40=$entry;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($3+102404)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)-($42))|0);
      HEAP32[(($43)>>2)]=$45;
      var $46=(($3+102796)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      $2=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2BodyC2EPK9b2BodyDefP7b2World($this, $bd, $world) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$bd;
      $3=$world;
      var $4=$1;
      var $5=(($4+12)|0);
      __ZN11b2TransformC1Ev($5);
      var $6=(($4+28)|0);
      __ZN7b2SweepC1Ev($6);
      var $7=(($4+64)|0);
      __ZN6b2Vec2C1Ev($7);
      var $8=(($4+76)|0);
      __ZN6b2Vec2C1Ev($8);
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=__ZNK6b2Vec27IsValidEv($10);
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5247888)|0), 27, ((5261076)|0), ((5255072)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $16=$2;
      var $17=(($16+16)|0);
      var $18=__ZNK6b2Vec27IsValidEv($17);
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5247888)|0), 28, ((5261076)|0), ((5252204)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $23=$2;
      var $24=(($23+12)|0);
      var $25=HEAPF32[(($24)>>2)];
      var $26=__Z9b2IsValidf($25);
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      ___assert_func(((5247888)|0), 29, ((5261076)|0), ((5250556)|0));
      throw "Reached an unreachable!"
      label = 10; break;
    case 10: 
      var $31=$2;
      var $32=(($31+24)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=__Z9b2IsValidf($33);
      if ($34) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      ___assert_func(((5247888)|0), 30, ((5261076)|0), ((5249696)|0));
      throw "Reached an unreachable!"
      label = 13; break;
    case 13: 
      var $39=$2;
      var $40=(($39+32)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42=__Z9b2IsValidf($41);
      if ($42) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $44=$2;
      var $45=(($44+32)|0);
      var $46=HEAPF32[(($45)>>2)];
      var $47=$46 >= 0;
      if ($47) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      ___assert_func(((5247888)|0), 31, ((5261076)|0), ((5249004)|0));
      throw "Reached an unreachable!"
      label = 17; break;
    case 17: 
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=__Z9b2IsValidf($54);
      if ($55) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $57=$2;
      var $58=(($57+28)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$59 >= 0;
      if ($60) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      ___assert_func(((5247888)|0), 32, ((5261076)|0), ((5248392)|0));
      throw "Reached an unreachable!"
      label = 21; break;
    case 21: 
      var $65=(($4+4)|0);
      HEAP16[(($65)>>1)]=0;
      var $66=$2;
      var $67=(($66+39)|0);
      var $68=HEAP8[($67)];
      var $69=(($68) & 1);
      if ($69) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $71=(($4+4)|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=(($72)&(65535));
      var $74=$73 | 8;
      var $75=(($74) & 65535);
      HEAP16[(($71)>>1)]=$75;
      label = 23; break;
    case 23: 
      var $77=$2;
      var $78=(($77+38)|0);
      var $79=HEAP8[($78)];
      var $80=(($79) & 1);
      if ($80) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $82=(($4+4)|0);
      var $83=HEAP16[(($82)>>1)];
      var $84=(($83)&(65535));
      var $85=$84 | 16;
      var $86=(($85) & 65535);
      HEAP16[(($82)>>1)]=$86;
      label = 25; break;
    case 25: 
      var $88=$2;
      var $89=(($88+36)|0);
      var $90=HEAP8[($89)];
      var $91=(($90) & 1);
      if ($91) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $93=(($4+4)|0);
      var $94=HEAP16[(($93)>>1)];
      var $95=(($94)&(65535));
      var $96=$95 | 4;
      var $97=(($96) & 65535);
      HEAP16[(($93)>>1)]=$97;
      label = 27; break;
    case 27: 
      var $99=$2;
      var $100=(($99+37)|0);
      var $101=HEAP8[($100)];
      var $102=(($101) & 1);
      if ($102) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $104=(($4+4)|0);
      var $105=HEAP16[(($104)>>1)];
      var $106=(($105)&(65535));
      var $107=$106 | 2;
      var $108=(($107) & 65535);
      HEAP16[(($104)>>1)]=$108;
      label = 29; break;
    case 29: 
      var $110=$2;
      var $111=(($110+40)|0);
      var $112=HEAP8[($111)];
      var $113=(($112) & 1);
      if ($113) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $115=(($4+4)|0);
      var $116=HEAP16[(($115)>>1)];
      var $117=(($116)&(65535));
      var $118=$117 | 32;
      var $119=(($118) & 65535);
      HEAP16[(($115)>>1)]=$119;
      label = 31; break;
    case 31: 
      var $121=$3;
      var $122=(($4+88)|0);
      HEAP32[(($122)>>2)]=$121;
      var $123=(($4+12)|0);
      var $124=(($123)|0);
      var $125=$2;
      var $126=(($125+4)|0);
      var $127=$124;
      var $128=$126;
      assert(8 % 1 === 0);HEAP32[(($127)>>2)]=HEAP32[(($128)>>2)];HEAP32[((($127)+(4))>>2)]=HEAP32[((($128)+(4))>>2)];
      var $129=(($4+12)|0);
      var $130=(($129+8)|0);
      var $131=$2;
      var $132=(($131+12)|0);
      var $133=HEAPF32[(($132)>>2)];
      __ZN5b2Rot3SetEf($130, $133);
      var $134=(($4+28)|0);
      var $135=(($134)|0);
      __ZN6b2Vec27SetZeroEv($135);
      var $136=(($4+28)|0);
      var $137=(($136+8)|0);
      var $138=(($4+12)|0);
      var $139=(($138)|0);
      var $140=$137;
      var $141=$139;
      assert(8 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];
      var $142=(($4+28)|0);
      var $143=(($142+16)|0);
      var $144=(($4+12)|0);
      var $145=(($144)|0);
      var $146=$143;
      var $147=$145;
      assert(8 % 1 === 0);HEAP32[(($146)>>2)]=HEAP32[(($147)>>2)];HEAP32[((($146)+(4))>>2)]=HEAP32[((($147)+(4))>>2)];
      var $148=$2;
      var $149=(($148+12)|0);
      var $150=HEAPF32[(($149)>>2)];
      var $151=(($4+28)|0);
      var $152=(($151+24)|0);
      HEAPF32[(($152)>>2)]=$150;
      var $153=$2;
      var $154=(($153+12)|0);
      var $155=HEAPF32[(($154)>>2)];
      var $156=(($4+28)|0);
      var $157=(($156+28)|0);
      HEAPF32[(($157)>>2)]=$155;
      var $158=(($4+28)|0);
      var $159=(($158+32)|0);
      HEAPF32[(($159)>>2)]=0;
      var $160=(($4+108)|0);
      HEAP32[(($160)>>2)]=0;
      var $161=(($4+112)|0);
      HEAP32[(($161)>>2)]=0;
      var $162=(($4+92)|0);
      HEAP32[(($162)>>2)]=0;
      var $163=(($4+96)|0);
      HEAP32[(($163)>>2)]=0;
      var $164=(($4+64)|0);
      var $165=$2;
      var $166=(($165+16)|0);
      var $167=$164;
      var $168=$166;
      assert(8 % 1 === 0);HEAP32[(($167)>>2)]=HEAP32[(($168)>>2)];HEAP32[((($167)+(4))>>2)]=HEAP32[((($168)+(4))>>2)];
      var $169=$2;
      var $170=(($169+24)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=(($4+72)|0);
      HEAPF32[(($172)>>2)]=$171;
      var $173=$2;
      var $174=(($173+28)|0);
      var $175=HEAPF32[(($174)>>2)];
      var $176=(($4+132)|0);
      HEAPF32[(($176)>>2)]=$175;
      var $177=$2;
      var $178=(($177+32)|0);
      var $179=HEAPF32[(($178)>>2)];
      var $180=(($4+136)|0);
      HEAPF32[(($180)>>2)]=$179;
      var $181=$2;
      var $182=(($181+48)|0);
      var $183=HEAPF32[(($182)>>2)];
      var $184=(($4+140)|0);
      HEAPF32[(($184)>>2)]=$183;
      var $185=(($4+76)|0);
      __ZN6b2Vec27SetZeroEv($185);
      var $186=(($4+84)|0);
      HEAPF32[(($186)>>2)]=0;
      var $187=(($4+144)|0);
      HEAPF32[(($187)>>2)]=0;
      var $188=$2;
      var $189=(($188)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($4)|0);
      HEAP32[(($191)>>2)]=$190;
      var $192=(($4)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193)|(0))==2;
      if ($194) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $196=(($4+116)|0);
      HEAPF32[(($196)>>2)]=1;
      var $197=(($4+120)|0);
      HEAPF32[(($197)>>2)]=1;
      label = 34; break;
    case 33: 
      var $199=(($4+116)|0);
      HEAPF32[(($199)>>2)]=0;
      var $200=(($4+120)|0);
      HEAPF32[(($200)>>2)]=0;
      label = 34; break;
    case 34: 
      var $202=(($4+124)|0);
      HEAPF32[(($202)>>2)]=0;
      var $203=(($4+128)|0);
      HEAPF32[(($203)>>2)]=0;
      var $204=$2;
      var $205=(($204+44)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($4+148)|0);
      HEAP32[(($207)>>2)]=$206;
      var $208=(($4+100)|0);
      HEAP32[(($208)>>2)]=0;
      var $209=(($4+104)|0);
      HEAP32[(($209)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body7SetTypeE10b2BodyType($this, $type) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $f;
      $1=$this;
      $2=$type;
      var $3=$1;
      var $4=(($3+88)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=__ZNK7b2World8IsLockedEv($5);
      var $7=(($6)&(1));
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5247888)|0), 115, ((5261156)|0), ((5247856)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $13=(($3+88)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=__ZNK7b2World8IsLockedEv($14);
      var $16=(($15)&(1));
      var $17=(($16)|(0))==1;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 14; break;
    case 6: 
      var $20=(($3)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($21)|(0))==(($22)|(0));
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 14; break;
    case 8: 
      var $26=$2;
      var $27=(($3)|0);
      HEAP32[(($27)>>2)]=$26;
      __ZN6b2Body13ResetMassDataEv($3);
      var $28=(($3)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))==0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=(($3+64)|0);
      __ZN6b2Vec27SetZeroEv($32);
      var $33=(($3+72)|0);
      HEAPF32[(($33)>>2)]=0;
      var $34=(($3+28)|0);
      var $35=(($34+28)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=(($3+28)|0);
      var $38=(($37+24)|0);
      HEAPF32[(($38)>>2)]=$36;
      var $39=(($3+28)|0);
      var $40=(($39+8)|0);
      var $41=(($3+28)|0);
      var $42=(($41+16)|0);
      var $43=$40;
      var $44=$42;
      assert(8 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
      __ZN6b2Body19SynchronizeFixturesEv($3);
      label = 10; break;
    case 10: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      var $46=(($3+76)|0);
      __ZN6b2Vec27SetZeroEv($46);
      var $47=(($3+84)|0);
      HEAPF32[(($47)>>2)]=0;
      var $48=(($3+100)|0);
      var $49=HEAP32[(($48)>>2)];
      $f=$49;
      label = 11; break;
    case 11: 
      var $51=$f;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $54=$f;
      __ZN9b2Fixture8RefilterEv($54);
      label = 13; break;
    case 13: 
      var $56=$f;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      $f=$58;
      label = 11; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Contact11GetFixtureAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN9b2Contact11GetFixtureBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN6b2Body19SynchronizeFixturesEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $xf1=__stackBase__;
      var $2=(__stackBase__)+(16);
      var $3=(__stackBase__)+(24);
      var $broadPhase;
      var $f;
      $1=$this;
      var $4=$1;
      __ZN11b2TransformC1Ev($xf1);
      var $5=(($xf1+8)|0);
      var $6=(($4+28)|0);
      var $7=(($6+24)|0);
      var $8=HEAPF32[(($7)>>2)];
      __ZN5b2Rot3SetEf($5, $8);
      var $9=(($xf1)|0);
      var $10=(($4+28)|0);
      var $11=(($10+8)|0);
      var $12=(($xf1+8)|0);
      var $13=(($4+28)|0);
      var $14=(($13)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $12, $14);
      __ZmiRK6b2Vec2S1_($2, $11, $3);
      var $15=$9;
      var $16=$2;
      assert(8 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];
      var $17=(($4+88)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+102872)|0);
      var $20=(($19)|0);
      $broadPhase=$20;
      var $21=(($4+100)|0);
      var $22=HEAP32[(($21)>>2)];
      $f=$22;
      label = 2; break;
    case 2: 
      var $24=$f;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $27=$f;
      var $28=$broadPhase;
      var $29=(($4+12)|0);
      __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($27, $28, $xf1, $29);
      label = 4; break;
    case 4: 
      var $31=$f;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      $f=$33;
      label = 2; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body8SetAwakeEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAP16[(($8)>>1)];
      var $10=(($9)&(65535));
      var $11=$10 & 2;
      var $12=(($11)|(0))==0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAP16[(($14)>>1)];
      var $16=(($15)&(65535));
      var $17=$16 | 2;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      var $19=(($4+144)|0);
      HEAPF32[(($19)>>2)]=0;
      label = 4; break;
    case 4: 
      label = 6; break;
    case 5: 
      var $22=(($4+4)|0);
      var $23=HEAP16[(($22)>>1)];
      var $24=(($23)&(65535));
      var $25=$24 & -3;
      var $26=(($25) & 65535);
      HEAP16[(($22)>>1)]=$26;
      var $27=(($4+144)|0);
      HEAPF32[(($27)>>2)]=0;
      var $28=(($4+64)|0);
      __ZN6b2Vec27SetZeroEv($28);
      var $29=(($4+72)|0);
      HEAPF32[(($29)>>2)]=0;
      var $30=(($4+76)|0);
      __ZN6b2Vec27SetZeroEv($30);
      var $31=(($4+84)|0);
      HEAPF32[(($31)>>2)]=0;
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body13CreateFixtureEPK7b2Shapef($this, $shape, $density) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $def=__stackBase__;
  $1=$this;
  $2=$shape;
  $3=$density;
  var $4=$1;
  __ZN12b2FixtureDefC1Ev($def);
  var $5=$2;
  var $6=(($def)|0);
  HEAP32[(($6)>>2)]=$5;
  var $7=$3;
  var $8=(($def+16)|0);
  HEAPF32[(($8)>>2)]=$7;
  var $9=__ZN6b2Body13CreateFixtureEPK12b2FixtureDef($4, $def);
  STACKTOP = __stackBase__;
  return $9;
}
function __ZN12b2FixtureDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2FixtureDefC2Ev($2);
  return;
}
function __ZN10b2MassDataC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2MassDataC2Ev($2);
  return;
}
function __ZNK9b2Fixture11GetMassDataEP10b2MassData($this, $massData) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$massData;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+28)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=(($3)|0);
  var $12=HEAPF32[(($11)>>2)];
  FUNCTION_TABLE[$9]($5, $10, $12);
  return;
}
function __ZN6b2Body13ResetMassDataEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $localCenter=__stackBase__;
      var $f;
      var $massData=(__stackBase__)+(8);
      var $2=(__stackBase__)+(24);
      var $oldCenter=(__stackBase__)+(32);
      var $3=(__stackBase__)+(40);
      var $4=(__stackBase__)+(48);
      var $5=(__stackBase__)+(56);
      $1=$this;
      var $6=$1;
      var $7=(($6+116)|0);
      HEAPF32[(($7)>>2)]=0;
      var $8=(($6+120)|0);
      HEAPF32[(($8)>>2)]=0;
      var $9=(($6+124)|0);
      HEAPF32[(($9)>>2)]=0;
      var $10=(($6+128)|0);
      HEAPF32[(($10)>>2)]=0;
      var $11=(($6+28)|0);
      var $12=(($11)|0);
      __ZN6b2Vec27SetZeroEv($12);
      var $13=(($6)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))==0;
      if ($15) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $17=(($6)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))==1;
      if ($19) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $21=(($6+28)|0);
      var $22=(($21+8)|0);
      var $23=(($6+12)|0);
      var $24=(($23)|0);
      var $25=$22;
      var $26=$24;
      assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      var $27=(($6+28)|0);
      var $28=(($27+16)|0);
      var $29=(($6+12)|0);
      var $30=(($29)|0);
      var $31=$28;
      var $32=$30;
      assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];
      var $33=(($6+28)|0);
      var $34=(($33+28)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=(($6+28)|0);
      var $37=(($36+24)|0);
      HEAPF32[(($37)>>2)]=$35;
      label = 24; break;
    case 4: 
      var $39=(($6)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|(0))==2;
      if ($41) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5247888)|0), 284, ((5261236)|0), ((5257248)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $46=$localCenter;
      assert(8 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[((5247060)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((5247064)>>2)];
      var $47=(($6+100)|0);
      var $48=HEAP32[(($47)>>2)];
      $f=$48;
      label = 8; break;
    case 8: 
      var $50=$f;
      var $51=(($50)|(0))!=0;
      if ($51) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $53=$f;
      var $54=(($53)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=$55 == 0;
      if ($56) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      __ZN10b2MassDataC1Ev($massData);
      var $59=$f;
      __ZNK9b2Fixture11GetMassDataEP10b2MassData($59, $massData);
      var $60=(($massData)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($6+116)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=($63)+($61);
      HEAPF32[(($62)>>2)]=$64;
      var $65=(($massData)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=(($massData+4)|0);
      __ZmlfRK6b2Vec2($2, $66, $67);
      __ZN6b2Vec2pLERKS_($localCenter, $2);
      var $68=(($massData+12)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=(($6+124)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=($71)+($69);
      HEAPF32[(($70)>>2)]=$72;
      label = 12; break;
    case 12: 
      var $74=$f;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      $f=$76;
      label = 8; break;
    case 13: 
      var $78=(($6+116)|0);
      var $79=HEAPF32[(($78)>>2)];
      var $80=$79 > 0;
      if ($80) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $82=(($6+116)|0);
      var $83=HEAPF32[(($82)>>2)];
      var $84=(1)/($83);
      var $85=(($6+120)|0);
      HEAPF32[(($85)>>2)]=$84;
      var $86=(($6+120)|0);
      var $87=HEAPF32[(($86)>>2)];
      __ZN6b2Vec2mLEf($localCenter, $87);
      label = 16; break;
    case 15: 
      var $89=(($6+116)|0);
      HEAPF32[(($89)>>2)]=1;
      var $90=(($6+120)|0);
      HEAPF32[(($90)>>2)]=1;
      label = 16; break;
    case 16: 
      var $92=(($6+124)|0);
      var $93=HEAPF32[(($92)>>2)];
      var $94=$93 > 0;
      if ($94) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $96=(($6+4)|0);
      var $97=HEAP16[(($96)>>1)];
      var $98=(($97)&(65535));
      var $99=$98 & 16;
      var $100=(($99)|(0))==0;
      if ($100) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $102=(($6+116)|0);
      var $103=HEAPF32[(($102)>>2)];
      var $104=__Z5b2DotRK6b2Vec2S1_($localCenter, $localCenter);
      var $105=($103)*($104);
      var $106=(($6+124)|0);
      var $107=HEAPF32[(($106)>>2)];
      var $108=($107)-($105);
      HEAPF32[(($106)>>2)]=$108;
      var $109=(($6+124)|0);
      var $110=HEAPF32[(($109)>>2)];
      var $111=$110 > 0;
      if ($111) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      ___assert_func(((5247888)|0), 319, ((5261236)|0), ((5256528)|0));
      throw "Reached an unreachable!"
      label = 21; break;
    case 21: 
      var $116=(($6+124)|0);
      var $117=HEAPF32[(($116)>>2)];
      var $118=(1)/($117);
      var $119=(($6+128)|0);
      HEAPF32[(($119)>>2)]=$118;
      label = 23; break;
    case 22: 
      var $121=(($6+124)|0);
      HEAPF32[(($121)>>2)]=0;
      var $122=(($6+128)|0);
      HEAPF32[(($122)>>2)]=0;
      label = 23; break;
    case 23: 
      var $124=(($6+28)|0);
      var $125=(($124+16)|0);
      var $126=$oldCenter;
      var $127=$125;
      assert(8 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];
      var $128=(($6+28)|0);
      var $129=(($128)|0);
      var $130=$129;
      var $131=$localCenter;
      assert(8 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[((($130)+(4))>>2)]=HEAP32[((($131)+(4))>>2)];
      var $132=(($6+28)|0);
      var $133=(($132+8)|0);
      var $134=(($6+28)|0);
      var $135=(($134+16)|0);
      var $136=(($6+12)|0);
      var $137=(($6+28)|0);
      var $138=(($137)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($3, $136, $138);
      var $139=$135;
      var $140=$3;
      assert(8 % 1 === 0);HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];HEAP32[((($139)+(4))>>2)]=HEAP32[((($140)+(4))>>2)];
      var $141=$133;
      var $142=$135;
      assert(8 % 1 === 0);HEAP32[(($141)>>2)]=HEAP32[(($142)>>2)];HEAP32[((($141)+(4))>>2)]=HEAP32[((($142)+(4))>>2)];
      var $143=(($6+64)|0);
      var $144=(($6+72)|0);
      var $145=HEAPF32[(($144)>>2)];
      var $146=(($6+28)|0);
      var $147=(($146+16)|0);
      __ZmiRK6b2Vec2S1_($5, $147, $oldCenter);
      __Z7b2CrossfRK6b2Vec2($4, $145, $5);
      __ZN6b2Vec2pLERKS_($143, $4);
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $allocator;
      var $memory;
      var $fixture;
      var $broadPhase;
      $2=$this;
      $3=$def;
      var $4=$2;
      var $5=(($4+88)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=__ZNK7b2World8IsLockedEv($6);
      var $8=(($7)&(1));
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5247888)|0), 153, ((5261268)|0), ((5247856)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $14=(($4+88)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=__ZNK7b2World8IsLockedEv($15);
      var $17=(($16)&(1));
      var $18=(($17)|(0))==1;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 13; break;
    case 6: 
      var $21=(($4+88)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0);
      $allocator=$23;
      var $24=$allocator;
      var $25=__ZN16b2BlockAllocator8AllocateEi($24, 44);
      $memory=$25;
      var $26=$memory;
      var $27=(($26)|(0))==0;
      if ($27) { var $31 = 0;label = 8; break; } else { label = 7; break; }
    case 7: 
      var $29=$26;
      __ZN9b2FixtureC2Ev($29);
      var $31 = $29;label = 8; break;
    case 8: 
      var $31;
      $fixture=$31;
      var $32=$fixture;
      var $33=$allocator;
      var $34=$3;
      __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($32, $33, $4, $34);
      var $35=(($4+4)|0);
      var $36=HEAP16[(($35)>>1)];
      var $37=(($36)&(65535));
      var $38=$37 & 32;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $41=(($4+88)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+102872)|0);
      var $44=(($43)|0);
      $broadPhase=$44;
      var $45=$fixture;
      var $46=$broadPhase;
      var $47=(($4+12)|0);
      __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($45, $46, $47);
      label = 10; break;
    case 10: 
      var $49=(($4+100)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$fixture;
      var $52=(($51+4)|0);
      HEAP32[(($52)>>2)]=$50;
      var $53=$fixture;
      var $54=(($4+100)|0);
      HEAP32[(($54)>>2)]=$53;
      var $55=(($4+104)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)+(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=$fixture;
      var $59=(($58+8)|0);
      HEAP32[(($59)>>2)]=$4;
      var $60=$fixture;
      var $61=(($60)|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=$62 > 0;
      if ($63) { label = 11; break; } else { label = 12; break; }
    case 11: 
      __ZN6b2Body13ResetMassDataEv($4);
      label = 12; break;
    case 12: 
      var $66=(($4+88)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+102868)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 | 1;
      HEAP32[(($68)>>2)]=$70;
      var $71=$fixture;
      $1=$71;
      label = 13; break;
    case 13: 
      var $73=$1;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body14DestroyFixtureEP9b2Fixture($this, $fixture) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $node;
      var $found;
      var $edge;
      var $c;
      var $fixtureA;
      var $fixtureB;
      var $allocator;
      var $broadPhase;
      $1=$this;
      $2=$fixture;
      var $3=$1;
      var $4=(($3+88)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=__ZNK7b2World8IsLockedEv($5);
      var $7=(($6)&(1));
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5247888)|0), 201, ((5261192)|0), ((5247856)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $13=(($3+88)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=__ZNK7b2World8IsLockedEv($14);
      var $16=(($15)&(1));
      var $17=(($16)|(0))==1;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 29; break;
    case 6: 
      var $20=$2;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))==(($3)|(0));
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      ___assert_func(((5247888)|0), 207, ((5261192)|0), ((5247476)|0));
      throw "Reached an unreachable!"
      label = 9; break;
    case 9: 
      var $28=(($3+104)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0)) > 0;
      if ($30) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      ___assert_func(((5247888)|0), 210, ((5261192)|0), ((5247068)|0));
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      var $35=(($3+100)|0);
      $node=$35;
      $found=0;
      label = 13; break;
    case 13: 
      var $37=$node;
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))!=0;
      if ($39) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $41=$node;
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=(($42)|(0))==(($43)|(0));
      if ($44) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$node;
      HEAP32[(($49)>>2)]=$48;
      $found=1;
      label = 17; break;
    case 16: 
      var $51=$node;
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+4)|0);
      $node=$53;
      label = 13; break;
    case 17: 
      var $55=$found;
      var $56=(($55) & 1);
      if ($56) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      ___assert_func(((5247888)|0), 226, ((5261192)|0), ((5257752)|0));
      throw "Reached an unreachable!"
      label = 20; break;
    case 20: 
      var $61=(($3+112)|0);
      var $62=HEAP32[(($61)>>2)];
      $edge=$62;
      label = 21; break;
    case 21: 
      var $64=$edge;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $67=$edge;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      $c=$69;
      var $70=$edge;
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      $edge=$72;
      var $73=$c;
      var $74=__ZN9b2Contact11GetFixtureAEv($73);
      $fixtureA=$74;
      var $75=$c;
      var $76=__ZN9b2Contact11GetFixtureBEv($75);
      $fixtureB=$76;
      var $77=$2;
      var $78=$fixtureA;
      var $79=(($77)|(0))==(($78)|(0));
      if ($79) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $81=$2;
      var $82=$fixtureB;
      var $83=(($81)|(0))==(($82)|(0));
      if ($83) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $85=(($3+88)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+102872)|0);
      var $88=$c;
      __ZN16b2ContactManager7DestroyEP9b2Contact($87, $88);
      label = 25; break;
    case 25: 
      label = 21; break;
    case 26: 
      var $91=(($3+88)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0);
      $allocator=$93;
      var $94=(($3+4)|0);
      var $95=HEAP16[(($94)>>1)];
      var $96=(($95)&(65535));
      var $97=$96 & 32;
      var $98=(($97)|(0))!=0;
      if ($98) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $100=(($3+88)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+102872)|0);
      var $103=(($102)|0);
      $broadPhase=$103;
      var $104=$2;
      var $105=$broadPhase;
      __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($104, $105);
      label = 28; break;
    case 28: 
      var $107=$2;
      var $108=$allocator;
      __ZN9b2Fixture7DestroyEP16b2BlockAllocator($107, $108);
      var $109=$2;
      var $110=(($109+8)|0);
      HEAP32[(($110)>>2)]=0;
      var $111=$2;
      var $112=(($111+4)|0);
      HEAP32[(($112)>>2)]=0;
      var $113=$2;
      var $114=$allocator;
      var $115=$2;
      var $116=$115;
      __ZN16b2BlockAllocator4FreeEPvi($114, $116, 44);
      var $117=(($3+104)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=((($118)-(1))|0);
      HEAP32[(($117)>>2)]=$119;
      __ZN6b2Body13ResetMassDataEv($3);
      label = 29; break;
    case 29: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body11SetMassDataEPK10b2MassData($this, $massData) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $oldCenter=__stackBase__;
      var $3=(__stackBase__)+(8);
      var $4=(__stackBase__)+(16);
      var $5=(__stackBase__)+(24);
      $1=$this;
      $2=$massData;
      var $6=$1;
      var $7=(($6+88)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=__ZNK7b2World8IsLockedEv($8);
      var $10=(($9)&(1));
      var $11=(($10)|(0))==0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5247888)|0), 340, ((5261376)|0), ((5247856)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $16=(($6+88)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=__ZNK7b2World8IsLockedEv($17);
      var $19=(($18)&(1));
      var $20=(($19)|(0))==1;
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 17; break;
    case 6: 
      var $23=(($6)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=2;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 17; break;
    case 8: 
      var $28=(($6+120)|0);
      HEAPF32[(($28)>>2)]=0;
      var $29=(($6+124)|0);
      HEAPF32[(($29)>>2)]=0;
      var $30=(($6+128)|0);
      HEAPF32[(($30)>>2)]=0;
      var $31=$2;
      var $32=(($31)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=(($6+116)|0);
      HEAPF32[(($34)>>2)]=$33;
      var $35=(($6+116)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=$36 <= 0;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $39=(($6+116)|0);
      HEAPF32[(($39)>>2)]=1;
      label = 10; break;
    case 10: 
      var $41=(($6+116)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(1)/($42);
      var $44=(($6+120)|0);
      HEAPF32[(($44)>>2)]=$43;
      var $45=$2;
      var $46=(($45+12)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=$47 > 0;
      if ($48) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $50=(($6+4)|0);
      var $51=HEAP16[(($50)>>1)];
      var $52=(($51)&(65535));
      var $53=$52 & 16;
      var $54=(($53)|(0))==0;
      if ($54) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $56=$2;
      var $57=(($56+12)|0);
      var $58=HEAPF32[(($57)>>2)];
      var $59=(($6+116)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=$2;
      var $62=(($61+4)|0);
      var $63=$2;
      var $64=(($63+4)|0);
      var $65=__Z5b2DotRK6b2Vec2S1_($62, $64);
      var $66=($60)*($65);
      var $67=($58)-($66);
      var $68=(($6+124)|0);
      HEAPF32[(($68)>>2)]=$67;
      var $69=(($6+124)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=$70 > 0;
      if ($71) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      ___assert_func(((5247888)|0), 366, ((5261376)|0), ((5256528)|0));
      throw "Reached an unreachable!"
      label = 15; break;
    case 15: 
      var $76=(($6+124)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=(1)/($77);
      var $79=(($6+128)|0);
      HEAPF32[(($79)>>2)]=$78;
      label = 16; break;
    case 16: 
      var $81=(($6+28)|0);
      var $82=(($81+16)|0);
      var $83=$oldCenter;
      var $84=$82;
      assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];
      var $85=(($6+28)|0);
      var $86=(($85)|0);
      var $87=$2;
      var $88=(($87+4)|0);
      var $89=$86;
      var $90=$88;
      assert(8 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];
      var $91=(($6+28)|0);
      var $92=(($91+8)|0);
      var $93=(($6+28)|0);
      var $94=(($93+16)|0);
      var $95=(($6+12)|0);
      var $96=(($6+28)|0);
      var $97=(($96)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($3, $95, $97);
      var $98=$94;
      var $99=$3;
      assert(8 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];
      var $100=$92;
      var $101=$94;
      assert(8 % 1 === 0);HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[((($100)+(4))>>2)]=HEAP32[((($101)+(4))>>2)];
      var $102=(($6+64)|0);
      var $103=(($6+72)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=(($6+28)|0);
      var $106=(($105+16)|0);
      __ZmiRK6b2Vec2S1_($5, $106, $oldCenter);
      __Z7b2CrossfRK6b2Vec2($4, $104, $5);
      __ZN6b2Vec2pLERKS_($102, $4);
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Body13ShouldCollideEPKS_($this, $other) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $jn;
      $2=$this;
      $3=$other;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=2;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=2;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 13; break;
    case 4: 
      var $15=(($4+108)|0);
      var $16=HEAP32[(($15)>>2)];
      $jn=$16;
      label = 5; break;
    case 5: 
      var $18=$jn;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $21=$jn;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$3;
      var $25=(($23)|(0))==(($24)|(0));
      if ($25) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $27=$jn;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+61)|0);
      var $31=HEAP8[($30)];
      var $32=(($31) & 1);
      var $33=(($32)&(1));
      var $34=(($33)|(0))==0;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 13; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $39=$jn;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      $jn=$41;
      label = 5; break;
    case 12: 
      $1=1;
      label = 13; break;
    case 13: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Body8IsActiveEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP16[(($3)>>1)];
  var $5=(($4)&(65535));
  var $6=$5 & 32;
  var $7=(($6)|(0))==32;
  return $7;
}
function __ZN8b2FilterC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAP16[(($3)>>1)]=1;
  var $4=(($2+2)|0);
  HEAP16[(($4)>>1)]=-1;
  var $5=(($2+4)|0);
  HEAP16[(($5)>>1)]=0;
  return;
}
function __ZN9b2Fixture7GetBodyEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK9b2Contact10IsTouchingEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 2;
  var $6=(($5)|(0))==2;
  return $6;
}
function __ZN6b2Body4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $bodyIndex;
      var $f;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      $bodyIndex=$4;
      __Z5b2LogPKcz(((5256116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((5255760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=(($2)|0);
      var $6=HEAP32[(($5)>>2)];
      __Z5b2LogPKcz(((5255528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$6,tempInt));
      var $7=(($2+12)|0);
      var $8=(($7)|0);
      var $9=(($8)|0);
      var $10=HEAPF32[(($9)>>2)];
      var $11=$10;
      var $12=(($2+12)|0);
      var $13=(($12)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      var $16=$15;
      __Z5b2LogPKcz(((5255328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$11,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $17=(($2+28)|0);
      var $18=(($17+28)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$19;
      __Z5b2LogPKcz(((5255048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$20,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $21=(($2+64)|0);
      var $22=(($21)|0);
      var $23=HEAPF32[(($22)>>2)];
      var $24=$23;
      var $25=(($2+64)|0);
      var $26=(($25+4)|0);
      var $27=HEAPF32[(($26)>>2)];
      var $28=$27;
      __Z5b2LogPKcz(((5254928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$24,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$28,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $29=(($2+72)|0);
      var $30=HEAPF32[(($29)>>2)];
      var $31=$30;
      __Z5b2LogPKcz(((5254792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $32=(($2+132)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=$33;
      __Z5b2LogPKcz(((5254556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$34,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $35=(($2+136)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=$36;
      __Z5b2LogPKcz(((5254144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$37,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $38=(($2+4)|0);
      var $39=HEAP16[(($38)>>1)];
      var $40=(($39)&(65535));
      var $41=$40 & 4;
      __Z5b2LogPKcz(((5254028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$41,tempInt));
      var $42=(($2+4)|0);
      var $43=HEAP16[(($42)>>1)];
      var $44=(($43)&(65535));
      var $45=$44 & 2;
      __Z5b2LogPKcz(((5253432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$45,tempInt));
      var $46=(($2+4)|0);
      var $47=HEAP16[(($46)>>1)];
      var $48=(($47)&(65535));
      var $49=$48 & 16;
      __Z5b2LogPKcz(((5253112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$49,tempInt));
      var $50=(($2+4)|0);
      var $51=HEAP16[(($50)>>1)];
      var $52=(($51)&(65535));
      var $53=$52 & 8;
      __Z5b2LogPKcz(((5252960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$53,tempInt));
      var $54=(($2+4)|0);
      var $55=HEAP16[(($54)>>1)];
      var $56=(($55)&(65535));
      var $57=$56 & 32;
      __Z5b2LogPKcz(((5252616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$57,tempInt));
      var $58=(($2+140)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$59;
      __Z5b2LogPKcz(((5252408)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$60,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $61=(($2+8)|0);
      var $62=HEAP32[(($61)>>2)];
      __Z5b2LogPKcz(((5252132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$62,tempInt));
      __Z5b2LogPKcz(((5251912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $63=(($2+100)|0);
      var $64=HEAP32[(($63)>>2)];
      $f=$64;
      label = 2; break;
    case 2: 
      var $66=$f;
      var $67=(($66)|(0))!=0;
      if ($67) { label = 3; break; } else { label = 5; break; }
    case 3: 
      __Z5b2LogPKcz(((5251776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $69=$f;
      var $70=$bodyIndex;
      __ZN9b2Fixture4DumpEi($69, $70);
      __Z5b2LogPKcz(((5251652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $72=$f;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      $f=$74;
      label = 2; break;
    case 5: 
      __Z5b2LogPKcz(((5251492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN10b2MassDataC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  __ZN6b2Vec2C1Ev($3);
  return;
}
function __ZN12b2FixtureDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+22)|0);
  __ZN8b2FilterC1Ev($3);
  var $4=(($2)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+4)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+8)|0);
  HEAPF32[(($6)>>2)]=0.20000000298023224;
  var $7=(($2+12)|0);
  HEAPF32[(($7)>>2)]=0;
  var $8=(($2+16)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=(($2+20)|0);
  HEAP8[($9)]=0;
  return;
}
function __ZN8b2FilterC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN8b2FilterC2Ev($2);
  return;
}
function ___cxx_global_var_init115() {
  var label = 0;
  __ZN15b2ContactFilterC1Ev(5247056);
  var $1=_atexit((414), 5247056, ___dso_handle);
  return;
}
function __ZN15b2ContactFilterC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ContactFilterC2Ev($2);
  return;
}
function __ZN15b2ContactFilterD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ContactFilterD2Ev($2);
  return;
}
function ___cxx_global_var_init1() {
  var label = 0;
  __ZN17b2ContactListenerC1Ev(5247052);
  var $1=_atexit((790), 5247052, ___dso_handle);
  return;
}
function __ZN17b2ContactListenerC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN17b2ContactListenerC2Ev($2);
  return;
}
function __ZN17b2ContactListenerD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN17b2ContactListenerD2Ev($2);
  return;
}
function __ZN16b2ContactManagerC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN12b2BroadPhaseC2Ev($3);
  var $4=(($2+60)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+64)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+68)|0);
  HEAP32[(($6)>>2)]=5247056;
  var $7=(($2+72)|0);
  HEAP32[(($7)>>2)]=5247052;
  var $8=(($2+76)|0);
  HEAP32[(($8)>>2)]=0;
  return;
}
function __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $fixtureA;
      var $fixtureB;
      var $bodyA;
      var $bodyB;
      $1=$this;
      $2=$c;
      var $3=$1;
      var $4=$2;
      var $5=__ZN9b2Contact11GetFixtureAEv($4);
      $fixtureA=$5;
      var $6=$2;
      var $7=__ZN9b2Contact11GetFixtureBEv($6);
      $fixtureB=$7;
      var $8=$fixtureA;
      var $9=__ZN9b2Fixture7GetBodyEv($8);
      $bodyA=$9;
      var $10=$fixtureB;
      var $11=__ZN9b2Fixture7GetBodyEv($10);
      $bodyB=$11;
      var $12=(($3+72)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $16=$2;
      var $17=__ZNK9b2Contact10IsTouchingEv($16);
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=(($3+72)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$2;
      FUNCTION_TABLE[$24]($20, $25);
      label = 4; break;
    case 4: 
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $32=$2;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+12)|0);
      HEAP32[(($38)>>2)]=$34;
      label = 6; break;
    case 6: 
      var $40=$2;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))!=0;
      if ($43) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $45=$2;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$2;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+8)|0);
      HEAP32[(($51)>>2)]=$47;
      label = 8; break;
    case 8: 
      var $53=$2;
      var $54=(($3+60)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($53)|(0))==(($55)|(0));
      if ($56) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $58=$2;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($3+60)|0);
      HEAP32[(($61)>>2)]=$60;
      label = 10; break;
    case 10: 
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))!=0;
      if ($67) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $69=$2;
      var $70=(($69+16)|0);
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+16)|0);
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+12)|0);
      HEAP32[(($77)>>2)]=$72;
      label = 12; break;
    case 12: 
      var $79=$2;
      var $80=(($79+16)|0);
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82)|(0))!=0;
      if ($83) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $85=$2;
      var $86=(($85+16)|0);
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$2;
      var $90=(($89+16)|0);
      var $91=(($90+12)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+8)|0);
      HEAP32[(($93)>>2)]=$88;
      label = 14; break;
    case 14: 
      var $95=$2;
      var $96=(($95+16)|0);
      var $97=$bodyA;
      var $98=(($97+112)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($96)|(0))==(($99)|(0));
      if ($100) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $102=$2;
      var $103=(($102+16)|0);
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$bodyA;
      var $107=(($106+112)|0);
      HEAP32[(($107)>>2)]=$105;
      label = 16; break;
    case 16: 
      var $109=$2;
      var $110=(($109+32)|0);
      var $111=(($110+8)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112)|(0))!=0;
      if ($113) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $115=$2;
      var $116=(($115+32)|0);
      var $117=(($116+12)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$2;
      var $120=(($119+32)|0);
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+12)|0);
      HEAP32[(($123)>>2)]=$118;
      label = 18; break;
    case 18: 
      var $125=$2;
      var $126=(($125+32)|0);
      var $127=(($126+12)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128)|(0))!=0;
      if ($129) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $131=$2;
      var $132=(($131+32)|0);
      var $133=(($132+8)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$2;
      var $136=(($135+32)|0);
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+8)|0);
      HEAP32[(($139)>>2)]=$134;
      label = 20; break;
    case 20: 
      var $141=$2;
      var $142=(($141+32)|0);
      var $143=$bodyB;
      var $144=(($143+112)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($142)|(0))==(($145)|(0));
      if ($146) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $148=$2;
      var $149=(($148+32)|0);
      var $150=(($149+12)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$bodyB;
      var $153=(($152+112)|0);
      HEAP32[(($153)>>2)]=$151;
      label = 22; break;
    case 22: 
      var $155=$2;
      var $156=(($3+76)|0);
      var $157=HEAP32[(($156)>>2)];
      __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($155, $157);
      var $158=(($3+64)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=((($159)-(1))|0);
      HEAP32[(($158)>>2)]=$160;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body12SetTransformERK6b2Vec2f($this, $position, $angle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $broadPhase;
      var $f;
      $1=$this;
      $2=$position;
      $3=$angle;
      var $5=$1;
      var $6=(($5+88)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=__ZNK7b2World8IsLockedEv($7);
      var $9=(($8)&(1));
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5247888)|0), 404, ((5261324)|0), ((5247856)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $15=(($5+88)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=__ZNK7b2World8IsLockedEv($16);
      var $18=(($17)&(1));
      var $19=(($18)|(0))==1;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 11; break;
    case 6: 
      var $22=(($5+12)|0);
      var $23=(($22+8)|0);
      var $24=$3;
      __ZN5b2Rot3SetEf($23, $24);
      var $25=(($5+12)|0);
      var $26=(($25)|0);
      var $27=$2;
      var $28=$26;
      var $29=$27;
      assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
      var $30=(($5+28)|0);
      var $31=(($30+16)|0);
      var $32=(($5+12)|0);
      var $33=(($5+28)|0);
      var $34=(($33)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($4, $32, $34);
      var $35=$31;
      var $36=$4;
      assert(8 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
      var $37=$3;
      var $38=(($5+28)|0);
      var $39=(($38+28)|0);
      HEAPF32[(($39)>>2)]=$37;
      var $40=(($5+28)|0);
      var $41=(($40+8)|0);
      var $42=(($5+28)|0);
      var $43=(($42+16)|0);
      var $44=$41;
      var $45=$43;
      assert(8 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];
      var $46=$3;
      var $47=(($5+28)|0);
      var $48=(($47+24)|0);
      HEAPF32[(($48)>>2)]=$46;
      var $49=(($5+88)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+102872)|0);
      var $52=(($51)|0);
      $broadPhase=$52;
      var $53=(($5+100)|0);
      var $54=HEAP32[(($53)>>2)];
      $f=$54;
      label = 7; break;
    case 7: 
      var $56=$f;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $59=$f;
      var $60=$broadPhase;
      var $61=(($5+12)|0);
      var $62=(($5+12)|0);
      __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($59, $60, $61, $62);
      label = 9; break;
    case 9: 
      var $64=$f;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      $f=$66;
      label = 7; break;
    case 10: 
      var $68=(($5+88)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+102872)|0);
      __ZN16b2ContactManager15FindNewContactsEv($70);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body9SetActiveEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $broadPhase;
      var $f;
      var $broadPhase1;
      var $f2;
      var $ce;
      var $ce0;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=(($4+88)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=__ZNK7b2World8IsLockedEv($6);
      var $8=(($7)&(1));
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5247888)|0), 443, ((5261124)|0), ((5247856)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $14=$2;
      var $15=(($14) & 1);
      var $16=(($15)&(1));
      var $17=__ZNK6b2Body8IsActiveEv($4);
      var $18=(($17)&(1));
      var $19=(($16)|(0))==(($18)|(0));
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 20; break;
    case 6: 
      var $22=$2;
      var $23=(($22) & 1);
      if ($23) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $25=(($4+4)|0);
      var $26=HEAP16[(($25)>>1)];
      var $27=(($26)&(65535));
      var $28=$27 | 32;
      var $29=(($28) & 65535);
      HEAP16[(($25)>>1)]=$29;
      var $30=(($4+88)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+102872)|0);
      var $33=(($32)|0);
      $broadPhase=$33;
      var $34=(($4+100)|0);
      var $35=HEAP32[(($34)>>2)];
      $f=$35;
      label = 8; break;
    case 8: 
      var $37=$f;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $40=$f;
      var $41=$broadPhase;
      var $42=(($4+12)|0);
      __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($40, $41, $42);
      label = 10; break;
    case 10: 
      var $44=$f;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      $f=$46;
      label = 8; break;
    case 11: 
      label = 20; break;
    case 12: 
      var $49=(($4+4)|0);
      var $50=HEAP16[(($49)>>1)];
      var $51=(($50)&(65535));
      var $52=$51 & -33;
      var $53=(($52) & 65535);
      HEAP16[(($49)>>1)]=$53;
      var $54=(($4+88)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+102872)|0);
      var $57=(($56)|0);
      $broadPhase1=$57;
      var $58=(($4+100)|0);
      var $59=HEAP32[(($58)>>2)];
      $f2=$59;
      label = 13; break;
    case 13: 
      var $61=$f2;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $64=$f2;
      var $65=$broadPhase1;
      __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($64, $65);
      label = 15; break;
    case 15: 
      var $67=$f2;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      $f2=$69;
      label = 13; break;
    case 16: 
      var $71=(($4+112)|0);
      var $72=HEAP32[(($71)>>2)];
      $ce=$72;
      label = 17; break;
    case 17: 
      var $74=$ce;
      var $75=(($74)|(0))!=0;
      if ($75) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $77=$ce;
      $ce0=$77;
      var $78=$ce;
      var $79=(($78+12)|0);
      var $80=HEAP32[(($79)>>2)];
      $ce=$80;
      var $81=(($4+88)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+102872)|0);
      var $84=$ce0;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      __ZN16b2ContactManager7DestroyEP9b2Contact($83, $86);
      label = 17; break;
    case 19: 
      var $88=(($4+112)|0);
      HEAP32[(($88)>>2)]=0;
      label = 20; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK9b2Contact14GetChildIndexAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK9b2Contact14GetChildIndexBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN9b2Contact7GetNextEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK6b2Body7IsAwakeEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP16[(($3)>>1)];
  var $5=(($4)&(65535));
  var $6=$5 & 2;
  var $7=(($6)|(0))==2;
  return $7;
}
function __ZN6b2Body14GetContactListEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+112)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN16b2ContactManager7CollideEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $fixtureA;
      var $fixtureB;
      var $indexA;
      var $indexB;
      var $bodyA;
      var $bodyB;
      var $cNuke;
      var $cNuke1;
      var $activeA;
      var $activeB;
      var $proxyIdA;
      var $proxyIdB;
      var $overlap;
      var $cNuke2;
      $1=$this;
      var $2=$1;
      var $3=(($2+60)|0);
      var $4=HEAP32[(($3)>>2)];
      $c=$4;
      label = 2; break;
    case 2: 
      var $6=$c;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 20; break; }
    case 3: 
      var $9=$c;
      var $10=__ZN9b2Contact11GetFixtureAEv($9);
      $fixtureA=$10;
      var $11=$c;
      var $12=__ZN9b2Contact11GetFixtureBEv($11);
      $fixtureB=$12;
      var $13=$c;
      var $14=__ZNK9b2Contact14GetChildIndexAEv($13);
      $indexA=$14;
      var $15=$c;
      var $16=__ZNK9b2Contact14GetChildIndexBEv($15);
      $indexB=$16;
      var $17=$fixtureA;
      var $18=__ZN9b2Fixture7GetBodyEv($17);
      $bodyA=$18;
      var $19=$fixtureB;
      var $20=__ZN9b2Fixture7GetBodyEv($19);
      $bodyB=$20;
      var $21=$c;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 8;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $27=$bodyB;
      var $28=$bodyA;
      var $29=__ZNK6b2Body13ShouldCollideEPKS_($27, $28);
      var $30=(($29)&(1));
      var $31=(($30)|(0))==0;
      if ($31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $33=$c;
      $cNuke=$33;
      var $34=$cNuke;
      var $35=__ZN9b2Contact7GetNextEv($34);
      $c=$35;
      var $36=$cNuke;
      __ZN16b2ContactManager7DestroyEP9b2Contact($2, $36);
      label = 2; break;
    case 6: 
      var $38=(($2+68)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))!=0;
      if ($40) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $42=(($2+68)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$fixtureA;
      var $49=$fixtureB;
      var $50=FUNCTION_TABLE[$47]($43, $48, $49);
      var $51=(($50)&(1));
      var $52=(($51)|(0))==0;
      if ($52) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $54=$c;
      $cNuke1=$54;
      var $55=$cNuke1;
      var $56=__ZN9b2Contact7GetNextEv($55);
      $c=$56;
      var $57=$cNuke1;
      __ZN16b2ContactManager7DestroyEP9b2Contact($2, $57);
      label = 2; break;
    case 9: 
      var $59=$c;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$61 & -9;
      HEAP32[(($60)>>2)]=$62;
      label = 10; break;
    case 10: 
      var $64=$bodyA;
      var $65=__ZNK6b2Body7IsAwakeEv($64);
      if ($65) { label = 11; break; } else { var $72 = 0;label = 12; break; }
    case 11: 
      var $67=$bodyA;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0))!=0;
      var $72 = $70;label = 12; break;
    case 12: 
      var $72;
      var $73=(($72)&(1));
      $activeA=$73;
      var $74=$bodyB;
      var $75=__ZNK6b2Body7IsAwakeEv($74);
      if ($75) { label = 13; break; } else { var $82 = 0;label = 14; break; }
    case 13: 
      var $77=$bodyB;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))!=0;
      var $82 = $80;label = 14; break;
    case 14: 
      var $82;
      var $83=(($82)&(1));
      $activeB=$83;
      var $84=$activeA;
      var $85=(($84) & 1);
      var $86=(($85)&(1));
      var $87=(($86)|(0))==0;
      if ($87) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $89=$activeB;
      var $90=(($89) & 1);
      var $91=(($90)&(1));
      var $92=(($91)|(0))==0;
      if ($92) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $94=$c;
      var $95=__ZN9b2Contact7GetNextEv($94);
      $c=$95;
      label = 2; break;
    case 17: 
      var $97=$indexA;
      var $98=$fixtureA;
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+((($97)*(28))&-1))|0);
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      $proxyIdA=$103;
      var $104=$indexB;
      var $105=$fixtureB;
      var $106=(($105+24)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+((($104)*(28))&-1))|0);
      var $109=(($108+24)|0);
      var $110=HEAP32[(($109)>>2)];
      $proxyIdB=$110;
      var $111=(($2)|0);
      var $112=$proxyIdA;
      var $113=$proxyIdB;
      var $114=__ZNK12b2BroadPhase11TestOverlapEii($111, $112, $113);
      var $115=(($114)&(1));
      $overlap=$115;
      var $116=$overlap;
      var $117=(($116) & 1);
      var $118=(($117)&(1));
      var $119=(($118)|(0))==0;
      if ($119) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $121=$c;
      $cNuke2=$121;
      var $122=$cNuke2;
      var $123=__ZN9b2Contact7GetNextEv($122);
      $c=$123;
      var $124=$cNuke2;
      __ZN16b2ContactManager7DestroyEP9b2Contact($2, $124);
      label = 2; break;
    case 19: 
      var $126=$c;
      var $127=(($2+72)|0);
      var $128=HEAP32[(($127)>>2)];
      __ZN9b2Contact6UpdateEP17b2ContactListener($126, $128);
      var $129=$c;
      var $130=__ZN9b2Contact7GetNextEv($129);
      $c=$130;
      label = 2; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2BroadPhase11TestOverlapEii($this, $proxyIdA, $proxyIdB) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $aabbA;
  var $aabbB;
  $1=$this;
  $2=$proxyIdA;
  $3=$proxyIdB;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=__ZNK13b2DynamicTree10GetFatAABBEi($5, $6);
  $aabbA=$7;
  var $8=(($4)|0);
  var $9=$3;
  var $10=__ZNK13b2DynamicTree10GetFatAABBEi($8, $9);
  $aabbB=$10;
  var $11=$aabbA;
  var $12=$aabbB;
  var $13=__Z13b2TestOverlapRK6b2AABBS1_($11, $12);
  return $13;
}
function __ZN16b2ContactManager15FindNewContactsEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($3, $2);
  return;
}
function __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this, $callback) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $4;
      var $5;
      var $i;
      var $fatAABB;
      var $i1;
      var $primaryPair;
      var $userDataA;
      var $userDataB;
      var $pair;
      $4=$this;
      $5=$callback;
      var $6=$4;
      var $7=(($6+52)|0);
      HEAP32[(($7)>>2)]=0;
      $i=0;
      label = 2; break;
    case 2: 
      var $9=$i;
      var $10=(($6+40)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($9)|(0)) < (($11)|(0));
      if ($12) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $14=$i;
      var $15=(($6+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+($14<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($6+56)|0);
      HEAP32[(($19)>>2)]=$18;
      var $20=(($6+56)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==-1;
      if ($22) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      var $25=(($6)|0);
      var $26=(($6+56)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=__ZNK13b2DynamicTree10GetFatAABBEi($25, $27);
      $fatAABB=$28;
      var $29=(($6)|0);
      var $30=$fatAABB;
      __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($29, $6, $30);
      label = 6; break;
    case 6: 
      var $32=$i;
      var $33=((($32)+(1))|0);
      $i=$33;
      label = 2; break;
    case 7: 
      var $35=(($6+40)|0);
      HEAP32[(($35)>>2)]=0;
      var $36=(($6+44)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($6+44)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($6+52)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($39+((($41)*(12))&-1))|0);
      $1=$37;
      $2=$42;
      HEAP32[(($3)>>2)]=1484;
      var $43=$1;
      var $44=$2;
      __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($43, $44, $3);
      $i1=0;
      label = 8; break;
    case 8: 
      var $46=$i1;
      var $47=(($6+52)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($46)|(0)) < (($48)|(0));
      if ($49) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $51=(($6+44)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$i1;
      var $54=(($52+((($53)*(12))&-1))|0);
      $primaryPair=$54;
      var $55=(($6)|0);
      var $56=$primaryPair;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=__ZNK13b2DynamicTree11GetUserDataEi($55, $58);
      $userDataA=$59;
      var $60=(($6)|0);
      var $61=$primaryPair;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=__ZNK13b2DynamicTree11GetUserDataEi($60, $63);
      $userDataB=$64;
      var $65=$5;
      var $66=$userDataA;
      var $67=$userDataB;
      __ZN16b2ContactManager7AddPairEPvS0_($65, $66, $67);
      var $68=$i1;
      var $69=((($68)+(1))|0);
      $i1=$69;
      label = 10; break;
    case 10: 
      var $71=$i1;
      var $72=(($6+52)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($71)|(0)) < (($73)|(0));
      if ($74) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $76=(($6+44)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$i1;
      var $79=(($77+((($78)*(12))&-1))|0);
      $pair=$79;
      var $80=$pair;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$primaryPair;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($82)|(0))!=(($85)|(0));
      if ($86) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $88=$pair;
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$primaryPair;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($90)|(0))!=(($93)|(0));
      if ($94) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $97=$i1;
      var $98=((($97)+(1))|0);
      $i1=$98;
      label = 10; break;
    case 15: 
      label = 8; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2ContactManager7AddPairEPvS0_($this, $proxyUserDataA, $proxyUserDataB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $proxyA;
      var $proxyB;
      var $fixtureA;
      var $fixtureB;
      var $indexA;
      var $indexB;
      var $bodyA;
      var $bodyB;
      var $edge;
      var $fA;
      var $fB;
      var $iA;
      var $iB;
      var $c;
      $1=$this;
      $2=$proxyUserDataA;
      $3=$proxyUserDataB;
      var $4=$1;
      var $5=$2;
      var $6=$5;
      $proxyA=$6;
      var $7=$3;
      var $8=$7;
      $proxyB=$8;
      var $9=$proxyA;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $fixtureA=$11;
      var $12=$proxyB;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      $fixtureB=$14;
      var $15=$proxyA;
      var $16=(($15+20)|0);
      var $17=HEAP32[(($16)>>2)];
      $indexA=$17;
      var $18=$proxyB;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      $indexB=$20;
      var $21=$fixtureA;
      var $22=__ZN9b2Fixture7GetBodyEv($21);
      $bodyA=$22;
      var $23=$fixtureB;
      var $24=__ZN9b2Fixture7GetBodyEv($23);
      $bodyB=$24;
      var $25=$bodyA;
      var $26=$bodyB;
      var $27=(($25)|(0))==(($26)|(0));
      if ($27) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 32; break;
    case 3: 
      var $30=$bodyB;
      var $31=__ZN6b2Body14GetContactListEv($30);
      $edge=$31;
      label = 4; break;
    case 4: 
      var $33=$edge;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 5; break; } else { label = 18; break; }
    case 5: 
      var $36=$edge;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$bodyA;
      var $40=(($38)|(0))==(($39)|(0));
      if ($40) { label = 6; break; } else { label = 17; break; }
    case 6: 
      var $42=$edge;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=__ZN9b2Contact11GetFixtureAEv($44);
      $fA=$45;
      var $46=$edge;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=__ZN9b2Contact11GetFixtureBEv($48);
      $fB=$49;
      var $50=$edge;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=__ZNK9b2Contact14GetChildIndexAEv($52);
      $iA=$53;
      var $54=$edge;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=__ZNK9b2Contact14GetChildIndexBEv($56);
      $iB=$57;
      var $58=$fA;
      var $59=$fixtureA;
      var $60=(($58)|(0))==(($59)|(0));
      if ($60) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $62=$fB;
      var $63=$fixtureB;
      var $64=(($62)|(0))==(($63)|(0));
      if ($64) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $66=$iA;
      var $67=$indexA;
      var $68=(($66)|(0))==(($67)|(0));
      if ($68) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $70=$iB;
      var $71=$indexB;
      var $72=(($70)|(0))==(($71)|(0));
      if ($72) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 32; break;
    case 11: 
      var $75=$fA;
      var $76=$fixtureB;
      var $77=(($75)|(0))==(($76)|(0));
      if ($77) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $79=$fB;
      var $80=$fixtureA;
      var $81=(($79)|(0))==(($80)|(0));
      if ($81) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $83=$iA;
      var $84=$indexB;
      var $85=(($83)|(0))==(($84)|(0));
      if ($85) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $87=$iB;
      var $88=$indexA;
      var $89=(($87)|(0))==(($88)|(0));
      if ($89) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 32; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $93=$edge;
      var $94=(($93+12)|0);
      var $95=HEAP32[(($94)>>2)];
      $edge=$95;
      label = 4; break;
    case 18: 
      var $97=$bodyB;
      var $98=$bodyA;
      var $99=__ZNK6b2Body13ShouldCollideEPKS_($97, $98);
      var $100=(($99)&(1));
      var $101=(($100)|(0))==0;
      if ($101) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 32; break;
    case 20: 
      var $104=(($4+68)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|(0))!=0;
      if ($106) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $108=(($4+68)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109;
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+8)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$fixtureA;
      var $115=$fixtureB;
      var $116=FUNCTION_TABLE[$113]($109, $114, $115);
      var $117=(($116)&(1));
      var $118=(($117)|(0))==0;
      if ($118) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 32; break;
    case 23: 
      var $121=$fixtureA;
      var $122=$indexA;
      var $123=$fixtureB;
      var $124=$indexB;
      var $125=(($4+76)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($121, $122, $123, $124, $126);
      $c=$127;
      var $128=$c;
      var $129=(($128)|(0))==0;
      if ($129) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 32; break;
    case 25: 
      var $132=$c;
      var $133=__ZN9b2Contact11GetFixtureAEv($132);
      $fixtureA=$133;
      var $134=$c;
      var $135=__ZN9b2Contact11GetFixtureBEv($134);
      $fixtureB=$135;
      var $136=$c;
      var $137=__ZNK9b2Contact14GetChildIndexAEv($136);
      $indexA=$137;
      var $138=$c;
      var $139=__ZNK9b2Contact14GetChildIndexBEv($138);
      $indexB=$139;
      var $140=$fixtureA;
      var $141=__ZN9b2Fixture7GetBodyEv($140);
      $bodyA=$141;
      var $142=$fixtureB;
      var $143=__ZN9b2Fixture7GetBodyEv($142);
      $bodyB=$143;
      var $144=$c;
      var $145=(($144+8)|0);
      HEAP32[(($145)>>2)]=0;
      var $146=(($4+60)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$c;
      var $149=(($148+12)|0);
      HEAP32[(($149)>>2)]=$147;
      var $150=(($4+60)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151)|(0))!=0;
      if ($152) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $154=$c;
      var $155=(($4+60)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+8)|0);
      HEAP32[(($157)>>2)]=$154;
      label = 27; break;
    case 27: 
      var $159=$c;
      var $160=(($4+60)|0);
      HEAP32[(($160)>>2)]=$159;
      var $161=$c;
      var $162=$c;
      var $163=(($162+16)|0);
      var $164=(($163+4)|0);
      HEAP32[(($164)>>2)]=$161;
      var $165=$bodyB;
      var $166=$c;
      var $167=(($166+16)|0);
      var $168=(($167)|0);
      HEAP32[(($168)>>2)]=$165;
      var $169=$c;
      var $170=(($169+16)|0);
      var $171=(($170+8)|0);
      HEAP32[(($171)>>2)]=0;
      var $172=$bodyA;
      var $173=(($172+112)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$c;
      var $176=(($175+16)|0);
      var $177=(($176+12)|0);
      HEAP32[(($177)>>2)]=$174;
      var $178=$bodyA;
      var $179=(($178+112)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180)|(0))!=0;
      if ($181) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $183=$c;
      var $184=(($183+16)|0);
      var $185=$bodyA;
      var $186=(($185+112)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187+8)|0);
      HEAP32[(($188)>>2)]=$184;
      label = 29; break;
    case 29: 
      var $190=$c;
      var $191=(($190+16)|0);
      var $192=$bodyA;
      var $193=(($192+112)|0);
      HEAP32[(($193)>>2)]=$191;
      var $194=$c;
      var $195=$c;
      var $196=(($195+32)|0);
      var $197=(($196+4)|0);
      HEAP32[(($197)>>2)]=$194;
      var $198=$bodyA;
      var $199=$c;
      var $200=(($199+32)|0);
      var $201=(($200)|0);
      HEAP32[(($201)>>2)]=$198;
      var $202=$c;
      var $203=(($202+32)|0);
      var $204=(($203+8)|0);
      HEAP32[(($204)>>2)]=0;
      var $205=$bodyB;
      var $206=(($205+112)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=$c;
      var $209=(($208+32)|0);
      var $210=(($209+12)|0);
      HEAP32[(($210)>>2)]=$207;
      var $211=$bodyB;
      var $212=(($211+112)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213)|(0))!=0;
      if ($214) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $216=$c;
      var $217=(($216+32)|0);
      var $218=$bodyB;
      var $219=(($218+112)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220+8)|0);
      HEAP32[(($221)>>2)]=$217;
      label = 31; break;
    case 31: 
      var $223=$c;
      var $224=(($223+32)|0);
      var $225=$bodyB;
      var $226=(($225+112)|0);
      HEAP32[(($226)>>2)]=$224;
      var $227=$bodyA;
      __ZN6b2Body8SetAwakeEb($227, 1);
      var $228=$bodyB;
      __ZN6b2Body8SetAwakeEb($228, 1);
      var $229=(($4+64)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=((($230)+(1))|0);
      HEAP32[(($229)>>2)]=$231;
      label = 32; break;
    case 32: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree10GetFatAABBEi($this, $proxyId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|(0));
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|(0)) < (($9)|(0));
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5257672)|0), 159, ((5259544)|0), ((5254404)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($3+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+((($15)*(36))&-1))|0);
      var $19=(($18)|0);
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this, $callback, $aabb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1036)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $stack=__stackBase__;
      var $4;
      var $5;
      var $nodeId;
      var $node;
      var $proceed;
      var $6;
      $1=$this;
      $2=$callback;
      $3=$aabb;
      var $7=$1;
      __ZN15b2GrowableStackIiLi256EEC1Ev($stack);
      var $8=(($7)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 8; break; }
    case 2: 
      label = 3; break;
    case 3: 
      var $11 = (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE8GetCountEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $13=(($11)|(0)) > 0;
      if ($13) { label = 5; break; } else { label = 22; break; }
    case 5: 
      var $15 = (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE3PopEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
    case 6: 
      $nodeId=$15;
      var $17=$nodeId;
      var $18=(($17)|(0))==-1;
      if ($18) { label = 7; break; } else { label = 9; break; }
    case 7: 
      label = 3; break;
    case 8: 
      var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
      var $22=$21$0;
      $4=$22;
      var $23=$21$1;
      $5=$23;
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EED1Ev($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 27; break; }
    case 9: 
      var $25=(($7+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$nodeId;
      var $28=(($26+((($27)*(36))&-1))|0);
      $node=$28;
      var $29=$node;
      var $30=(($29)|0);
      var $31=$3;
      var $32 = (function() { try { __THREW__ = 0; return __Z13b2TestOverlapRK6b2AABBS1_($30, $31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 8; break; }
    case 10: 
      if ($32) { label = 11; break; } else { label = 21; break; }
    case 11: 
      var $35=$node;
      var $36 = (function() { try { __THREW__ = 0; return __ZNK10b2TreeNode6IsLeafEv($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 8; break; }
    case 12: 
      if ($36) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $39=$2;
      var $40=$nodeId;
      var $41 = (function() { try { __THREW__ = 0; return __ZN12b2BroadPhase13QueryCallbackEi($39, $40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 8; break; }
    case 14: 
      var $43=(($41)&(1));
      $proceed=$43;
      var $44=$proceed;
      var $45=(($44) & 1);
      var $46=(($45)&(1));
      var $47=(($46)|(0))==0;
      if ($47) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $6=1;
      label = 23; break;
    case 16: 
      label = 20; break;
    case 17: 
      var $51=$node;
      var $52=(($51+24)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 8; break; }
    case 18: 
      var $54=$node;
      var $55=(($54+28)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 8; break; }
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 3; break;
    case 22: 
      $6=0;
      label = 23; break;
    case 23: 
      __ZN15b2GrowableStackIiLi256EED1Ev($stack);
      var $cleanup_dest=$6;
      if ((($cleanup_dest)|(0))==0 | (($cleanup_dest)|(0))==1) {
        label = 24; break;
      }
      else {
      label = 28; break;
      }
    case 24: 
      STACKTOP = __stackBase__;
      return;
    case 25: 
      label = 26; break;
    case 26: 
      var $64=$4;
      var $65=$5;
      var $66$0=$64;
      var $66$1=0;
      var $67$0=$66$0;
      var $67$1=$65;
      ___resumeException($67$0)
    case 27: 
      var $69$0 = ___cxa_find_matching_catch(-1, -1,0); $69$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    case 28: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __Z14b2PairLessThanRK6b2PairS1_($pair1, $pair2) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$pair1;
      $3=$pair2;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$3;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|(0)) < (($9)|(0));
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 6; break;
    case 3: 
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$3;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($15)|(0))==(($18)|(0));
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$3;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)|(0)) < (($26)|(0));
      $1=$27;
      label = 6; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $30=$1;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__t_i5=__stackBase__;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $__t_i4=(__stackBase__)+(12);
      var $11;
      var $12;
      var $13;
      var $14;
      var $15;
      var $__t_i3=(__stackBase__)+(24);
      var $16;
      var $17;
      var $18;
      var $19;
      var $20;
      var $__t_i2=(__stackBase__)+(36);
      var $21;
      var $22;
      var $23;
      var $24;
      var $25;
      var $__t_i1=(__stackBase__)+(48);
      var $26;
      var $27;
      var $28;
      var $29;
      var $30;
      var $__t_i=(__stackBase__)+(60);
      var $31;
      var $32;
      var $33;
      var $__limit;
      var $__len;
      var $__m;
      var $__lm1;
      var $__n_swaps;
      var $__delta;
      var $__i;
      var $__j;
      var $__fs;
      $31=$__first;
      $32=$__last;
      $33=$__comp;
      $__limit=30;
      label = 2; break;
    case 2: 
      label = 3; break;
    case 3: 
      var $36=$32;
      var $37=$31;
      var $38=$36;
      var $39=$37;
      var $40=((($38)-($39))|0);
      var $41=((((($40)|(0)))/(12))&-1);
      $__len=$41;
      var $42=$__len;
      if ((($42)|(0))==0 | (($42)|(0))==1) {
        label = 4; break;
      }
      else if ((($42)|(0))==2) {
        label = 5; break;
      }
      else if ((($42)|(0))==3) {
        label = 8; break;
      }
      else if ((($42)|(0))==4) {
        label = 9; break;
      }
      else if ((($42)|(0))==5) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
    case 4: 
      label = 74; break;
    case 5: 
      var $45=$33;
      var $46=HEAP32[(($45)>>2)];
      var $47=$32;
      var $48=((($47)-(12))|0);
      $32=$48;
      var $49=$31;
      var $50=FUNCTION_TABLE[$46]($48, $49);
      if ($50) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $52=$31;
      var $53=$32;
      $29=$52;
      $30=$53;
      var $54=$29;
      $28=$54;
      var $55=$28;
      var $56=$__t_i;
      var $57=$55;
      assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
      var $58=$29;
      var $59=$30;
      $26=$59;
      var $60=$26;
      var $61=$58;
      var $62=$60;
      assert(12 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
      var $63=$30;
      $27=$__t_i;
      var $64=$27;
      var $65=$63;
      var $66=$64;
      assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 74; break;
    case 8: 
      var $69=$31;
      var $70=$31;
      var $71=(($70+12)|0);
      var $72=$32;
      var $73=((($72)-(12))|0);
      $32=$73;
      var $74=$33;
      var $75=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($69, $71, $73, $74);
      label = 74; break;
    case 9: 
      var $77=$31;
      var $78=$31;
      var $79=(($78+12)|0);
      var $80=$31;
      var $81=(($80+24)|0);
      var $82=$32;
      var $83=((($82)-(12))|0);
      $32=$83;
      var $84=$33;
      var $85=__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($77, $79, $81, $83, $84);
      label = 74; break;
    case 10: 
      var $87=$31;
      var $88=$31;
      var $89=(($88+12)|0);
      var $90=$31;
      var $91=(($90+24)|0);
      var $92=$31;
      var $93=(($92+36)|0);
      var $94=$32;
      var $95=((($94)-(12))|0);
      $32=$95;
      var $96=$33;
      var $97=__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($87, $89, $91, $93, $95, $96);
      label = 74; break;
    case 11: 
      var $99=$__len;
      var $100=(($99)|(0)) <= 30;
      if ($100) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $102=$31;
      var $103=$32;
      var $104=$33;
      __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($102, $103, $104);
      label = 74; break;
    case 13: 
      var $106=$31;
      $__m=$106;
      var $107=$32;
      $__lm1=$107;
      var $108=$__lm1;
      var $109=((($108)-(12))|0);
      $__lm1=$109;
      var $110=$__len;
      var $111=(($110)|(0)) >= 1000;
      if ($111) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $113=$__len;
      var $114=((((($113)|(0)))/(2))&-1);
      $__delta=$114;
      var $115=$__delta;
      var $116=$__m;
      var $117=(($116+((($115)*(12))&-1))|0);
      $__m=$117;
      var $118=$__delta;
      var $119=((((($118)|(0)))/(2))&-1);
      $__delta=$119;
      var $120=$31;
      var $121=$31;
      var $122=$__delta;
      var $123=(($121+((($122)*(12))&-1))|0);
      var $124=$__m;
      var $125=$__m;
      var $126=$__delta;
      var $127=(($125+((($126)*(12))&-1))|0);
      var $128=$__lm1;
      var $129=$33;
      var $130=__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($120, $123, $124, $127, $128, $129);
      $__n_swaps=$130;
      label = 16; break;
    case 15: 
      var $132=$__len;
      var $133=((((($132)|(0)))/(2))&-1);
      $__delta=$133;
      var $134=$__delta;
      var $135=$__m;
      var $136=(($135+((($134)*(12))&-1))|0);
      $__m=$136;
      var $137=$31;
      var $138=$__m;
      var $139=$__lm1;
      var $140=$33;
      var $141=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($137, $138, $139, $140);
      $__n_swaps=$141;
      label = 16; break;
    case 16: 
      var $143=$31;
      $__i=$143;
      var $144=$__lm1;
      $__j=$144;
      var $145=$33;
      var $146=HEAP32[(($145)>>2)];
      var $147=$__i;
      var $148=$__m;
      var $149=FUNCTION_TABLE[$146]($147, $148);
      if ($149) { label = 44; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $152=$__i;
      var $153=$__j;
      var $154=((($153)-(12))|0);
      $__j=$154;
      var $155=(($152)|(0))==(($154)|(0));
      if ($155) { label = 19; break; } else { label = 40; break; }
    case 19: 
      var $157=$__i;
      var $158=(($157+12)|0);
      $__i=$158;
      var $159=$32;
      $__j=$159;
      var $160=$33;
      var $161=HEAP32[(($160)>>2)];
      var $162=$31;
      var $163=$__j;
      var $164=((($163)-(12))|0);
      $__j=$164;
      var $165=FUNCTION_TABLE[$161]($162, $164);
      if ($165) { label = 27; break; } else { label = 20; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $168=$__i;
      var $169=$__j;
      var $170=(($168)|(0))==(($169)|(0));
      if ($170) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 74; break;
    case 23: 
      var $173=$33;
      var $174=HEAP32[(($173)>>2)];
      var $175=$31;
      var $176=$__i;
      var $177=FUNCTION_TABLE[$174]($175, $176);
      if ($177) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $179=$__i;
      var $180=$__j;
      $24=$179;
      $25=$180;
      var $181=$24;
      $23=$181;
      var $182=$23;
      var $183=$__t_i1;
      var $184=$182;
      assert(12 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];HEAP32[((($183)+(8))>>2)]=HEAP32[((($184)+(8))>>2)];
      var $185=$24;
      var $186=$25;
      $21=$186;
      var $187=$21;
      var $188=$185;
      var $189=$187;
      assert(12 % 1 === 0);HEAP32[(($188)>>2)]=HEAP32[(($189)>>2)];HEAP32[((($188)+(4))>>2)]=HEAP32[((($189)+(4))>>2)];HEAP32[((($188)+(8))>>2)]=HEAP32[((($189)+(8))>>2)];
      var $190=$25;
      $22=$__t_i1;
      var $191=$22;
      var $192=$190;
      var $193=$191;
      assert(12 % 1 === 0);HEAP32[(($192)>>2)]=HEAP32[(($193)>>2)];HEAP32[((($192)+(4))>>2)]=HEAP32[((($193)+(4))>>2)];HEAP32[((($192)+(8))>>2)]=HEAP32[((($193)+(8))>>2)];
      var $194=$__n_swaps;
      var $195=((($194)+(1))|0);
      $__n_swaps=$195;
      var $196=$__i;
      var $197=(($196+12)|0);
      $__i=$197;
      label = 26; break;
    case 25: 
      var $199=$__i;
      var $200=(($199+12)|0);
      $__i=$200;
      label = 21; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $203=$__i;
      var $204=$__j;
      var $205=(($203)|(0))==(($204)|(0));
      if ($205) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 74; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $210=$33;
      var $211=HEAP32[(($210)>>2)];
      var $212=$31;
      var $213=$__i;
      var $214=FUNCTION_TABLE[$211]($212, $213);
      var $215=$214 ^ 1;
      if ($215) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $217=$__i;
      var $218=(($217+12)|0);
      $__i=$218;
      label = 31; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $221=$33;
      var $222=HEAP32[(($221)>>2)];
      var $223=$31;
      var $224=$__j;
      var $225=((($224)-(12))|0);
      $__j=$225;
      var $226=FUNCTION_TABLE[$222]($223, $225);
      if ($226) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 34; break;
    case 36: 
      var $229=$__i;
      var $230=$__j;
      var $231=(($229)>>>(0)) >= (($230)>>>(0));
      if ($231) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 39; break;
    case 38: 
      var $234=$__i;
      var $235=$__j;
      $19=$234;
      $20=$235;
      var $236=$19;
      $18=$236;
      var $237=$18;
      var $238=$__t_i2;
      var $239=$237;
      assert(12 % 1 === 0);HEAP32[(($238)>>2)]=HEAP32[(($239)>>2)];HEAP32[((($238)+(4))>>2)]=HEAP32[((($239)+(4))>>2)];HEAP32[((($238)+(8))>>2)]=HEAP32[((($239)+(8))>>2)];
      var $240=$19;
      var $241=$20;
      $16=$241;
      var $242=$16;
      var $243=$240;
      var $244=$242;
      assert(12 % 1 === 0);HEAP32[(($243)>>2)]=HEAP32[(($244)>>2)];HEAP32[((($243)+(4))>>2)]=HEAP32[((($244)+(4))>>2)];HEAP32[((($243)+(8))>>2)]=HEAP32[((($244)+(8))>>2)];
      var $245=$20;
      $17=$__t_i2;
      var $246=$17;
      var $247=$245;
      var $248=$246;
      assert(12 % 1 === 0);HEAP32[(($247)>>2)]=HEAP32[(($248)>>2)];HEAP32[((($247)+(4))>>2)]=HEAP32[((($248)+(4))>>2)];HEAP32[((($247)+(8))>>2)]=HEAP32[((($248)+(8))>>2)];
      var $249=$__n_swaps;
      var $250=((($249)+(1))|0);
      $__n_swaps=$250;
      var $251=$__i;
      var $252=(($251+12)|0);
      $__i=$252;
      label = 30; break;
    case 39: 
      var $254=$__i;
      $31=$254;
      label = 3; break;
    case 40: 
      var $256=$33;
      var $257=HEAP32[(($256)>>2)];
      var $258=$__j;
      var $259=$__m;
      var $260=FUNCTION_TABLE[$257]($258, $259);
      if ($260) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $262=$__i;
      var $263=$__j;
      $14=$262;
      $15=$263;
      var $264=$14;
      $13=$264;
      var $265=$13;
      var $266=$__t_i3;
      var $267=$265;
      assert(12 % 1 === 0);HEAP32[(($266)>>2)]=HEAP32[(($267)>>2)];HEAP32[((($266)+(4))>>2)]=HEAP32[((($267)+(4))>>2)];HEAP32[((($266)+(8))>>2)]=HEAP32[((($267)+(8))>>2)];
      var $268=$14;
      var $269=$15;
      $11=$269;
      var $270=$11;
      var $271=$268;
      var $272=$270;
      assert(12 % 1 === 0);HEAP32[(($271)>>2)]=HEAP32[(($272)>>2)];HEAP32[((($271)+(4))>>2)]=HEAP32[((($272)+(4))>>2)];HEAP32[((($271)+(8))>>2)]=HEAP32[((($272)+(8))>>2)];
      var $273=$15;
      $12=$__t_i3;
      var $274=$12;
      var $275=$273;
      var $276=$274;
      assert(12 % 1 === 0);HEAP32[(($275)>>2)]=HEAP32[(($276)>>2)];HEAP32[((($275)+(4))>>2)]=HEAP32[((($276)+(4))>>2)];HEAP32[((($275)+(8))>>2)]=HEAP32[((($276)+(8))>>2)];
      var $277=$__n_swaps;
      var $278=((($277)+(1))|0);
      $__n_swaps=$278;
      label = 43; break;
    case 42: 
      label = 18; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $282=$__i;
      var $283=(($282+12)|0);
      $__i=$283;
      var $284=$__i;
      var $285=$__j;
      var $286=(($284)>>>(0)) < (($285)>>>(0));
      if ($286) { label = 45; break; } else { label = 58; break; }
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $290=$33;
      var $291=HEAP32[(($290)>>2)];
      var $292=$__i;
      var $293=$__m;
      var $294=FUNCTION_TABLE[$291]($292, $293);
      if ($294) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $296=$__i;
      var $297=(($296+12)|0);
      $__i=$297;
      label = 47; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $300=$33;
      var $301=HEAP32[(($300)>>2)];
      var $302=$__j;
      var $303=((($302)-(12))|0);
      $__j=$303;
      var $304=$__m;
      var $305=FUNCTION_TABLE[$301]($303, $304);
      var $306=$305 ^ 1;
      if ($306) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 50; break;
    case 52: 
      var $309=$__i;
      var $310=$__j;
      var $311=(($309)>>>(0)) > (($310)>>>(0));
      if ($311) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 57; break;
    case 54: 
      var $314=$__i;
      var $315=$__j;
      $9=$314;
      $10=$315;
      var $316=$9;
      $8=$316;
      var $317=$8;
      var $318=$__t_i4;
      var $319=$317;
      assert(12 % 1 === 0);HEAP32[(($318)>>2)]=HEAP32[(($319)>>2)];HEAP32[((($318)+(4))>>2)]=HEAP32[((($319)+(4))>>2)];HEAP32[((($318)+(8))>>2)]=HEAP32[((($319)+(8))>>2)];
      var $320=$9;
      var $321=$10;
      $6=$321;
      var $322=$6;
      var $323=$320;
      var $324=$322;
      assert(12 % 1 === 0);HEAP32[(($323)>>2)]=HEAP32[(($324)>>2)];HEAP32[((($323)+(4))>>2)]=HEAP32[((($324)+(4))>>2)];HEAP32[((($323)+(8))>>2)]=HEAP32[((($324)+(8))>>2)];
      var $325=$10;
      $7=$__t_i4;
      var $326=$7;
      var $327=$325;
      var $328=$326;
      assert(12 % 1 === 0);HEAP32[(($327)>>2)]=HEAP32[(($328)>>2)];HEAP32[((($327)+(4))>>2)]=HEAP32[((($328)+(4))>>2)];HEAP32[((($327)+(8))>>2)]=HEAP32[((($328)+(8))>>2)];
      var $329=$__n_swaps;
      var $330=((($329)+(1))|0);
      $__n_swaps=$330;
      var $331=$__m;
      var $332=$__i;
      var $333=(($331)|(0))==(($332)|(0));
      if ($333) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $335=$__j;
      $__m=$335;
      label = 56; break;
    case 56: 
      var $337=$__i;
      var $338=(($337+12)|0);
      $__i=$338;
      label = 46; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $341=$__i;
      var $342=$__m;
      var $343=(($341)|(0))!=(($342)|(0));
      if ($343) { label = 59; break; } else { label = 61; break; }
    case 59: 
      var $345=$33;
      var $346=HEAP32[(($345)>>2)];
      var $347=$__m;
      var $348=$__i;
      var $349=FUNCTION_TABLE[$346]($347, $348);
      if ($349) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $351=$__i;
      var $352=$__m;
      $4=$351;
      $5=$352;
      var $353=$4;
      $3=$353;
      var $354=$3;
      var $355=$__t_i5;
      var $356=$354;
      assert(12 % 1 === 0);HEAP32[(($355)>>2)]=HEAP32[(($356)>>2)];HEAP32[((($355)+(4))>>2)]=HEAP32[((($356)+(4))>>2)];HEAP32[((($355)+(8))>>2)]=HEAP32[((($356)+(8))>>2)];
      var $357=$4;
      var $358=$5;
      $1=$358;
      var $359=$1;
      var $360=$357;
      var $361=$359;
      assert(12 % 1 === 0);HEAP32[(($360)>>2)]=HEAP32[(($361)>>2)];HEAP32[((($360)+(4))>>2)]=HEAP32[((($361)+(4))>>2)];HEAP32[((($360)+(8))>>2)]=HEAP32[((($361)+(8))>>2)];
      var $362=$5;
      $2=$__t_i5;
      var $363=$2;
      var $364=$362;
      var $365=$363;
      assert(12 % 1 === 0);HEAP32[(($364)>>2)]=HEAP32[(($365)>>2)];HEAP32[((($364)+(4))>>2)]=HEAP32[((($365)+(4))>>2)];HEAP32[((($364)+(8))>>2)]=HEAP32[((($365)+(8))>>2)];
      var $366=$__n_swaps;
      var $367=((($366)+(1))|0);
      $__n_swaps=$367;
      label = 61; break;
    case 61: 
      var $369=$__n_swaps;
      var $370=(($369)|(0))==0;
      if ($370) { label = 62; break; } else { label = 70; break; }
    case 62: 
      var $372=$31;
      var $373=$__i;
      var $374=$33;
      var $375=__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($372, $373, $374);
      var $376=(($375)&(1));
      $__fs=$376;
      var $377=$__i;
      var $378=(($377+12)|0);
      var $379=$32;
      var $380=$33;
      var $381=__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($378, $379, $380);
      if ($381) { label = 63; break; } else { label = 66; break; }
    case 63: 
      var $383=$__fs;
      var $384=(($383) & 1);
      if ($384) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 74; break;
    case 65: 
      var $387=$__i;
      $32=$387;
      label = 2; break;
    case 66: 
      var $389=$__fs;
      var $390=(($389) & 1);
      if ($390) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $392=$__i;
      var $393=(($392+12)|0);
      $__i=$393;
      $31=$393;
      label = 2; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $397=$__i;
      var $398=$31;
      var $399=$397;
      var $400=$398;
      var $401=((($399)-($400))|0);
      var $402=((((($401)|(0)))/(12))&-1);
      var $403=$32;
      var $404=$__i;
      var $405=$403;
      var $406=$404;
      var $407=((($405)-($406))|0);
      var $408=((((($407)|(0)))/(12))&-1);
      var $409=(($402)|(0)) < (($408)|(0));
      if ($409) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $411=$31;
      var $412=$__i;
      var $413=$33;
      __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($411, $412, $413);
      var $414=$__i;
      var $415=(($414+12)|0);
      $__i=$415;
      $31=$415;
      label = 73; break;
    case 72: 
      var $417=$__i;
      var $418=(($417+12)|0);
      var $419=$32;
      var $420=$33;
      __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($418, $419, $420);
      var $421=$__i;
      $32=$421;
      label = 73; break;
    case 73: 
      label = 2; break;
    case 74: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree11GetUserDataEi($this, $proxyId) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$proxyId;
      var $3=$1;
      var $4=$2;
      var $5=0 <= (($4)|(0));
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$2;
      var $8=(($3+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)|(0)) < (($9)|(0));
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5257672)|0), 153, ((5259496)|0), ((5254404)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($3+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+((($15)*(36))&-1))|0);
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x, $__y, $__z, $__c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__t_i4=__stackBase__;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $__t_i3=(__stackBase__)+(12);
      var $11;
      var $12;
      var $13;
      var $14;
      var $15;
      var $__t_i2=(__stackBase__)+(24);
      var $16;
      var $17;
      var $18;
      var $19;
      var $20;
      var $__t_i1=(__stackBase__)+(36);
      var $21;
      var $22;
      var $23;
      var $24;
      var $25;
      var $__t_i=(__stackBase__)+(48);
      var $26;
      var $27;
      var $28;
      var $29;
      var $30;
      var $__r;
      $27=$__x;
      $28=$__y;
      $29=$__z;
      $30=$__c;
      $__r=0;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$28;
      var $34=$27;
      var $35=FUNCTION_TABLE[$32]($33, $34);
      if ($35) { label = 7; break; } else { label = 2; break; }
    case 2: 
      var $37=$30;
      var $38=HEAP32[(($37)>>2)];
      var $39=$29;
      var $40=$28;
      var $41=FUNCTION_TABLE[$38]($39, $40);
      if ($41) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $43=$__r;
      $26=$43;
      label = 12; break;
    case 4: 
      var $45=$28;
      var $46=$29;
      $24=$45;
      $25=$46;
      var $47=$24;
      $23=$47;
      var $48=$23;
      var $49=$__t_i;
      var $50=$48;
      assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
      var $51=$24;
      var $52=$25;
      $21=$52;
      var $53=$21;
      var $54=$51;
      var $55=$53;
      assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
      var $56=$25;
      $22=$__t_i;
      var $57=$22;
      var $58=$56;
      var $59=$57;
      assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
      $__r=1;
      var $60=$30;
      var $61=HEAP32[(($60)>>2)];
      var $62=$28;
      var $63=$27;
      var $64=FUNCTION_TABLE[$61]($62, $63);
      if ($64) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $66=$27;
      var $67=$28;
      $14=$66;
      $15=$67;
      var $68=$14;
      $13=$68;
      var $69=$13;
      var $70=$__t_i2;
      var $71=$69;
      assert(12 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];HEAP32[((($70)+(8))>>2)]=HEAP32[((($71)+(8))>>2)];
      var $72=$14;
      var $73=$15;
      $11=$73;
      var $74=$11;
      var $75=$72;
      var $76=$74;
      assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
      var $77=$15;
      $12=$__t_i2;
      var $78=$12;
      var $79=$77;
      var $80=$78;
      assert(12 % 1 === 0);HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];HEAP32[((($79)+(8))>>2)]=HEAP32[((($80)+(8))>>2)];
      $__r=2;
      label = 6; break;
    case 6: 
      var $82=$__r;
      $26=$82;
      label = 12; break;
    case 7: 
      var $84=$30;
      var $85=HEAP32[(($84)>>2)];
      var $86=$29;
      var $87=$28;
      var $88=FUNCTION_TABLE[$85]($86, $87);
      if ($88) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $90=$27;
      var $91=$29;
      $4=$90;
      $5=$91;
      var $92=$4;
      $3=$92;
      var $93=$3;
      var $94=$__t_i4;
      var $95=$93;
      assert(12 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($95)+(4))>>2)];HEAP32[((($94)+(8))>>2)]=HEAP32[((($95)+(8))>>2)];
      var $96=$4;
      var $97=$5;
      $1=$97;
      var $98=$1;
      var $99=$96;
      var $100=$98;
      assert(12 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($100)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($100)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($100)+(8))>>2)];
      var $101=$5;
      $2=$__t_i4;
      var $102=$2;
      var $103=$101;
      var $104=$102;
      assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($104)+(8))>>2)];
      $__r=1;
      var $105=$__r;
      $26=$105;
      label = 12; break;
    case 9: 
      var $107=$27;
      var $108=$28;
      $9=$107;
      $10=$108;
      var $109=$9;
      $8=$109;
      var $110=$8;
      var $111=$__t_i3;
      var $112=$110;
      assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($112)+(8))>>2)];
      var $113=$9;
      var $114=$10;
      $6=$114;
      var $115=$6;
      var $116=$113;
      var $117=$115;
      assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($117)+(8))>>2)];
      var $118=$10;
      $7=$__t_i3;
      var $119=$7;
      var $120=$118;
      var $121=$119;
      assert(12 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($121)+(4))>>2)];HEAP32[((($120)+(8))>>2)]=HEAP32[((($121)+(8))>>2)];
      $__r=1;
      var $122=$30;
      var $123=HEAP32[(($122)>>2)];
      var $124=$29;
      var $125=$28;
      var $126=FUNCTION_TABLE[$123]($124, $125);
      if ($126) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $128=$28;
      var $129=$29;
      $19=$128;
      $20=$129;
      var $130=$19;
      $18=$130;
      var $131=$18;
      var $132=$__t_i1;
      var $133=$131;
      assert(12 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];HEAP32[((($132)+(8))>>2)]=HEAP32[((($133)+(8))>>2)];
      var $134=$19;
      var $135=$20;
      $16=$135;
      var $136=$16;
      var $137=$134;
      var $138=$136;
      assert(12 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[((($137)+(4))>>2)]=HEAP32[((($138)+(4))>>2)];HEAP32[((($137)+(8))>>2)]=HEAP32[((($138)+(8))>>2)];
      var $139=$20;
      $17=$__t_i1;
      var $140=$17;
      var $141=$139;
      var $142=$140;
      assert(12 % 1 === 0);HEAP32[(($141)>>2)]=HEAP32[(($142)>>2)];HEAP32[((($141)+(4))>>2)]=HEAP32[((($142)+(4))>>2)];HEAP32[((($141)+(8))>>2)]=HEAP32[((($142)+(8))>>2)];
      $__r=2;
      label = 11; break;
    case 11: 
      var $144=$__r;
      $26=$144;
      label = 12; break;
    case 12: 
      var $146=$26;
      STACKTOP = __stackBase__;
      return $146;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__t_i2=__stackBase__;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $__t_i1=(__stackBase__)+(12);
      var $11;
      var $12;
      var $13;
      var $14;
      var $15;
      var $__t_i=(__stackBase__)+(24);
      var $16;
      var $17;
      var $18;
      var $19;
      var $20;
      var $__r;
      $16=$__x1;
      $17=$__x2;
      $18=$__x3;
      $19=$__x4;
      $20=$__c;
      var $21=$16;
      var $22=$17;
      var $23=$18;
      var $24=$20;
      var $25=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($21, $22, $23, $24);
      $__r=$25;
      var $26=$20;
      var $27=HEAP32[(($26)>>2)];
      var $28=$19;
      var $29=$18;
      var $30=FUNCTION_TABLE[$27]($28, $29);
      if ($30) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $32=$18;
      var $33=$19;
      $14=$32;
      $15=$33;
      var $34=$14;
      $13=$34;
      var $35=$13;
      var $36=$__t_i;
      var $37=$35;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      var $38=$14;
      var $39=$15;
      $11=$39;
      var $40=$11;
      var $41=$38;
      var $42=$40;
      assert(12 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];
      var $43=$15;
      $12=$__t_i;
      var $44=$12;
      var $45=$43;
      var $46=$44;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      var $47=$__r;
      var $48=((($47)+(1))|0);
      $__r=$48;
      var $49=$20;
      var $50=HEAP32[(($49)>>2)];
      var $51=$18;
      var $52=$17;
      var $53=FUNCTION_TABLE[$50]($51, $52);
      if ($53) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $55=$17;
      var $56=$18;
      $4=$55;
      $5=$56;
      var $57=$4;
      $3=$57;
      var $58=$3;
      var $59=$__t_i2;
      var $60=$58;
      assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];
      var $61=$4;
      var $62=$5;
      $1=$62;
      var $63=$1;
      var $64=$61;
      var $65=$63;
      assert(12 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($64)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
      var $66=$5;
      $2=$__t_i2;
      var $67=$2;
      var $68=$66;
      var $69=$67;
      assert(12 % 1 === 0);HEAP32[(($68)>>2)]=HEAP32[(($69)>>2)];HEAP32[((($68)+(4))>>2)]=HEAP32[((($69)+(4))>>2)];HEAP32[((($68)+(8))>>2)]=HEAP32[((($69)+(8))>>2)];
      var $70=$__r;
      var $71=((($70)+(1))|0);
      $__r=$71;
      var $72=$20;
      var $73=HEAP32[(($72)>>2)];
      var $74=$17;
      var $75=$16;
      var $76=FUNCTION_TABLE[$73]($74, $75);
      if ($76) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $78=$16;
      var $79=$17;
      $9=$78;
      $10=$79;
      var $80=$9;
      $8=$80;
      var $81=$8;
      var $82=$__t_i1;
      var $83=$81;
      assert(12 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($83)+(8))>>2)];
      var $84=$9;
      var $85=$10;
      $6=$85;
      var $86=$6;
      var $87=$84;
      var $88=$86;
      assert(12 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];HEAP32[((($87)+(8))>>2)]=HEAP32[((($88)+(8))>>2)];
      var $89=$10;
      $7=$__t_i1;
      var $90=$7;
      var $91=$89;
      var $92=$90;
      assert(12 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($91)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($91)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
      var $93=$__r;
      var $94=((($93)+(1))|0);
      $__r=$94;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $98=$__r;
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__x5, $__c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__t_i3=__stackBase__;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $__t_i2=(__stackBase__)+(12);
      var $11;
      var $12;
      var $13;
      var $14;
      var $15;
      var $__t_i1=(__stackBase__)+(24);
      var $16;
      var $17;
      var $18;
      var $19;
      var $20;
      var $__t_i=(__stackBase__)+(36);
      var $21;
      var $22;
      var $23;
      var $24;
      var $25;
      var $26;
      var $__r;
      $21=$__x1;
      $22=$__x2;
      $23=$__x3;
      $24=$__x4;
      $25=$__x5;
      $26=$__c;
      var $27=$21;
      var $28=$22;
      var $29=$23;
      var $30=$24;
      var $31=$26;
      var $32=__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($27, $28, $29, $30, $31);
      $__r=$32;
      var $33=$26;
      var $34=HEAP32[(($33)>>2)];
      var $35=$25;
      var $36=$24;
      var $37=FUNCTION_TABLE[$34]($35, $36);
      if ($37) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $39=$24;
      var $40=$25;
      $19=$39;
      $20=$40;
      var $41=$19;
      $18=$41;
      var $42=$18;
      var $43=$__t_i;
      var $44=$42;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      var $45=$19;
      var $46=$20;
      $16=$46;
      var $47=$16;
      var $48=$45;
      var $49=$47;
      assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
      var $50=$20;
      $17=$__t_i;
      var $51=$17;
      var $52=$50;
      var $53=$51;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      var $54=$__r;
      var $55=((($54)+(1))|0);
      $__r=$55;
      var $56=$26;
      var $57=HEAP32[(($56)>>2)];
      var $58=$24;
      var $59=$23;
      var $60=FUNCTION_TABLE[$57]($58, $59);
      if ($60) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $62=$23;
      var $63=$24;
      $9=$62;
      $10=$63;
      var $64=$9;
      $8=$64;
      var $65=$8;
      var $66=$__t_i2;
      var $67=$65;
      assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
      var $68=$9;
      var $69=$10;
      $6=$69;
      var $70=$6;
      var $71=$68;
      var $72=$70;
      assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
      var $73=$10;
      $7=$__t_i2;
      var $74=$7;
      var $75=$73;
      var $76=$74;
      assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
      var $77=$__r;
      var $78=((($77)+(1))|0);
      $__r=$78;
      var $79=$26;
      var $80=HEAP32[(($79)>>2)];
      var $81=$23;
      var $82=$22;
      var $83=FUNCTION_TABLE[$80]($81, $82);
      if ($83) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $85=$22;
      var $86=$23;
      $4=$85;
      $5=$86;
      var $87=$4;
      $3=$87;
      var $88=$3;
      var $89=$__t_i3;
      var $90=$88;
      assert(12 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];HEAP32[((($89)+(8))>>2)]=HEAP32[((($90)+(8))>>2)];
      var $91=$4;
      var $92=$5;
      $1=$92;
      var $93=$1;
      var $94=$91;
      var $95=$93;
      assert(12 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($95)+(4))>>2)];HEAP32[((($94)+(8))>>2)]=HEAP32[((($95)+(8))>>2)];
      var $96=$5;
      $2=$__t_i3;
      var $97=$2;
      var $98=$96;
      var $99=$97;
      assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($99)+(8))>>2)];
      var $100=$__r;
      var $101=((($100)+(1))|0);
      $__r=$101;
      var $102=$26;
      var $103=HEAP32[(($102)>>2)];
      var $104=$22;
      var $105=$21;
      var $106=FUNCTION_TABLE[$103]($104, $105);
      if ($106) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $108=$21;
      var $109=$22;
      $14=$108;
      $15=$109;
      var $110=$14;
      $13=$110;
      var $111=$13;
      var $112=$__t_i1;
      var $113=$111;
      assert(12 % 1 === 0);HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($112)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];HEAP32[((($112)+(8))>>2)]=HEAP32[((($113)+(8))>>2)];
      var $114=$14;
      var $115=$15;
      $11=$115;
      var $116=$11;
      var $117=$114;
      var $118=$116;
      assert(12 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];HEAP32[((($117)+(8))>>2)]=HEAP32[((($118)+(8))>>2)];
      var $119=$15;
      $12=$__t_i1;
      var $120=$12;
      var $121=$119;
      var $122=$120;
      assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
      var $123=$__r;
      var $124=((($123)+(1))|0);
      $__r=$124;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $129=$__r;
      STACKTOP = __stackBase__;
      return $129;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $__j;
      var $__i;
      var $__t=__stackBase__;
      var $__k;
      $4=$__first;
      $5=$__last;
      $6=$__comp;
      var $7=$4;
      var $8=(($7+24)|0);
      $__j=$8;
      var $9=$4;
      var $10=$4;
      var $11=(($10+12)|0);
      var $12=$__j;
      var $13=$6;
      var $14=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($9, $11, $12, $13);
      var $15=$__j;
      var $16=(($15+12)|0);
      $__i=$16;
      label = 2; break;
    case 2: 
      var $18=$__i;
      var $19=$5;
      var $20=(($18)|(0))!=(($19)|(0));
      if ($20) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $22=$6;
      var $23=HEAP32[(($22)>>2)];
      var $24=$__i;
      var $25=$__j;
      var $26=FUNCTION_TABLE[$23]($24, $25);
      if ($26) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $28=$__i;
      $3=$28;
      var $29=$3;
      var $30=$__t;
      var $31=$29;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      var $32=$__j;
      $__k=$32;
      var $33=$__i;
      $__j=$33;
      label = 5; break;
    case 5: 
      var $35=$__j;
      var $36=$__k;
      $1=$36;
      var $37=$1;
      var $38=$35;
      var $39=$37;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      var $40=$__k;
      $__j=$40;
      label = 6; break;
    case 6: 
      var $42=$__j;
      var $43=$4;
      var $44=(($42)|(0))!=(($43)|(0));
      if ($44) { label = 7; break; } else { var $52 = 0;label = 8; break; }
    case 7: 
      var $46=$6;
      var $47=HEAP32[(($46)>>2)];
      var $48=$__k;
      var $49=((($48)-(12))|0);
      $__k=$49;
      var $50=FUNCTION_TABLE[$47]($__t, $49);
      var $52 = $50;label = 8; break;
    case 8: 
      var $52;
      if ($52) { label = 5; break; } else { label = 9; break; }
    case 9: 
      var $54=$__j;
      $2=$__t;
      var $55=$2;
      var $56=$54;
      var $57=$55;
      assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
      label = 10; break;
    case 10: 
      var $59=$__i;
      $__j=$59;
      label = 11; break;
    case 11: 
      var $61=$__i;
      var $62=(($61+12)|0);
      $__i=$62;
      label = 2; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first, $__last, $__comp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $__t_i=__stackBase__;
      var $9;
      var $10;
      var $11;
      var $12;
      var $__j;
      var $__limit;
      var $__count;
      var $__i;
      var $__t=(__stackBase__)+(12);
      var $__k;
      $10=$__first;
      $11=$__last;
      $12=$__comp;
      var $13=$11;
      var $14=$10;
      var $15=$13;
      var $16=$14;
      var $17=((($15)-($16))|0);
      var $18=((((($17)|(0)))/(12))&-1);
      if ((($18)|(0))==0 | (($18)|(0))==1) {
        label = 2; break;
      }
      else if ((($18)|(0))==2) {
        label = 3; break;
      }
      else if ((($18)|(0))==3) {
        label = 6; break;
      }
      else if ((($18)|(0))==4) {
        label = 7; break;
      }
      else if ((($18)|(0))==5) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      $9=1;
      label = 23; break;
    case 3: 
      var $21=$12;
      var $22=HEAP32[(($21)>>2)];
      var $23=$11;
      var $24=((($23)-(12))|0);
      $11=$24;
      var $25=$10;
      var $26=FUNCTION_TABLE[$22]($24, $25);
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$10;
      var $29=$11;
      $7=$28;
      $8=$29;
      var $30=$7;
      $6=$30;
      var $31=$6;
      var $32=$__t_i;
      var $33=$31;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      var $34=$7;
      var $35=$8;
      $4=$35;
      var $36=$4;
      var $37=$34;
      var $38=$36;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      var $39=$8;
      $5=$__t_i;
      var $40=$5;
      var $41=$39;
      var $42=$40;
      assert(12 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];
      label = 5; break;
    case 5: 
      $9=1;
      label = 23; break;
    case 6: 
      var $45=$10;
      var $46=$10;
      var $47=(($46+12)|0);
      var $48=$11;
      var $49=((($48)-(12))|0);
      $11=$49;
      var $50=$12;
      var $51=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($45, $47, $49, $50);
      $9=1;
      label = 23; break;
    case 7: 
      var $53=$10;
      var $54=$10;
      var $55=(($54+12)|0);
      var $56=$10;
      var $57=(($56+24)|0);
      var $58=$11;
      var $59=((($58)-(12))|0);
      $11=$59;
      var $60=$12;
      var $61=__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($53, $55, $57, $59, $60);
      $9=1;
      label = 23; break;
    case 8: 
      var $63=$10;
      var $64=$10;
      var $65=(($64+12)|0);
      var $66=$10;
      var $67=(($66+24)|0);
      var $68=$10;
      var $69=(($68+36)|0);
      var $70=$11;
      var $71=((($70)-(12))|0);
      $11=$71;
      var $72=$12;
      var $73=__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($63, $65, $67, $69, $71, $72);
      $9=1;
      label = 23; break;
    case 9: 
      var $75=$10;
      var $76=(($75+24)|0);
      $__j=$76;
      var $77=$10;
      var $78=$10;
      var $79=(($78+12)|0);
      var $80=$__j;
      var $81=$12;
      var $82=__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($77, $79, $80, $81);
      $__limit=8;
      $__count=0;
      var $83=$__j;
      var $84=(($83+12)|0);
      $__i=$84;
      label = 10; break;
    case 10: 
      var $86=$__i;
      var $87=$11;
      var $88=(($86)|(0))!=(($87)|(0));
      if ($88) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $90=$12;
      var $91=HEAP32[(($90)>>2)];
      var $92=$__i;
      var $93=$__j;
      var $94=FUNCTION_TABLE[$91]($92, $93);
      if ($94) { label = 12; break; } else { label = 20; break; }
    case 12: 
      var $96=$__i;
      $2=$96;
      var $97=$2;
      var $98=$__t;
      var $99=$97;
      assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($99)+(8))>>2)];
      var $100=$__j;
      $__k=$100;
      var $101=$__i;
      $__j=$101;
      label = 13; break;
    case 13: 
      var $103=$__j;
      var $104=$__k;
      $1=$104;
      var $105=$1;
      var $106=$103;
      var $107=$105;
      assert(12 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];HEAP32[((($106)+(8))>>2)]=HEAP32[((($107)+(8))>>2)];
      var $108=$__k;
      $__j=$108;
      label = 14; break;
    case 14: 
      var $110=$__j;
      var $111=$10;
      var $112=(($110)|(0))!=(($111)|(0));
      if ($112) { label = 15; break; } else { var $120 = 0;label = 16; break; }
    case 15: 
      var $114=$12;
      var $115=HEAP32[(($114)>>2)];
      var $116=$__k;
      var $117=((($116)-(12))|0);
      $__k=$117;
      var $118=FUNCTION_TABLE[$115]($__t, $117);
      var $120 = $118;label = 16; break;
    case 16: 
      var $120;
      if ($120) { label = 13; break; } else { label = 17; break; }
    case 17: 
      var $122=$__j;
      $3=$__t;
      var $123=$3;
      var $124=$122;
      var $125=$123;
      assert(12 % 1 === 0);HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($124)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];HEAP32[((($124)+(8))>>2)]=HEAP32[((($125)+(8))>>2)];
      var $126=$__count;
      var $127=((($126)+(1))|0);
      $__count=$127;
      var $128=(($127)|(0))==8;
      if ($128) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $130=$__i;
      var $131=(($130+12)|0);
      $__i=$131;
      var $132=$11;
      var $133=(($131)|(0))==(($132)|(0));
      $9=$133;
      label = 23; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $136=$__i;
      $__j=$136;
      label = 21; break;
    case 21: 
      var $138=$__i;
      var $139=(($138+12)|0);
      $__i=$139;
      label = 10; break;
    case 22: 
      $9=1;
      label = 23; break;
    case 23: 
      var $142=$9;
      STACKTOP = __stackBase__;
      return $142;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2GrowableStackIiLi256EEC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2GrowableStackIiLi256EEC2Ev($2);
  return;
}
function __ZN17b2ContactListenerD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN17b2ContactListener12BeginContactEP9b2Contact($this, $contact) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$contact;
  var $3=$1;
  return;
}
function __ZN17b2ContactListener10EndContactEP9b2Contact($this, $contact) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$contact;
  var $3=$1;
  return;
}
function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this, $contact, $oldManifold) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$contact;
  $3=$oldManifold;
  var $4=$1;
  return;
}
function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $contact, $impulse) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$contact;
  $3=$impulse;
  var $4=$1;
  return;
}
function __ZN15b2ContactFilterD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN17b2ContactListenerC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((5264716)|0);
  return;
}
function __ZN15b2ContactFilterC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((5265008)|0);
  return;
}
function __ZN15b2GrowableStackIiLi256EE8GetCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+1028)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN15b2GrowableStackIiLi256EEC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=(($3)|0);
  var $5=(($2)|0);
  HEAP32[(($5)>>2)]=$4;
  var $6=(($2+1028)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+1032)|0);
  HEAP32[(($7)>>2)]=256;
  return;
}
function __ZN9b2Contact16FlagForFilteringEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 | 8;
  HEAP32[(($3)>>2)]=$5;
  return;
}
function __ZN6b2Body8GetWorldEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+88)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN15b2GrowableStackIiLi256EE4PushERKi($this, $element) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $old;
      $1=$this;
      $2=$element;
      var $3=$1;
      var $4=(($3+1028)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+1032)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0))==(($7)|(0));
      if ($8) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $10=(($3)|0);
      var $11=HEAP32[(($10)>>2)];
      $old=$11;
      var $12=(($3+1032)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=($13<<1);
      HEAP32[(($12)>>2)]=$14;
      var $15=(($3+1032)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=($16<<2);
      var $18=__Z7b2Alloci($17);
      var $19=$18;
      var $20=(($3)|0);
      HEAP32[(($20)>>2)]=$19;
      var $21=(($3)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$old;
      var $25=$24;
      var $26=(($3+1028)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=($27<<2);
      assert($28 % 1 === 0);_memcpy($23, $25, $28);
      var $29=$old;
      var $30=(($3+4)|0);
      var $31=(($30)|0);
      var $32=(($29)|(0))!=(($31)|(0));
      if ($32) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $34=$old;
      var $35=$34;
      __Z6b2FreePv($35);
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $38=$2;
      var $39=HEAP32[(($38)>>2)];
      var $40=(($3+1028)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($3)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+($41<<2))|0);
      HEAP32[(($44)>>2)]=$39;
      var $45=(($3+1028)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z13b2TestOverlapRK6b2AABBS1_($a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $d1=__stackBase__;
      var $d2=(__stackBase__)+(8);
      var $4=(__stackBase__)+(16);
      var $5=(__stackBase__)+(24);
      $2=$a;
      $3=$b;
      __ZN6b2Vec2C1Ev($d1);
      __ZN6b2Vec2C1Ev($d2);
      var $6=$3;
      var $7=(($6)|0);
      var $8=$2;
      var $9=(($8+8)|0);
      __ZmiRK6b2Vec2S1_($4, $7, $9);
      var $10=$d1;
      var $11=$4;
      assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
      var $12=$2;
      var $13=(($12)|0);
      var $14=$3;
      var $15=(($14+8)|0);
      __ZmiRK6b2Vec2S1_($5, $13, $15);
      var $16=$d2;
      var $17=$5;
      assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
      var $18=(($d1)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$19 > 0;
      if ($20) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $22=(($d1+4)|0);
      var $23=HEAPF32[(($22)>>2)];
      var $24=$23 > 0;
      if ($24) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 8; break;
    case 4: 
      var $27=(($d2)|0);
      var $28=HEAPF32[(($27)>>2)];
      var $29=$28 > 0;
      if ($29) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $31=(($d2+4)|0);
      var $32=HEAPF32[(($31)>>2)];
      var $33=$32 > 0;
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 8; break;
    case 7: 
      $1=1;
      label = 8; break;
    case 8: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2GrowableStackIiLi256EED1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2GrowableStackIiLi256EED2Ev($2);
  return;
}
function __ZN15b2GrowableStackIiLi256EED2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($2+4)|0);
      var $6=(($5)|0);
      var $7=(($4)|(0))!=(($6)|(0));
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=(($2)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      __Z6b2FreePv($11);
      var $12=(($2)|0);
      HEAP32[(($12)>>2)]=0;
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN17b2ContactListenerD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN17b2ContactListenerD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __GLOBAL__I_a120() {
  var label = 0;
  ___cxx_global_var_init115();
  ___cxx_global_var_init1();
  return;
}
function __ZN9b2FixtureC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+32)|0);
  __ZN8b2FilterC1Ev($3);
  var $4=(($2+40)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+4)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+24)|0);
  HEAP32[(($7)>>2)]=0;
  var $8=(($2+28)|0);
  HEAP32[(($8)>>2)]=0;
  var $9=(($2+12)|0);
  HEAP32[(($9)>>2)]=0;
  var $10=(($2)|0);
  HEAPF32[(($10)>>2)]=0;
  return;
}
function __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($this, $allocator, $body, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $childCount;
      var $i;
      $1=$this;
      $2=$allocator;
      $3=$body;
      $4=$def;
      var $5=$1;
      var $6=$4;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5+40)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$4;
      var $11=(($10+8)|0);
      var $12=HEAPF32[(($11)>>2)];
      var $13=(($5+16)|0);
      HEAPF32[(($13)>>2)]=$12;
      var $14=$4;
      var $15=(($14+12)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=(($5+20)|0);
      HEAPF32[(($17)>>2)]=$16;
      var $18=$3;
      var $19=(($5+8)|0);
      HEAP32[(($19)>>2)]=$18;
      var $20=(($5+4)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=(($5+32)|0);
      var $22=$4;
      var $23=(($22+22)|0);
      var $24=$21;
      var $25=$23;
      assert(6 % 1 === 0);HEAP16[(($24)>>1)]=HEAP16[(($25)>>1)];HEAP16[((($24)+(2))>>1)]=HEAP16[((($25)+(2))>>1)];HEAP16[((($24)+(4))>>1)]=HEAP16[((($25)+(4))>>1)];
      var $26=$4;
      var $27=(($26+20)|0);
      var $28=HEAP8[($27)];
      var $29=(($28) & 1);
      var $30=(($5+38)|0);
      var $31=(($29)&(1));
      HEAP8[($30)]=$31;
      var $32=$4;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=FUNCTION_TABLE[$38]($34, $39);
      var $41=(($5+12)|0);
      HEAP32[(($41)>>2)]=$40;
      var $42=(($5+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=FUNCTION_TABLE[$47]($43);
      $childCount=$48;
      var $49=$2;
      var $50=$childCount;
      var $51=((($50)*(28))&-1);
      var $52=__ZN16b2BlockAllocator8AllocateEi($49, $51);
      var $53=$52;
      var $54=(($5+24)|0);
      HEAP32[(($54)>>2)]=$53;
      $i=0;
      label = 2; break;
    case 2: 
      var $56=$i;
      var $57=$childCount;
      var $58=(($56)|(0)) < (($57)|(0));
      if ($58) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $60=$i;
      var $61=(($5+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+((($60)*(28))&-1))|0);
      var $64=(($63+16)|0);
      HEAP32[(($64)>>2)]=0;
      var $65=$i;
      var $66=(($5+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+((($65)*(28))&-1))|0);
      var $69=(($68+24)|0);
      HEAP32[(($69)>>2)]=-1;
      label = 4; break;
    case 4: 
      var $71=$i;
      var $72=((($71)+(1))|0);
      $i=$72;
      label = 2; break;
    case 5: 
      var $74=(($5+28)|0);
      HEAP32[(($74)>>2)]=0;
      var $75=$4;
      var $76=(($75+16)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=(($5)|0);
      HEAPF32[(($78)>>2)]=$77;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($this, $broadPhase) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $proxy;
      $1=$this;
      $2=$broadPhase;
      var $3=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=(($3+28)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0)) < (($7)|(0));
      if ($8) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $10=(($3+24)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$i;
      var $13=(($11+((($12)*(28))&-1))|0);
      $proxy=$13;
      var $14=$2;
      var $15=$proxy;
      var $16=(($15+24)|0);
      var $17=HEAP32[(($16)>>2)];
      __ZN12b2BroadPhase12DestroyProxyEi($14, $17);
      var $18=$proxy;
      var $19=(($18+24)|0);
      HEAP32[(($19)>>2)]=-1;
      label = 4; break;
    case 4: 
      var $21=$i;
      var $22=((($21)+(1))|0);
      $i=$22;
      label = 2; break;
    case 5: 
      var $24=(($3+28)|0);
      HEAP32[(($24)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this, $broadPhase, $transform1, $transform2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $proxy;
      var $aabb1=__stackBase__;
      var $aabb2=(__stackBase__)+(16);
      var $displacement=(__stackBase__)+(32);
      $1=$this;
      $2=$broadPhase;
      $3=$transform1;
      $4=$transform2;
      var $5=$1;
      var $6=(($5+28)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 7; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $12=$i;
      var $13=(($5+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|(0)) < (($14)|(0));
      if ($15) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $17=(($5+24)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$i;
      var $20=(($18+((($19)*(28))&-1))|0);
      $proxy=$20;
      __ZN6b2AABBC1Ev($aabb1);
      __ZN6b2AABBC1Ev($aabb2);
      var $21=(($5+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$3;
      var $28=$proxy;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$26]($22, $aabb1, $27, $30);
      var $31=(($5+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+24)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$4;
      var $38=$proxy;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      FUNCTION_TABLE[$36]($32, $aabb2, $37, $40);
      var $41=$proxy;
      var $42=(($41)|0);
      __ZN6b2AABB7CombineERKS_S1_($42, $aabb1, $aabb2);
      var $43=$4;
      var $44=(($43)|0);
      var $45=$3;
      var $46=(($45)|0);
      __ZmiRK6b2Vec2S1_($displacement, $44, $46);
      var $47=$2;
      var $48=$proxy;
      var $49=(($48+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$proxy;
      var $52=(($51)|0);
      __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($47, $50, $52, $displacement);
      label = 6; break;
    case 6: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      label = 4; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Fixture13SetFilterDataERK8b2Filter($this, $filter) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$filter;
  var $3=$1;
  var $4=(($3+32)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(6 % 1 === 0);HEAP16[(($6)>>1)]=HEAP16[(($7)>>1)];HEAP16[((($6)+(2))>>1)]=HEAP16[((($7)+(2))>>1)];HEAP16[((($6)+(4))>>1)]=HEAP16[((($7)+(4))>>1)];
  __ZN9b2Fixture8RefilterEv($3);
  return;
}
function __ZN9b2Fixture8RefilterEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $edge;
      var $contact;
      var $fixtureA;
      var $fixtureB;
      var $world;
      var $broadPhase;
      var $i;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 15; break;
    case 3: 
      var $8=(($2+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=__ZN6b2Body14GetContactListEv($9);
      $edge=$10;
      label = 4; break;
    case 4: 
      var $12=$edge;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $15=$edge;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      $contact=$17;
      var $18=$contact;
      var $19=__ZN9b2Contact11GetFixtureAEv($18);
      $fixtureA=$19;
      var $20=$contact;
      var $21=__ZN9b2Contact11GetFixtureBEv($20);
      $fixtureB=$21;
      var $22=$fixtureA;
      var $23=(($22)|(0))==(($2)|(0));
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $25=$fixtureB;
      var $26=(($25)|(0))==(($2)|(0));
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$contact;
      __ZN9b2Contact16FlagForFilteringEv($28);
      label = 8; break;
    case 8: 
      var $30=$edge;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      $edge=$32;
      label = 4; break;
    case 9: 
      var $34=(($2+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=__ZN6b2Body8GetWorldEv($35);
      $world=$36;
      var $37=$world;
      var $38=(($37)|(0))==0;
      if ($38) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 15; break;
    case 11: 
      var $41=$world;
      var $42=(($41+102872)|0);
      var $43=(($42)|0);
      $broadPhase=$43;
      $i=0;
      label = 12; break;
    case 12: 
      var $45=$i;
      var $46=(($2+28)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($45)|(0)) < (($47)|(0));
      if ($48) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $50=$broadPhase;
      var $51=$i;
      var $52=(($2+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+((($51)*(28))&-1))|0);
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      __ZN12b2BroadPhase10TouchProxyEi($50, $56);
      label = 14; break;
    case 14: 
      var $58=$i;
      var $59=((($58)+(1))|0);
      $i=$59;
      label = 12; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Fixture9SetSensorEb($this, $sensor) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($sensor)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&(1));
      var $8=(($4+38)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&(1));
      var $12=(($7)|(0))!=(($11)|(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=(($4+8)|0);
      var $15=HEAP32[(($14)>>2)];
      __ZN6b2Body8SetAwakeEb($15, 1);
      var $16=$2;
      var $17=(($16) & 1);
      var $18=(($4+38)|0);
      var $19=(($17)&(1));
      HEAP8[($18)]=$19;
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2GrowableStackIiLi256EE3PopEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2+1028)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0)) > 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5251608)|0), 69, ((5262660)|0), ((5250464)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $10=(($2+1028)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)-(1))|0);
      HEAP32[(($10)>>2)]=$12;
      var $13=(($2+1028)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($2)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+($14<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Fixture7DestroyEP16b2BlockAllocator($this, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $childCount;
      var $s;
      var $s1;
      var $s2;
      var $s3;
      $1=$this;
      $2=$allocator;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5257128)|0), 72, ((5260000)|0), ((5257564)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $11=(($3+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=FUNCTION_TABLE[$16]($12);
      $childCount=$17;
      var $18=$2;
      var $19=(($3+24)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=$childCount;
      var $23=((($22)*(28))&-1);
      __ZN16b2BlockAllocator4FreeEPvi($18, $21, $23);
      var $24=(($3+24)|0);
      HEAP32[(($24)>>2)]=0;
      var $25=(($3+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      if ((($28)|(0))==0) {
        label = 5; break;
      }
      else if ((($28)|(0))==1) {
        label = 6; break;
      }
      else if ((($28)|(0))==2) {
        label = 7; break;
      }
      else if ((($28)|(0))==3) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 5: 
      var $30=(($3+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      $s=$32;
      var $33=$s;
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      FUNCTION_TABLE[$37]($33);
      var $38=$2;
      var $39=$s;
      var $40=$39;
      __ZN16b2BlockAllocator4FreeEPvi($38, $40, 20);
      label = 10; break;
    case 6: 
      var $42=(($3+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      $s1=$44;
      var $45=$s1;
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      FUNCTION_TABLE[$49]($45);
      var $50=$2;
      var $51=$s1;
      var $52=$51;
      __ZN16b2BlockAllocator4FreeEPvi($50, $52, 48);
      label = 10; break;
    case 7: 
      var $54=(($3+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55;
      $s2=$56;
      var $57=$s2;
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$61]($57);
      var $62=$2;
      var $63=$s2;
      var $64=$63;
      __ZN16b2BlockAllocator4FreeEPvi($62, $64, 152);
      label = 10; break;
    case 8: 
      var $66=(($3+12)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67;
      $s3=$68;
      var $69=$s3;
      var $70=$69;
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      FUNCTION_TABLE[$73]($69);
      var $74=$2;
      var $75=$s3;
      var $76=$75;
      __ZN16b2BlockAllocator4FreeEPvi($74, $76, 40);
      label = 10; break;
    case 9: 
      ___assert_func(((5257128)|0), 115, ((5260000)|0), ((5254368)|0));
      throw "Reached an unreachable!"
    case 10: 
      var $79=(($3+12)|0);
      HEAP32[(($79)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this, $broadPhase, $xf) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $proxy;
      $1=$this;
      $2=$broadPhase;
      $3=$xf;
      var $4=$1;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5257128)|0), 124, ((5260044)|0), ((5257564)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $12=(($4+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=FUNCTION_TABLE[$17]($13);
      var $19=(($4+28)|0);
      HEAP32[(($19)>>2)]=$18;
      $i=0;
      label = 5; break;
    case 5: 
      var $21=$i;
      var $22=(($4+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($21)|(0)) < (($23)|(0));
      if ($24) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $26=(($4+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$i;
      var $29=(($27+((($28)*(28))&-1))|0);
      $proxy=$29;
      var $30=(($4+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+24)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$proxy;
      var $37=(($36)|0);
      var $38=$3;
      var $39=$i;
      FUNCTION_TABLE[$35]($31, $37, $38, $39);
      var $40=$2;
      var $41=$proxy;
      var $42=(($41)|0);
      var $43=$proxy;
      var $44=$43;
      var $45=__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($40, $42, $44);
      var $46=$proxy;
      var $47=(($46+24)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$proxy;
      var $49=(($48+16)|0);
      HEAP32[(($49)>>2)]=$4;
      var $50=$i;
      var $51=$proxy;
      var $52=(($51+20)|0);
      HEAP32[(($52)>>2)]=$50;
      label = 7; break;
    case 7: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      label = 5; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Fixture4DumpEi($this, $bodyIndex) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $s;
      var $s1;
      var $s2;
      var $i;
      var $s3;
      var $i4;
      $1=$this;
      $2=$bodyIndex;
      var $3=$1;
      __Z5b2LogPKcz(((5251580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=(($3+16)|0);
      var $5=HEAPF32[(($4)>>2)];
      var $6=$5;
      __Z5b2LogPKcz(((5250436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $7=(($3+20)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=$8;
      __Z5b2LogPKcz(((5249644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$9,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $10=(($3)|0);
      var $11=HEAPF32[(($10)>>2)];
      var $12=$11;
      __Z5b2LogPKcz(((5248884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $13=(($3+38)|0);
      var $14=HEAP8[($13)];
      var $15=(($14) & 1);
      var $16=(($15)&(1));
      __Z5b2LogPKcz(((5248344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $17=(($3+32)|0);
      var $18=(($17)|0);
      var $19=HEAP16[(($18)>>1)];
      var $20=(($19)&(65535));
      __Z5b2LogPKcz(((5247800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$20,tempInt));
      var $21=(($3+32)|0);
      var $22=(($21+2)|0);
      var $23=HEAP16[(($22)>>1)];
      var $24=(($23)&(65535));
      __Z5b2LogPKcz(((5247404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$24,tempInt));
      var $25=(($3+32)|0);
      var $26=(($25+4)|0);
      var $27=HEAP16[(($26)>>1)];
      var $28=(($27 << 16) >> 16);
      __Z5b2LogPKcz(((5257976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$28,tempInt));
      var $29=(($3+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      if ((($32)|(0))==0) {
        label = 2; break;
      }
      else if ((($32)|(0))==1) {
        label = 3; break;
      }
      else if ((($32)|(0))==2) {
        label = 4; break;
      }
      else if ((($32)|(0))==3) {
        label = 9; break;
      }
      else {
      label = 14; break;
      }
    case 2: 
      var $34=(($3+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      $s=$36;
      __Z5b2LogPKcz(((5257644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $37=$s;
      var $38=$37;
      var $39=(($38+8)|0);
      var $40=HEAPF32[(($39)>>2)];
      var $41=$40;
      __Z5b2LogPKcz(((5257052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$41,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $42=$s;
      var $43=(($42+12)|0);
      var $44=(($43)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=$45;
      var $47=$s;
      var $48=(($47+12)|0);
      var $49=(($48+4)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=$50;
      __Z5b2LogPKcz(((5256348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$46,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 15; break;
    case 3: 
      var $53=(($3+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      $s1=$55;
      __Z5b2LogPKcz(((5255988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $56=$s1;
      var $57=$56;
      var $58=(($57+8)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=$59;
      __Z5b2LogPKcz(((5257052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$60,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $61=$s1;
      var $62=(($61+28)|0);
      var $63=(($62)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=$64;
      var $66=$s1;
      var $67=(($66+28)|0);
      var $68=(($67+4)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=$69;
      __Z5b2LogPKcz(((5255684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$65,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$70,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $71=$s1;
      var $72=(($71+12)|0);
      var $73=(($72)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$74;
      var $76=$s1;
      var $77=(($76+12)|0);
      var $78=(($77+4)|0);
      var $79=HEAPF32[(($78)>>2)];
      var $80=$79;
      __Z5b2LogPKcz(((5255432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$75,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$80,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $81=$s1;
      var $82=(($81+20)|0);
      var $83=(($82)|0);
      var $84=HEAPF32[(($83)>>2)];
      var $85=$84;
      var $86=$s1;
      var $87=(($86+20)|0);
      var $88=(($87+4)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=$89;
      __Z5b2LogPKcz(((5255200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$85,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$90,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $91=$s1;
      var $92=(($91+36)|0);
      var $93=(($92)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=$94;
      var $96=$s1;
      var $97=(($96+36)|0);
      var $98=(($97+4)|0);
      var $99=HEAPF32[(($98)>>2)];
      var $100=$99;
      __Z5b2LogPKcz(((5254988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$95,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$100,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $101=$s1;
      var $102=(($101+44)|0);
      var $103=HEAP8[($102)];
      var $104=(($103) & 1);
      var $105=(($104)&(1));
      __Z5b2LogPKcz(((5254876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$105,tempInt));
      var $106=$s1;
      var $107=(($106+45)|0);
      var $108=HEAP8[($107)];
      var $109=(($108) & 1);
      var $110=(($109)&(1));
      __Z5b2LogPKcz(((5254684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$110,tempInt));
      label = 15; break;
    case 4: 
      var $112=(($3+12)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113;
      $s2=$114;
      __Z5b2LogPKcz(((5254376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((5253964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=8,tempInt));
      $i=0;
      label = 5; break;
    case 5: 
      var $116=$i;
      var $117=$s2;
      var $118=(($117+148)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($116)|(0)) < (($119)|(0));
      if ($120) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $122=$i;
      var $123=$i;
      var $124=$s2;
      var $125=(($124+20)|0);
      var $126=(($125+($123<<3))|0);
      var $127=(($126)|0);
      var $128=HEAPF32[(($127)>>2)];
      var $129=$128;
      var $130=$i;
      var $131=$s2;
      var $132=(($131+20)|0);
      var $133=(($132+($130<<3))|0);
      var $134=(($133+4)|0);
      var $135=HEAPF32[(($134)>>2)];
      var $136=$135;
      __Z5b2LogPKcz(((5253396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$122,(HEAPF64[(tempDoublePtr)>>3]=$129,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$136,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 7; break;
    case 7: 
      var $138=$i;
      var $139=((($138)+(1))|0);
      $i=$139;
      label = 5; break;
    case 8: 
      var $141=$s2;
      var $142=(($141+148)|0);
      var $143=HEAP32[(($142)>>2)];
      __Z5b2LogPKcz(((5253088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$143,tempInt));
      label = 15; break;
    case 9: 
      var $145=(($3+12)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$146;
      $s3=$147;
      __Z5b2LogPKcz(((5252932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $148=$s3;
      var $149=(($148+16)|0);
      var $150=HEAP32[(($149)>>2)];
      __Z5b2LogPKcz(((5253964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$150,tempInt));
      $i4=0;
      label = 10; break;
    case 10: 
      var $152=$i4;
      var $153=$s3;
      var $154=(($153+16)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($152)|(0)) < (($155)|(0));
      if ($156) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $158=$i4;
      var $159=$i4;
      var $160=$s3;
      var $161=(($160+12)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+($159<<3))|0);
      var $164=(($163)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=$165;
      var $167=$i4;
      var $168=$s3;
      var $169=(($168+12)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170+($167<<3))|0);
      var $172=(($171+4)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=$173;
      __Z5b2LogPKcz(((5253396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$158,(HEAPF64[(tempDoublePtr)>>3]=$166,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$174,HEAP32[(((tempInt)+(12))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 12; break;
    case 12: 
      var $176=$i4;
      var $177=((($176)+(1))|0);
      $i4=$177;
      label = 10; break;
    case 13: 
      var $179=$s3;
      var $180=(($179+16)|0);
      var $181=HEAP32[(($180)>>2)];
      __Z5b2LogPKcz(((5252584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$181,tempInt));
      var $182=$s3;
      var $183=(($182+20)|0);
      var $184=(($183)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=$185;
      var $187=$s3;
      var $188=(($187+20)|0);
      var $189=(($188+4)|0);
      var $190=HEAPF32[(($189)>>2)];
      var $191=$190;
      __Z5b2LogPKcz(((5252360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$186,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$191,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $192=$s3;
      var $193=(($192+28)|0);
      var $194=(($193)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=$195;
      var $197=$s3;
      var $198=(($197+28)|0);
      var $199=(($198+4)|0);
      var $200=HEAPF32[(($199)>>2)];
      var $201=$200;
      __Z5b2LogPKcz(((5252084)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$196,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$201,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $202=$s3;
      var $203=(($202+36)|0);
      var $204=HEAP8[($203)];
      var $205=(($204) & 1);
      var $206=(($205)&(1));
      __Z5b2LogPKcz(((5251872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$206,tempInt));
      var $207=$s3;
      var $208=(($207+37)|0);
      var $209=HEAP8[($208)];
      var $210=(($209) & 1);
      var $211=(($210)&(1));
      __Z5b2LogPKcz(((5251736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$211,tempInt));
      label = 15; break;
    case 14: 
      label = 16; break;
    case 15: 
      __Z5b2LogPKcz(((5251604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((5251468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((5251604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $214=$2;
      __Z5b2LogPKcz(((5251252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$214,tempInt));
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($this, $bodyCapacity, $contactCapacity, $jointCapacity, $allocator, $listener) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  $1=$this;
  $2=$bodyCapacity;
  $3=$contactCapacity;
  $4=$jointCapacity;
  $5=$allocator;
  $6=$listener;
  var $7=$1;
  var $8=$2;
  var $9=(($7+40)|0);
  HEAP32[(($9)>>2)]=$8;
  var $10=$3;
  var $11=(($7+44)|0);
  HEAP32[(($11)>>2)]=$10;
  var $12=$4;
  var $13=(($7+48)|0);
  HEAP32[(($13)>>2)]=$12;
  var $14=(($7+28)|0);
  HEAP32[(($14)>>2)]=0;
  var $15=(($7+36)|0);
  HEAP32[(($15)>>2)]=0;
  var $16=(($7+32)|0);
  HEAP32[(($16)>>2)]=0;
  var $17=$5;
  var $18=(($7)|0);
  HEAP32[(($18)>>2)]=$17;
  var $19=$6;
  var $20=(($7+4)|0);
  HEAP32[(($20)>>2)]=$19;
  var $21=(($7)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=$2;
  var $24=($23<<2);
  var $25=__ZN16b2StackAllocator8AllocateEi($22, $24);
  var $26=$25;
  var $27=(($7+8)|0);
  HEAP32[(($27)>>2)]=$26;
  var $28=(($7)|0);
  var $29=HEAP32[(($28)>>2)];
  var $30=$3;
  var $31=($30<<2);
  var $32=__ZN16b2StackAllocator8AllocateEi($29, $31);
  var $33=$32;
  var $34=(($7+12)|0);
  HEAP32[(($34)>>2)]=$33;
  var $35=(($7)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=$4;
  var $38=($37<<2);
  var $39=__ZN16b2StackAllocator8AllocateEi($36, $38);
  var $40=$39;
  var $41=(($7+16)|0);
  HEAP32[(($41)>>2)]=$40;
  var $42=(($7)|0);
  var $43=HEAP32[(($42)>>2)];
  var $44=(($7+40)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=((($45)*(12))&-1);
  var $47=__ZN16b2StackAllocator8AllocateEi($43, $46);
  var $48=$47;
  var $49=(($7+24)|0);
  HEAP32[(($49)>>2)]=$48;
  var $50=(($7)|0);
  var $51=HEAP32[(($50)>>2)];
  var $52=(($7+40)|0);
  var $53=HEAP32[(($52)>>2)];
  var $54=((($53)*(12))&-1);
  var $55=__ZN16b2StackAllocator8AllocateEi($51, $54);
  var $56=$55;
  var $57=(($7+20)|0);
  HEAP32[(($57)>>2)]=$56;
  return;
}
function __ZN8b2IslandD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($2+20)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  __ZN16b2StackAllocator4FreeEPv($4, $7);
  var $8=(($2)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($2+24)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  __ZN16b2StackAllocator4FreeEPv($9, $12);
  var $13=(($2)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($2+16)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  __ZN16b2StackAllocator4FreeEPv($14, $17);
  var $18=(($2)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=(($2+12)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=$21;
  __ZN16b2StackAllocator4FreeEPv($19, $22);
  var $23=(($2)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=(($2+8)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$26;
  __ZN16b2StackAllocator4FreeEPv($24, $27);
  return;
}
function __Z7b2ClampIfET_S0_S0_S0_($a, $low, $high) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$a;
  $2=$low;
  $3=$high;
  var $4=$2;
  var $5=$1;
  var $6=$3;
  var $7=__Z5b2MinIfET_S0_S0_($5, $6);
  var $8=__Z5b2MaxIfET_S0_S0_($4, $7);
  return $8;
}
function __ZN6b2Body20SynchronizeTransformEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2=__stackBase__;
  var $3=(__stackBase__)+(8);
  $1=$this;
  var $4=$1;
  var $5=(($4+12)|0);
  var $6=(($5+8)|0);
  var $7=(($4+28)|0);
  var $8=(($7+28)|0);
  var $9=HEAPF32[(($8)>>2)];
  __ZN5b2Rot3SetEf($6, $9);
  var $10=(($4+12)|0);
  var $11=(($10)|0);
  var $12=(($4+28)|0);
  var $13=(($12+16)|0);
  var $14=(($4+12)|0);
  var $15=(($14+8)|0);
  var $16=(($4+28)|0);
  var $17=(($16)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($3, $15, $17);
  __ZmiRK6b2Vec2S1_($2, $13, $3);
  var $18=$11;
  var $19=$2;
  assert(8 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($this, $profile, $step, $gravity, $allowSleep) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 212)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $timer=__stackBase__;
      var $h;
      var $i;
      var $b;
      var $c=(__stackBase__)+(4);
      var $a;
      var $v=(__stackBase__)+(12);
      var $w;
      var $6=(__stackBase__)+(20);
      var $7=(__stackBase__)+(28);
      var $8=(__stackBase__)+(36);
      var $9=(__stackBase__)+(44);
      var $solverData=(__stackBase__)+(52);
      var $contactSolverDef=(__stackBase__)+(84);
      var $contactSolver=(__stackBase__)+(128);
      var $10;
      var $11;
      var $i1;
      var $i2;
      var $j;
      var $i3;
      var $c4=(__stackBase__)+(180);
      var $a5;
      var $v6=(__stackBase__)+(188);
      var $w7;
      var $translation=(__stackBase__)+(196);
      var $ratio;
      var $rotation;
      var $ratio8;
      var $12=(__stackBase__)+(204);
      var $positionSolved;
      var $i9;
      var $contactsOkay;
      var $jointsOkay;
      var $i10;
      var $jointOkay;
      var $i11;
      var $body;
      var $minSleepTime;
      var $linTolSqr;
      var $angTolSqr;
      var $i12;
      var $b13;
      var $i14;
      var $b15;
      $1=$this;
      $2=$profile;
      $3=$step;
      $4=$gravity;
      var $13=(($allowSleep)&(1));
      $5=$13;
      var $14=$1;
      __ZN7b2TimerC2Ev($timer);
      var $15=$3;
      var $16=(($15)|0);
      var $17=HEAPF32[(($16)>>2)];
      $h=$17;
      $i=0;
      label = 2; break;
    case 2: 
      var $19=$i;
      var $20=(($14+28)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($19)|(0)) < (($21)|(0));
      if ($22) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $24=$i;
      var $25=(($14+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($24<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      $b=$28;
      var $29=$b;
      var $30=(($29+28)|0);
      var $31=(($30+16)|0);
      var $32=$c;
      var $33=$31;
      assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
      var $34=$b;
      var $35=(($34+28)|0);
      var $36=(($35+28)|0);
      var $37=HEAPF32[(($36)>>2)];
      $a=$37;
      var $38=$b;
      var $39=(($38+64)|0);
      var $40=$v;
      var $41=$39;
      assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
      var $42=$b;
      var $43=(($42+72)|0);
      var $44=HEAPF32[(($43)>>2)];
      $w=$44;
      var $45=$b;
      var $46=(($45+28)|0);
      var $47=(($46+8)|0);
      var $48=$b;
      var $49=(($48+28)|0);
      var $50=(($49+16)|0);
      var $51=$47;
      var $52=$50;
      assert(8 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];
      var $53=$b;
      var $54=(($53+28)|0);
      var $55=(($54+28)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=$b;
      var $58=(($57+28)|0);
      var $59=(($58+24)|0);
      HEAPF32[(($59)>>2)]=$56;
      var $60=$b;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|(0))==2;
      if ($63) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $65=$h;
      var $66=$b;
      var $67=(($66+140)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=$4;
      __ZmlfRK6b2Vec2($8, $68, $69);
      var $70=$b;
      var $71=(($70+120)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=$b;
      var $74=(($73+76)|0);
      __ZmlfRK6b2Vec2($9, $72, $74);
      __ZplRK6b2Vec2S1_($7, $8, $9);
      __ZmlfRK6b2Vec2($6, $65, $7);
      __ZN6b2Vec2pLERKS_($v, $6);
      var $75=$h;
      var $76=$b;
      var $77=(($76+128)|0);
      var $78=HEAPF32[(($77)>>2)];
      var $79=($75)*($78);
      var $80=$b;
      var $81=(($80+84)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=($79)*($82);
      var $84=$w;
      var $85=($84)+($83);
      $w=$85;
      var $86=$h;
      var $87=$b;
      var $88=(($87+132)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=($86)*($89);
      var $91=(1)-($90);
      var $92=__Z7b2ClampIfET_S0_S0_S0_($91, 0, 1);
      __ZN6b2Vec2mLEf($v, $92);
      var $93=$h;
      var $94=$b;
      var $95=(($94+136)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=($93)*($96);
      var $98=(1)-($97);
      var $99=__Z7b2ClampIfET_S0_S0_S0_($98, 0, 1);
      var $100=$w;
      var $101=($100)*($99);
      $w=$101;
      label = 5; break;
    case 5: 
      var $103=$i;
      var $104=(($14+20)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+((($103)*(12))&-1))|0);
      var $107=(($106)|0);
      var $108=$107;
      var $109=$c;
      assert(8 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];
      var $110=$a;
      var $111=$i;
      var $112=(($14+20)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+((($111)*(12))&-1))|0);
      var $115=(($114+8)|0);
      HEAPF32[(($115)>>2)]=$110;
      var $116=$i;
      var $117=(($14+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+((($116)*(12))&-1))|0);
      var $120=(($119)|0);
      var $121=$120;
      var $122=$v;
      assert(8 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
      var $123=$w;
      var $124=$i;
      var $125=(($14+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+((($124)*(12))&-1))|0);
      var $128=(($127+8)|0);
      HEAPF32[(($128)>>2)]=$123;
      label = 6; break;
    case 6: 
      var $130=$i;
      var $131=((($130)+(1))|0);
      $i=$131;
      label = 2; break;
    case 7: 
      __ZN7b2Timer5ResetEv($timer);
      var $133=(($solverData)|0);
      var $134=$3;
      var $135=$133;
      var $136=$134;
      assert(24 % 1 === 0);HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($135)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];HEAP32[((($135)+(8))>>2)]=HEAP32[((($136)+(8))>>2)];HEAP32[((($135)+(12))>>2)]=HEAP32[((($136)+(12))>>2)];HEAP32[((($135)+(16))>>2)]=HEAP32[((($136)+(16))>>2)];HEAP32[((($135)+(20))>>2)]=HEAP32[((($136)+(20))>>2)];
      var $137=(($14+20)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($solverData+24)|0);
      HEAP32[(($139)>>2)]=$138;
      var $140=(($14+24)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($solverData+28)|0);
      HEAP32[(($142)>>2)]=$141;
      var $143=(($contactSolverDef)|0);
      var $144=$3;
      var $145=$143;
      var $146=$144;
      assert(24 % 1 === 0);HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];HEAP32[((($145)+(8))>>2)]=HEAP32[((($146)+(8))>>2)];HEAP32[((($145)+(12))>>2)]=HEAP32[((($146)+(12))>>2)];HEAP32[((($145)+(16))>>2)]=HEAP32[((($146)+(16))>>2)];HEAP32[((($145)+(20))>>2)]=HEAP32[((($146)+(20))>>2)];
      var $147=(($14+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($contactSolverDef+24)|0);
      HEAP32[(($149)>>2)]=$148;
      var $150=(($14+36)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($contactSolverDef+28)|0);
      HEAP32[(($152)>>2)]=$151;
      var $153=(($14+20)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($contactSolverDef+32)|0);
      HEAP32[(($155)>>2)]=$154;
      var $156=(($14+24)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($contactSolverDef+36)|0);
      HEAP32[(($158)>>2)]=$157;
      var $159=(($14)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($contactSolverDef+40)|0);
      HEAP32[(($161)>>2)]=$160;
      __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver, $contactSolverDef);
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $163=$3;
      var $164=(($163+20)|0);
      var $165=HEAP8[($164)];
      var $166=(($165) & 1);
      if ($166) { label = 9; break; } else { label = 12; break; }
    case 9: 
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver9WarmStartEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $170$0 = ___cxa_find_matching_catch(-1, -1); $170$1 = tempRet0;
      var $171=$170$0;
      $10=$171;
      var $172=$170$1;
      $11=$172;
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolverD2Ev($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 94; break; } else { label = 96; break; }
    case 12: 
      $i1=0;
      label = 13; break;
    case 13: 
      var $175=$i1;
      var $176=(($14+32)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=(($175)|(0)) < (($177)|(0));
      if ($178) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $180=$i1;
      var $181=(($14+16)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182+($180<<2))|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=$184;
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+28)|0);
      var $188=HEAP32[(($187)>>2)];
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($184, $solverData) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 11; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $191=$i1;
      var $192=((($191)+(1))|0);
      $i1=$192;
      label = 13; break;
    case 17: 
      var $194 = (function() { try { __THREW__ = 0; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 11; break; }
    case 18: 
      var $196=$2;
      var $197=(($196+12)|0);
      HEAPF32[(($197)>>2)]=$194;
      (function() { try { __THREW__ = 0; return __ZN7b2Timer5ResetEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 11; break; }
    case 19: 
      $i2=0;
      label = 20; break;
    case 20: 
      var $200=$i2;
      var $201=$3;
      var $202=(($201+12)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($200)|(0)) < (($203)|(0));
      if ($204) { label = 21; break; } else { label = 29; break; }
    case 21: 
      $j=0;
      label = 22; break;
    case 22: 
      var $207=$j;
      var $208=(($14+32)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=(($207)|(0)) < (($209)|(0));
      if ($210) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $212=$j;
      var $213=(($14+16)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+($212<<2))|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=$216;
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+32)|0);
      var $220=HEAP32[(($219)>>2)];
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($216, $solverData) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 11; break; }
    case 24: 
      label = 25; break;
    case 25: 
      var $223=$j;
      var $224=((($223)+(1))|0);
      $j=$224;
      label = 22; break;
    case 26: 
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 11; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $228=$i2;
      var $229=((($228)+(1))|0);
      $i2=$229;
      label = 20; break;
    case 29: 
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver13StoreImpulsesEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 11; break; }
    case 30: 
      var $232 = (function() { try { __THREW__ = 0; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 11; break; }
    case 31: 
      var $234=$2;
      var $235=(($234+16)|0);
      HEAPF32[(($235)>>2)]=$232;
      $i3=0;
      label = 32; break;
    case 32: 
      var $237=$i3;
      var $238=(($14+28)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($237)|(0)) < (($239)|(0));
      if ($240) { label = 33; break; } else { label = 46; break; }
    case 33: 
      var $242=$i3;
      var $243=(($14+20)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244+((($242)*(12))&-1))|0);
      var $246=(($245)|0);
      var $247=$c4;
      var $248=$246;
      assert(8 % 1 === 0);HEAP32[(($247)>>2)]=HEAP32[(($248)>>2)];HEAP32[((($247)+(4))>>2)]=HEAP32[((($248)+(4))>>2)];
      var $249=$i3;
      var $250=(($14+20)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+((($249)*(12))&-1))|0);
      var $253=(($252+8)|0);
      var $254=HEAPF32[(($253)>>2)];
      $a5=$254;
      var $255=$i3;
      var $256=(($14+24)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=(($257+((($255)*(12))&-1))|0);
      var $259=(($258)|0);
      var $260=$v6;
      var $261=$259;
      assert(8 % 1 === 0);HEAP32[(($260)>>2)]=HEAP32[(($261)>>2)];HEAP32[((($260)+(4))>>2)]=HEAP32[((($261)+(4))>>2)];
      var $262=$i3;
      var $263=(($14+24)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264+((($262)*(12))&-1))|0);
      var $266=(($265+8)|0);
      var $267=HEAPF32[(($266)>>2)];
      $w7=$267;
      var $268=$h;
      (function() { try { __THREW__ = 0; return __ZmlfRK6b2Vec2($translation, $268, $v6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 11; break; }
    case 34: 
      var $270 = (function() { try { __THREW__ = 0; return __Z5b2DotRK6b2Vec2S1_($translation, $translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 11; break; }
    case 35: 
      var $272=$270 > 4;
      if ($272) { label = 36; break; } else { label = 39; break; }
    case 36: 
      var $274 = (function() { try { __THREW__ = 0; return __ZNK6b2Vec26LengthEv($translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 11; break; }
    case 37: 
      var $276=(2)/($274);
      $ratio=$276;
      var $277=$ratio;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2mLEf($v6, $277) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 11; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $280=$h;
      var $281=$w7;
      var $282=($280)*($281);
      $rotation=$282;
      var $283=$rotation;
      var $284=$rotation;
      var $285=($283)*($284);
      var $286=$285 > 2.4674012660980225;
      if ($286) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $288=$rotation;
      var $289 = (function() { try { __THREW__ = 0; return __Z5b2AbsIfET_S0_($288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 11; break; }
    case 41: 
      var $291=(1.5707963705062866)/($289);
      $ratio8=$291;
      var $292=$ratio8;
      var $293=$w7;
      var $294=($293)*($292);
      $w7=$294;
      label = 42; break;
    case 42: 
      var $296=$h;
      (function() { try { __THREW__ = 0; return __ZmlfRK6b2Vec2($12, $296, $v6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 11; break; }
    case 43: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2pLERKS_($c4, $12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 11; break; }
    case 44: 
      var $299=$h;
      var $300=$w7;
      var $301=($299)*($300);
      var $302=$a5;
      var $303=($302)+($301);
      $a5=$303;
      var $304=$i3;
      var $305=(($14+20)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+((($304)*(12))&-1))|0);
      var $308=(($307)|0);
      var $309=$308;
      var $310=$c4;
      assert(8 % 1 === 0);HEAP32[(($309)>>2)]=HEAP32[(($310)>>2)];HEAP32[((($309)+(4))>>2)]=HEAP32[((($310)+(4))>>2)];
      var $311=$a5;
      var $312=$i3;
      var $313=(($14+20)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=(($314+((($312)*(12))&-1))|0);
      var $316=(($315+8)|0);
      HEAPF32[(($316)>>2)]=$311;
      var $317=$i3;
      var $318=(($14+24)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=(($319+((($317)*(12))&-1))|0);
      var $321=(($320)|0);
      var $322=$321;
      var $323=$v6;
      assert(8 % 1 === 0);HEAP32[(($322)>>2)]=HEAP32[(($323)>>2)];HEAP32[((($322)+(4))>>2)]=HEAP32[((($323)+(4))>>2)];
      var $324=$w7;
      var $325=$i3;
      var $326=(($14+24)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327+((($325)*(12))&-1))|0);
      var $329=(($328+8)|0);
      HEAPF32[(($329)>>2)]=$324;
      label = 45; break;
    case 45: 
      var $331=$i3;
      var $332=((($331)+(1))|0);
      $i3=$332;
      label = 32; break;
    case 46: 
      (function() { try { __THREW__ = 0; return __ZN7b2Timer5ResetEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 11; break; }
    case 47: 
      $positionSolved=0;
      $i9=0;
      label = 48; break;
    case 48: 
      var $336=$i9;
      var $337=$3;
      var $338=(($337+16)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=(($336)|(0)) < (($339)|(0));
      if ($340) { label = 49; break; } else { label = 62; break; }
    case 49: 
      var $342 = (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver24SolvePositionConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 11; break; }
    case 50: 
      var $344=(($342)&(1));
      $contactsOkay=$344;
      $jointsOkay=1;
      $i10=0;
      label = 51; break;
    case 51: 
      var $346=$i10;
      var $347=(($14+32)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=(($346)|(0)) < (($348)|(0));
      if ($349) { label = 52; break; } else { label = 57; break; }
    case 52: 
      var $351=$i10;
      var $352=(($14+16)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=(($353+($351<<2))|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=$355;
      var $357=HEAP32[(($356)>>2)];
      var $358=(($357+36)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$359]($355, $solverData) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 11; break; }
    case 53: 
      var $362=(($360)&(1));
      $jointOkay=$362;
      var $363=$jointsOkay;
      var $364=(($363) & 1);
      if ($364) { label = 54; break; } else { var $369 = 0;label = 55; break; }
    case 54: 
      var $366=$jointOkay;
      var $367=(($366) & 1);
      var $369 = $367;label = 55; break;
    case 55: 
      var $369;
      var $370=(($369)&(1));
      $jointsOkay=$370;
      label = 56; break;
    case 56: 
      var $372=$i10;
      var $373=((($372)+(1))|0);
      $i10=$373;
      label = 51; break;
    case 57: 
      var $375=$contactsOkay;
      var $376=(($375) & 1);
      if ($376) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $378=$jointsOkay;
      var $379=(($378) & 1);
      if ($379) { label = 59; break; } else { label = 60; break; }
    case 59: 
      $positionSolved=1;
      label = 62; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $383=$i9;
      var $384=((($383)+(1))|0);
      $i9=$384;
      label = 48; break;
    case 62: 
      $i11=0;
      label = 63; break;
    case 63: 
      var $387=$i11;
      var $388=(($14+28)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($387)|(0)) < (($389)|(0));
      if ($390) { label = 64; break; } else { label = 67; break; }
    case 64: 
      var $392=$i11;
      var $393=(($14+8)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=(($394+($392<<2))|0);
      var $396=HEAP32[(($395)>>2)];
      $body=$396;
      var $397=$body;
      var $398=(($397+28)|0);
      var $399=(($398+16)|0);
      var $400=$i11;
      var $401=(($14+20)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=(($402+((($400)*(12))&-1))|0);
      var $404=(($403)|0);
      var $405=$399;
      var $406=$404;
      assert(8 % 1 === 0);HEAP32[(($405)>>2)]=HEAP32[(($406)>>2)];HEAP32[((($405)+(4))>>2)]=HEAP32[((($406)+(4))>>2)];
      var $407=$i11;
      var $408=(($14+20)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($409+((($407)*(12))&-1))|0);
      var $411=(($410+8)|0);
      var $412=HEAPF32[(($411)>>2)];
      var $413=$body;
      var $414=(($413+28)|0);
      var $415=(($414+28)|0);
      HEAPF32[(($415)>>2)]=$412;
      var $416=$body;
      var $417=(($416+64)|0);
      var $418=$i11;
      var $419=(($14+24)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420+((($418)*(12))&-1))|0);
      var $422=(($421)|0);
      var $423=$417;
      var $424=$422;
      assert(8 % 1 === 0);HEAP32[(($423)>>2)]=HEAP32[(($424)>>2)];HEAP32[((($423)+(4))>>2)]=HEAP32[((($424)+(4))>>2)];
      var $425=$i11;
      var $426=(($14+24)|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=(($427+((($425)*(12))&-1))|0);
      var $429=(($428+8)|0);
      var $430=HEAPF32[(($429)>>2)];
      var $431=$body;
      var $432=(($431+72)|0);
      HEAPF32[(($432)>>2)]=$430;
      var $433=$body;
      (function() { try { __THREW__ = 0; return __ZN6b2Body20SynchronizeTransformEv($433) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 65; break; } else { label = 11; break; }
    case 65: 
      label = 66; break;
    case 66: 
      var $436=$i11;
      var $437=((($436)+(1))|0);
      $i11=$437;
      label = 63; break;
    case 67: 
      var $439 = (function() { try { __THREW__ = 0; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 68; break; } else { label = 11; break; }
    case 68: 
      var $441=$2;
      var $442=(($441+20)|0);
      HEAPF32[(($442)>>2)]=$439;
      var $443=(($contactSolver+40)|0);
      var $444=HEAP32[(($443)>>2)];
      (function() { try { __THREW__ = 0; return __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($14, $444) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 69; break; } else { label = 11; break; }
    case 69: 
      var $446=$5;
      var $447=(($446) & 1);
      if ($447) { label = 70; break; } else { label = 93; break; }
    case 70: 
      $minSleepTime=3.4028234663852886e+38;
      $linTolSqr=0.00009999999747378752;
      $angTolSqr=0.001218469929881394;
      $i12=0;
      label = 71; break;
    case 71: 
      var $450=$i12;
      var $451=(($14+28)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=(($450)|(0)) < (($452)|(0));
      if ($453) { label = 72; break; } else { label = 84; break; }
    case 72: 
      var $455=$i12;
      var $456=(($14+8)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457+($455<<2))|0);
      var $459=HEAP32[(($458)>>2)];
      $b13=$459;
      var $460=$b13;
      var $461 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7GetTypeEv($460) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 73; break; } else { label = 11; break; }
    case 73: 
      var $463=(($461)|(0))==0;
      if ($463) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 83; break;
    case 75: 
      var $466=$b13;
      var $467=(($466+4)|0);
      var $468=HEAP16[(($467)>>1)];
      var $469=(($468)&(65535));
      var $470=$469 & 4;
      var $471=(($470)|(0))==0;
      if ($471) { label = 79; break; } else { label = 76; break; }
    case 76: 
      var $473=$b13;
      var $474=(($473+72)|0);
      var $475=HEAPF32[(($474)>>2)];
      var $476=$b13;
      var $477=(($476+72)|0);
      var $478=HEAPF32[(($477)>>2)];
      var $479=($475)*($478);
      var $480=$479 > 0.001218469929881394;
      if ($480) { label = 79; break; } else { label = 77; break; }
    case 77: 
      var $482=$b13;
      var $483=(($482+64)|0);
      var $484=$b13;
      var $485=(($484+64)|0);
      var $486 = (function() { try { __THREW__ = 0; return __Z5b2DotRK6b2Vec2S1_($483, $485) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 78; break; } else { label = 11; break; }
    case 78: 
      var $488=$486 > 0.00009999999747378752;
      if ($488) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $490=$b13;
      var $491=(($490+144)|0);
      HEAPF32[(($491)>>2)]=0;
      $minSleepTime=0;
      label = 82; break;
    case 80: 
      var $493=$h;
      var $494=$b13;
      var $495=(($494+144)|0);
      var $496=HEAPF32[(($495)>>2)];
      var $497=($496)+($493);
      HEAPF32[(($495)>>2)]=$497;
      var $498=$minSleepTime;
      var $499=$b13;
      var $500=(($499+144)|0);
      var $501=HEAPF32[(($500)>>2)];
      var $502 = (function() { try { __THREW__ = 0; return __Z5b2MinIfET_S0_S0_($498, $501) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 81; break; } else { label = 11; break; }
    case 81: 
      $minSleepTime=$502;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $506=$i12;
      var $507=((($506)+(1))|0);
      $i12=$507;
      label = 71; break;
    case 84: 
      var $509=$minSleepTime;
      var $510=$509 >= 0.5;
      if ($510) { label = 85; break; } else { label = 92; break; }
    case 85: 
      var $512=$positionSolved;
      var $513=(($512) & 1);
      if ($513) { label = 86; break; } else { label = 92; break; }
    case 86: 
      $i14=0;
      label = 87; break;
    case 87: 
      var $516=$i14;
      var $517=(($14+28)|0);
      var $518=HEAP32[(($517)>>2)];
      var $519=(($516)|(0)) < (($518)|(0));
      if ($519) { label = 88; break; } else { label = 91; break; }
    case 88: 
      var $521=$i14;
      var $522=(($14+8)|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=(($523+($521<<2))|0);
      var $525=HEAP32[(($524)>>2)];
      $b15=$525;
      var $526=$b15;
      (function() { try { __THREW__ = 0; return __ZN6b2Body8SetAwakeEb($526, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 89; break; } else { label = 11; break; }
    case 89: 
      label = 90; break;
    case 90: 
      var $529=$i14;
      var $530=((($529)+(1))|0);
      $i14=$530;
      label = 87; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      __ZN15b2ContactSolverD2Ev($contactSolver);
      STACKTOP = __stackBase__;
      return;
    case 94: 
      label = 95; break;
    case 95: 
      var $536=$10;
      var $537=$11;
      var $538$0=$536;
      var $538$1=0;
      var $539$0=$538$0;
      var $539$1=$537;
      ___resumeException($539$0)
    case 96: 
      var $541$0 = ___cxa_find_matching_catch(-1, -1,0); $541$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Body7GetTypeEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN7b2World22SetDestructionListenerEP21b2DestructionListener($this, $listener) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$listener;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102980)|0);
  HEAP32[(($5)>>2)]=$4;
  return;
}
function __ZN7b2World16SetContactFilterEP15b2ContactFilter($this, $filter) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$filter;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102872)|0);
  var $6=(($5+68)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN7b2World18SetContactListenerEP17b2ContactListener($this, $listener) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$listener;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102872)|0);
  var $6=(($5+72)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN7b2World12SetDebugDrawEP6b2Draw($this, $debugDraw) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$debugDraw;
  var $3=$1;
  var $4=$2;
  var $5=(($3+102984)|0);
  HEAP32[(($5)>>2)]=$4;
  return;
}
function __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($this, $constraints) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $c;
      var $vc;
      var $impulse=__stackBase__;
      var $j;
      $1=$this;
      $2=$constraints;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 11; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $10=$i;
      var $11=(($3+36)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|(0)) < (($12)|(0));
      if ($13) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $15=$i;
      var $16=(($3+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      $c=$19;
      var $20=$2;
      var $21=$i;
      var $22=(($20+((($21)*(152))&-1))|0);
      $vc=$22;
      var $23=$vc;
      var $24=(($23+144)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($impulse+16)|0);
      HEAP32[(($26)>>2)]=$25;
      $j=0;
      label = 6; break;
    case 6: 
      var $28=$j;
      var $29=$vc;
      var $30=(($29+144)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($28)|(0)) < (($31)|(0));
      if ($32) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $34=$j;
      var $35=$vc;
      var $36=(($35)|0);
      var $37=(($36+((($34)*(36))&-1))|0);
      var $38=(($37+16)|0);
      var $39=HEAPF32[(($38)>>2)];
      var $40=$j;
      var $41=(($impulse)|0);
      var $42=(($41+($40<<2))|0);
      HEAPF32[(($42)>>2)]=$39;
      var $43=$j;
      var $44=$vc;
      var $45=(($44)|0);
      var $46=(($45+((($43)*(36))&-1))|0);
      var $47=(($46+20)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=$j;
      var $50=(($impulse+8)|0);
      var $51=(($50+($49<<2))|0);
      HEAPF32[(($51)>>2)]=$48;
      label = 8; break;
    case 8: 
      var $53=$j;
      var $54=((($53)+(1))|0);
      $j=$54;
      label = 6; break;
    case 9: 
      var $56=(($3+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+20)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$c;
      FUNCTION_TABLE[$61]($57, $62, $impulse);
      label = 10; break;
    case 10: 
      var $64=$i;
      var $65=((($64)+(1))|0);
      $i=$65;
      label = 4; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2ContactManagerD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2ContactManagerD2Ev($2);
  return;
}
function __ZN8b2Island8SolveTOIERK10b2TimeStepii($this, $subStep, $toiIndexA, $toiIndexB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $b;
      var $contactSolverDef=__stackBase__;
      var $contactSolver=(__stackBase__)+(44);
      var $i1;
      var $contactsOkay;
      var $5;
      var $6;
      var $i2;
      var $h;
      var $i3;
      var $c=(__stackBase__)+(96);
      var $a;
      var $v=(__stackBase__)+(104);
      var $w;
      var $translation=(__stackBase__)+(112);
      var $ratio;
      var $rotation;
      var $ratio4;
      var $7=(__stackBase__)+(120);
      var $body;
      $1=$this;
      $2=$subStep;
      $3=$toiIndexA;
      $4=$toiIndexB;
      var $8=$1;
      var $9=$3;
      var $10=(($8+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($9)|(0)) < (($11)|(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5255244)|0), 386, ((5260380)|0), ((5257296)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $17=$4;
      var $18=(($8+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($17)|(0)) < (($19)|(0));
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5255244)|0), 387, ((5260380)|0), ((5254192)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $26=$i;
      var $27=(($8+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($26)|(0)) < (($28)|(0));
      if ($29) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $31=$i;
      var $32=(($8+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+($31<<2))|0);
      var $35=HEAP32[(($34)>>2)];
      $b=$35;
      var $36=$i;
      var $37=(($8+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+((($36)*(12))&-1))|0);
      var $40=(($39)|0);
      var $41=$b;
      var $42=(($41+28)|0);
      var $43=(($42+16)|0);
      var $44=$40;
      var $45=$43;
      assert(8 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];
      var $46=$b;
      var $47=(($46+28)|0);
      var $48=(($47+28)|0);
      var $49=HEAPF32[(($48)>>2)];
      var $50=$i;
      var $51=(($8+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+((($50)*(12))&-1))|0);
      var $54=(($53+8)|0);
      HEAPF32[(($54)>>2)]=$49;
      var $55=$i;
      var $56=(($8+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+((($55)*(12))&-1))|0);
      var $59=(($58)|0);
      var $60=$b;
      var $61=(($60+64)|0);
      var $62=$59;
      var $63=$61;
      assert(8 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];
      var $64=$b;
      var $65=(($64+72)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=$i;
      var $68=(($8+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+((($67)*(12))&-1))|0);
      var $71=(($70+8)|0);
      HEAPF32[(($71)>>2)]=$66;
      label = 10; break;
    case 10: 
      var $73=$i;
      var $74=((($73)+(1))|0);
      $i=$74;
      label = 8; break;
    case 11: 
      var $76=(($8+12)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($contactSolverDef+24)|0);
      HEAP32[(($78)>>2)]=$77;
      var $79=(($8+36)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($contactSolverDef+28)|0);
      HEAP32[(($81)>>2)]=$80;
      var $82=(($8)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($contactSolverDef+40)|0);
      HEAP32[(($84)>>2)]=$83;
      var $85=(($contactSolverDef)|0);
      var $86=$2;
      var $87=$85;
      var $88=$86;
      assert(24 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];HEAP32[((($87)+(8))>>2)]=HEAP32[((($88)+(8))>>2)];HEAP32[((($87)+(12))>>2)]=HEAP32[((($88)+(12))>>2)];HEAP32[((($87)+(16))>>2)]=HEAP32[((($88)+(16))>>2)];HEAP32[((($87)+(20))>>2)]=HEAP32[((($88)+(20))>>2)];
      var $89=(($8+20)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($contactSolverDef+32)|0);
      HEAP32[(($91)>>2)]=$90;
      var $92=(($8+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($contactSolverDef+36)|0);
      HEAP32[(($94)>>2)]=$93;
      __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver, $contactSolverDef);
      $i1=0;
      label = 12; break;
    case 12: 
      var $96=$i1;
      var $97=$2;
      var $98=(($97+16)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($96)|(0)) < (($99)|(0));
      if ($100) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $102=$3;
      var $103=$4;
      var $104 = (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($contactSolver, $102, $103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $106=(($104)&(1));
      $contactsOkay=$106;
      var $107=$contactsOkay;
      var $108=(($107) & 1);
      if ($108) { label = 15; break; } else { label = 17; break; }
    case 15: 
      label = 19; break;
    case 16: 
      var $111$0 = ___cxa_find_matching_catch(-1, -1); $111$1 = tempRet0;
      var $112=$111$0;
      $5=$112;
      var $113=$111$1;
      $6=$113;
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolverD2Ev($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 45; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $116=$i1;
      var $117=((($116)+(1))|0);
      $i1=$117;
      label = 12; break;
    case 19: 
      var $119=$3;
      var $120=(($8+8)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+($119<<2))|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+28)|0);
      var $125=(($124+8)|0);
      var $126=$3;
      var $127=(($8+20)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+((($126)*(12))&-1))|0);
      var $130=(($129)|0);
      var $131=$125;
      var $132=$130;
      assert(8 % 1 === 0);HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[((($131)+(4))>>2)]=HEAP32[((($132)+(4))>>2)];
      var $133=$3;
      var $134=(($8+20)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135+((($133)*(12))&-1))|0);
      var $137=(($136+8)|0);
      var $138=HEAPF32[(($137)>>2)];
      var $139=$3;
      var $140=(($8+8)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+($139<<2))|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143+28)|0);
      var $145=(($144+24)|0);
      HEAPF32[(($145)>>2)]=$138;
      var $146=$4;
      var $147=(($8+8)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+($146<<2))|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+28)|0);
      var $152=(($151+8)|0);
      var $153=$4;
      var $154=(($8+20)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155+((($153)*(12))&-1))|0);
      var $157=(($156)|0);
      var $158=$152;
      var $159=$157;
      assert(8 % 1 === 0);HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($158)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];
      var $160=$4;
      var $161=(($8+20)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+((($160)*(12))&-1))|0);
      var $164=(($163+8)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=$4;
      var $167=(($8+8)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+($166<<2))|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170+28)|0);
      var $172=(($171+24)|0);
      HEAPF32[(($172)>>2)]=$165;
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 16; break; }
    case 20: 
      $i2=0;
      label = 21; break;
    case 21: 
      var $175=$i2;
      var $176=$2;
      var $177=(($176+12)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=(($175)|(0)) < (($178)|(0));
      if ($179) { label = 22; break; } else { label = 25; break; }
    case 22: 
      (function() { try { __THREW__ = 0; return __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 16; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $183=$i2;
      var $184=((($183)+(1))|0);
      $i2=$184;
      label = 21; break;
    case 25: 
      var $186=$2;
      var $187=(($186)|0);
      var $188=HEAPF32[(($187)>>2)];
      $h=$188;
      $i3=0;
      label = 26; break;
    case 26: 
      var $190=$i3;
      var $191=(($8+28)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($190)|(0)) < (($192)|(0));
      if ($193) { label = 27; break; } else { label = 41; break; }
    case 27: 
      var $195=$i3;
      var $196=(($8+20)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($197+((($195)*(12))&-1))|0);
      var $199=(($198)|0);
      var $200=$c;
      var $201=$199;
      assert(8 % 1 === 0);HEAP32[(($200)>>2)]=HEAP32[(($201)>>2)];HEAP32[((($200)+(4))>>2)]=HEAP32[((($201)+(4))>>2)];
      var $202=$i3;
      var $203=(($8+20)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=(($204+((($202)*(12))&-1))|0);
      var $206=(($205+8)|0);
      var $207=HEAPF32[(($206)>>2)];
      $a=$207;
      var $208=$i3;
      var $209=(($8+24)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($210+((($208)*(12))&-1))|0);
      var $212=(($211)|0);
      var $213=$v;
      var $214=$212;
      assert(8 % 1 === 0);HEAP32[(($213)>>2)]=HEAP32[(($214)>>2)];HEAP32[((($213)+(4))>>2)]=HEAP32[((($214)+(4))>>2)];
      var $215=$i3;
      var $216=(($8+24)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217+((($215)*(12))&-1))|0);
      var $219=(($218+8)|0);
      var $220=HEAPF32[(($219)>>2)];
      $w=$220;
      var $221=$h;
      (function() { try { __THREW__ = 0; return __ZmlfRK6b2Vec2($translation, $221, $v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 16; break; }
    case 28: 
      var $223 = (function() { try { __THREW__ = 0; return __Z5b2DotRK6b2Vec2S1_($translation, $translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 16; break; }
    case 29: 
      var $225=$223 > 4;
      if ($225) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $227 = (function() { try { __THREW__ = 0; return __ZNK6b2Vec26LengthEv($translation) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 16; break; }
    case 31: 
      var $229=(2)/($227);
      $ratio=$229;
      var $230=$ratio;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2mLEf($v, $230) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 16; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $233=$h;
      var $234=$w;
      var $235=($233)*($234);
      $rotation=$235;
      var $236=$rotation;
      var $237=$rotation;
      var $238=($236)*($237);
      var $239=$238 > 2.4674012660980225;
      if ($239) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $241=$rotation;
      var $242 = (function() { try { __THREW__ = 0; return __Z5b2AbsIfET_S0_($241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 16; break; }
    case 35: 
      var $244=(1.5707963705062866)/($242);
      $ratio4=$244;
      var $245=$ratio4;
      var $246=$w;
      var $247=($246)*($245);
      $w=$247;
      label = 36; break;
    case 36: 
      var $249=$h;
      (function() { try { __THREW__ = 0; return __ZmlfRK6b2Vec2($7, $249, $v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 16; break; }
    case 37: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2pLERKS_($c, $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 16; break; }
    case 38: 
      var $252=$h;
      var $253=$w;
      var $254=($252)*($253);
      var $255=$a;
      var $256=($255)+($254);
      $a=$256;
      var $257=$i3;
      var $258=(($8+20)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=(($259+((($257)*(12))&-1))|0);
      var $261=(($260)|0);
      var $262=$261;
      var $263=$c;
      assert(8 % 1 === 0);HEAP32[(($262)>>2)]=HEAP32[(($263)>>2)];HEAP32[((($262)+(4))>>2)]=HEAP32[((($263)+(4))>>2)];
      var $264=$a;
      var $265=$i3;
      var $266=(($8+20)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=(($267+((($265)*(12))&-1))|0);
      var $269=(($268+8)|0);
      HEAPF32[(($269)>>2)]=$264;
      var $270=$i3;
      var $271=(($8+24)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=(($272+((($270)*(12))&-1))|0);
      var $274=(($273)|0);
      var $275=$274;
      var $276=$v;
      assert(8 % 1 === 0);HEAP32[(($275)>>2)]=HEAP32[(($276)>>2)];HEAP32[((($275)+(4))>>2)]=HEAP32[((($276)+(4))>>2)];
      var $277=$w;
      var $278=$i3;
      var $279=(($8+24)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+((($278)*(12))&-1))|0);
      var $282=(($281+8)|0);
      HEAPF32[(($282)>>2)]=$277;
      var $283=$i3;
      var $284=(($8+8)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=(($285+($283<<2))|0);
      var $287=HEAP32[(($286)>>2)];
      $body=$287;
      var $288=$body;
      var $289=(($288+28)|0);
      var $290=(($289+16)|0);
      var $291=$290;
      var $292=$c;
      assert(8 % 1 === 0);HEAP32[(($291)>>2)]=HEAP32[(($292)>>2)];HEAP32[((($291)+(4))>>2)]=HEAP32[((($292)+(4))>>2)];
      var $293=$a;
      var $294=$body;
      var $295=(($294+28)|0);
      var $296=(($295+28)|0);
      HEAPF32[(($296)>>2)]=$293;
      var $297=$body;
      var $298=(($297+64)|0);
      var $299=$298;
      var $300=$v;
      assert(8 % 1 === 0);HEAP32[(($299)>>2)]=HEAP32[(($300)>>2)];HEAP32[((($299)+(4))>>2)]=HEAP32[((($300)+(4))>>2)];
      var $301=$w;
      var $302=$body;
      var $303=(($302+72)|0);
      HEAPF32[(($303)>>2)]=$301;
      var $304=$body;
      (function() { try { __THREW__ = 0; return __ZN6b2Body20SynchronizeTransformEv($304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 16; break; }
    case 39: 
      label = 40; break;
    case 40: 
      var $307=$i3;
      var $308=((($307)+(1))|0);
      $i3=$308;
      label = 26; break;
    case 41: 
      var $310=(($contactSolver+40)|0);
      var $311=HEAP32[(($310)>>2)];
      (function() { try { __THREW__ = 0; return __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($8, $311) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 16; break; }
    case 42: 
      __ZN15b2ContactSolverD2Ev($contactSolver);
      STACKTOP = __stackBase__;
      return;
    case 43: 
      label = 44; break;
    case 44: 
      var $315=$5;
      var $316=$6;
      var $317$0=$315;
      var $317$1=0;
      var $318$0=$317$0;
      var $318$1=$316;
      ___resumeException($318$0)
    case 45: 
      var $320$0 = ___cxa_find_matching_catch(-1, -1,0); $320$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2WorldC2ERK6b2Vec2($this, $gravity) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$gravity;
      var $5=$1;
      var $6=(($5)|0);
      __ZN16b2BlockAllocatorC2Ev($6);
      var $7=(($5+68)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2StackAllocatorC2Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=(($5+102872)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManagerC2Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=(($5+102968)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $13=(($5+102996)|0);
      var $14=(($5+102980)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=(($5+102984)|0);
      HEAP32[(($15)>>2)]=0;
      var $16=(($5+102952)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=(($5+102956)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=(($5+102960)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=(($5+102964)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=(($5+102992)|0);
      HEAP8[($20)]=1;
      var $21=(($5+102993)|0);
      HEAP8[($21)]=1;
      var $22=(($5+102994)|0);
      HEAP8[($22)]=0;
      var $23=(($5+102995)|0);
      HEAP8[($23)]=1;
      var $24=(($5+102976)|0);
      HEAP8[($24)]=1;
      var $25=(($5+102968)|0);
      var $26=$2;
      var $27=$25;
      var $28=$26;
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=(($5+102868)|0);
      HEAP32[(($29)>>2)]=4;
      var $30=(($5+102988)|0);
      HEAPF32[(($30)>>2)]=0;
      var $31=(($5)|0);
      var $32=(($5+102872)|0);
      var $33=(($32+76)|0);
      HEAP32[(($33)>>2)]=$31;
      var $34=(($5+102996)|0);
      var $35=$34;
      _memset($35, 0, 32);
      return;
    case 5: 
      var $37$0 = ___cxa_find_matching_catch(-1, -1); $37$1 = tempRet0;
      var $38=$37$0;
      $3=$38;
      var $39=$37$1;
      $4=$39;
      label = 11; break;
    case 6: 
      var $41$0 = ___cxa_find_matching_catch(-1, -1); $41$1 = tempRet0;
      var $42=$41$0;
      $3=$42;
      var $43=$41$1;
      $4=$43;
      label = 9; break;
    case 7: 
      var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
      var $46=$45$0;
      $3=$46;
      var $47=$45$1;
      $4=$47;
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManagerD1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      (function() { try { __THREW__ = 0; return __ZN16b2StackAllocatorD2Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 14; break; }
    case 10: 
      label = 11; break;
    case 11: 
      (function() { try { __THREW__ = 0; return __ZN16b2BlockAllocatorD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $54=$3;
      var $55=$4;
      var $56$0=$54;
      var $56$1=0;
      var $57$0=$56$0;
      var $57$1=$55;
      ___resumeException($57$0)
    case 14: 
      var $59$0 = ___cxa_find_matching_catch(-1, -1,0); $59$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2WorldD2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $b;
      var $bNext;
      var $f;
      var $fNext;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      var $5=(($4+102952)|0);
      var $6=HEAP32[(($5)>>2)];
      $b=$6;
      label = 2; break;
    case 2: 
      var $8=$b;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $11=$b;
      var $12=(($11+96)|0);
      var $13=HEAP32[(($12)>>2)];
      $bNext=$13;
      var $14=$b;
      var $15=(($14+100)|0);
      var $16=HEAP32[(($15)>>2)];
      $f=$16;
      label = 4; break;
    case 4: 
      var $18=$f;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $21=$f;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      $fNext=$23;
      var $24=$f;
      var $25=(($24+28)|0);
      HEAP32[(($25)>>2)]=0;
      var $26=$f;
      var $27=(($4)|0);
      (function() { try { __THREW__ = 0; return __ZN9b2Fixture7DestroyEP16b2BlockAllocator($26, $27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$fNext;
      $f=$29;
      label = 4; break;
    case 7: 
      var $31$0 = ___cxa_find_matching_catch(-1, -1); $31$1 = tempRet0;
      var $32=$31$0;
      $2=$32;
      var $33=$31$1;
      $3=$33;
      var $34=(($4+102872)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManagerD1Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 20; break; }
    case 8: 
      var $36=$bNext;
      $b=$36;
      label = 2; break;
    case 9: 
      var $38=(($4+102872)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManagerD1Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $40=(($4+68)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2StackAllocatorD2Ev($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $42=(($4)|0);
      __ZN16b2BlockAllocatorD2Ev($42);
      return;
    case 12: 
      var $44$0 = ___cxa_find_matching_catch(-1, -1); $44$1 = tempRet0;
      var $45=$44$0;
      $2=$45;
      var $46=$44$1;
      $3=$46;
      label = 15; break;
    case 13: 
      label = 15; break;
    case 14: 
      var $49$0 = ___cxa_find_matching_catch(-1, -1); $49$1 = tempRet0;
      var $50=$49$0;
      $2=$50;
      var $51=$49$1;
      $3=$51;
      label = 17; break;
    case 15: 
      var $53=(($4+68)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2StackAllocatorD2Ev($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 20; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $56=(($4)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2BlockAllocatorD2Ev($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 20; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $59=$2;
      var $60=$3;
      var $61$0=$59;
      var $61$1=0;
      var $62$0=$61$0;
      var $62$1=$60;
      ___resumeException($62$0)
    case 20: 
      var $64$0 = ___cxa_find_matching_catch(-1, -1,0); $64$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World16SetAllowSleepingEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $b;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&(1));
      var $8=(($4+102976)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&(1));
      var $12=(($7)|(0))==(($11)|(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 9; break;
    case 3: 
      var $15=$2;
      var $16=(($15) & 1);
      var $17=(($4+102976)|0);
      var $18=(($16)&(1));
      HEAP8[($17)]=$18;
      var $19=(($4+102976)|0);
      var $20=HEAP8[($19)];
      var $21=(($20) & 1);
      var $22=(($21)&(1));
      var $23=(($22)|(0))==0;
      if ($23) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $25=(($4+102952)|0);
      var $26=HEAP32[(($25)>>2)];
      $b=$26;
      label = 5; break;
    case 5: 
      var $28=$b;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $31=$b;
      __ZN6b2Body8SetAwakeEb($31, 1);
      label = 7; break;
    case 7: 
      var $33=$b;
      var $34=(($33+96)|0);
      var $35=HEAP32[(($34)>>2)];
      $b=$35;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World10CreateBodyEPK9b2BodyDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $mem;
      var $b;
      $2=$this;
      $3=$def;
      var $4=$2;
      var $5=__ZNK7b2World8IsLockedEv($4);
      var $6=(($5)&(1));
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5255096)|0), 109, ((5260824)|0), ((5257276)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $12=__ZNK7b2World8IsLockedEv($4);
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 11; break;
    case 6: 
      var $15=(($4)|0);
      var $16=__ZN16b2BlockAllocator8AllocateEi($15, 152);
      $mem=$16;
      var $17=$mem;
      var $18=(($17)|(0))==0;
      if ($18) { var $23 = 0;label = 8; break; } else { label = 7; break; }
    case 7: 
      var $20=$17;
      var $21=$3;
      __ZN6b2BodyC2EPK9b2BodyDefP7b2World($20, $21, $4);
      var $23 = $20;label = 8; break;
    case 8: 
      var $23;
      $b=$23;
      var $24=$b;
      var $25=(($24+92)|0);
      HEAP32[(($25)>>2)]=0;
      var $26=(($4+102952)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$b;
      var $29=(($28+96)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=(($4+102952)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))!=0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=$b;
      var $35=(($4+102952)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+92)|0);
      HEAP32[(($37)>>2)]=$34;
      label = 10; break;
    case 10: 
      var $39=$b;
      var $40=(($4+102952)|0);
      HEAP32[(($40)>>2)]=$39;
      var $41=(($4+102960)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)+(1))|0);
      HEAP32[(($41)>>2)]=$43;
      var $44=$b;
      $1=$44;
      label = 11; break;
    case 11: 
      var $46=$1;
      return $46;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World11DestroyBodyEP6b2Body($this, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $je;
      var $je0;
      var $ce;
      var $ce0;
      var $f;
      var $f0;
      $1=$this;
      $2=$b;
      var $3=$1;
      var $4=(($3+102960)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) > 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5255096)|0), 133, ((5260736)|0), ((5254176)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $11=__ZNK7b2World8IsLockedEv($3);
      var $12=(($11)&(1));
      var $13=(($12)|(0))==0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5255096)|0), 134, ((5260736)|0), ((5257276)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $18=__ZNK7b2World8IsLockedEv($3);
      if ($18) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 29; break;
    case 9: 
      var $21=$2;
      var $22=(($21+108)|0);
      var $23=HEAP32[(($22)>>2)];
      $je=$23;
      label = 10; break;
    case 10: 
      var $25=$je;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $28=$je;
      $je0=$28;
      var $29=$je;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      $je=$31;
      var $32=(($3+102980)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $36=(($3+102980)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$je0;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      FUNCTION_TABLE[$41]($37, $44);
      label = 13; break;
    case 13: 
      var $46=$je0;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      __ZN7b2World12DestroyJointEP7b2Joint($3, $48);
      var $49=$je;
      var $50=$2;
      var $51=(($50+108)|0);
      HEAP32[(($51)>>2)]=$49;
      label = 10; break;
    case 14: 
      var $53=$2;
      var $54=(($53+108)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=$2;
      var $56=(($55+112)|0);
      var $57=HEAP32[(($56)>>2)];
      $ce=$57;
      label = 15; break;
    case 15: 
      var $59=$ce;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $62=$ce;
      $ce0=$62;
      var $63=$ce;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      $ce=$65;
      var $66=(($3+102872)|0);
      var $67=$ce0;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      __ZN16b2ContactManager7DestroyEP9b2Contact($66, $69);
      label = 15; break;
    case 17: 
      var $71=$2;
      var $72=(($71+112)|0);
      HEAP32[(($72)>>2)]=0;
      var $73=$2;
      var $74=(($73+100)|0);
      var $75=HEAP32[(($74)>>2)];
      $f=$75;
      label = 18; break;
    case 18: 
      var $77=$f;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $80=$f;
      $f0=$80;
      var $81=$f;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      $f=$83;
      var $84=(($3+102980)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85)|(0))!=0;
      if ($86) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $88=(($3+102980)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$89;
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+12)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$f0;
      FUNCTION_TABLE[$93]($89, $94);
      label = 21; break;
    case 21: 
      var $96=$f0;
      var $97=(($3+102872)|0);
      var $98=(($97)|0);
      __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($96, $98);
      var $99=$f0;
      var $100=(($3)|0);
      __ZN9b2Fixture7DestroyEP16b2BlockAllocator($99, $100);
      var $101=$f0;
      var $102=(($3)|0);
      var $103=$f0;
      var $104=$103;
      __ZN16b2BlockAllocator4FreeEPvi($102, $104, 44);
      var $105=$f;
      var $106=$2;
      var $107=(($106+100)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$2;
      var $109=(($108+104)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110)-(1))|0);
      HEAP32[(($109)>>2)]=$111;
      label = 18; break;
    case 22: 
      var $113=$2;
      var $114=(($113+100)|0);
      HEAP32[(($114)>>2)]=0;
      var $115=$2;
      var $116=(($115+104)|0);
      HEAP32[(($116)>>2)]=0;
      var $117=$2;
      var $118=(($117+92)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119)|(0))!=0;
      if ($120) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $122=$2;
      var $123=(($122+96)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$2;
      var $126=(($125+92)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+96)|0);
      HEAP32[(($128)>>2)]=$124;
      label = 24; break;
    case 24: 
      var $130=$2;
      var $131=(($130+96)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132)|(0))!=0;
      if ($133) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $135=$2;
      var $136=(($135+92)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$2;
      var $139=(($138+96)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+92)|0);
      HEAP32[(($141)>>2)]=$137;
      label = 26; break;
    case 26: 
      var $143=$2;
      var $144=(($3+102952)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($143)|(0))==(($145)|(0));
      if ($146) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $148=$2;
      var $149=(($148+96)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($3+102952)|0);
      HEAP32[(($151)>>2)]=$150;
      label = 28; break;
    case 28: 
      var $153=(($3+102960)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=((($154)-(1))|0);
      HEAP32[(($153)>>2)]=$155;
      var $156=$2;
      __ZN6b2BodyD2Ev($156);
      var $157=(($3)|0);
      var $158=$2;
      var $159=$158;
      __ZN16b2BlockAllocator4FreeEPvi($157, $159, 152);
      label = 29; break;
    case 29: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World12DestroyJointEP7b2Joint($this, $j) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $collideConnected;
      var $bodyA;
      var $bodyB;
      var $edge;
      $1=$this;
      $2=$j;
      var $3=$1;
      var $4=__ZNK7b2World8IsLockedEv($3);
      var $5=(($4)&(1));
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5255096)|0), 274, ((5260696)|0), ((5257276)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $11=__ZNK7b2World8IsLockedEv($3);
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 34; break;
    case 6: 
      var $14=$2;
      var $15=(($14+61)|0);
      var $16=HEAP8[($15)];
      var $17=(($16) & 1);
      var $18=(($17)&(1));
      $collideConnected=$18;
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$2;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+12)|0);
      HEAP32[(($30)>>2)]=$26;
      label = 8; break;
    case 8: 
      var $32=$2;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|(0))!=0;
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $37=$2;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$2;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+8)|0);
      HEAP32[(($43)>>2)]=$39;
      label = 10; break;
    case 10: 
      var $45=$2;
      var $46=(($3+102956)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($45)|(0))==(($47)|(0));
      if ($48) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $50=$2;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($3+102956)|0);
      HEAP32[(($53)>>2)]=$52;
      label = 12; break;
    case 12: 
      var $55=$2;
      var $56=(($55+48)|0);
      var $57=HEAP32[(($56)>>2)];
      $bodyA=$57;
      var $58=$2;
      var $59=(($58+52)|0);
      var $60=HEAP32[(($59)>>2)];
      $bodyB=$60;
      var $61=$bodyA;
      __ZN6b2Body8SetAwakeEb($61, 1);
      var $62=$bodyB;
      __ZN6b2Body8SetAwakeEb($62, 1);
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))!=0;
      if ($67) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $69=$2;
      var $70=(($69+16)|0);
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+16)|0);
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+12)|0);
      HEAP32[(($77)>>2)]=$72;
      label = 14; break;
    case 14: 
      var $79=$2;
      var $80=(($79+16)|0);
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82)|(0))!=0;
      if ($83) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $85=$2;
      var $86=(($85+16)|0);
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$2;
      var $90=(($89+16)|0);
      var $91=(($90+12)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+8)|0);
      HEAP32[(($93)>>2)]=$88;
      label = 16; break;
    case 16: 
      var $95=$2;
      var $96=(($95+16)|0);
      var $97=$bodyA;
      var $98=(($97+108)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($96)|(0))==(($99)|(0));
      if ($100) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $102=$2;
      var $103=(($102+16)|0);
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$bodyA;
      var $107=(($106+108)|0);
      HEAP32[(($107)>>2)]=$105;
      label = 18; break;
    case 18: 
      var $109=$2;
      var $110=(($109+16)|0);
      var $111=(($110+8)|0);
      HEAP32[(($111)>>2)]=0;
      var $112=$2;
      var $113=(($112+16)|0);
      var $114=(($113+12)|0);
      HEAP32[(($114)>>2)]=0;
      var $115=$2;
      var $116=(($115+32)|0);
      var $117=(($116+8)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118)|(0))!=0;
      if ($119) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $121=$2;
      var $122=(($121+32)|0);
      var $123=(($122+12)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$2;
      var $126=(($125+32)|0);
      var $127=(($126+8)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+12)|0);
      HEAP32[(($129)>>2)]=$124;
      label = 20; break;
    case 20: 
      var $131=$2;
      var $132=(($131+32)|0);
      var $133=(($132+12)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134)|(0))!=0;
      if ($135) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $137=$2;
      var $138=(($137+32)|0);
      var $139=(($138+8)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$2;
      var $142=(($141+32)|0);
      var $143=(($142+12)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+8)|0);
      HEAP32[(($145)>>2)]=$140;
      label = 22; break;
    case 22: 
      var $147=$2;
      var $148=(($147+32)|0);
      var $149=$bodyB;
      var $150=(($149+108)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($148)|(0))==(($151)|(0));
      if ($152) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $154=$2;
      var $155=(($154+32)|0);
      var $156=(($155+12)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$bodyB;
      var $159=(($158+108)|0);
      HEAP32[(($159)>>2)]=$157;
      label = 24; break;
    case 24: 
      var $161=$2;
      var $162=(($161+32)|0);
      var $163=(($162+8)|0);
      HEAP32[(($163)>>2)]=0;
      var $164=$2;
      var $165=(($164+32)|0);
      var $166=(($165+12)|0);
      HEAP32[(($166)>>2)]=0;
      var $167=$2;
      var $168=(($3)|0);
      __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($167, $168);
      var $169=(($3+102964)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170)|(0)) > 0;
      if ($171) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      ___assert_func(((5255096)|0), 346, ((5260696)|0), ((5251496)|0));
      throw "Reached an unreachable!"
      label = 27; break;
    case 27: 
      var $176=(($3+102964)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=((($177)-(1))|0);
      HEAP32[(($176)>>2)]=$178;
      var $179=$collideConnected;
      var $180=(($179) & 1);
      var $181=(($180)&(1));
      var $182=(($181)|(0))==0;
      if ($182) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $184=$bodyB;
      var $185=__ZN6b2Body14GetContactListEv($184);
      $edge=$185;
      label = 29; break;
    case 29: 
      var $187=$edge;
      var $188=(($187)|(0))!=0;
      if ($188) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $190=$edge;
      var $191=(($190)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=$bodyA;
      var $194=(($192)|(0))==(($193)|(0));
      if ($194) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $196=$edge;
      var $197=(($196+4)|0);
      var $198=HEAP32[(($197)>>2)];
      __ZN9b2Contact16FlagForFilteringEv($198);
      label = 32; break;
    case 32: 
      var $200=$edge;
      var $201=(($200+12)|0);
      var $202=HEAP32[(($201)>>2)];
      $edge=$202;
      label = 29; break;
    case 33: 
      label = 34; break;
    case 34: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World11CreateJointEPK10b2JointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $j;
      var $bodyA;
      var $bodyB;
      var $edge;
      $2=$this;
      $3=$def;
      var $4=$2;
      var $5=__ZNK7b2World8IsLockedEv($4);
      var $6=(($5)&(1));
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5255096)|0), 214, ((5260772)|0), ((5257276)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $12=__ZNK7b2World8IsLockedEv($4);
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 20; break;
    case 6: 
      var $15=$3;
      var $16=(($4)|0);
      var $17=__ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($15, $16);
      $j=$17;
      var $18=$j;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=(($4+102956)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$j;
      var $23=(($22+12)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=(($4+102956)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$j;
      var $29=(($4+102956)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+8)|0);
      HEAP32[(($31)>>2)]=$28;
      label = 8; break;
    case 8: 
      var $33=$j;
      var $34=(($4+102956)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=(($4+102964)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)+(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=$j;
      var $39=$j;
      var $40=(($39+16)|0);
      var $41=(($40+4)|0);
      HEAP32[(($41)>>2)]=$38;
      var $42=$j;
      var $43=(($42+52)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$j;
      var $46=(($45+16)|0);
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=$44;
      var $48=$j;
      var $49=(($48+16)|0);
      var $50=(($49+8)|0);
      HEAP32[(($50)>>2)]=0;
      var $51=$j;
      var $52=(($51+48)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+108)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$j;
      var $57=(($56+16)|0);
      var $58=(($57+12)|0);
      HEAP32[(($58)>>2)]=$55;
      var $59=$j;
      var $60=(($59+48)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+108)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|(0))!=0;
      if ($64) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $66=$j;
      var $67=(($66+16)|0);
      var $68=$j;
      var $69=(($68+48)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+108)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+8)|0);
      HEAP32[(($73)>>2)]=$67;
      label = 10; break;
    case 10: 
      var $75=$j;
      var $76=(($75+16)|0);
      var $77=$j;
      var $78=(($77+48)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+108)|0);
      HEAP32[(($80)>>2)]=$76;
      var $81=$j;
      var $82=$j;
      var $83=(($82+32)|0);
      var $84=(($83+4)|0);
      HEAP32[(($84)>>2)]=$81;
      var $85=$j;
      var $86=(($85+48)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$j;
      var $89=(($88+32)|0);
      var $90=(($89)|0);
      HEAP32[(($90)>>2)]=$87;
      var $91=$j;
      var $92=(($91+32)|0);
      var $93=(($92+8)|0);
      HEAP32[(($93)>>2)]=0;
      var $94=$j;
      var $95=(($94+52)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+108)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$j;
      var $100=(($99+32)|0);
      var $101=(($100+12)|0);
      HEAP32[(($101)>>2)]=$98;
      var $102=$j;
      var $103=(($102+52)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+108)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|(0))!=0;
      if ($107) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $109=$j;
      var $110=(($109+32)|0);
      var $111=$j;
      var $112=(($111+52)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+108)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+8)|0);
      HEAP32[(($116)>>2)]=$110;
      label = 12; break;
    case 12: 
      var $118=$j;
      var $119=(($118+32)|0);
      var $120=$j;
      var $121=(($120+52)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+108)|0);
      HEAP32[(($123)>>2)]=$119;
      var $124=$3;
      var $125=(($124+8)|0);
      var $126=HEAP32[(($125)>>2)];
      $bodyA=$126;
      var $127=$3;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      $bodyB=$129;
      var $130=$3;
      var $131=(($130+16)|0);
      var $132=HEAP8[($131)];
      var $133=(($132) & 1);
      var $134=(($133)&(1));
      var $135=(($134)|(0))==0;
      if ($135) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $137=$bodyB;
      var $138=__ZN6b2Body14GetContactListEv($137);
      $edge=$138;
      label = 14; break;
    case 14: 
      var $140=$edge;
      var $141=(($140)|(0))!=0;
      if ($141) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $143=$edge;
      var $144=(($143)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$bodyA;
      var $147=(($145)|(0))==(($146)|(0));
      if ($147) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $149=$edge;
      var $150=(($149+4)|0);
      var $151=HEAP32[(($150)>>2)];
      __ZN9b2Contact16FlagForFilteringEv($151);
      label = 17; break;
    case 17: 
      var $153=$edge;
      var $154=(($153+12)|0);
      var $155=HEAP32[(($154)>>2)];
      $edge=$155;
      label = 14; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $158=$j;
      $1=$158;
      label = 20; break;
    case 20: 
      var $160=$1;
      return $160;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN8b2Island5ClearEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=(($2+36)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+32)|0);
  HEAP32[(($5)>>2)]=0;
  return;
}
function __ZNK9b2Contact9IsEnabledEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 4;
  var $6=(($5)|(0))==4;
  return $6;
}
function __ZN6b2Body7GetNextEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+96)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN7b2World5SolveERK10b2TimeStep($this, $step) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $island=__stackBase__;
      var $b;
      var $c;
      var $j;
      var $stackSize;
      var $stack;
      var $3;
      var $4;
      var $seed;
      var $stackCount;
      var $b1;
      var $ce;
      var $contact;
      var $sensorA;
      var $sensorB;
      var $other;
      var $je;
      var $other2;
      var $profile=(__stackBase__)+(52);
      var $i;
      var $b3;
      var $timer=(__stackBase__)+(84);
      var $b4;
      $1=$this;
      $2=$step;
      var $5=$1;
      var $6=(($5+102996)|0);
      var $7=(($6+12)|0);
      HEAPF32[(($7)>>2)]=0;
      var $8=(($5+102996)|0);
      var $9=(($8+16)|0);
      HEAPF32[(($9)>>2)]=0;
      var $10=(($5+102996)|0);
      var $11=(($10+20)|0);
      HEAPF32[(($11)>>2)]=0;
      var $12=(($5+102960)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($5+102872)|0);
      var $15=(($14+64)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($5+102964)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($5+68)|0);
      var $20=(($5+102872)|0);
      var $21=(($20+72)|0);
      var $22=HEAP32[(($21)>>2)];
      __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island, $13, $16, $18, $19, $22);
      var $23=(($5+102952)|0);
      var $24=HEAP32[(($23)>>2)];
      $b=$24;
      label = 2; break;
    case 2: 
      var $26=$b;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $29=$b;
      var $30=(($29+4)|0);
      var $31=HEAP16[(($30)>>1)];
      var $32=(($31)&(65535));
      var $33=$32 & -2;
      var $34=(($33) & 65535);
      HEAP16[(($30)>>1)]=$34;
      label = 4; break;
    case 4: 
      var $36=$b;
      var $37=(($36+96)|0);
      var $38=HEAP32[(($37)>>2)];
      $b=$38;
      label = 2; break;
    case 5: 
      var $40=(($5+102872)|0);
      var $41=(($40+60)|0);
      var $42=HEAP32[(($41)>>2)];
      $c=$42;
      label = 6; break;
    case 6: 
      var $44=$c;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $47=$c;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & -2;
      HEAP32[(($48)>>2)]=$50;
      label = 8; break;
    case 8: 
      var $52=$c;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      $c=$54;
      label = 6; break;
    case 9: 
      var $56=(($5+102956)|0);
      var $57=HEAP32[(($56)>>2)];
      $j=$57;
      label = 10; break;
    case 10: 
      var $59=$j;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $62=$j;
      var $63=(($62+60)|0);
      HEAP8[($63)]=0;
      label = 12; break;
    case 12: 
      var $65=$j;
      var $66=(($65+12)|0);
      var $67=HEAP32[(($66)>>2)];
      $j=$67;
      label = 10; break;
    case 13: 
      var $69=(($5+102960)|0);
      var $70=HEAP32[(($69)>>2)];
      $stackSize=$70;
      var $71=(($5+68)|0);
      var $72=$stackSize;
      var $73=($72<<2);
      var $74 = (function() { try { __THREW__ = 0; return __ZN16b2StackAllocator8AllocateEi($71, $73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $76=$74;
      $stack=$76;
      var $77=(($5+102952)|0);
      var $78=HEAP32[(($77)>>2)];
      $seed=$78;
      label = 15; break;
    case 15: 
      var $80=$seed;
      var $81=(($80)|(0))!=0;
      if ($81) { label = 16; break; } else { label = 88; break; }
    case 16: 
      var $83=$seed;
      var $84=(($83+4)|0);
      var $85=HEAP16[(($84)>>1)];
      var $86=(($85)&(65535));
      var $87=$86 & 1;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 17; break; } else { label = 19; break; }
    case 17: 
      label = 87; break;
    case 18: 
      var $91$0 = ___cxa_find_matching_catch(-1, -1); $91$1 = tempRet0;
      var $92=$91$0;
      $3=$92;
      var $93=$91$1;
      $4=$93;
      (function() { try { __THREW__ = 0; return __ZN8b2IslandD2Ev($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 104; break; } else { label = 106; break; }
    case 19: 
      var $95=$seed;
      var $96 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7IsAwakeEv($95) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 18; break; }
    case 20: 
      var $98=(($96)&(1));
      var $99=(($98)|(0))==0;
      if ($99) { label = 23; break; } else { label = 21; break; }
    case 21: 
      var $101=$seed;
      var $102 = (function() { try { __THREW__ = 0; return __ZNK6b2Body8IsActiveEv($101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 18; break; }
    case 22: 
      var $104=(($102)&(1));
      var $105=(($104)|(0))==0;
      if ($105) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 87; break;
    case 24: 
      var $108=$seed;
      var $109 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7GetTypeEv($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 18; break; }
    case 25: 
      var $111=(($109)|(0))==0;
      if ($111) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 87; break;
    case 27: 
      (function() { try { __THREW__ = 0; return __ZN8b2Island5ClearEv($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 18; break; }
    case 28: 
      $stackCount=0;
      var $115=$seed;
      var $116=$stackCount;
      var $117=((($116)+(1))|0);
      $stackCount=$117;
      var $118=$stack;
      var $119=(($118+($116<<2))|0);
      HEAP32[(($119)>>2)]=$115;
      var $120=$seed;
      var $121=(($120+4)|0);
      var $122=HEAP16[(($121)>>1)];
      var $123=(($122)&(65535));
      var $124=$123 | 1;
      var $125=(($124) & 65535);
      HEAP16[(($121)>>1)]=$125;
      label = 29; break;
    case 29: 
      var $127=$stackCount;
      var $128=(($127)|(0)) > 0;
      if ($128) { label = 30; break; } else { label = 78; break; }
    case 30: 
      var $130=$stackCount;
      var $131=((($130)-(1))|0);
      $stackCount=$131;
      var $132=$stack;
      var $133=(($132+($131<<2))|0);
      var $134=HEAP32[(($133)>>2)];
      $b1=$134;
      var $135=$b1;
      var $136 = (function() { try { __THREW__ = 0; return __ZNK6b2Body8IsActiveEv($135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 18; break; }
    case 31: 
      var $138=(($136)&(1));
      var $139=(($138)|(0))==1;
      if ($139) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 35; break;
    case 33: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5255096)|0), 445, ((5260656)|0), ((5250388)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 18; break; }
    case 34: 
      throw "Reached an unreachable!"
      label = 35; break;
    case 35: 
      var $145=$b1;
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP6b2Body($island, $145) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 18; break; }
    case 36: 
      var $147=$b1;
      (function() { try { __THREW__ = 0; return __ZN6b2Body8SetAwakeEb($147, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 18; break; }
    case 37: 
      var $149=$b1;
      var $150 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7GetTypeEv($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 18; break; }
    case 38: 
      var $152=(($150)|(0))==0;
      if ($152) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 29; break;
    case 40: 
      var $155=$b1;
      var $156=(($155+112)|0);
      var $157=HEAP32[(($156)>>2)];
      $ce=$157;
      label = 41; break;
    case 41: 
      var $159=$ce;
      var $160=(($159)|(0))!=0;
      if ($160) { label = 42; break; } else { label = 61; break; }
    case 42: 
      var $162=$ce;
      var $163=(($162+4)|0);
      var $164=HEAP32[(($163)>>2)];
      $contact=$164;
      var $165=$contact;
      var $166=(($165+4)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$167 & 1;
      var $169=(($168)|(0))!=0;
      if ($169) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 60; break;
    case 44: 
      var $172=$contact;
      var $173 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact9IsEnabledEv($172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 18; break; }
    case 45: 
      var $175=(($173)&(1));
      var $176=(($175)|(0))==0;
      if ($176) { label = 48; break; } else { label = 46; break; }
    case 46: 
      var $178=$contact;
      var $179 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact10IsTouchingEv($178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 18; break; }
    case 47: 
      var $181=(($179)&(1));
      var $182=(($181)|(0))==0;
      if ($182) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 60; break;
    case 49: 
      var $185=$contact;
      var $186=(($185+48)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187+38)|0);
      var $189=HEAP8[($188)];
      var $190=(($189) & 1);
      var $191=(($190)&(1));
      $sensorA=$191;
      var $192=$contact;
      var $193=(($192+52)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194+38)|0);
      var $196=HEAP8[($195)];
      var $197=(($196) & 1);
      var $198=(($197)&(1));
      $sensorB=$198;
      var $199=$sensorA;
      var $200=(($199) & 1);
      if ($200) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $202=$sensorB;
      var $203=(($202) & 1);
      if ($203) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 60; break;
    case 52: 
      var $206=$contact;
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP9b2Contact($island, $206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 18; break; }
    case 53: 
      var $208=$contact;
      var $209=(($208+4)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=$210 | 1;
      HEAP32[(($209)>>2)]=$211;
      var $212=$ce;
      var $213=(($212)|0);
      var $214=HEAP32[(($213)>>2)];
      $other=$214;
      var $215=$other;
      var $216=(($215+4)|0);
      var $217=HEAP16[(($216)>>1)];
      var $218=(($217)&(65535));
      var $219=$218 & 1;
      var $220=(($219)|(0))!=0;
      if ($220) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 60; break;
    case 55: 
      var $223=$stackCount;
      var $224=$stackSize;
      var $225=(($223)|(0)) < (($224)|(0));
      if ($225) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 59; break;
    case 57: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5255096)|0), 495, ((5260656)|0), ((5249620)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 58; break; } else { label = 18; break; }
    case 58: 
      throw "Reached an unreachable!"
      label = 59; break;
    case 59: 
      var $231=$other;
      var $232=$stackCount;
      var $233=((($232)+(1))|0);
      $stackCount=$233;
      var $234=$stack;
      var $235=(($234+($232<<2))|0);
      HEAP32[(($235)>>2)]=$231;
      var $236=$other;
      var $237=(($236+4)|0);
      var $238=HEAP16[(($237)>>1)];
      var $239=(($238)&(65535));
      var $240=$239 | 1;
      var $241=(($240) & 65535);
      HEAP16[(($237)>>1)]=$241;
      label = 60; break;
    case 60: 
      var $243=$ce;
      var $244=(($243+12)|0);
      var $245=HEAP32[(($244)>>2)];
      $ce=$245;
      label = 41; break;
    case 61: 
      var $247=$b1;
      var $248=(($247+108)|0);
      var $249=HEAP32[(($248)>>2)];
      $je=$249;
      label = 62; break;
    case 62: 
      var $251=$je;
      var $252=(($251)|(0))!=0;
      if ($252) { label = 63; break; } else { label = 77; break; }
    case 63: 
      var $254=$je;
      var $255=(($254+4)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+60)|0);
      var $258=HEAP8[($257)];
      var $259=(($258) & 1);
      var $260=(($259)&(1));
      var $261=(($260)|(0))==1;
      if ($261) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 76; break;
    case 65: 
      var $264=$je;
      var $265=(($264)|0);
      var $266=HEAP32[(($265)>>2)];
      $other2=$266;
      var $267=$other2;
      var $268 = (function() { try { __THREW__ = 0; return __ZNK6b2Body8IsActiveEv($267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 66; break; } else { label = 18; break; }
    case 66: 
      var $270=(($268)&(1));
      var $271=(($270)|(0))==0;
      if ($271) { label = 67; break; } else { label = 68; break; }
    case 67: 
      label = 76; break;
    case 68: 
      var $274=$je;
      var $275=(($274+4)|0);
      var $276=HEAP32[(($275)>>2)];
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP7b2Joint($island, $276) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 69; break; } else { label = 18; break; }
    case 69: 
      var $278=$je;
      var $279=(($278+4)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+60)|0);
      HEAP8[($281)]=1;
      var $282=$other2;
      var $283=(($282+4)|0);
      var $284=HEAP16[(($283)>>1)];
      var $285=(($284)&(65535));
      var $286=$285 & 1;
      var $287=(($286)|(0))!=0;
      if ($287) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 76; break;
    case 71: 
      var $290=$stackCount;
      var $291=$stackSize;
      var $292=(($290)|(0)) < (($291)|(0));
      if ($292) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 75; break;
    case 73: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5255096)|0), 524, ((5260656)|0), ((5249620)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 74; break; } else { label = 18; break; }
    case 74: 
      throw "Reached an unreachable!"
      label = 75; break;
    case 75: 
      var $298=$other2;
      var $299=$stackCount;
      var $300=((($299)+(1))|0);
      $stackCount=$300;
      var $301=$stack;
      var $302=(($301+($299<<2))|0);
      HEAP32[(($302)>>2)]=$298;
      var $303=$other2;
      var $304=(($303+4)|0);
      var $305=HEAP16[(($304)>>1)];
      var $306=(($305)&(65535));
      var $307=$306 | 1;
      var $308=(($307) & 65535);
      HEAP16[(($304)>>1)]=$308;
      label = 76; break;
    case 76: 
      var $310=$je;
      var $311=(($310+12)|0);
      var $312=HEAP32[(($311)>>2)];
      $je=$312;
      label = 62; break;
    case 77: 
      label = 29; break;
    case 78: 
      var $315=$2;
      var $316=(($5+102968)|0);
      var $317=(($5+102976)|0);
      var $318=HEAP8[($317)];
      var $319=(($318) & 1);
      (function() { try { __THREW__ = 0; return __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($island, $profile, $315, $316, $319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 79; break; } else { label = 18; break; }
    case 79: 
      var $321=(($profile+12)|0);
      var $322=HEAPF32[(($321)>>2)];
      var $323=(($5+102996)|0);
      var $324=(($323+12)|0);
      var $325=HEAPF32[(($324)>>2)];
      var $326=($325)+($322);
      HEAPF32[(($324)>>2)]=$326;
      var $327=(($profile+16)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=(($5+102996)|0);
      var $330=(($329+16)|0);
      var $331=HEAPF32[(($330)>>2)];
      var $332=($331)+($328);
      HEAPF32[(($330)>>2)]=$332;
      var $333=(($profile+20)|0);
      var $334=HEAPF32[(($333)>>2)];
      var $335=(($5+102996)|0);
      var $336=(($335+20)|0);
      var $337=HEAPF32[(($336)>>2)];
      var $338=($337)+($334);
      HEAPF32[(($336)>>2)]=$338;
      $i=0;
      label = 80; break;
    case 80: 
      var $340=$i;
      var $341=(($island+28)|0);
      var $342=HEAP32[(($341)>>2)];
      var $343=(($340)|(0)) < (($342)|(0));
      if ($343) { label = 81; break; } else { label = 86; break; }
    case 81: 
      var $345=$i;
      var $346=(($island+8)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=(($347+($345<<2))|0);
      var $349=HEAP32[(($348)>>2)];
      $b3=$349;
      var $350=$b3;
      var $351 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7GetTypeEv($350) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 82; break; } else { label = 18; break; }
    case 82: 
      var $353=(($351)|(0))==0;
      if ($353) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $355=$b3;
      var $356=(($355+4)|0);
      var $357=HEAP16[(($356)>>1)];
      var $358=(($357)&(65535));
      var $359=$358 & -2;
      var $360=(($359) & 65535);
      HEAP16[(($356)>>1)]=$360;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $363=$i;
      var $364=((($363)+(1))|0);
      $i=$364;
      label = 80; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $367=$seed;
      var $368=(($367+96)|0);
      var $369=HEAP32[(($368)>>2)];
      $seed=$369;
      label = 15; break;
    case 88: 
      var $371=(($5+68)|0);
      var $372=$stack;
      var $373=$372;
      (function() { try { __THREW__ = 0; return __ZN16b2StackAllocator4FreeEPv($371, $373) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 89; break; } else { label = 18; break; }
    case 89: 
      (function() { try { __THREW__ = 0; return __ZN7b2TimerC2Ev($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 90; break; } else { label = 18; break; }
    case 90: 
      var $376=(($5+102952)|0);
      var $377=HEAP32[(($376)>>2)];
      $b4=$377;
      label = 91; break;
    case 91: 
      var $379=$b4;
      var $380=(($379)|(0))!=0;
      if ($380) { label = 92; break; } else { label = 101; break; }
    case 92: 
      var $382=$b4;
      var $383=(($382+4)|0);
      var $384=HEAP16[(($383)>>1)];
      var $385=(($384)&(65535));
      var $386=$385 & 1;
      var $387=(($386)|(0))==0;
      if ($387) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 99; break;
    case 94: 
      var $390=$b4;
      var $391 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7GetTypeEv($390) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 95; break; } else { label = 18; break; }
    case 95: 
      var $393=(($391)|(0))==0;
      if ($393) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 99; break;
    case 97: 
      var $396=$b4;
      (function() { try { __THREW__ = 0; return __ZN6b2Body19SynchronizeFixturesEv($396) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 98; break; } else { label = 18; break; }
    case 98: 
      label = 99; break;
    case 99: 
      var $399=$b4;
      var $400 = (function() { try { __THREW__ = 0; return __ZN6b2Body7GetNextEv($399) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 100; break; } else { label = 18; break; }
    case 100: 
      $b4=$400;
      label = 91; break;
    case 101: 
      var $403=(($5+102872)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManager15FindNewContactsEv($403) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 102; break; } else { label = 18; break; }
    case 102: 
      var $405 = (function() { try { __THREW__ = 0; return __ZNK7b2Timer15GetMillisecondsEv($timer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 103; break; } else { label = 18; break; }
    case 103: 
      var $407=(($5+102996)|0);
      var $408=(($407+24)|0);
      HEAPF32[(($408)>>2)]=$405;
      __ZN8b2IslandD2Ev($island);
      STACKTOP = __stackBase__;
      return;
    case 104: 
      label = 105; break;
    case 105: 
      var $411=$3;
      var $412=$4;
      var $413$0=$411;
      var $413$1=0;
      var $414$0=$413$0;
      var $414$1=$412;
      ___resumeException($414$0)
    case 106: 
      var $416$0 = ___cxa_find_matching_catch(-1, -1,0); $416$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN8b2Island3AddEP6b2Body($this, $body) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$body;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0)) < (($7)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5252828)|0), 54, ((5260504)|0), ((5252052)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $13=(($3+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$2;
      var $16=(($15+8)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$2;
      var $18=(($3+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($3+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+($19<<2))|0);
      HEAP32[(($22)>>2)]=$17;
      var $23=(($3+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)+(1))|0);
      HEAP32[(($23)>>2)]=$25;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN8b2Island3AddEP9b2Contact($this, $contact) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$contact;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+44)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0)) < (($7)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5252828)|0), 62, ((5260440)|0), ((5252324)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=(($3+36)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)+(1))|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=(($3+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($15<<2))|0);
      HEAP32[(($19)>>2)]=$13;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN8b2Island3AddEP7b2Joint($this, $joint) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$joint;
      var $3=$1;
      var $4=(($3+32)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($3+48)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0)) < (($7)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5252828)|0), 68, ((5260472)|0), ((5252552)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=(($3+32)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)+(1))|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=(($3+16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($15<<2))|0);
      HEAP32[(($19)>>2)]=$13;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World8SolveTOIERK10b2TimeStep($this, $step) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 332)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $island=__stackBase__;
      var $b;
      var $c;
      var $minContact;
      var $minAlpha;
      var $c1;
      var $3;
      var $4;
      var $alpha;
      var $fA;
      var $fB;
      var $bA;
      var $bB;
      var $typeA;
      var $typeB;
      var $activeA;
      var $activeB;
      var $collideA;
      var $collideB;
      var $alpha0;
      var $indexA;
      var $indexB;
      var $input=(__stackBase__)+(52);
      var $output=(__stackBase__)+(184);
      var $beta;
      var $fA2;
      var $fB3;
      var $bA4;
      var $bB5;
      var $backup1=(__stackBase__)+(192);
      var $backup2=(__stackBase__)+(228);
      var $bodies=(__stackBase__)+(264);
      var $i;
      var $body;
      var $ce;
      var $contact;
      var $other;
      var $sensorA;
      var $sensorB;
      var $backup=(__stackBase__)+(272);
      var $subStep=(__stackBase__)+(308);
      var $i6;
      var $body7;
      var $ce8;
      $1=$this;
      $2=$step;
      var $5=$1;
      var $6=(($5+68)|0);
      var $7=(($5+102872)|0);
      var $8=(($7+72)|0);
      var $9=HEAP32[(($8)>>2)];
      __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island, 64, 32, 0, $6, $9);
      var $10=(($5+102995)|0);
      var $11=HEAP8[($10)];
      var $12=(($11) & 1);
      if ($12) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $14=(($5+102952)|0);
      var $15=HEAP32[(($14)>>2)];
      $b=$15;
      label = 3; break;
    case 3: 
      var $17=$b;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $20=$b;
      var $21=(($20+4)|0);
      var $22=HEAP16[(($21)>>1)];
      var $23=(($22)&(65535));
      var $24=$23 & -2;
      var $25=(($24) & 65535);
      HEAP16[(($21)>>1)]=$25;
      var $26=$b;
      var $27=(($26+28)|0);
      var $28=(($27+32)|0);
      HEAPF32[(($28)>>2)]=0;
      label = 5; break;
    case 5: 
      var $30=$b;
      var $31=(($30+96)|0);
      var $32=HEAP32[(($31)>>2)];
      $b=$32;
      label = 3; break;
    case 6: 
      var $34=(($5+102872)|0);
      var $35=(($34+60)|0);
      var $36=HEAP32[(($35)>>2)];
      $c=$36;
      label = 7; break;
    case 7: 
      var $38=$c;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $41=$c;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & -34;
      HEAP32[(($42)>>2)]=$44;
      var $45=$c;
      var $46=(($45+128)|0);
      HEAP32[(($46)>>2)]=0;
      var $47=$c;
      var $48=(($47+132)|0);
      HEAPF32[(($48)>>2)]=1;
      label = 9; break;
    case 9: 
      var $50=$c;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $c=$52;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $minContact=0;
      $minAlpha=1;
      var $56=(($5+102872)|0);
      var $57=(($56+60)|0);
      var $58=HEAP32[(($57)>>2)];
      $c1=$58;
      label = 13; break;
    case 13: 
      var $60=$c1;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 14; break; } else { label = 82; break; }
    case 14: 
      var $63=$c1;
      var $64 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact9IsEnabledEv($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $66=(($64)&(1));
      var $67=(($66)|(0))==0;
      if ($67) { label = 16; break; } else { label = 18; break; }
    case 16: 
      label = 81; break;
    case 17: 
      var $70$0 = ___cxa_find_matching_catch(-1, -1); $70$1 = tempRet0;
      var $71=$70$0;
      $3=$71;
      var $72=$70$1;
      $4=$72;
      (function() { try { __THREW__ = 0; return __ZN8b2IslandD2Ev($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 167; break; } else { label = 169; break; }
    case 18: 
      var $74=$c1;
      var $75=(($74+128)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|(0)) > 8;
      if ($77) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 81; break;
    case 20: 
      $alpha=1;
      var $80=$c1;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$82 & 32;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $86=$c1;
      var $87=(($86+132)|0);
      var $88=HEAPF32[(($87)>>2)];
      $alpha=$88;
      label = 78; break;
    case 22: 
      var $90=$c1;
      var $91 = (function() { try { __THREW__ = 0; return __ZN9b2Contact11GetFixtureAEv($90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 17; break; }
    case 23: 
      $fA=$91;
      var $93=$c1;
      var $94 = (function() { try { __THREW__ = 0; return __ZN9b2Contact11GetFixtureBEv($93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 17; break; }
    case 24: 
      $fB=$94;
      var $96=$fA;
      var $97 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture8IsSensorEv($96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 17; break; }
    case 25: 
      if ($97) { label = 28; break; } else { label = 26; break; }
    case 26: 
      var $100=$fB;
      var $101 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture8IsSensorEv($100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 17; break; }
    case 27: 
      if ($101) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 81; break;
    case 29: 
      var $105=$fA;
      var $106 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture7GetBodyEv($105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 17; break; }
    case 30: 
      $bA=$106;
      var $108=$fB;
      var $109 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture7GetBodyEv($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 17; break; }
    case 31: 
      $bB=$109;
      var $111=$bA;
      var $112=(($111)|0);
      var $113=HEAP32[(($112)>>2)];
      $typeA=$113;
      var $114=$bB;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      $typeB=$116;
      var $117=$typeA;
      var $118=(($117)|(0))==2;
      if ($118) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $120=$typeB;
      var $121=(($120)|(0))==2;
      if ($121) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 36; break;
    case 34: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5255096)|0), 641, ((5260612)|0), ((5248832)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 17; break; }
    case 35: 
      throw "Reached an unreachable!"
      label = 36; break;
    case 36: 
      var $127=$bA;
      var $128 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7IsAwakeEv($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 17; break; }
    case 37: 
      if ($128) { label = 38; break; } else { var $134 = 0;label = 39; break; }
    case 38: 
      var $131=$typeA;
      var $132=(($131)|(0))!=0;
      var $134 = $132;label = 39; break;
    case 39: 
      var $134;
      var $135=(($134)&(1));
      $activeA=$135;
      var $136=$bB;
      var $137 = (function() { try { __THREW__ = 0; return __ZNK6b2Body7IsAwakeEv($136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 17; break; }
    case 40: 
      if ($137) { label = 41; break; } else { var $143 = 0;label = 42; break; }
    case 41: 
      var $140=$typeB;
      var $141=(($140)|(0))!=0;
      var $143 = $141;label = 42; break;
    case 42: 
      var $143;
      var $144=(($143)&(1));
      $activeB=$144;
      var $145=$activeA;
      var $146=(($145) & 1);
      var $147=(($146)&(1));
      var $148=(($147)|(0))==0;
      if ($148) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $150=$activeB;
      var $151=(($150) & 1);
      var $152=(($151)&(1));
      var $153=(($152)|(0))==0;
      if ($153) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 81; break;
    case 45: 
      var $156=$bA;
      var $157 = (function() { try { __THREW__ = 0; return __ZNK6b2Body8IsBulletEv($156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 17; break; }
    case 46: 
      if ($157) { var $163 = 1;label = 48; break; } else { label = 47; break; }
    case 47: 
      var $160=$typeA;
      var $161=(($160)|(0))!=2;
      var $163 = $161;label = 48; break;
    case 48: 
      var $163;
      var $164=(($163)&(1));
      $collideA=$164;
      var $165=$bB;
      var $166 = (function() { try { __THREW__ = 0; return __ZNK6b2Body8IsBulletEv($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 17; break; }
    case 49: 
      if ($166) { var $172 = 1;label = 51; break; } else { label = 50; break; }
    case 50: 
      var $169=$typeB;
      var $170=(($169)|(0))!=2;
      var $172 = $170;label = 51; break;
    case 51: 
      var $172;
      var $173=(($172)&(1));
      $collideB=$173;
      var $174=$collideA;
      var $175=(($174) & 1);
      var $176=(($175)&(1));
      var $177=(($176)|(0))==0;
      if ($177) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $179=$collideB;
      var $180=(($179) & 1);
      var $181=(($180)&(1));
      var $182=(($181)|(0))==0;
      if ($182) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 81; break;
    case 54: 
      var $185=$bA;
      var $186=(($185+28)|0);
      var $187=(($186+32)|0);
      var $188=HEAPF32[(($187)>>2)];
      $alpha0=$188;
      var $189=$bA;
      var $190=(($189+28)|0);
      var $191=(($190+32)|0);
      var $192=HEAPF32[(($191)>>2)];
      var $193=$bB;
      var $194=(($193+28)|0);
      var $195=(($194+32)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=$192 < $196;
      if ($197) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $199=$bB;
      var $200=(($199+28)|0);
      var $201=(($200+32)|0);
      var $202=HEAPF32[(($201)>>2)];
      $alpha0=$202;
      var $203=$bA;
      var $204=(($203+28)|0);
      var $205=$alpha0;
      (function() { try { __THREW__ = 0; return __ZN7b2Sweep7AdvanceEf($204, $205) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 56; break; } else { label = 17; break; }
    case 56: 
      label = 61; break;
    case 57: 
      var $208=$bB;
      var $209=(($208+28)|0);
      var $210=(($209+32)|0);
      var $211=HEAPF32[(($210)>>2)];
      var $212=$bA;
      var $213=(($212+28)|0);
      var $214=(($213+32)|0);
      var $215=HEAPF32[(($214)>>2)];
      var $216=$211 < $215;
      if ($216) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $218=$bA;
      var $219=(($218+28)|0);
      var $220=(($219+32)|0);
      var $221=HEAPF32[(($220)>>2)];
      $alpha0=$221;
      var $222=$bB;
      var $223=(($222+28)|0);
      var $224=$alpha0;
      (function() { try { __THREW__ = 0; return __ZN7b2Sweep7AdvanceEf($223, $224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 17; break; }
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $228=$alpha0;
      var $229=$228 < 1;
      if ($229) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 65; break;
    case 63: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5255096)|0), 676, ((5260612)|0), ((5248328)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 64; break; } else { label = 17; break; }
    case 64: 
      throw "Reached an unreachable!"
      label = 65; break;
    case 65: 
      var $235=$c1;
      var $236 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact14GetChildIndexAEv($235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 66; break; } else { label = 17; break; }
    case 66: 
      $indexA=$236;
      var $238=$c1;
      var $239 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact14GetChildIndexBEv($238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 67; break; } else { label = 17; break; }
    case 67: 
      $indexB=$239;
      (function() { try { __THREW__ = 0; return __ZN10b2TOIInputC1Ev($input) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 68; break; } else { label = 17; break; }
    case 68: 
      var $242=(($input)|0);
      var $243=$fA;
      var $244 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture8GetShapeEv($243) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 69; break; } else { label = 17; break; }
    case 69: 
      var $246=$indexA;
      (function() { try { __THREW__ = 0; return __ZN15b2DistanceProxy3SetEPK7b2Shapei($242, $244, $246) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 70; break; } else { label = 17; break; }
    case 70: 
      var $248=(($input+28)|0);
      var $249=$fB;
      var $250 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture8GetShapeEv($249) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 71; break; } else { label = 17; break; }
    case 71: 
      var $252=$indexB;
      (function() { try { __THREW__ = 0; return __ZN15b2DistanceProxy3SetEPK7b2Shapei($248, $250, $252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { label = 17; break; }
    case 72: 
      var $254=(($input+56)|0);
      var $255=$bA;
      var $256=(($255+28)|0);
      var $257=$254;
      var $258=$256;
      assert(36 % 1 === 0);_memcpy($257, $258, 36);
      var $259=(($input+92)|0);
      var $260=$bB;
      var $261=(($260+28)|0);
      var $262=$259;
      var $263=$261;
      assert(36 % 1 === 0);_memcpy($262, $263, 36);
      var $264=(($input+128)|0);
      HEAPF32[(($264)>>2)]=1;
      (function() { try { __THREW__ = 0; return __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 73; break; } else { label = 17; break; }
    case 73: 
      var $266=(($output+4)|0);
      var $267=HEAPF32[(($266)>>2)];
      $beta=$267;
      var $268=(($output)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($269)|(0))==3;
      if ($270) { label = 74; break; } else { label = 76; break; }
    case 74: 
      var $272=$alpha0;
      var $273=$alpha0;
      var $274=(1)-($273);
      var $275=$beta;
      var $276=($274)*($275);
      var $277=($272)+($276);
      var $278 = (function() { try { __THREW__ = 0; return __Z5b2MinIfET_S0_S0_($277, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 75; break; } else { label = 17; break; }
    case 75: 
      $alpha=$278;
      label = 77; break;
    case 76: 
      $alpha=1;
      label = 77; break;
    case 77: 
      var $282=$alpha;
      var $283=$c1;
      var $284=(($283+132)|0);
      HEAPF32[(($284)>>2)]=$282;
      var $285=$c1;
      var $286=(($285+4)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$287 | 32;
      HEAP32[(($286)>>2)]=$288;
      label = 78; break;
    case 78: 
      var $290=$alpha;
      var $291=$minAlpha;
      var $292=$290 < $291;
      if ($292) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $294=$c1;
      $minContact=$294;
      var $295=$alpha;
      $minAlpha=$295;
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $298=$c1;
      var $299=(($298+12)|0);
      var $300=HEAP32[(($299)>>2)];
      $c1=$300;
      label = 13; break;
    case 82: 
      var $302=$minContact;
      var $303=(($302)|(0))==0;
      if ($303) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $305=$minAlpha;
      var $306=0.9999988079071045 < $305;
      if ($306) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $308=(($5+102995)|0);
      HEAP8[($308)]=1;
      label = 166; break;
    case 85: 
      var $310=$minContact;
      var $311 = (function() { try { __THREW__ = 0; return __ZN9b2Contact11GetFixtureAEv($310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 86; break; } else { label = 17; break; }
    case 86: 
      $fA2=$311;
      var $313=$minContact;
      var $314 = (function() { try { __THREW__ = 0; return __ZN9b2Contact11GetFixtureBEv($313) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 87; break; } else { label = 17; break; }
    case 87: 
      $fB3=$314;
      var $316=$fA2;
      var $317 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture7GetBodyEv($316) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 88; break; } else { label = 17; break; }
    case 88: 
      $bA4=$317;
      var $319=$fB3;
      var $320 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture7GetBodyEv($319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 89; break; } else { label = 17; break; }
    case 89: 
      $bB5=$320;
      var $322=$bA4;
      var $323=(($322+28)|0);
      var $324=$backup1;
      var $325=$323;
      assert(36 % 1 === 0);_memcpy($324, $325, 36);
      var $326=$bB5;
      var $327=(($326+28)|0);
      var $328=$backup2;
      var $329=$327;
      assert(36 % 1 === 0);_memcpy($328, $329, 36);
      var $330=$bA4;
      var $331=$minAlpha;
      (function() { try { __THREW__ = 0; return __ZN6b2Body7AdvanceEf($330, $331) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 90; break; } else { label = 17; break; }
    case 90: 
      var $333=$bB5;
      var $334=$minAlpha;
      (function() { try { __THREW__ = 0; return __ZN6b2Body7AdvanceEf($333, $334) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 91; break; } else { label = 17; break; }
    case 91: 
      var $336=$minContact;
      var $337=(($5+102872)|0);
      var $338=(($337+72)|0);
      var $339=HEAP32[(($338)>>2)];
      (function() { try { __THREW__ = 0; return __ZN9b2Contact6UpdateEP17b2ContactListener($336, $339) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 92; break; } else { label = 17; break; }
    case 92: 
      var $341=$minContact;
      var $342=(($341+4)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=$343 & -33;
      HEAP32[(($342)>>2)]=$344;
      var $345=$minContact;
      var $346=(($345+128)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=((($347)+(1))|0);
      HEAP32[(($346)>>2)]=$348;
      var $349=$minContact;
      var $350 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact9IsEnabledEv($349) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 93; break; } else { label = 17; break; }
    case 93: 
      var $352=(($350)&(1));
      var $353=(($352)|(0))==0;
      if ($353) { label = 96; break; } else { label = 94; break; }
    case 94: 
      var $355=$minContact;
      var $356 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact10IsTouchingEv($355) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 95; break; } else { label = 17; break; }
    case 95: 
      var $358=(($356)&(1));
      var $359=(($358)|(0))==0;
      if ($359) { label = 96; break; } else { label = 100; break; }
    case 96: 
      var $361=$minContact;
      (function() { try { __THREW__ = 0; return __ZN9b2Contact10SetEnabledEb($361, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 97; break; } else { label = 17; break; }
    case 97: 
      var $363=$bA4;
      var $364=(($363+28)|0);
      var $365=$364;
      var $366=$backup1;
      assert(36 % 1 === 0);_memcpy($365, $366, 36);
      var $367=$bB5;
      var $368=(($367+28)|0);
      var $369=$368;
      var $370=$backup2;
      assert(36 % 1 === 0);_memcpy($369, $370, 36);
      var $371=$bA4;
      (function() { try { __THREW__ = 0; return __ZN6b2Body20SynchronizeTransformEv($371) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 98; break; } else { label = 17; break; }
    case 98: 
      var $373=$bB5;
      (function() { try { __THREW__ = 0; return __ZN6b2Body20SynchronizeTransformEv($373) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 99; break; } else { label = 17; break; }
    case 99: 
      label = 12; break;
    case 100: 
      var $376=$bA4;
      (function() { try { __THREW__ = 0; return __ZN6b2Body8SetAwakeEb($376, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 101; break; } else { label = 17; break; }
    case 101: 
      var $378=$bB5;
      (function() { try { __THREW__ = 0; return __ZN6b2Body8SetAwakeEb($378, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 102; break; } else { label = 17; break; }
    case 102: 
      (function() { try { __THREW__ = 0; return __ZN8b2Island5ClearEv($island) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 103; break; } else { label = 17; break; }
    case 103: 
      var $381=$bA4;
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP6b2Body($island, $381) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 104; break; } else { label = 17; break; }
    case 104: 
      var $383=$bB5;
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP6b2Body($island, $383) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 105; break; } else { label = 17; break; }
    case 105: 
      var $385=$minContact;
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP9b2Contact($island, $385) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 106; break; } else { label = 17; break; }
    case 106: 
      var $387=$bA4;
      var $388=(($387+4)|0);
      var $389=HEAP16[(($388)>>1)];
      var $390=(($389)&(65535));
      var $391=$390 | 1;
      var $392=(($391) & 65535);
      HEAP16[(($388)>>1)]=$392;
      var $393=$bB5;
      var $394=(($393+4)|0);
      var $395=HEAP16[(($394)>>1)];
      var $396=(($395)&(65535));
      var $397=$396 | 1;
      var $398=(($397) & 65535);
      HEAP16[(($394)>>1)]=$398;
      var $399=$minContact;
      var $400=(($399+4)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=$401 | 1;
      HEAP32[(($400)>>2)]=$402;
      var $403=(($bodies)|0);
      var $404=$bA4;
      HEAP32[(($403)>>2)]=$404;
      var $405=(($403+4)|0);
      var $406=$bB5;
      HEAP32[(($405)>>2)]=$406;
      $i=0;
      label = 107; break;
    case 107: 
      var $408=$i;
      var $409=(($408)|(0)) < 2;
      if ($409) { label = 108; break; } else { label = 150; break; }
    case 108: 
      var $411=$i;
      var $412=(($bodies+($411<<2))|0);
      var $413=HEAP32[(($412)>>2)];
      $body=$413;
      var $414=$body;
      var $415=(($414)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|(0))==2;
      if ($417) { label = 109; break; } else { label = 148; break; }
    case 109: 
      var $419=$body;
      var $420=(($419+112)|0);
      var $421=HEAP32[(($420)>>2)];
      $ce=$421;
      label = 110; break;
    case 110: 
      var $423=$ce;
      var $424=(($423)|(0))!=0;
      if ($424) { label = 111; break; } else { label = 147; break; }
    case 111: 
      var $426=(($island+28)|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=(($island+40)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=(($427)|(0))==(($429)|(0));
      if ($430) { label = 112; break; } else { label = 113; break; }
    case 112: 
      label = 147; break;
    case 113: 
      var $433=(($island+36)|0);
      var $434=HEAP32[(($433)>>2)];
      var $435=(($island+44)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=(($434)|(0))==(($436)|(0));
      if ($437) { label = 114; break; } else { label = 115; break; }
    case 114: 
      label = 147; break;
    case 115: 
      var $440=$ce;
      var $441=(($440+4)|0);
      var $442=HEAP32[(($441)>>2)];
      $contact=$442;
      var $443=$contact;
      var $444=(($443+4)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=$445 & 1;
      var $447=(($446)|(0))!=0;
      if ($447) { label = 116; break; } else { label = 117; break; }
    case 116: 
      label = 146; break;
    case 117: 
      var $450=$ce;
      var $451=(($450)|0);
      var $452=HEAP32[(($451)>>2)];
      $other=$452;
      var $453=$other;
      var $454=(($453)|0);
      var $455=HEAP32[(($454)>>2)];
      var $456=(($455)|(0))==2;
      if ($456) { label = 118; break; } else { label = 123; break; }
    case 118: 
      var $458=$body;
      var $459 = (function() { try { __THREW__ = 0; return __ZNK6b2Body8IsBulletEv($458) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 119; break; } else { label = 17; break; }
    case 119: 
      var $461=(($459)&(1));
      var $462=(($461)|(0))==0;
      if ($462) { label = 120; break; } else { label = 123; break; }
    case 120: 
      var $464=$other;
      var $465 = (function() { try { __THREW__ = 0; return __ZNK6b2Body8IsBulletEv($464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 121; break; } else { label = 17; break; }
    case 121: 
      var $467=(($465)&(1));
      var $468=(($467)|(0))==0;
      if ($468) { label = 122; break; } else { label = 123; break; }
    case 122: 
      label = 146; break;
    case 123: 
      var $471=$contact;
      var $472=(($471+48)|0);
      var $473=HEAP32[(($472)>>2)];
      var $474=(($473+38)|0);
      var $475=HEAP8[($474)];
      var $476=(($475) & 1);
      var $477=(($476)&(1));
      $sensorA=$477;
      var $478=$contact;
      var $479=(($478+52)|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=(($480+38)|0);
      var $482=HEAP8[($481)];
      var $483=(($482) & 1);
      var $484=(($483)&(1));
      $sensorB=$484;
      var $485=$sensorA;
      var $486=(($485) & 1);
      if ($486) { label = 125; break; } else { label = 124; break; }
    case 124: 
      var $488=$sensorB;
      var $489=(($488) & 1);
      if ($489) { label = 125; break; } else { label = 126; break; }
    case 125: 
      label = 146; break;
    case 126: 
      var $492=$other;
      var $493=(($492+28)|0);
      var $494=$backup;
      var $495=$493;
      assert(36 % 1 === 0);_memcpy($494, $495, 36);
      var $496=$other;
      var $497=(($496+4)|0);
      var $498=HEAP16[(($497)>>1)];
      var $499=(($498)&(65535));
      var $500=$499 & 1;
      var $501=(($500)|(0))==0;
      if ($501) { label = 127; break; } else { label = 129; break; }
    case 127: 
      var $503=$other;
      var $504=$minAlpha;
      (function() { try { __THREW__ = 0; return __ZN6b2Body7AdvanceEf($503, $504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 128; break; } else { label = 17; break; }
    case 128: 
      label = 129; break;
    case 129: 
      var $507=$contact;
      var $508=(($5+102872)|0);
      var $509=(($508+72)|0);
      var $510=HEAP32[(($509)>>2)];
      (function() { try { __THREW__ = 0; return __ZN9b2Contact6UpdateEP17b2ContactListener($507, $510) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 130; break; } else { label = 17; break; }
    case 130: 
      var $512=$contact;
      var $513 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact9IsEnabledEv($512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 131; break; } else { label = 17; break; }
    case 131: 
      var $515=(($513)&(1));
      var $516=(($515)|(0))==0;
      if ($516) { label = 132; break; } else { label = 134; break; }
    case 132: 
      var $518=$other;
      var $519=(($518+28)|0);
      var $520=$519;
      var $521=$backup;
      assert(36 % 1 === 0);_memcpy($520, $521, 36);
      var $522=$other;
      (function() { try { __THREW__ = 0; return __ZN6b2Body20SynchronizeTransformEv($522) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 133; break; } else { label = 17; break; }
    case 133: 
      label = 146; break;
    case 134: 
      var $525=$contact;
      var $526 = (function() { try { __THREW__ = 0; return __ZNK9b2Contact10IsTouchingEv($525) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 135; break; } else { label = 17; break; }
    case 135: 
      var $528=(($526)&(1));
      var $529=(($528)|(0))==0;
      if ($529) { label = 136; break; } else { label = 138; break; }
    case 136: 
      var $531=$other;
      var $532=(($531+28)|0);
      var $533=$532;
      var $534=$backup;
      assert(36 % 1 === 0);_memcpy($533, $534, 36);
      var $535=$other;
      (function() { try { __THREW__ = 0; return __ZN6b2Body20SynchronizeTransformEv($535) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 137; break; } else { label = 17; break; }
    case 137: 
      label = 146; break;
    case 138: 
      var $538=$contact;
      var $539=(($538+4)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=$540 | 1;
      HEAP32[(($539)>>2)]=$541;
      var $542=$contact;
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP9b2Contact($island, $542) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 139; break; } else { label = 17; break; }
    case 139: 
      var $544=$other;
      var $545=(($544+4)|0);
      var $546=HEAP16[(($545)>>1)];
      var $547=(($546)&(65535));
      var $548=$547 & 1;
      var $549=(($548)|(0))!=0;
      if ($549) { label = 140; break; } else { label = 141; break; }
    case 140: 
      label = 146; break;
    case 141: 
      var $552=$other;
      var $553=(($552+4)|0);
      var $554=HEAP16[(($553)>>1)];
      var $555=(($554)&(65535));
      var $556=$555 | 1;
      var $557=(($556) & 65535);
      HEAP16[(($553)>>1)]=$557;
      var $558=$other;
      var $559=(($558)|0);
      var $560=HEAP32[(($559)>>2)];
      var $561=(($560)|(0))!=0;
      if ($561) { label = 142; break; } else { label = 144; break; }
    case 142: 
      var $563=$other;
      (function() { try { __THREW__ = 0; return __ZN6b2Body8SetAwakeEb($563, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 143; break; } else { label = 17; break; }
    case 143: 
      label = 144; break;
    case 144: 
      var $566=$other;
      (function() { try { __THREW__ = 0; return __ZN8b2Island3AddEP6b2Body($island, $566) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 145; break; } else { label = 17; break; }
    case 145: 
      label = 146; break;
    case 146: 
      var $569=$ce;
      var $570=(($569+12)|0);
      var $571=HEAP32[(($570)>>2)];
      $ce=$571;
      label = 110; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $575=$i;
      var $576=((($575)+(1))|0);
      $i=$576;
      label = 107; break;
    case 150: 
      var $578=$minAlpha;
      var $579=(1)-($578);
      var $580=$2;
      var $581=(($580)|0);
      var $582=HEAPF32[(($581)>>2)];
      var $583=($579)*($582);
      var $584=(($subStep)|0);
      HEAPF32[(($584)>>2)]=$583;
      var $585=(($subStep)|0);
      var $586=HEAPF32[(($585)>>2)];
      var $587=(1)/($586);
      var $588=(($subStep+4)|0);
      HEAPF32[(($588)>>2)]=$587;
      var $589=(($subStep+8)|0);
      HEAPF32[(($589)>>2)]=1;
      var $590=(($subStep+16)|0);
      HEAP32[(($590)>>2)]=20;
      var $591=$2;
      var $592=(($591+12)|0);
      var $593=HEAP32[(($592)>>2)];
      var $594=(($subStep+12)|0);
      HEAP32[(($594)>>2)]=$593;
      var $595=(($subStep+20)|0);
      HEAP8[($595)]=0;
      var $596=$bA4;
      var $597=(($596+8)|0);
      var $598=HEAP32[(($597)>>2)];
      var $599=$bB5;
      var $600=(($599+8)|0);
      var $601=HEAP32[(($600)>>2)];
      (function() { try { __THREW__ = 0; return __ZN8b2Island8SolveTOIERK10b2TimeStepii($island, $subStep, $598, $601) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 151; break; } else { label = 17; break; }
    case 151: 
      $i6=0;
      label = 152; break;
    case 152: 
      var $604=$i6;
      var $605=(($island+28)|0);
      var $606=HEAP32[(($605)>>2)];
      var $607=(($604)|(0)) < (($606)|(0));
      if ($607) { label = 153; break; } else { label = 162; break; }
    case 153: 
      var $609=$i6;
      var $610=(($island+8)|0);
      var $611=HEAP32[(($610)>>2)];
      var $612=(($611+($609<<2))|0);
      var $613=HEAP32[(($612)>>2)];
      $body7=$613;
      var $614=$body7;
      var $615=(($614+4)|0);
      var $616=HEAP16[(($615)>>1)];
      var $617=(($616)&(65535));
      var $618=$617 & -2;
      var $619=(($618) & 65535);
      HEAP16[(($615)>>1)]=$619;
      var $620=$body7;
      var $621=(($620)|0);
      var $622=HEAP32[(($621)>>2)];
      var $623=(($622)|(0))!=2;
      if ($623) { label = 154; break; } else { label = 155; break; }
    case 154: 
      label = 161; break;
    case 155: 
      var $626=$body7;
      (function() { try { __THREW__ = 0; return __ZN6b2Body19SynchronizeFixturesEv($626) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 156; break; } else { label = 17; break; }
    case 156: 
      var $628=$body7;
      var $629=(($628+112)|0);
      var $630=HEAP32[(($629)>>2)];
      $ce8=$630;
      label = 157; break;
    case 157: 
      var $632=$ce8;
      var $633=(($632)|(0))!=0;
      if ($633) { label = 158; break; } else { label = 160; break; }
    case 158: 
      var $635=$ce8;
      var $636=(($635+4)|0);
      var $637=HEAP32[(($636)>>2)];
      var $638=(($637+4)|0);
      var $639=HEAP32[(($638)>>2)];
      var $640=$639 & -34;
      HEAP32[(($638)>>2)]=$640;
      label = 159; break;
    case 159: 
      var $642=$ce8;
      var $643=(($642+12)|0);
      var $644=HEAP32[(($643)>>2)];
      $ce8=$644;
      label = 157; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $647=$i6;
      var $648=((($647)+(1))|0);
      $i6=$648;
      label = 152; break;
    case 162: 
      var $650=(($5+102872)|0);
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManager15FindNewContactsEv($650) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 163; break; } else { label = 17; break; }
    case 163: 
      var $652=(($5+102994)|0);
      var $653=HEAP8[($652)];
      var $654=(($653) & 1);
      if ($654) { label = 164; break; } else { label = 165; break; }
    case 164: 
      var $656=(($5+102995)|0);
      HEAP8[($656)]=0;
      label = 166; break;
    case 165: 
      label = 12; break;
    case 166: 
      __ZN8b2IslandD2Ev($island);
      STACKTOP = __stackBase__;
      return;
    case 167: 
      label = 168; break;
    case 168: 
      var $661=$3;
      var $662=$4;
      var $663$0=$661;
      var $663$1=0;
      var $664$0=$663$0;
      var $664$1=$662;
      ___resumeException($664$0)
    case 169: 
      var $666$0 = ___cxa_find_matching_catch(-1, -1,0); $666$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK9b2Fixture8IsSensorEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+38)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZNK6b2Body8IsBulletEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP16[(($3)>>1)];
  var $5=(($4)&(65535));
  var $6=$5 & 8;
  var $7=(($6)|(0))==8;
  return $7;
}
function __ZN9b2Fixture8GetShapeEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN9b2Contact10SetEnabledEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 | 4;
      HEAP32[(($8)>>2)]=$10;
      label = 4; break;
    case 3: 
      var $12=(($4+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & -5;
      HEAP32[(($12)>>2)]=$14;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2Joint8GetBodyAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN7b2Joint8GetBodyBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK6b2Body12GetTransformEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  return $3;
}
function __ZNK7b2Joint7GetTypeEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN10b2TOIInputC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2TOIInputC2Ev($2);
  return;
}
function __ZN6b2Body7AdvanceEf($this, $alpha) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(8);
  $1=$this;
  $2=$alpha;
  var $5=$1;
  var $6=(($5+28)|0);
  var $7=$2;
  __ZN7b2Sweep7AdvanceEf($6, $7);
  var $8=(($5+28)|0);
  var $9=(($8+16)|0);
  var $10=(($5+28)|0);
  var $11=(($10+8)|0);
  var $12=$9;
  var $13=$11;
  assert(8 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
  var $14=(($5+28)|0);
  var $15=(($14+24)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=(($5+28)|0);
  var $18=(($17+28)|0);
  HEAPF32[(($18)>>2)]=$16;
  var $19=(($5+12)|0);
  var $20=(($19+8)|0);
  var $21=(($5+28)|0);
  var $22=(($21+28)|0);
  var $23=HEAPF32[(($22)>>2)];
  __ZN5b2Rot3SetEf($20, $23);
  var $24=(($5+12)|0);
  var $25=(($24)|0);
  var $26=(($5+28)|0);
  var $27=(($26+16)|0);
  var $28=(($5+12)|0);
  var $29=(($28+8)|0);
  var $30=(($5+28)|0);
  var $31=(($30)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($4, $29, $31);
  __ZmiRK6b2Vec2S1_($3, $27, $4);
  var $32=$25;
  var $33=$3;
  assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function __ZN7b2World4StepEfii($this, $dt, $velocityIterations, $positionIterations) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $stepTimer=__stackBase__;
      var $step=(__stackBase__)+(4);
      var $timer=(__stackBase__)+(28);
      var $timer1=(__stackBase__)+(32);
      var $timer2=(__stackBase__)+(36);
      $1=$this;
      $2=$dt;
      $3=$velocityIterations;
      $4=$positionIterations;
      var $5=$1;
      __ZN7b2TimerC2Ev($stepTimer);
      var $6=(($5+102868)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=(($5+102872)|0);
      __ZN16b2ContactManager15FindNewContactsEv($11);
      var $12=(($5+102868)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & -2;
      HEAP32[(($12)>>2)]=$14;
      label = 3; break;
    case 3: 
      var $16=(($5+102868)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 | 2;
      HEAP32[(($16)>>2)]=$18;
      var $19=$2;
      var $20=(($step)|0);
      HEAPF32[(($20)>>2)]=$19;
      var $21=$3;
      var $22=(($step+12)|0);
      HEAP32[(($22)>>2)]=$21;
      var $23=$4;
      var $24=(($step+16)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=$2;
      var $26=$25 > 0;
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$2;
      var $29=(1)/($28);
      var $30=(($step+4)|0);
      HEAPF32[(($30)>>2)]=$29;
      label = 6; break;
    case 5: 
      var $32=(($step+4)|0);
      HEAPF32[(($32)>>2)]=0;
      label = 6; break;
    case 6: 
      var $34=(($5+102988)|0);
      var $35=HEAPF32[(($34)>>2)];
      var $36=$2;
      var $37=($35)*($36);
      var $38=(($step+8)|0);
      HEAPF32[(($38)>>2)]=$37;
      var $39=(($5+102992)|0);
      var $40=HEAP8[($39)];
      var $41=(($40) & 1);
      var $42=(($step+20)|0);
      var $43=(($41)&(1));
      HEAP8[($42)]=$43;
      __ZN7b2TimerC2Ev($timer);
      var $44=(($5+102872)|0);
      __ZN16b2ContactManager7CollideEv($44);
      var $45=__ZNK7b2Timer15GetMillisecondsEv($timer);
      var $46=(($5+102996)|0);
      var $47=(($46+4)|0);
      HEAPF32[(($47)>>2)]=$45;
      var $48=(($5+102995)|0);
      var $49=HEAP8[($48)];
      var $50=(($49) & 1);
      if ($50) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $52=(($step)|0);
      var $53=HEAPF32[(($52)>>2)];
      var $54=$53 > 0;
      if ($54) { label = 8; break; } else { label = 9; break; }
    case 8: 
      __ZN7b2TimerC2Ev($timer1);
      __ZN7b2World5SolveERK10b2TimeStep($5, $step);
      var $56=__ZNK7b2Timer15GetMillisecondsEv($timer1);
      var $57=(($5+102996)|0);
      var $58=(($57+8)|0);
      HEAPF32[(($58)>>2)]=$56;
      label = 9; break;
    case 9: 
      var $60=(($5+102993)|0);
      var $61=HEAP8[($60)];
      var $62=(($61) & 1);
      if ($62) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $64=(($step)|0);
      var $65=HEAPF32[(($64)>>2)];
      var $66=$65 > 0;
      if ($66) { label = 11; break; } else { label = 12; break; }
    case 11: 
      __ZN7b2TimerC2Ev($timer2);
      __ZN7b2World8SolveTOIERK10b2TimeStep($5, $step);
      var $68=__ZNK7b2Timer15GetMillisecondsEv($timer2);
      var $69=(($5+102996)|0);
      var $70=(($69+28)|0);
      HEAPF32[(($70)>>2)]=$68;
      label = 12; break;
    case 12: 
      var $72=(($step)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$73 > 0;
      if ($74) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $76=(($step+4)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=(($5+102988)|0);
      HEAPF32[(($78)>>2)]=$77;
      label = 14; break;
    case 14: 
      var $80=(($5+102868)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & 4;
      var $83=(($82)|(0))!=0;
      if ($83) { label = 15; break; } else { label = 16; break; }
    case 15: 
      __ZN7b2World11ClearForcesEv($5);
      label = 16; break;
    case 16: 
      var $86=(($5+102868)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & -3;
      HEAP32[(($86)>>2)]=$88;
      var $89=__ZNK7b2Timer15GetMillisecondsEv($stepTimer);
      var $90=(($5+102996)|0);
      var $91=(($90)|0);
      HEAPF32[(($91)>>2)]=$89;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World11ClearForcesEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $body;
      $1=$this;
      var $2=$1;
      var $3=(($2+102952)|0);
      var $4=HEAP32[(($3)>>2)];
      $body=$4;
      label = 2; break;
    case 2: 
      var $6=$body;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $9=$body;
      var $10=(($9+76)|0);
      __ZN6b2Vec27SetZeroEv($10);
      var $11=$body;
      var $12=(($11+84)|0);
      HEAPF32[(($12)>>2)]=0;
      label = 4; break;
    case 4: 
      var $14=$body;
      var $15=__ZN6b2Body7GetNextEv($14);
      $body=$15;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB($this, $callback, $aabb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $wrapper=__stackBase__;
  $1=$this;
  $2=$callback;
  $3=$aabb;
  var $4=$1;
  var $5=(($4+102872)|0);
  var $6=(($5)|0);
  var $7=(($wrapper)|0);
  HEAP32[(($7)>>2)]=$6;
  var $8=$2;
  var $9=(($wrapper+4)|0);
  HEAP32[(($9)>>2)]=$8;
  var $10=(($4+102872)|0);
  var $11=(($10)|0);
  var $12=$3;
  __ZNK12b2BroadPhase5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($11, $wrapper, $12);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK12b2BroadPhase5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$callback;
  $3=$aabb;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$3;
  __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($5, $6, $7);
  return;
}
function __ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_($this, $callback, $point1, $point2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $wrapper=__stackBase__;
  var $input=(__stackBase__)+(8);
  $1=$this;
  $2=$callback;
  $3=$point1;
  $4=$point2;
  var $5=$1;
  var $6=(($5+102872)|0);
  var $7=(($6)|0);
  var $8=(($wrapper)|0);
  HEAP32[(($8)>>2)]=$7;
  var $9=$2;
  var $10=(($wrapper+4)|0);
  HEAP32[(($10)>>2)]=$9;
  __ZN14b2RayCastInputC1Ev($input);
  var $11=(($input+16)|0);
  HEAPF32[(($11)>>2)]=1;
  var $12=(($input)|0);
  var $13=$3;
  var $14=$12;
  var $15=$13;
  assert(8 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];
  var $16=(($input+8)|0);
  var $17=$4;
  var $18=$16;
  var $19=$17;
  assert(8 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
  var $20=(($5+102872)|0);
  var $21=(($20)|0);
  __ZNK12b2BroadPhase7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($21, $wrapper, $input);
  STACKTOP = __stackBase__;
  return;
}
function __ZN14b2RayCastInputC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2RayCastInputC2Ev($2);
  return;
}
function __ZNK12b2BroadPhase7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($this, $callback, $input) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$callback;
  $3=$input;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$3;
  __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($5, $6, $7);
  return;
}
function __ZNK9b2Fixture7GetTypeEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=__ZNK7b2Shape7GetTypeEv($4);
  return $5;
}
function __ZN7b2World9DrawJointEP7b2Joint($this, $joint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $bodyA;
      var $bodyB;
      var $xf1;
      var $xf2;
      var $x1=__stackBase__;
      var $x2=(__stackBase__)+(8);
      var $p1=(__stackBase__)+(16);
      var $p2=(__stackBase__)+(24);
      var $color=(__stackBase__)+(32);
      var $pulley;
      var $s1=(__stackBase__)+(44);
      var $s2=(__stackBase__)+(52);
      $1=$this;
      $2=$joint;
      var $3=$1;
      var $4=$2;
      var $5=__ZN7b2Joint8GetBodyAEv($4);
      $bodyA=$5;
      var $6=$2;
      var $7=__ZN7b2Joint8GetBodyBEv($6);
      $bodyB=$7;
      var $8=$bodyA;
      var $9=__ZNK6b2Body12GetTransformEv($8);
      $xf1=$9;
      var $10=$bodyB;
      var $11=__ZNK6b2Body12GetTransformEv($10);
      $xf2=$11;
      var $12=$xf1;
      var $13=(($12)|0);
      var $14=$x1;
      var $15=$13;
      assert(8 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];
      var $16=$xf2;
      var $17=(($16)|0);
      var $18=$x2;
      var $19=$17;
      assert(8 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
      var $20=$2;
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      FUNCTION_TABLE[$24]($p1, $20);
      var $25=$2;
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      FUNCTION_TABLE[$29]($p2, $25);
      __ZN7b2ColorC1Efff($color, 0.5, 0.800000011920929, 0.800000011920929);
      var $30=$2;
      var $31=__ZNK7b2Joint7GetTypeEv($30);
      if ((($31)|(0))==3) {
        label = 2; break;
      }
      else if ((($31)|(0))==4) {
        label = 3; break;
      }
      else if ((($31)|(0))==5) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 2: 
      var $33=(($3+102984)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      FUNCTION_TABLE[$38]($34, $p1, $p2, $color);
      label = 6; break;
    case 3: 
      var $40=$2;
      var $41=$40;
      $pulley=$41;
      var $42=$pulley;
      __ZNK13b2PulleyJoint16GetGroundAnchorAEv($s1, $42);
      var $43=$pulley;
      __ZNK13b2PulleyJoint16GetGroundAnchorBEv($s2, $43);
      var $44=(($3+102984)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      FUNCTION_TABLE[$49]($45, $s1, $p1, $color);
      var $50=(($3+102984)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      FUNCTION_TABLE[$55]($51, $s2, $p2, $color);
      var $56=(($3+102984)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$61]($57, $s1, $s2, $color);
      label = 6; break;
    case 4: 
      label = 6; break;
    case 5: 
      var $64=(($3+102984)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65;
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      FUNCTION_TABLE[$69]($65, $x1, $p1, $color);
      var $70=(($3+102984)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      FUNCTION_TABLE[$75]($71, $p1, $p2, $color);
      var $76=(($3+102984)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$77;
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+24)|0);
      var $81=HEAP32[(($80)>>2)];
      FUNCTION_TABLE[$81]($77, $x2, $p2, $color);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2ColorC1Efff($this, $r, $g, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$r;
  $3=$g;
  $4=$b;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN7b2ColorC2Efff($5, $6, $7, $8);
  return;
}
function __ZN7b2Sweep7AdvanceEf($this, $alpha) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $beta;
      var $3=__stackBase__;
      var $4=(__stackBase__)+(8);
      var $5=(__stackBase__)+(16);
      $1=$this;
      $2=$alpha;
      var $6=$1;
      var $7=(($6+32)|0);
      var $8=HEAPF32[(($7)>>2)];
      var $9=$8 < 1;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5253024)|0), 723, ((5260872)|0), ((5248328)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $14=$2;
      var $15=(($6+32)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=($14)-($16);
      var $18=(($6+32)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=(1)-($19);
      var $21=($17)/($20);
      $beta=$21;
      var $22=(($6+8)|0);
      var $23=$beta;
      var $24=(1)-($23);
      var $25=(($6+8)|0);
      __ZmlfRK6b2Vec2($4, $24, $25);
      var $26=$beta;
      var $27=(($6+16)|0);
      __ZmlfRK6b2Vec2($5, $26, $27);
      __ZplRK6b2Vec2S1_($3, $4, $5);
      var $28=$22;
      var $29=$3;
      assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
      var $30=$beta;
      var $31=(1)-($30);
      var $32=(($6+24)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=($31)*($33);
      var $35=$beta;
      var $36=(($6+28)|0);
      var $37=HEAPF32[(($36)>>2)];
      var $38=($35)*($37);
      var $39=($34)+($38);
      var $40=(($6+24)|0);
      HEAPF32[(($40)>>2)]=$39;
      var $41=$2;
      var $42=(($6+32)|0);
      HEAPF32[(($42)>>2)]=$41;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $fixture, $xf, $color) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $circle;
      var $center=__stackBase__;
      var $radius;
      var $axis=(__stackBase__)+(8);
      var $5=(__stackBase__)+(16);
      var $edge;
      var $v1=(__stackBase__)+(24);
      var $v2=(__stackBase__)+(32);
      var $chain;
      var $count;
      var $vertices;
      var $v11=(__stackBase__)+(40);
      var $i;
      var $v22=(__stackBase__)+(48);
      var $poly;
      var $vertexCount;
      var $vertices3=(__stackBase__)+(56);
      var $i4;
      var $6=(__stackBase__)+(120);
      $1=$this;
      $2=$fixture;
      $3=$xf;
      $4=$color;
      var $7=$1;
      var $8=$2;
      var $9=__ZNK9b2Fixture7GetTypeEv($8);
      if ((($9)|(0))==0) {
        label = 2; break;
      }
      else if ((($9)|(0))==1) {
        label = 3; break;
      }
      else if ((($9)|(0))==3) {
        label = 4; break;
      }
      else if ((($9)|(0))==2) {
        label = 9; break;
      }
      else {
      label = 19; break;
      }
    case 2: 
      var $11=$2;
      var $12=__ZN9b2Fixture8GetShapeEv($11);
      var $13=$12;
      $circle=$13;
      var $14=$3;
      var $15=$circle;
      var $16=(($15+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($center, $14, $16);
      var $17=$circle;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAPF32[(($19)>>2)];
      $radius=$20;
      var $21=$3;
      var $22=(($21+8)|0);
      __ZN6b2Vec2C1Eff($5, 1, 0);
      __Z5b2MulRK5b2RotRK6b2Vec2($axis, $22, $5);
      var $23=(($7+102984)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$radius;
      var $30=$4;
      FUNCTION_TABLE[$28]($24, $center, $29, $axis, $30);
      label = 20; break;
    case 3: 
      var $32=$2;
      var $33=__ZN9b2Fixture8GetShapeEv($32);
      var $34=$33;
      $edge=$34;
      var $35=$3;
      var $36=$edge;
      var $37=(($36+12)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $35, $37);
      var $38=$3;
      var $39=$edge;
      var $40=(($39+20)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $38, $40);
      var $41=(($7+102984)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$4;
      FUNCTION_TABLE[$46]($42, $v1, $v2, $47);
      label = 20; break;
    case 4: 
      var $49=$2;
      var $50=__ZN9b2Fixture8GetShapeEv($49);
      var $51=$50;
      $chain=$51;
      var $52=$chain;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      $count=$54;
      var $55=$chain;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      $vertices=$57;
      var $58=$3;
      var $59=$vertices;
      var $60=(($59)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v11, $58, $60);
      $i=1;
      label = 5; break;
    case 5: 
      var $62=$i;
      var $63=$count;
      var $64=(($62)|(0)) < (($63)|(0));
      if ($64) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $66=$3;
      var $67=$i;
      var $68=$vertices;
      var $69=(($68+($67<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($v22, $66, $69);
      var $70=(($7+102984)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$4;
      FUNCTION_TABLE[$75]($71, $v11, $v22, $76);
      var $77=(($7+102984)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78;
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+16)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$4;
      FUNCTION_TABLE[$82]($78, $v11, 0.05000000074505806, $83);
      var $84=$v11;
      var $85=$v22;
      assert(8 % 1 === 0);HEAP32[(($84)>>2)]=HEAP32[(($85)>>2)];HEAP32[((($84)+(4))>>2)]=HEAP32[((($85)+(4))>>2)];
      label = 7; break;
    case 7: 
      var $87=$i;
      var $88=((($87)+(1))|0);
      $i=$88;
      label = 5; break;
    case 8: 
      label = 20; break;
    case 9: 
      var $91=$2;
      var $92=__ZN9b2Fixture8GetShapeEv($91);
      var $93=$92;
      $poly=$93;
      var $94=$poly;
      var $95=(($94+148)|0);
      var $96=HEAP32[(($95)>>2)];
      $vertexCount=$96;
      var $97=$vertexCount;
      var $98=(($97)|(0)) <= 8;
      if ($98) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      ___assert_func(((5255096)|0), 1077, ((5260536)|0), ((5247780)|0));
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      var $103=(($vertices3)|0);
      var $104=(($103+64)|0);
      var $106 = $103;label = 13; break;
    case 13: 
      var $106;
      __ZN6b2Vec2C1Ev($106);
      var $107=(($106+8)|0);
      var $108=(($107)|(0))==(($104)|(0));
      if ($108) { label = 14; break; } else { var $106 = $107;label = 13; break; }
    case 14: 
      $i4=0;
      label = 15; break;
    case 15: 
      var $111=$i4;
      var $112=$vertexCount;
      var $113=(($111)|(0)) < (($112)|(0));
      if ($113) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $115=$i4;
      var $116=(($vertices3+($115<<3))|0);
      var $117=$3;
      var $118=$i4;
      var $119=$poly;
      var $120=(($119+20)|0);
      var $121=(($120+($118<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($6, $117, $121);
      var $122=$116;
      var $123=$6;
      assert(8 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];
      label = 17; break;
    case 17: 
      var $125=$i4;
      var $126=((($125)+(1))|0);
      $i4=$126;
      label = 15; break;
    case 18: 
      var $128=(($7+102984)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129;
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+12)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($vertices3)|0);
      var $135=$vertexCount;
      var $136=$4;
      FUNCTION_TABLE[$133]($129, $134, $135, $136);
      label = 20; break;
    case 19: 
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Body14GetFixtureListEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+100)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN9b2Fixture7GetNextEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN7b2Joint7GetNextEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK6b2Body14GetWorldCenterEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=(($3+16)|0);
  return $4;
}
function __ZNK12b2BroadPhase13GetProxyCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN7b2World13DrawDebugDataEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 148)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $flags;
      var $b;
      var $xf;
      var $f;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      var $5=(__stackBase__)+(36);
      var $6=(__stackBase__)+(48);
      var $j;
      var $color=(__stackBase__)+(60);
      var $c;
      var $color1=(__stackBase__)+(72);
      var $bp;
      var $b2;
      var $f3;
      var $i;
      var $proxy;
      var $aabb=(__stackBase__)+(84);
      var $vs=(__stackBase__)+(100);
      var $b4;
      var $xf5=(__stackBase__)+(132);
      $1=$this;
      var $7=$1;
      var $8=(($7+102984)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 61; break;
    case 3: 
      var $13=(($7+102984)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=__ZNK6b2Draw8GetFlagsEv($14);
      $flags=$15;
      var $16=$flags;
      var $17=$16 & 1;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 25; break; }
    case 4: 
      var $20=(($7+102952)|0);
      var $21=HEAP32[(($20)>>2)];
      $b=$21;
      label = 5; break;
    case 5: 
      var $23=$b;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 6; break; } else { label = 24; break; }
    case 6: 
      var $26=$b;
      var $27=__ZNK6b2Body12GetTransformEv($26);
      $xf=$27;
      var $28=$b;
      var $29=__ZN6b2Body14GetFixtureListEv($28);
      $f=$29;
      label = 7; break;
    case 7: 
      var $31=$f;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 8; break; } else { label = 22; break; }
    case 8: 
      var $34=$b;
      var $35=__ZNK6b2Body8IsActiveEv($34);
      var $36=(($35)&(1));
      var $37=(($36)|(0))==0;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $39=$f;
      var $40=$xf;
      __ZN7b2ColorC1Efff($2, 0.5, 0.5, 0.30000001192092896);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $39, $40, $2);
      label = 20; break;
    case 10: 
      var $42=$b;
      var $43=__ZNK6b2Body7GetTypeEv($42);
      var $44=(($43)|(0))==0;
      if ($44) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $46=$f;
      var $47=$xf;
      __ZN7b2ColorC1Efff($3, 0.5, 0.8999999761581421, 0.5);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $46, $47, $3);
      label = 19; break;
    case 12: 
      var $49=$b;
      var $50=__ZNK6b2Body7GetTypeEv($49);
      var $51=(($50)|(0))==1;
      if ($51) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $53=$f;
      var $54=$xf;
      __ZN7b2ColorC1Efff($4, 0.5, 0.5, 0.8999999761581421);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $53, $54, $4);
      label = 18; break;
    case 14: 
      var $56=$b;
      var $57=__ZNK6b2Body7IsAwakeEv($56);
      var $58=(($57)&(1));
      var $59=(($58)|(0))==0;
      if ($59) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $61=$f;
      var $62=$xf;
      __ZN7b2ColorC1Efff($5, 0.6000000238418579, 0.6000000238418579, 0.6000000238418579);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $61, $62, $5);
      label = 17; break;
    case 16: 
      var $64=$f;
      var $65=$xf;
      __ZN7b2ColorC1Efff($6, 0.8999999761581421, 0.699999988079071, 0.699999988079071);
      __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($7, $64, $65, $6);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $71=$f;
      var $72=__ZN9b2Fixture7GetNextEv($71);
      $f=$72;
      label = 7; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $75=$b;
      var $76=__ZN6b2Body7GetNextEv($75);
      $b=$76;
      label = 5; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $79=$flags;
      var $80=$79 & 2;
      var $81=(($80)|(0))!=0;
      if ($81) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $83=(($7+102956)|0);
      var $84=HEAP32[(($83)>>2)];
      $j=$84;
      label = 27; break;
    case 27: 
      var $86=$j;
      var $87=(($86)|(0))!=0;
      if ($87) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $89=$j;
      __ZN7b2World9DrawJointEP7b2Joint($7, $89);
      label = 29; break;
    case 29: 
      var $91=$j;
      var $92=__ZN7b2Joint7GetNextEv($91);
      $j=$92;
      label = 27; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $95=$flags;
      var $96=$95 & 8;
      var $97=(($96)|(0))!=0;
      if ($97) { label = 32; break; } else { label = 37; break; }
    case 32: 
      __ZN7b2ColorC1Efff($color, 0.30000001192092896, 0.8999999761581421, 0.8999999761581421);
      var $99=(($7+102872)|0);
      var $100=(($99+60)|0);
      var $101=HEAP32[(($100)>>2)];
      $c=$101;
      label = 33; break;
    case 33: 
      var $103=$c;
      var $104=(($103)|(0))!=0;
      if ($104) { label = 34; break; } else { label = 36; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $107=$c;
      var $108=__ZN9b2Contact7GetNextEv($107);
      $c=$108;
      label = 33; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $111=$flags;
      var $112=$111 & 4;
      var $113=(($112)|(0))!=0;
      if ($113) { label = 38; break; } else { label = 55; break; }
    case 38: 
      __ZN7b2ColorC1Efff($color1, 0.8999999761581421, 0.30000001192092896, 0.8999999761581421);
      var $115=(($7+102872)|0);
      var $116=(($115)|0);
      $bp=$116;
      var $117=(($7+102952)|0);
      var $118=HEAP32[(($117)>>2)];
      $b2=$118;
      label = 39; break;
    case 39: 
      var $120=$b2;
      var $121=(($120)|(0))!=0;
      if ($121) { label = 40; break; } else { label = 54; break; }
    case 40: 
      var $123=$b2;
      var $124=__ZNK6b2Body8IsActiveEv($123);
      var $125=(($124)&(1));
      var $126=(($125)|(0))==0;
      if ($126) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 53; break;
    case 42: 
      var $129=$b2;
      var $130=__ZN6b2Body14GetFixtureListEv($129);
      $f3=$130;
      label = 43; break;
    case 43: 
      var $132=$f3;
      var $133=(($132)|(0))!=0;
      if ($133) { label = 44; break; } else { label = 52; break; }
    case 44: 
      $i=0;
      label = 45; break;
    case 45: 
      var $136=$i;
      var $137=$f3;
      var $138=(($137+28)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($136)|(0)) < (($139)|(0));
      if ($140) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $142=$f3;
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$i;
      var $146=(($144+((($145)*(28))&-1))|0);
      $proxy=$146;
      var $147=$bp;
      var $148=$proxy;
      var $149=(($148+24)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=__ZNK12b2BroadPhase10GetFatAABBEi($147, $150);
      var $152=$aabb;
      var $153=$151;
      assert(16 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];HEAP32[((($152)+(8))>>2)]=HEAP32[((($153)+(8))>>2)];HEAP32[((($152)+(12))>>2)]=HEAP32[((($153)+(12))>>2)];
      var $154=(($vs)|0);
      var $155=(($154+32)|0);
      var $157 = $154;label = 47; break;
    case 47: 
      var $157;
      __ZN6b2Vec2C1Ev($157);
      var $158=(($157+8)|0);
      var $159=(($158)|(0))==(($155)|(0));
      if ($159) { label = 48; break; } else { var $157 = $158;label = 47; break; }
    case 48: 
      var $161=(($vs)|0);
      var $162=(($aabb)|0);
      var $163=(($162)|0);
      var $164=HEAPF32[(($163)>>2)];
      var $165=(($aabb)|0);
      var $166=(($165+4)|0);
      var $167=HEAPF32[(($166)>>2)];
      __ZN6b2Vec23SetEff($161, $164, $167);
      var $168=(($vs+8)|0);
      var $169=(($aabb+8)|0);
      var $170=(($169)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=(($aabb)|0);
      var $173=(($172+4)|0);
      var $174=HEAPF32[(($173)>>2)];
      __ZN6b2Vec23SetEff($168, $171, $174);
      var $175=(($vs+16)|0);
      var $176=(($aabb+8)|0);
      var $177=(($176)|0);
      var $178=HEAPF32[(($177)>>2)];
      var $179=(($aabb+8)|0);
      var $180=(($179+4)|0);
      var $181=HEAPF32[(($180)>>2)];
      __ZN6b2Vec23SetEff($175, $178, $181);
      var $182=(($vs+24)|0);
      var $183=(($aabb)|0);
      var $184=(($183)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(($aabb+8)|0);
      var $187=(($186+4)|0);
      var $188=HEAPF32[(($187)>>2)];
      __ZN6b2Vec23SetEff($182, $185, $188);
      var $189=(($7+102984)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$190;
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192+8)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($vs)|0);
      FUNCTION_TABLE[$194]($190, $195, 4, $color1);
      label = 49; break;
    case 49: 
      var $197=$i;
      var $198=((($197)+(1))|0);
      $i=$198;
      label = 45; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $201=$f3;
      var $202=__ZN9b2Fixture7GetNextEv($201);
      $f3=$202;
      label = 43; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $205=$b2;
      var $206=__ZN6b2Body7GetNextEv($205);
      $b2=$206;
      label = 39; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $209=$flags;
      var $210=$209 & 16;
      var $211=(($210)|(0))!=0;
      if ($211) { label = 56; break; } else { label = 61; break; }
    case 56: 
      var $213=(($7+102952)|0);
      var $214=HEAP32[(($213)>>2)];
      $b4=$214;
      label = 57; break;
    case 57: 
      var $216=$b4;
      var $217=(($216)|(0))!=0;
      if ($217) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $219=$b4;
      var $220=__ZNK6b2Body12GetTransformEv($219);
      var $221=$xf5;
      var $222=$220;
      assert(16 % 1 === 0);HEAP32[(($221)>>2)]=HEAP32[(($222)>>2)];HEAP32[((($221)+(4))>>2)]=HEAP32[((($222)+(4))>>2)];HEAP32[((($221)+(8))>>2)]=HEAP32[((($222)+(8))>>2)];HEAP32[((($221)+(12))>>2)]=HEAP32[((($222)+(12))>>2)];
      var $223=(($xf5)|0);
      var $224=$b4;
      var $225=__ZNK6b2Body14GetWorldCenterEv($224);
      var $226=$223;
      var $227=$225;
      assert(8 % 1 === 0);HEAP32[(($226)>>2)]=HEAP32[(($227)>>2)];HEAP32[((($226)+(4))>>2)]=HEAP32[((($227)+(4))>>2)];
      var $228=(($7+102984)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=$229;
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231+28)|0);
      var $233=HEAP32[(($232)>>2)];
      FUNCTION_TABLE[$233]($229, $xf5);
      label = 59; break;
    case 59: 
      var $235=$b4;
      var $236=__ZN6b2Body7GetNextEv($235);
      $b4=$236;
      label = 57; break;
    case 60: 
      label = 61; break;
    case 61: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2BroadPhase10GetFatAABBEi($this, $proxyId) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=__ZNK13b2DynamicTree10GetFatAABBEi($4, $5);
  return $6;
}
function __ZNK7b2World13GetProxyCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase13GetProxyCountEv($4);
  return $5;
}
function __ZNK7b2World13GetTreeHeightEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase13GetTreeHeightEv($4);
  return $5;
}
function __ZNK12b2BroadPhase13GetTreeHeightEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=__ZNK13b2DynamicTree9GetHeightEv($3);
  return $4;
}
function __ZNK7b2World14GetTreeBalanceEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase14GetTreeBalanceEv($4);
  return $5;
}
function __ZNK12b2BroadPhase14GetTreeBalanceEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=__ZNK13b2DynamicTree13GetMaxBalanceEv($3);
  return $4;
}
function __ZNK7b2World14GetTreeQualityEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3)|0);
  var $5=__ZNK12b2BroadPhase14GetTreeQualityEv($4);
  return $5;
}
function __ZNK12b2BroadPhase14GetTreeQualityEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=__ZNK13b2DynamicTree12GetAreaRatioEv($3);
  return $4;
}
function __ZN7b2World4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $b;
      var $j;
      var $j1;
      var $j2;
      $1=$this;
      var $2=$1;
      var $3=(($2+102868)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 & 2;
      var $6=(($5)|(0))==2;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 24; break;
    case 3: 
      var $9=(($2+102968)|0);
      var $10=(($9)|0);
      var $11=HEAPF32[(($10)>>2)];
      var $12=$11;
      var $13=(($2+102968)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      var $16=$15;
      __Z5b2LogPKcz(((5247372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      __Z5b2LogPKcz(((5257948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $17=(($2+102960)|0);
      var $18=HEAP32[(($17)>>2)];
      __Z5b2LogPKcz(((5257584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$18,tempInt));
      var $19=(($2+102964)|0);
      var $20=HEAP32[(($19)>>2)];
      __Z5b2LogPKcz(((5256900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$20,tempInt));
      $i=0;
      var $21=(($2+102952)|0);
      var $22=HEAP32[(($21)>>2)];
      $b=$22;
      label = 4; break;
    case 4: 
      var $24=$b;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $27=$i;
      var $28=$b;
      var $29=(($28+8)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$b;
      __ZN6b2Body4DumpEv($30);
      var $31=$i;
      var $32=((($31)+(1))|0);
      $i=$32;
      label = 6; break;
    case 6: 
      var $34=$b;
      var $35=(($34+96)|0);
      var $36=HEAP32[(($35)>>2)];
      $b=$36;
      label = 4; break;
    case 7: 
      $i=0;
      var $38=(($2+102956)|0);
      var $39=HEAP32[(($38)>>2)];
      $j=$39;
      label = 8; break;
    case 8: 
      var $41=$j;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $44=$i;
      var $45=$j;
      var $46=(($45+56)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$i;
      var $48=((($47)+(1))|0);
      $i=$48;
      label = 10; break;
    case 10: 
      var $50=$j;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $j=$52;
      label = 8; break;
    case 11: 
      var $54=(($2+102956)|0);
      var $55=HEAP32[(($54)>>2)];
      $j1=$55;
      label = 12; break;
    case 12: 
      var $57=$j1;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $60=$j1;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|(0))==6;
      if ($63) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      __Z5b2LogPKcz(((5256336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $66=$j1;
      var $67=$66;
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+16)|0);
      var $70=HEAP32[(($69)>>2)];
      FUNCTION_TABLE[$70]($66);
      __Z5b2LogPKcz(((5255956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 16; break;
    case 16: 
      var $72=$j1;
      var $73=(($72+12)|0);
      var $74=HEAP32[(($73)>>2)];
      $j1=$74;
      label = 12; break;
    case 17: 
      var $76=(($2+102956)|0);
      var $77=HEAP32[(($76)>>2)];
      $j2=$77;
      label = 18; break;
    case 18: 
      var $79=$j2;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $82=$j2;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=6;
      if ($85) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      __Z5b2LogPKcz(((5256336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $88=$j2;
      var $89=$88;
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+16)|0);
      var $92=HEAP32[(($91)>>2)];
      FUNCTION_TABLE[$92]($88);
      __Z5b2LogPKcz(((5255956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 22; break;
    case 22: 
      var $94=$j2;
      var $95=(($94+12)|0);
      var $96=HEAP32[(($95)>>2)];
      $j2=$96;
      label = 18; break;
    case 23: 
      __Z5b2LogPKcz(((5255664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((5255412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((5255184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      __Z5b2LogPKcz(((5254972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2ContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN7b2ColorC2Efff($this, $r, $g, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$r;
  $3=$g;
  $4=$b;
  var $5=$1;
  var $6=(($5)|0);
  var $7=$2;
  HEAPF32[(($6)>>2)]=$7;
  var $8=(($5+4)|0);
  var $9=$3;
  HEAPF32[(($8)>>2)]=$9;
  var $10=(($5+8)|0);
  var $11=$4;
  HEAPF32[(($10)>>2)]=$11;
  return;
}
function __ZNK9b2Fixture13GetFilterDataEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+32)|0);
  return $3;
}
function __ZNK6b2AABB9GetCenterEv($agg_result, $this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2=__stackBase__;
  $1=$this;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($3+8)|0);
  __ZplRK6b2Vec2S1_($2, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, 0.5, $2);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK6b2AABB10GetExtentsEv($agg_result, $this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2=__stackBase__;
  $1=$this;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=(($3)|0);
  __ZmiRK6b2Vec2S1_($2, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, 0.5, $2);
  STACKTOP = __stackBase__;
  return;
}
function __ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($this, $input, $proxyId) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $userData;
      var $proxy;
      var $fixture;
      var $index;
      var $output=__stackBase__;
      var $hit;
      var $fraction;
      var $point=(__stackBase__)+(12);
      var $5=(__stackBase__)+(20);
      var $6=(__stackBase__)+(28);
      $2=$this;
      $3=$input;
      $4=$proxyId;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$4;
      var $11=__ZNK12b2BroadPhase11GetUserDataEi($9, $10);
      $userData=$11;
      var $12=$userData;
      var $13=$12;
      $proxy=$13;
      var $14=$proxy;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      $fixture=$16;
      var $17=$proxy;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      $index=$19;
      __ZN15b2RayCastOutputC1Ev($output);
      var $20=$fixture;
      var $21=$3;
      var $22=$index;
      var $23=__ZNK9b2Fixture7RayCastEP15b2RayCastOutputRK14b2RayCastInputi($20, $output, $21, $22);
      var $24=(($23)&(1));
      $hit=$24;
      var $25=$hit;
      var $26=(($25) & 1);
      if ($26) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $28=(($output+8)|0);
      var $29=HEAPF32[(($28)>>2)];
      $fraction=$29;
      var $30=$fraction;
      var $31=(1)-($30);
      var $32=$3;
      var $33=(($32)|0);
      __ZmlfRK6b2Vec2($5, $31, $33);
      var $34=$fraction;
      var $35=$3;
      var $36=(($35+8)|0);
      __ZmlfRK6b2Vec2($6, $34, $36);
      __ZplRK6b2Vec2S1_($point, $5, $6);
      var $37=(($7+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$fixture;
      var $44=(($output)|0);
      var $45=$fraction;
      var $46=FUNCTION_TABLE[$42]($38, $43, $point, $44, $45);
      $1=$46;
      label = 4; break;
    case 3: 
      var $48=$3;
      var $49=(($48+16)|0);
      var $50=HEAPF32[(($49)>>2)];
      $1=$50;
      label = 4; break;
    case 4: 
      var $52=$1;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2BroadPhase11GetUserDataEi($this, $proxyId) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=__ZNK13b2DynamicTree11GetUserDataEi($4, $5);
  return $6;
}
function __ZN15b2RayCastOutputC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2RayCastOutputC2Ev($2);
  return;
}
function __ZNK9b2Fixture7RayCastEP15b2RayCastOutputRK14b2RayCastInputi($this, $output, $input, $childIndex) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$output;
  $3=$input;
  $4=$childIndex;
  var $5=$1;
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=(($9+20)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$2;
  var $13=$3;
  var $14=(($5+8)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZNK6b2Body12GetTransformEv($15);
  var $17=$4;
  var $18=FUNCTION_TABLE[$11]($7, $12, $13, $16, $17);
  return $18;
}
function __ZN15b2RayCastOutputC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  return;
}
function __ZN19b2WorldQueryWrapper13QueryCallbackEi($this, $proxyId) {
  var label = 0;
  var $1;
  var $2;
  var $proxy;
  $1=$this;
  $2=$proxyId;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__ZNK12b2BroadPhase11GetUserDataEi($5, $6);
  var $8=$7;
  $proxy=$8;
  var $9=(($3+4)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$10;
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+8)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=$proxy;
  var $16=(($15+16)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=FUNCTION_TABLE[$14]($10, $17);
  return $18;
}
function __ZN14b2RayCastInputC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  return;
}
function __ZN10b2TOIInputC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN15b2DistanceProxyC1Ev($3);
  var $4=(($2+28)|0);
  __ZN15b2DistanceProxyC1Ev($4);
  var $5=(($2+56)|0);
  __ZN7b2SweepC1Ev($5);
  var $6=(($2+92)|0);
  __ZN7b2SweepC1Ev($6);
  return;
}
function __ZN16b2ContactManagerD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN12b2BroadPhaseD2Ev($3);
  return;
}
function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $filterA;
      var $filterB;
      var $collide;
      $2=$this;
      $3=$fixtureA;
      $4=$fixtureB;
      var $5=$2;
      var $6=$3;
      var $7=__ZNK9b2Fixture13GetFilterDataEv($6);
      $filterA=$7;
      var $8=$4;
      var $9=__ZNK9b2Fixture13GetFilterDataEv($8);
      $filterB=$9;
      var $10=$filterA;
      var $11=(($10+4)|0);
      var $12=HEAP16[(($11)>>1)];
      var $13=(($12 << 16) >> 16);
      var $14=$filterB;
      var $15=(($14+4)|0);
      var $16=HEAP16[(($15)>>1)];
      var $17=(($16 << 16) >> 16);
      var $18=(($13)|(0))==(($17)|(0));
      if ($18) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $20=$filterA;
      var $21=(($20+4)|0);
      var $22=HEAP16[(($21)>>1)];
      var $23=(($22 << 16) >> 16);
      var $24=(($23)|(0))!=0;
      if ($24) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $26=$filterA;
      var $27=(($26+4)|0);
      var $28=HEAP16[(($27)>>1)];
      var $29=(($28 << 16) >> 16);
      var $30=(($29)|(0)) > 0;
      $1=$30;
      label = 7; break;
    case 4: 
      var $32=$filterA;
      var $33=(($32+2)|0);
      var $34=HEAP16[(($33)>>1)];
      var $35=(($34)&(65535));
      var $36=$filterB;
      var $37=(($36)|0);
      var $38=HEAP16[(($37)>>1)];
      var $39=(($38)&(65535));
      var $40=$35 & $39;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 5; break; } else { var $54 = 0;label = 6; break; }
    case 5: 
      var $43=$filterA;
      var $44=(($43)|0);
      var $45=HEAP16[(($44)>>1)];
      var $46=(($45)&(65535));
      var $47=$filterB;
      var $48=(($47+2)|0);
      var $49=HEAP16[(($48)>>1)];
      var $50=(($49)&(65535));
      var $51=$46 & $50;
      var $52=(($51)|(0))!=0;
      var $54 = $52;label = 6; break;
    case 6: 
      var $54;
      var $55=(($54)&(1));
      $collide=$55;
      var $56=$collide;
      var $57=(($56) & 1);
      $1=$57;
      label = 7; break;
    case 7: 
      var $59=$1;
      return $59;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2ContactFilterD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2ContactFilterD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $mem;
      $1=$fixtureA;
      $2=$indexA;
      $3=$fixtureB;
      $4=$indexB;
      $5=$allocator;
      var $6=$5;
      var $7=__ZN16b2BlockAllocator8AllocateEi($6, 144);
      $mem=$7;
      var $8=$mem;
      var $9=(($8)|(0))==0;
      if ($9) { var $17 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$8;
      var $12=$1;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($11, $12, $13, $14, $15);
      var $17 = $11;label = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  return;
}
function __ZNK13b2DynamicTree7RayCastI21b2WorldRayCastWrapperEEvPT_RK14b2RayCastInput($this, $callback, $input) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1216)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p1=__stackBase__;
      var $p2=(__stackBase__)+(8);
      var $r=(__stackBase__)+(16);
      var $v=(__stackBase__)+(24);
      var $abs_v=(__stackBase__)+(32);
      var $maxFraction;
      var $segmentAABB=(__stackBase__)+(40);
      var $t=(__stackBase__)+(56);
      var $4=(__stackBase__)+(64);
      var $5=(__stackBase__)+(72);
      var $6=(__stackBase__)+(80);
      var $7=(__stackBase__)+(88);
      var $stack=(__stackBase__)+(96);
      var $8;
      var $9;
      var $nodeId;
      var $node;
      var $c=(__stackBase__)+(1132);
      var $h=(__stackBase__)+(1140);
      var $separation;
      var $10=(__stackBase__)+(1148);
      var $subInput=(__stackBase__)+(1156);
      var $value;
      var $11;
      var $t1=(__stackBase__)+(1176);
      var $12=(__stackBase__)+(1184);
      var $13=(__stackBase__)+(1192);
      var $14=(__stackBase__)+(1200);
      var $15=(__stackBase__)+(1208);
      $1=$this;
      $2=$callback;
      $3=$input;
      var $16=$1;
      var $17=$3;
      var $18=(($17)|0);
      var $19=$p1;
      var $20=$18;
      assert(8 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
      var $21=$3;
      var $22=(($21+8)|0);
      var $23=$p2;
      var $24=$22;
      assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($r, $p2, $p1);
      var $25=__ZNK6b2Vec213LengthSquaredEv($r);
      var $26=$25 > 0;
      if ($26) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5254828)|0), 204, ((5259208)|0), ((5254656)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $31=__ZN6b2Vec29NormalizeEv($r);
      __Z7b2CrossfRK6b2Vec2($v, 1, $r);
      __Z5b2AbsRK6b2Vec2($abs_v, $v);
      var $32=$3;
      var $33=(($32+16)|0);
      var $34=HEAPF32[(($33)>>2)];
      $maxFraction=$34;
      __ZN6b2AABBC1Ev($segmentAABB);
      var $35=$maxFraction;
      __ZmiRK6b2Vec2S1_($5, $p2, $p1);
      __ZmlfRK6b2Vec2($4, $35, $5);
      __ZplRK6b2Vec2S1_($t, $p1, $4);
      var $36=(($segmentAABB)|0);
      __Z5b2MinRK6b2Vec2S1_($6, $p1, $t);
      var $37=$36;
      var $38=$6;
      assert(8 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];
      var $39=(($segmentAABB+8)|0);
      __Z5b2MaxRK6b2Vec2S1_($7, $p1, $t);
      var $40=$39;
      var $41=$7;
      assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
      __ZN15b2GrowableStackIiLi256EEC1Ev($stack);
      var $42=(($16)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $45 = (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE8GetCountEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $47=(($45)|(0)) > 0;
      if ($47) { label = 8; break; } else { label = 41; break; }
    case 8: 
      var $49 = (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE3PopEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 11; break; }
    case 9: 
      $nodeId=$49;
      var $51=$nodeId;
      var $52=(($51)|(0))==-1;
      if ($52) { label = 10; break; } else { label = 12; break; }
    case 10: 
      label = 6; break;
    case 11: 
      var $55$0 = ___cxa_find_matching_catch(-1, -1); $55$1 = tempRet0;
      var $56=$55$0;
      $8=$56;
      var $57=$55$1;
      $9=$57;
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EED1Ev($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 46; break; }
    case 12: 
      var $59=(($16+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$nodeId;
      var $62=(($60+((($61)*(36))&-1))|0);
      $node=$62;
      var $63=$node;
      var $64=(($63)|0);
      var $65 = (function() { try { __THREW__ = 0; return __Z13b2TestOverlapRK6b2AABBS1_($64, $segmentAABB) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 11; break; }
    case 13: 
      var $67=(($65)&(1));
      var $68=(($67)|(0))==0;
      if ($68) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 6; break;
    case 15: 
      var $71=$node;
      var $72=(($71)|0);
      (function() { try { __THREW__ = 0; return __ZNK6b2AABB9GetCenterEv($c, $72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 11; break; }
    case 16: 
      var $74=$node;
      var $75=(($74)|0);
      (function() { try { __THREW__ = 0; return __ZNK6b2AABB10GetExtentsEv($h, $75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 11; break; }
    case 17: 
      (function() { try { __THREW__ = 0; return __ZmiRK6b2Vec2S1_($10, $p1, $c) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 11; break; }
    case 18: 
      var $78 = (function() { try { __THREW__ = 0; return __Z5b2DotRK6b2Vec2S1_($v, $10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 11; break; }
    case 19: 
      var $80 = (function() { try { __THREW__ = 0; return __Z5b2AbsIfET_S0_($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 11; break; }
    case 20: 
      var $82 = (function() { try { __THREW__ = 0; return __Z5b2DotRK6b2Vec2S1_($abs_v, $h) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 11; break; }
    case 21: 
      var $84=($80)-($82);
      $separation=$84;
      var $85=$separation;
      var $86=$85 > 0;
      if ($86) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 6; break;
    case 23: 
      var $89=$node;
      var $90 = (function() { try { __THREW__ = 0; return __ZNK10b2TreeNode6IsLeafEv($89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 11; break; }
    case 24: 
      if ($90) { label = 25; break; } else { label = 37; break; }
    case 25: 
      (function() { try { __THREW__ = 0; return __ZN14b2RayCastInputC1Ev($subInput) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 11; break; }
    case 26: 
      var $94=(($subInput)|0);
      var $95=$3;
      var $96=(($95)|0);
      var $97=$94;
      var $98=$96;
      assert(8 % 1 === 0);HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($97)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];
      var $99=(($subInput+8)|0);
      var $100=$3;
      var $101=(($100+8)|0);
      var $102=$99;
      var $103=$101;
      assert(8 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];
      var $104=$maxFraction;
      var $105=(($subInput+16)|0);
      HEAPF32[(($105)>>2)]=$104;
      var $106=$2;
      var $107=$nodeId;
      var $108 = (function() { try { __THREW__ = 0; return __ZN21b2WorldRayCastWrapper15RayCastCallbackERK14b2RayCastInputi($106, $subInput, $107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 11; break; }
    case 27: 
      $value=$108;
      var $110=$value;
      var $111=$110 == 0;
      if ($111) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $11=1;
      label = 42; break;
    case 29: 
      var $114=$value;
      var $115=$114 > 0;
      if ($115) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $117=$value;
      $maxFraction=$117;
      var $118=$maxFraction;
      (function() { try { __THREW__ = 0; return __ZmiRK6b2Vec2S1_($13, $p2, $p1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 11; break; }
    case 31: 
      (function() { try { __THREW__ = 0; return __ZmlfRK6b2Vec2($12, $118, $13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 11; break; }
    case 32: 
      (function() { try { __THREW__ = 0; return __ZplRK6b2Vec2S1_($t1, $p1, $12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 11; break; }
    case 33: 
      var $122=(($segmentAABB)|0);
      (function() { try { __THREW__ = 0; return __Z5b2MinRK6b2Vec2S1_($14, $p1, $t1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 11; break; }
    case 34: 
      var $124=$122;
      var $125=$14;
      assert(8 % 1 === 0);HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($124)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];
      var $126=(($segmentAABB+8)|0);
      (function() { try { __THREW__ = 0; return __Z5b2MaxRK6b2Vec2S1_($15, $p1, $t1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 11; break; }
    case 35: 
      var $128=$126;
      var $129=$15;
      assert(8 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];HEAP32[((($128)+(4))>>2)]=HEAP32[((($129)+(4))>>2)];
      label = 36; break;
    case 36: 
      label = 40; break;
    case 37: 
      var $132=$node;
      var $133=(($132+24)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 11; break; }
    case 38: 
      var $135=$node;
      var $136=(($135+28)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 11; break; }
    case 39: 
      label = 40; break;
    case 40: 
      label = 6; break;
    case 41: 
      $11=0;
      label = 42; break;
    case 42: 
      __ZN15b2GrowableStackIiLi256EED1Ev($stack);
      var $cleanup_dest=$11;
      if ((($cleanup_dest)|(0))==0 | (($cleanup_dest)|(0))==1) {
        label = 43; break;
      }
      else {
      label = 47; break;
      }
    case 43: 
      STACKTOP = __stackBase__;
      return;
    case 44: 
      label = 45; break;
    case 45: 
      var $144=$8;
      var $145=$9;
      var $146$0=$144;
      var $146$1=0;
      var $147$0=$146$0;
      var $147$1=$145;
      ___resumeException($147$0)
    case 46: 
      var $149$0 = ___cxa_find_matching_catch(-1, -1,0); $149$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    case 47: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1036)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $stack=__stackBase__;
      var $4;
      var $5;
      var $nodeId;
      var $node;
      var $proceed;
      var $6;
      $1=$this;
      $2=$callback;
      $3=$aabb;
      var $7=$1;
      __ZN15b2GrowableStackIiLi256EEC1Ev($stack);
      var $8=(($7)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 8; break; }
    case 2: 
      label = 3; break;
    case 3: 
      var $11 = (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE8GetCountEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $13=(($11)|(0)) > 0;
      if ($13) { label = 5; break; } else { label = 22; break; }
    case 5: 
      var $15 = (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE3PopEv($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
    case 6: 
      $nodeId=$15;
      var $17=$nodeId;
      var $18=(($17)|(0))==-1;
      if ($18) { label = 7; break; } else { label = 9; break; }
    case 7: 
      label = 3; break;
    case 8: 
      var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
      var $22=$21$0;
      $4=$22;
      var $23=$21$1;
      $5=$23;
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EED1Ev($stack) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 27; break; }
    case 9: 
      var $25=(($7+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$nodeId;
      var $28=(($26+((($27)*(36))&-1))|0);
      $node=$28;
      var $29=$node;
      var $30=(($29)|0);
      var $31=$3;
      var $32 = (function() { try { __THREW__ = 0; return __Z13b2TestOverlapRK6b2AABBS1_($30, $31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 8; break; }
    case 10: 
      if ($32) { label = 11; break; } else { label = 21; break; }
    case 11: 
      var $35=$node;
      var $36 = (function() { try { __THREW__ = 0; return __ZNK10b2TreeNode6IsLeafEv($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 8; break; }
    case 12: 
      if ($36) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $39=$2;
      var $40=$nodeId;
      var $41 = (function() { try { __THREW__ = 0; return __ZN19b2WorldQueryWrapper13QueryCallbackEi($39, $40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 8; break; }
    case 14: 
      var $43=(($41)&(1));
      $proceed=$43;
      var $44=$proceed;
      var $45=(($44) & 1);
      var $46=(($45)&(1));
      var $47=(($46)|(0))==0;
      if ($47) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $6=1;
      label = 23; break;
    case 16: 
      label = 20; break;
    case 17: 
      var $51=$node;
      var $52=(($51+24)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 8; break; }
    case 18: 
      var $54=$node;
      var $55=(($54+28)|0);
      (function() { try { __THREW__ = 0; return __ZN15b2GrowableStackIiLi256EE4PushERKi($stack, $55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 8; break; }
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 3; break;
    case 22: 
      $6=0;
      label = 23; break;
    case 23: 
      __ZN15b2GrowableStackIiLi256EED1Ev($stack);
      var $cleanup_dest=$6;
      if ((($cleanup_dest)|(0))==0 | (($cleanup_dest)|(0))==1) {
        label = 24; break;
      }
      else {
      label = 28; break;
      }
    case 24: 
      STACKTOP = __stackBase__;
      return;
    case 25: 
      label = 26; break;
    case 26: 
      var $64=$4;
      var $65=$5;
      var $66$0=$64;
      var $66$1=0;
      var $67$0=$66$0;
      var $67$1=$65;
      ___resumeException($67$0)
    case 27: 
      var $69$0 = ___cxa_find_matching_catch(-1, -1,0); $69$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    case 28: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      $1=$this;
      $2=$fixtureA;
      $3=$indexA;
      $4=$fixtureB;
      $5=$indexB;
      var $8=$1;
      var $9=$8;
      var $10=$2;
      var $11=$3;
      var $12=$4;
      var $13=$5;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($9, $10, $11, $12, $13);
      var $14=$8;
      HEAP32[(($14)>>2)]=((5264616)|0);
      var $15=$8;
      var $16=(($15+48)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $20=(($18)|(0))==3;
      if ($20) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5254588)|0), 43, ((5261796)|0), ((5257172)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      throw "Reached an unreachable!"
    case 6: 
      var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
      var $26=$25$0;
      $6=$26;
      var $27=$25$1;
      $7=$27;
      var $28=$8;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD2Ev($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
      label = 7; break;
    case 7: 
      var $31=$8;
      var $32=(($31+52)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 6; break; }
    case 8: 
      var $36=(($34)|(0))==0;
      if ($36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5254588)|0), 44, ((5261796)|0), ((5254060)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
    case 11: 
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      return;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$6;
      var $45=$7;
      var $46$0=$44;
      var $46$1=0;
      var $47$0=$46$0;
      var $47$1=$45;
      ___resumeException($47$0)
    case 15: 
      var $49$0 = ___cxa_find_matching_catch(-1, -1,0); $49$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2ChainAndCircleContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN23b2ChainAndCircleContactD2Ev($2);
  return;
}
function __ZN23b2ChainAndCircleContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN23b2ChainAndCircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2ChainAndCircleContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  return;
}
function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $mem;
      $1=$fixtureA;
      $2=$indexA;
      $3=$fixtureB;
      $4=$indexB;
      $5=$allocator;
      var $6=$5;
      var $7=__ZN16b2BlockAllocator8AllocateEi($6, 144);
      $mem=$7;
      var $8=$mem;
      var $9=(($8)|(0))==0;
      if ($9) { var $17 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$8;
      var $12=$1;
      var $13=$2;
      var $14=$3;
      var $15=$4;
      __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($11, $12, $13, $14, $15);
      var $17 = $11;label = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  return;
}
function __ZN24b2ChainAndPolygonContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN24b2ChainAndPolygonContactD2Ev($2);
  return;
}
function __ZN24b2ChainAndPolygonContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN24b2ChainAndPolygonContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN24b2ChainAndPolygonContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  return;
}
function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|(0))==0;
      if ($11) { var $17 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      __ZN15b2CircleContactC2EP9b2FixtureS1_($13, $14, $15);
      var $17 = $13;label = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  return;
}
function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($6, $11, $12, $17, $18);
  return;
}
function __ZN15b2CircleContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2CircleContactD2Ev($2);
  return;
}
function __ZN15b2CircleContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2CircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2CircleContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  return;
}
function __ZN9b2Contact19InitializeRegistersEv() {
  var label = 0;
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(1318, 592, 0, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(1446, 1882, 2, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(2352, 1366, 2, 2);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(1274, 380, 1, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(1720, 1044, 1, 2);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(1010, 1292, 3, 0);
  __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(2362, 686, 3, 2);
  return;
}
function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $chain;
      var $edge=__stackBase__;
      var $5;
      var $6;
      $1=$this;
      $2=$manifold;
      $3=$xfA;
      $4=$xfB;
      var $7=$1;
      var $8=$7;
      var $9=(($8+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=__ZN9b2Fixture8GetShapeEv($10);
      var $12=$11;
      $chain=$12;
      __ZN11b2EdgeShapeC1Ev($edge);
      var $13=$chain;
      var $14=$7;
      var $15=(($14+56)|0);
      var $16=HEAP32[(($15)>>2)];
      (function() { try { __THREW__ = 0; return __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($13, $edge, $16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $18=$2;
      var $19=$3;
      var $20=$7;
      var $21=(($20+52)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture8GetShapeEv($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $25=$23;
      var $26=$4;
      (function() { try { __THREW__ = 0; return __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($18, $edge, $19, $25, $26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN11b2EdgeShapeD1Ev($edge);
      STACKTOP = __stackBase__;
      return;
    case 5: 
      var $29$0 = ___cxa_find_matching_catch(-1, -1); $29$1 = tempRet0;
      var $30=$29$0;
      $5=$30;
      var $31=$29$1;
      $6=$31;
      (function() { try { __THREW__ = 0; return __ZN11b2EdgeShapeD1Ev($edge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $34=$5;
      var $35=$6;
      var $36$0=$34;
      var $36$1=0;
      var $37$0=$36$0;
      var $37$1=$35;
      ___resumeException($37$0)
    case 8: 
      var $39$0 = ___cxa_find_matching_catch(-1, -1,0); $39$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      $1=$this;
      $2=$fixtureA;
      $3=$indexA;
      $4=$fixtureB;
      $5=$indexB;
      var $8=$1;
      var $9=$8;
      var $10=$2;
      var $11=$3;
      var $12=$4;
      var $13=$5;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($9, $10, $11, $12, $13);
      var $14=$8;
      HEAP32[(($14)>>2)]=((5264568)|0);
      var $15=$8;
      var $16=(($15+48)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $20=(($18)|(0))==3;
      if ($20) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5254448)|0), 43, ((5261628)|0), ((5257084)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      throw "Reached an unreachable!"
    case 6: 
      var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
      var $26=$25$0;
      $6=$26;
      var $27=$25$1;
      $7=$27;
      var $28=$8;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD2Ev($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
      label = 7; break;
    case 7: 
      var $31=$8;
      var $32=(($31+52)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 6; break; }
    case 8: 
      var $36=(($34)|(0))==2;
      if ($36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5254448)|0), 44, ((5261628)|0), ((5253984)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
    case 11: 
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      return;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$6;
      var $45=$7;
      var $46$0=$44;
      var $46$1=0;
      var $47$0=$46$0;
      var $47$1=$45;
      ___resumeException($47$0)
    case 15: 
      var $49$0 = ___cxa_find_matching_catch(-1, -1,0); $49$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $chain;
      var $edge=__stackBase__;
      var $5;
      var $6;
      $1=$this;
      $2=$manifold;
      $3=$xfA;
      $4=$xfB;
      var $7=$1;
      var $8=$7;
      var $9=(($8+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=__ZN9b2Fixture8GetShapeEv($10);
      var $12=$11;
      $chain=$12;
      __ZN11b2EdgeShapeC1Ev($edge);
      var $13=$chain;
      var $14=$7;
      var $15=(($14+56)|0);
      var $16=HEAP32[(($15)>>2)];
      (function() { try { __THREW__ = 0; return __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($13, $edge, $16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $18=$2;
      var $19=$3;
      var $20=$7;
      var $21=(($20+52)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23 = (function() { try { __THREW__ = 0; return __ZN9b2Fixture8GetShapeEv($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $25=$23;
      var $26=$4;
      (function() { try { __THREW__ = 0; return __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($18, $edge, $19, $25, $26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN11b2EdgeShapeD1Ev($edge);
      STACKTOP = __stackBase__;
      return;
    case 5: 
      var $29$0 = ___cxa_find_matching_catch(-1, -1); $29$1 = tempRet0;
      var $30=$29$0;
      $5=$30;
      var $31=$29$1;
      $6=$31;
      (function() { try { __THREW__ = 0; return __ZN11b2EdgeShapeD1Ev($edge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $34=$5;
      var $35=$6;
      var $36$0=$34;
      var $36$1=0;
      var $37$0=$36$0;
      var $37$1=$35;
      ___resumeException($37$0)
    case 8: 
      var $39$0 = ___cxa_find_matching_catch(-1, -1,0); $39$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2CircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5265032)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $16=(($14)|(0))==0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5254308)|0), 44, ((5263020)|0), ((5257008)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      throw "Reached an unreachable!"
    case 6: 
      var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
      var $22=$21$0;
      $4=$22;
      var $23=$21$1;
      $5=$23;
      var $24=$6;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD2Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
      label = 7; break;
    case 7: 
      var $27=$6;
      var $28=(($27+52)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 6; break; }
    case 8: 
      var $32=(($30)|(0))==0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5254308)|0), 45, ((5263020)|0), ((5253920)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
    case 11: 
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      return;
    case 13: 
      label = 14; break;
    case 14: 
      var $40=$4;
      var $41=$5;
      var $42$0=$40;
      var $42$1=0;
      var $43$0=$42$0;
      var $43$1=$41;
      ___resumeException($43$0)
    case 15: 
      var $45$0 = ___cxa_find_matching_catch(-1, -1,0); $45$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_($createFcn, $destoryFcn, $type1, $type2) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$createFcn;
      $2=$destoryFcn;
      $3=$type1;
      $4=$type2;
      var $5=$3;
      var $6=0 <= (($5)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$3;
      var $9=(($8)|(0)) < 4;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5254216)|0), 54, ((5260176)|0), ((5256964)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $14=$4;
      var $15=0 <= (($14)|(0));
      if ($15) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $17=$4;
      var $18=(($17)|(0)) < 4;
      if ($18) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      ___assert_func(((5254216)|0), 55, ((5260176)|0), ((5253876)|0));
      throw "Reached an unreachable!"
      label = 9; break;
    case 9: 
      var $23=$1;
      var $24=$4;
      var $25=$3;
      var $26=((5266636+((($25)*(48))&-1))|0);
      var $27=(($26+((($24)*(12))&-1))|0);
      var $28=(($27)|0);
      HEAP32[(($28)>>2)]=$23;
      var $29=$2;
      var $30=$4;
      var $31=$3;
      var $32=((5266636+((($31)*(48))&-1))|0);
      var $33=(($32+((($30)*(12))&-1))|0);
      var $34=(($33+4)|0);
      HEAP32[(($34)>>2)]=$29;
      var $35=$4;
      var $36=$3;
      var $37=((5266636+((($36)*(48))&-1))|0);
      var $38=(($37+((($35)*(12))&-1))|0);
      var $39=(($38+8)|0);
      HEAP8[($39)]=1;
      var $40=$3;
      var $41=$4;
      var $42=(($40)|(0))!=(($41)|(0));
      if ($42) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $44=$1;
      var $45=$3;
      var $46=$4;
      var $47=((5266636+((($46)*(48))&-1))|0);
      var $48=(($47+((($45)*(12))&-1))|0);
      var $49=(($48)|0);
      HEAP32[(($49)>>2)]=$44;
      var $50=$2;
      var $51=$3;
      var $52=$4;
      var $53=((5266636+((($52)*(48))&-1))|0);
      var $54=(($53+((($51)*(12))&-1))|0);
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=$50;
      var $56=$3;
      var $57=$4;
      var $58=((5266636+((($57)*(48))&-1))|0);
      var $59=(($58+((($56)*(12))&-1))|0);
      var $60=(($59+8)|0);
      HEAP8[($60)]=0;
      label = 11; break;
    case 11: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $type1;
      var $type2;
      var $createFcn;
      $2=$fixtureA;
      $3=$indexA;
      $4=$fixtureB;
      $5=$indexB;
      $6=$allocator;
      var $7=HEAP8[(5266632)];
      var $8=(($7) & 1);
      var $9=(($8)&(1));
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      __ZN9b2Contact19InitializeRegistersEv();
      HEAP8[(5266632)]=1;
      label = 3; break;
    case 3: 
      var $13=$2;
      var $14=__ZNK9b2Fixture7GetTypeEv($13);
      $type1=$14;
      var $15=$4;
      var $16=__ZNK9b2Fixture7GetTypeEv($15);
      $type2=$16;
      var $17=$type1;
      var $18=0 <= (($17)|(0));
      if ($18) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $20=$type1;
      var $21=(($20)|(0)) < 4;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5254216)|0), 80, ((5260284)|0), ((5256964)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      var $26=$type2;
      var $27=0 <= (($26)|(0));
      if ($27) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $29=$type2;
      var $30=(($29)|(0)) < 4;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      ___assert_func(((5254216)|0), 81, ((5260284)|0), ((5253876)|0));
      throw "Reached an unreachable!"
      label = 11; break;
    case 11: 
      var $35=$type2;
      var $36=$type1;
      var $37=((5266636+((($36)*(48))&-1))|0);
      var $38=(($37+((($35)*(12))&-1))|0);
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      $createFcn=$40;
      var $41=$createFcn;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $44=$type2;
      var $45=$type1;
      var $46=((5266636+((($45)*(48))&-1))|0);
      var $47=(($46+((($44)*(12))&-1))|0);
      var $48=(($47+8)|0);
      var $49=HEAP8[($48)];
      var $50=(($49) & 1);
      if ($50) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $52=$createFcn;
      var $53=$2;
      var $54=$3;
      var $55=$4;
      var $56=$5;
      var $57=$6;
      var $58=FUNCTION_TABLE[$52]($53, $54, $55, $56, $57);
      $1=$58;
      label = 16; break;
    case 14: 
      var $60=$createFcn;
      var $61=$4;
      var $62=$5;
      var $63=$2;
      var $64=$3;
      var $65=$6;
      var $66=FUNCTION_TABLE[$60]($61, $62, $63, $64, $65);
      $1=$66;
      label = 16; break;
    case 15: 
      $1=0;
      label = 16; break;
    case 16: 
      var $69=$1;
      return $69;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $typeA;
      var $typeB;
      var $destroyFcn;
      $1=$contact;
      $2=$allocator;
      var $3=HEAP8[(5266632)];
      var $4=(($3) & 1);
      var $5=(($4)&(1));
      var $6=(($5)|(0))==1;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5254216)|0), 103, ((5260112)|0), ((5251444)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=(($11+64)|0);
      var $13=(($12+60)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0)) > 0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$1;
      var $18=__ZN9b2Contact11GetFixtureAEv($17);
      var $19=__ZN9b2Fixture7GetBodyEv($18);
      __ZN6b2Body8SetAwakeEb($19, 1);
      var $20=$1;
      var $21=__ZN9b2Contact11GetFixtureBEv($20);
      var $22=__ZN9b2Fixture7GetBodyEv($21);
      __ZN6b2Body8SetAwakeEb($22, 1);
      label = 6; break;
    case 6: 
      var $24=$1;
      var $25=__ZN9b2Contact11GetFixtureAEv($24);
      var $26=__ZNK9b2Fixture7GetTypeEv($25);
      $typeA=$26;
      var $27=$1;
      var $28=__ZN9b2Contact11GetFixtureBEv($27);
      var $29=__ZNK9b2Fixture7GetTypeEv($28);
      $typeB=$29;
      var $30=$typeA;
      var $31=0 <= (($30)|(0));
      if ($31) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $33=$typeB;
      var $34=(($33)|(0)) < 4;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      ___assert_func(((5254216)|0), 114, ((5260112)|0), ((5250244)|0));
      throw "Reached an unreachable!"
      label = 10; break;
    case 10: 
      var $39=$typeA;
      var $40=0 <= (($39)|(0));
      if ($40) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $42=$typeB;
      var $43=(($42)|(0)) < 4;
      if ($43) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      ___assert_func(((5254216)|0), 115, ((5260112)|0), ((5250244)|0));
      throw "Reached an unreachable!"
      label = 14; break;
    case 14: 
      var $48=$typeB;
      var $49=$typeA;
      var $50=((5266636+((($49)*(48))&-1))|0);
      var $51=(($50+((($48)*(12))&-1))|0);
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      $destroyFcn=$53;
      var $54=$destroyFcn;
      var $55=$1;
      var $56=$2;
      FUNCTION_TABLE[$54]($55, $56);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2ContactEdgeC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __Z16b2MixRestitutionff($restitution1, $restitution2) {
  var label = 0;
  var $1;
  var $2;
  $1=$restitution1;
  $2=$restitution2;
  var $3=$1;
  var $4=$2;
  var $5=$3 > $4;
  var $6=$1;
  var $7=$2;
  var $8=$5 ? $6 : $7;
  return $8;
}
function __ZN9b2Contact11GetManifoldEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+64)|0);
  return $3;
}
function __ZN7b2Mat227SetZeroEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=(($3)|0);
  HEAPF32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  var $6=(($5)|0);
  HEAPF32[(($6)>>2)]=0;
  var $7=(($2)|0);
  var $8=(($7+4)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=(($2+8)|0);
  var $10=(($9+4)|0);
  HEAPF32[(($10)>>2)]=0;
  return;
}
function __ZN9b2ContactC2EP9b2FixtureiS1_i($this, $fA, $indexA, $fB, $indexB) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$this;
  $2=$fA;
  $3=$indexA;
  $4=$fB;
  $5=$indexB;
  var $6=$1;
  var $7=$6;
  HEAP32[(($7)>>2)]=((5264380)|0);
  var $8=(($6+16)|0);
  __ZN13b2ContactEdgeC1Ev($8);
  var $9=(($6+32)|0);
  __ZN13b2ContactEdgeC1Ev($9);
  var $10=(($6+64)|0);
  __ZN10b2ManifoldC1Ev($10);
  var $11=(($6+4)|0);
  HEAP32[(($11)>>2)]=4;
  var $12=$2;
  var $13=(($6+48)|0);
  HEAP32[(($13)>>2)]=$12;
  var $14=$4;
  var $15=(($6+52)|0);
  HEAP32[(($15)>>2)]=$14;
  var $16=$3;
  var $17=(($6+56)|0);
  HEAP32[(($17)>>2)]=$16;
  var $18=$5;
  var $19=(($6+60)|0);
  HEAP32[(($19)>>2)]=$18;
  var $20=(($6+64)|0);
  var $21=(($20+60)|0);
  HEAP32[(($21)>>2)]=0;
  var $22=(($6+8)|0);
  HEAP32[(($22)>>2)]=0;
  var $23=(($6+12)|0);
  HEAP32[(($23)>>2)]=0;
  var $24=(($6+16)|0);
  var $25=(($24+4)|0);
  HEAP32[(($25)>>2)]=0;
  var $26=(($6+16)|0);
  var $27=(($26+8)|0);
  HEAP32[(($27)>>2)]=0;
  var $28=(($6+16)|0);
  var $29=(($28+12)|0);
  HEAP32[(($29)>>2)]=0;
  var $30=(($6+16)|0);
  var $31=(($30)|0);
  HEAP32[(($31)>>2)]=0;
  var $32=(($6+32)|0);
  var $33=(($32+4)|0);
  HEAP32[(($33)>>2)]=0;
  var $34=(($6+32)|0);
  var $35=(($34+8)|0);
  HEAP32[(($35)>>2)]=0;
  var $36=(($6+32)|0);
  var $37=(($36+12)|0);
  HEAP32[(($37)>>2)]=0;
  var $38=(($6+32)|0);
  var $39=(($38)|0);
  HEAP32[(($39)>>2)]=0;
  var $40=(($6+128)|0);
  HEAP32[(($40)>>2)]=0;
  var $41=(($6+48)|0);
  var $42=HEAP32[(($41)>>2)];
  var $43=(($42+16)|0);
  var $44=HEAPF32[(($43)>>2)];
  var $45=(($6+52)|0);
  var $46=HEAP32[(($45)>>2)];
  var $47=(($46+16)|0);
  var $48=HEAPF32[(($47)>>2)];
  var $49=__Z13b2MixFrictionff($44, $48);
  var $50=(($6+136)|0);
  HEAPF32[(($50)>>2)]=$49;
  var $51=(($6+48)|0);
  var $52=HEAP32[(($51)>>2)];
  var $53=(($52+20)|0);
  var $54=HEAPF32[(($53)>>2)];
  var $55=(($6+52)|0);
  var $56=HEAP32[(($55)>>2)];
  var $57=(($56+20)|0);
  var $58=HEAPF32[(($57)>>2)];
  var $59=__Z16b2MixRestitutionff($54, $58);
  var $60=(($6+140)|0);
  HEAPF32[(($60)>>2)]=$59;
  return;
}
function __ZN13b2ContactEdgeC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2ContactEdgeC2Ev($2);
  return;
}
function __ZN10b2ManifoldC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2ManifoldC2Ev($2);
  return;
}
function __Z13b2MixFrictionff($friction1, $friction2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $2=$friction1;
  $3=$friction2;
  var $4=$2;
  var $5=$3;
  var $6=($4)*($5);
  $1=$6;
  var $7=$1;
  var $8=Math.sqrt($7);
  return $8;
}
function __ZN9b2Contact6UpdateEP17b2ContactListener($this, $listener) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 68)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $oldManifold=__stackBase__;
      var $touching;
      var $wasTouching;
      var $sensorA;
      var $sensorB;
      var $sensor;
      var $bodyA;
      var $bodyB;
      var $xfA;
      var $xfB;
      var $shapeA;
      var $shapeB;
      var $i;
      var $mp2;
      var $id2=(__stackBase__)+(64);
      var $j;
      var $mp1;
      $1=$this;
      $2=$listener;
      var $3=$1;
      var $4=(($3+64)|0);
      var $5=$oldManifold;
      var $6=$4;
      assert(64 % 1 === 0);_memcpy($5, $6, 64);
      var $7=(($3+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 | 4;
      HEAP32[(($7)>>2)]=$9;
      $touching=0;
      var $10=(($3+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 2;
      var $13=(($12)|(0))==2;
      var $14=(($13)&(1));
      $wasTouching=$14;
      var $15=(($3+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=__ZNK9b2Fixture8IsSensorEv($16);
      var $18=(($17)&(1));
      $sensorA=$18;
      var $19=(($3+52)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=__ZNK9b2Fixture8IsSensorEv($20);
      var $22=(($21)&(1));
      $sensorB=$22;
      var $23=$sensorA;
      var $24=(($23) & 1);
      if ($24) { var $29 = 1;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $26=$sensorB;
      var $27=(($26) & 1);
      var $29 = $27;label = 3; break;
    case 3: 
      var $29;
      var $30=(($29)&(1));
      $sensor=$30;
      var $31=(($3+48)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=__ZN9b2Fixture7GetBodyEv($32);
      $bodyA=$33;
      var $34=(($3+52)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=__ZN9b2Fixture7GetBodyEv($35);
      $bodyB=$36;
      var $37=$bodyA;
      var $38=__ZNK6b2Body12GetTransformEv($37);
      $xfA=$38;
      var $39=$bodyB;
      var $40=__ZNK6b2Body12GetTransformEv($39);
      $xfB=$40;
      var $41=$sensor;
      var $42=(($41) & 1);
      if ($42) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $44=(($3+48)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=__ZN9b2Fixture8GetShapeEv($45);
      $shapeA=$46;
      var $47=(($3+52)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=__ZN9b2Fixture8GetShapeEv($48);
      $shapeB=$49;
      var $50=$shapeA;
      var $51=(($3+56)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$shapeB;
      var $54=(($3+60)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$xfA;
      var $57=$xfB;
      var $58=__Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($50, $52, $53, $55, $56, $57);
      var $59=(($58)&(1));
      $touching=$59;
      var $60=(($3+64)|0);
      var $61=(($60+60)|0);
      HEAP32[(($61)>>2)]=0;
      label = 18; break;
    case 5: 
      var $63=$3;
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($3+64)|0);
      var $68=$xfA;
      var $69=$xfB;
      FUNCTION_TABLE[$66]($3, $67, $68, $69);
      var $70=(($3+64)|0);
      var $71=(($70+60)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|(0)) > 0;
      var $74=(($73)&(1));
      $touching=$74;
      $i=0;
      label = 6; break;
    case 6: 
      var $76=$i;
      var $77=(($3+64)|0);
      var $78=(($77+60)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($76)|(0)) < (($79)|(0));
      if ($80) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $82=(($3+64)|0);
      var $83=(($82)|0);
      var $84=(($83)|0);
      var $85=$i;
      var $86=(($84+((($85)*(20))&-1))|0);
      $mp2=$86;
      var $87=$mp2;
      var $88=(($87+8)|0);
      HEAPF32[(($88)>>2)]=0;
      var $89=$mp2;
      var $90=(($89+12)|0);
      HEAPF32[(($90)>>2)]=0;
      var $91=$mp2;
      var $92=(($91+16)|0);
      var $93=$id2;
      var $94=$92;
      assert(4 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($94)>>2)];
      $j=0;
      label = 8; break;
    case 8: 
      var $96=$j;
      var $97=(($oldManifold+60)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($96)|(0)) < (($98)|(0));
      if ($99) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $101=(($oldManifold)|0);
      var $102=(($101)|0);
      var $103=$j;
      var $104=(($102+((($103)*(20))&-1))|0);
      $mp1=$104;
      var $105=$mp1;
      var $106=(($105+16)|0);
      var $107=$106;
      var $108=HEAP32[(($107)>>2)];
      var $109=$id2;
      var $110=HEAP32[(($109)>>2)];
      var $111=(($108)|(0))==(($110)|(0));
      if ($111) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $113=$mp1;
      var $114=(($113+8)|0);
      var $115=HEAPF32[(($114)>>2)];
      var $116=$mp2;
      var $117=(($116+8)|0);
      HEAPF32[(($117)>>2)]=$115;
      var $118=$mp1;
      var $119=(($118+12)|0);
      var $120=HEAPF32[(($119)>>2)];
      var $121=$mp2;
      var $122=(($121+12)|0);
      HEAPF32[(($122)>>2)]=$120;
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $125=$j;
      var $126=((($125)+(1))|0);
      $j=$126;
      label = 8; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $129=$i;
      var $130=((($129)+(1))|0);
      $i=$130;
      label = 6; break;
    case 15: 
      var $132=$touching;
      var $133=(($132) & 1);
      var $134=(($133)&(1));
      var $135=$wasTouching;
      var $136=(($135) & 1);
      var $137=(($136)&(1));
      var $138=(($134)|(0))!=(($137)|(0));
      if ($138) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $140=$bodyA;
      __ZN6b2Body8SetAwakeEb($140, 1);
      var $141=$bodyB;
      __ZN6b2Body8SetAwakeEb($141, 1);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $144=$touching;
      var $145=(($144) & 1);
      if ($145) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $147=(($3+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148 | 2;
      HEAP32[(($147)>>2)]=$149;
      label = 21; break;
    case 20: 
      var $151=(($3+4)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$152 & -3;
      HEAP32[(($151)>>2)]=$153;
      label = 21; break;
    case 21: 
      var $155=$wasTouching;
      var $156=(($155) & 1);
      var $157=(($156)&(1));
      var $158=(($157)|(0))==0;
      if ($158) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $160=$touching;
      var $161=(($160) & 1);
      var $162=(($161)&(1));
      var $163=(($162)|(0))==1;
      if ($163) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $165=$2;
      var $166=(($165)|(0))!=0;
      if ($166) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $168=$2;
      var $169=$168;
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170+8)|0);
      var $172=HEAP32[(($171)>>2)];
      FUNCTION_TABLE[$172]($168, $3);
      label = 25; break;
    case 25: 
      var $174=$wasTouching;
      var $175=(($174) & 1);
      var $176=(($175)&(1));
      var $177=(($176)|(0))==1;
      if ($177) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $179=$touching;
      var $180=(($179) & 1);
      var $181=(($180)&(1));
      var $182=(($181)|(0))==0;
      if ($182) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $184=$2;
      var $185=(($184)|(0))!=0;
      if ($185) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $187=$2;
      var $188=$187;
      var $189=HEAP32[(($188)>>2)];
      var $190=(($189+12)|0);
      var $191=HEAP32[(($190)>>2)];
      FUNCTION_TABLE[$191]($187, $3);
      label = 29; break;
    case 29: 
      var $193=$sensor;
      var $194=(($193) & 1);
      var $195=(($194)&(1));
      var $196=(($195)|(0))==0;
      if ($196) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $198=$touching;
      var $199=(($198) & 1);
      if ($199) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $201=$2;
      var $202=(($201)|(0))!=0;
      if ($202) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $204=$2;
      var $205=$204;
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206+16)|0);
      var $208=HEAP32[(($207)>>2)];
      FUNCTION_TABLE[$208]($204, $3, $oldManifold);
      label = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2ContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN9b2ContactD2Ev($2);
  return;
}
function __ZN9b2ContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN10b2ManifoldC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=(($4+40)|0);
      var $7 = $4;label = 2; break;
    case 2: 
      var $7;
      __ZN15b2ManifoldPointC1Ev($7);
      var $8=(($7+20)|0);
      var $9=(($8)|(0))==(($5)|(0));
      if ($9) { label = 3; break; } else { var $7 = $8;label = 2; break; }
    case 3: 
      var $11=(($2+40)|0);
      __ZN6b2Vec2C1Ev($11);
      var $12=(($2+48)|0);
      __ZN6b2Vec2C1Ev($12);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2ManifoldPointC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2ManifoldPointC2Ev($2);
  return;
}
function __ZN15b2ManifoldPointC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+16)|0);
  return;
}
function __ZN15b2ContactSolverD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+32)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($2+40)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  __ZN16b2StackAllocator4FreeEPv($4, $7);
  var $8=(($2+32)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($2+36)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  __ZN16b2StackAllocator4FreeEPv($9, $12);
  return;
}
function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $contact;
      var $fixtureA;
      var $fixtureB;
      var $shapeA;
      var $shapeB;
      var $radiusA;
      var $radiusB;
      var $bodyA;
      var $bodyB;
      var $manifold;
      var $pointCount;
      var $vc;
      var $pc;
      var $j;
      var $cp;
      var $vcp;
      $1=$this;
      $2=$def;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($3)|0);
      var $6=$2;
      var $7=(($6)|0);
      var $8=$5;
      var $9=$7;
      assert(24 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];HEAP32[((($8)+(12))>>2)]=HEAP32[((($9)+(12))>>2)];HEAP32[((($8)+(16))>>2)]=HEAP32[((($9)+(16))>>2)];HEAP32[((($8)+(20))>>2)]=HEAP32[((($9)+(20))>>2)];
      var $10=$2;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($3+32)|0);
      HEAP32[(($13)>>2)]=$12;
      var $14=$2;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($3+48)|0);
      HEAP32[(($17)>>2)]=$16;
      var $18=(($3+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($3+48)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)*(88))&-1);
      var $23=__ZN16b2StackAllocator8AllocateEi($19, $22);
      var $24=$23;
      var $25=(($3+36)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=(($3+32)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($3+48)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)*(152))&-1);
      var $31=__ZN16b2StackAllocator8AllocateEi($27, $30);
      var $32=$31;
      var $33=(($3+40)|0);
      HEAP32[(($33)>>2)]=$32;
      var $34=$2;
      var $35=(($34+32)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($3+24)|0);
      HEAP32[(($37)>>2)]=$36;
      var $38=$2;
      var $39=(($38+36)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($3+28)|0);
      HEAP32[(($41)>>2)]=$40;
      var $42=$2;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($3+44)|0);
      HEAP32[(($45)>>2)]=$44;
      $i=0;
      label = 2; break;
    case 2: 
      var $47=$i;
      var $48=(($3+48)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($47)|(0)) < (($49)|(0));
      if ($50) { label = 3; break; } else { label = 15; break; }
    case 3: 
      var $52=$i;
      var $53=(($3+44)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($52<<2))|0);
      var $56=HEAP32[(($55)>>2)];
      $contact=$56;
      var $57=$contact;
      var $58=(($57+48)|0);
      var $59=HEAP32[(($58)>>2)];
      $fixtureA=$59;
      var $60=$contact;
      var $61=(($60+52)|0);
      var $62=HEAP32[(($61)>>2)];
      $fixtureB=$62;
      var $63=$fixtureA;
      var $64=__ZN9b2Fixture8GetShapeEv($63);
      $shapeA=$64;
      var $65=$fixtureB;
      var $66=__ZN9b2Fixture8GetShapeEv($65);
      $shapeB=$66;
      var $67=$shapeA;
      var $68=(($67+8)|0);
      var $69=HEAPF32[(($68)>>2)];
      $radiusA=$69;
      var $70=$shapeB;
      var $71=(($70+8)|0);
      var $72=HEAPF32[(($71)>>2)];
      $radiusB=$72;
      var $73=$fixtureA;
      var $74=__ZN9b2Fixture7GetBodyEv($73);
      $bodyA=$74;
      var $75=$fixtureB;
      var $76=__ZN9b2Fixture7GetBodyEv($75);
      $bodyB=$76;
      var $77=$contact;
      var $78=__ZN9b2Contact11GetManifoldEv($77);
      $manifold=$78;
      var $79=$manifold;
      var $80=(($79+60)|0);
      var $81=HEAP32[(($80)>>2)];
      $pointCount=$81;
      var $82=$pointCount;
      var $83=(($82)|(0)) > 0;
      if ($83) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((5253516)|0), 71, ((5262856)|0), ((5256884)|0));
      throw "Reached an unreachable!"
      label = 6; break;
    case 6: 
      var $88=(($3+40)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$i;
      var $91=(($89+((($90)*(152))&-1))|0);
      $vc=$91;
      var $92=$contact;
      var $93=(($92+136)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=$vc;
      var $96=(($95+136)|0);
      HEAPF32[(($96)>>2)]=$94;
      var $97=$contact;
      var $98=(($97+140)|0);
      var $99=HEAPF32[(($98)>>2)];
      var $100=$vc;
      var $101=(($100+140)|0);
      HEAPF32[(($101)>>2)]=$99;
      var $102=$bodyA;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$vc;
      var $106=(($105+112)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$bodyB;
      var $108=(($107+8)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$vc;
      var $111=(($110+116)|0);
      HEAP32[(($111)>>2)]=$109;
      var $112=$bodyA;
      var $113=(($112+120)|0);
      var $114=HEAPF32[(($113)>>2)];
      var $115=$vc;
      var $116=(($115+120)|0);
      HEAPF32[(($116)>>2)]=$114;
      var $117=$bodyB;
      var $118=(($117+120)|0);
      var $119=HEAPF32[(($118)>>2)];
      var $120=$vc;
      var $121=(($120+124)|0);
      HEAPF32[(($121)>>2)]=$119;
      var $122=$bodyA;
      var $123=(($122+128)|0);
      var $124=HEAPF32[(($123)>>2)];
      var $125=$vc;
      var $126=(($125+128)|0);
      HEAPF32[(($126)>>2)]=$124;
      var $127=$bodyB;
      var $128=(($127+128)|0);
      var $129=HEAPF32[(($128)>>2)];
      var $130=$vc;
      var $131=(($130+132)|0);
      HEAPF32[(($131)>>2)]=$129;
      var $132=$i;
      var $133=$vc;
      var $134=(($133+148)|0);
      HEAP32[(($134)>>2)]=$132;
      var $135=$pointCount;
      var $136=$vc;
      var $137=(($136+144)|0);
      HEAP32[(($137)>>2)]=$135;
      var $138=$vc;
      var $139=(($138+96)|0);
      __ZN7b2Mat227SetZeroEv($139);
      var $140=$vc;
      var $141=(($140+80)|0);
      __ZN7b2Mat227SetZeroEv($141);
      var $142=(($3+36)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$i;
      var $145=(($143+((($144)*(88))&-1))|0);
      $pc=$145;
      var $146=$bodyA;
      var $147=(($146+8)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$pc;
      var $150=(($149+32)|0);
      HEAP32[(($150)>>2)]=$148;
      var $151=$bodyB;
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$pc;
      var $155=(($154+36)|0);
      HEAP32[(($155)>>2)]=$153;
      var $156=$bodyA;
      var $157=(($156+120)|0);
      var $158=HEAPF32[(($157)>>2)];
      var $159=$pc;
      var $160=(($159+40)|0);
      HEAPF32[(($160)>>2)]=$158;
      var $161=$bodyB;
      var $162=(($161+120)|0);
      var $163=HEAPF32[(($162)>>2)];
      var $164=$pc;
      var $165=(($164+44)|0);
      HEAPF32[(($165)>>2)]=$163;
      var $166=$pc;
      var $167=(($166+48)|0);
      var $168=$bodyA;
      var $169=(($168+28)|0);
      var $170=(($169)|0);
      var $171=$167;
      var $172=$170;
      assert(8 % 1 === 0);HEAP32[(($171)>>2)]=HEAP32[(($172)>>2)];HEAP32[((($171)+(4))>>2)]=HEAP32[((($172)+(4))>>2)];
      var $173=$pc;
      var $174=(($173+56)|0);
      var $175=$bodyB;
      var $176=(($175+28)|0);
      var $177=(($176)|0);
      var $178=$174;
      var $179=$177;
      assert(8 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($179)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($179)+(4))>>2)];
      var $180=$bodyA;
      var $181=(($180+128)|0);
      var $182=HEAPF32[(($181)>>2)];
      var $183=$pc;
      var $184=(($183+64)|0);
      HEAPF32[(($184)>>2)]=$182;
      var $185=$bodyB;
      var $186=(($185+128)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=$pc;
      var $189=(($188+68)|0);
      HEAPF32[(($189)>>2)]=$187;
      var $190=$pc;
      var $191=(($190+16)|0);
      var $192=$manifold;
      var $193=(($192+40)|0);
      var $194=$191;
      var $195=$193;
      assert(8 % 1 === 0);HEAP32[(($194)>>2)]=HEAP32[(($195)>>2)];HEAP32[((($194)+(4))>>2)]=HEAP32[((($195)+(4))>>2)];
      var $196=$pc;
      var $197=(($196+24)|0);
      var $198=$manifold;
      var $199=(($198+48)|0);
      var $200=$197;
      var $201=$199;
      assert(8 % 1 === 0);HEAP32[(($200)>>2)]=HEAP32[(($201)>>2)];HEAP32[((($200)+(4))>>2)]=HEAP32[((($201)+(4))>>2)];
      var $202=$pointCount;
      var $203=$pc;
      var $204=(($203+84)|0);
      HEAP32[(($204)>>2)]=$202;
      var $205=$radiusA;
      var $206=$pc;
      var $207=(($206+76)|0);
      HEAPF32[(($207)>>2)]=$205;
      var $208=$radiusB;
      var $209=$pc;
      var $210=(($209+80)|0);
      HEAPF32[(($210)>>2)]=$208;
      var $211=$manifold;
      var $212=(($211+56)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=$pc;
      var $215=(($214+72)|0);
      HEAP32[(($215)>>2)]=$213;
      $j=0;
      label = 7; break;
    case 7: 
      var $217=$j;
      var $218=$pointCount;
      var $219=(($217)|(0)) < (($218)|(0));
      if ($219) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $221=$manifold;
      var $222=(($221)|0);
      var $223=(($222)|0);
      var $224=$j;
      var $225=(($223+((($224)*(20))&-1))|0);
      $cp=$225;
      var $226=$vc;
      var $227=(($226)|0);
      var $228=(($227)|0);
      var $229=$j;
      var $230=(($228+((($229)*(36))&-1))|0);
      $vcp=$230;
      var $231=(($3)|0);
      var $232=(($231+20)|0);
      var $233=HEAP8[($232)];
      var $234=(($233) & 1);
      if ($234) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $236=(($3)|0);
      var $237=(($236+8)|0);
      var $238=HEAPF32[(($237)>>2)];
      var $239=$cp;
      var $240=(($239+8)|0);
      var $241=HEAPF32[(($240)>>2)];
      var $242=($238)*($241);
      var $243=$vcp;
      var $244=(($243+16)|0);
      HEAPF32[(($244)>>2)]=$242;
      var $245=(($3)|0);
      var $246=(($245+8)|0);
      var $247=HEAPF32[(($246)>>2)];
      var $248=$cp;
      var $249=(($248+12)|0);
      var $250=HEAPF32[(($249)>>2)];
      var $251=($247)*($250);
      var $252=$vcp;
      var $253=(($252+20)|0);
      HEAPF32[(($253)>>2)]=$251;
      label = 11; break;
    case 10: 
      var $255=$vcp;
      var $256=(($255+16)|0);
      HEAPF32[(($256)>>2)]=0;
      var $257=$vcp;
      var $258=(($257+20)|0);
      HEAPF32[(($258)>>2)]=0;
      label = 11; break;
    case 11: 
      var $260=$vcp;
      var $261=(($260)|0);
      __ZN6b2Vec27SetZeroEv($261);
      var $262=$vcp;
      var $263=(($262+8)|0);
      __ZN6b2Vec27SetZeroEv($263);
      var $264=$vcp;
      var $265=(($264+24)|0);
      HEAPF32[(($265)>>2)]=0;
      var $266=$vcp;
      var $267=(($266+28)|0);
      HEAPF32[(($267)>>2)]=0;
      var $268=$vcp;
      var $269=(($268+32)|0);
      HEAPF32[(($269)>>2)]=0;
      var $270=$j;
      var $271=$pc;
      var $272=(($271)|0);
      var $273=(($272+($270<<3))|0);
      var $274=$cp;
      var $275=(($274)|0);
      var $276=$273;
      var $277=$275;
      assert(8 % 1 === 0);HEAP32[(($276)>>2)]=HEAP32[(($277)>>2)];HEAP32[((($276)+(4))>>2)]=HEAP32[((($277)+(4))>>2)];
      label = 12; break;
    case 12: 
      var $279=$j;
      var $280=((($279)+(1))|0);
      $j=$280;
      label = 7; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $283=$i;
      var $284=((($283)+(1))|0);
      $i=$284;
      label = 2; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2WorldManifoldC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2WorldManifoldC2Ev($2);
  return;
}
function __ZNK7b2Mat2210GetInverseEv($agg_result, $this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $b;
      var $c;
      var $d;
      var $det;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      var $4=(($3)|0);
      var $5=HEAPF32[(($4)>>2)];
      $a=$5;
      var $6=(($2+8)|0);
      var $7=(($6)|0);
      var $8=HEAPF32[(($7)>>2)];
      $b=$8;
      var $9=(($2)|0);
      var $10=(($9+4)|0);
      var $11=HEAPF32[(($10)>>2)];
      $c=$11;
      var $12=(($2+8)|0);
      var $13=(($12+4)|0);
      var $14=HEAPF32[(($13)>>2)];
      $d=$14;
      __ZN7b2Mat22C1Ev($agg_result);
      var $15=$a;
      var $16=$d;
      var $17=($15)*($16);
      var $18=$b;
      var $19=$c;
      var $20=($18)*($19);
      var $21=($17)-($20);
      $det=$21;
      var $22=$det;
      var $23=$22 != 0;
      if ($23) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $25=$det;
      var $26=(1)/($25);
      $det=$26;
      label = 3; break;
    case 3: 
      var $28=$det;
      var $29=$d;
      var $30=($28)*($29);
      var $31=(($agg_result)|0);
      var $32=(($31)|0);
      HEAPF32[(($32)>>2)]=$30;
      var $33=$det;
      var $34=(-$33);
      var $35=$b;
      var $36=($34)*($35);
      var $37=(($agg_result+8)|0);
      var $38=(($37)|0);
      HEAPF32[(($38)>>2)]=$36;
      var $39=$det;
      var $40=(-$39);
      var $41=$c;
      var $42=($40)*($41);
      var $43=(($agg_result)|0);
      var $44=(($43+4)|0);
      HEAPF32[(($44)>>2)]=$42;
      var $45=$det;
      var $46=$a;
      var $47=($45)*($46);
      var $48=(($agg_result+8)|0);
      var $49=(($48+4)|0);
      HEAPF32[(($49)>>2)]=$47;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2ContactSolver9WarmStartEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $indexA;
      var $indexB;
      var $mA;
      var $iA;
      var $mB;
      var $iB;
      var $pointCount;
      var $vA=__stackBase__;
      var $wA;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $normal=(__stackBase__)+(16);
      var $tangent=(__stackBase__)+(24);
      var $j;
      var $vcp;
      var $P=(__stackBase__)+(32);
      var $2=(__stackBase__)+(40);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      $1=$this;
      var $6=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $8=$i;
      var $9=(($6+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($8)|(0)) < (($10)|(0));
      if ($11) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $13=(($6+40)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$i;
      var $16=(($14+((($15)*(152))&-1))|0);
      $vc=$16;
      var $17=$vc;
      var $18=(($17+112)|0);
      var $19=HEAP32[(($18)>>2)];
      $indexA=$19;
      var $20=$vc;
      var $21=(($20+116)|0);
      var $22=HEAP32[(($21)>>2)];
      $indexB=$22;
      var $23=$vc;
      var $24=(($23+120)|0);
      var $25=HEAPF32[(($24)>>2)];
      $mA=$25;
      var $26=$vc;
      var $27=(($26+128)|0);
      var $28=HEAPF32[(($27)>>2)];
      $iA=$28;
      var $29=$vc;
      var $30=(($29+124)|0);
      var $31=HEAPF32[(($30)>>2)];
      $mB=$31;
      var $32=$vc;
      var $33=(($32+132)|0);
      var $34=HEAPF32[(($33)>>2)];
      $iB=$34;
      var $35=$vc;
      var $36=(($35+144)|0);
      var $37=HEAP32[(($36)>>2)];
      $pointCount=$37;
      var $38=$indexA;
      var $39=(($6+28)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+((($38)*(12))&-1))|0);
      var $42=(($41)|0);
      var $43=$vA;
      var $44=$42;
      assert(8 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
      var $45=$indexA;
      var $46=(($6+28)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+((($45)*(12))&-1))|0);
      var $49=(($48+8)|0);
      var $50=HEAPF32[(($49)>>2)];
      $wA=$50;
      var $51=$indexB;
      var $52=(($6+28)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+((($51)*(12))&-1))|0);
      var $55=(($54)|0);
      var $56=$vB;
      var $57=$55;
      assert(8 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];
      var $58=$indexB;
      var $59=(($6+28)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+((($58)*(12))&-1))|0);
      var $62=(($61+8)|0);
      var $63=HEAPF32[(($62)>>2)];
      $wB=$63;
      var $64=$vc;
      var $65=(($64+72)|0);
      var $66=$normal;
      var $67=$65;
      assert(8 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];
      __Z7b2CrossRK6b2Vec2f($tangent, $normal, 1);
      $j=0;
      label = 4; break;
    case 4: 
      var $69=$j;
      var $70=$pointCount;
      var $71=(($69)|(0)) < (($70)|(0));
      if ($71) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $73=$vc;
      var $74=(($73)|0);
      var $75=(($74)|0);
      var $76=$j;
      var $77=(($75+((($76)*(36))&-1))|0);
      $vcp=$77;
      var $78=$vcp;
      var $79=(($78+16)|0);
      var $80=HEAPF32[(($79)>>2)];
      __ZmlfRK6b2Vec2($2, $80, $normal);
      var $81=$vcp;
      var $82=(($81+20)|0);
      var $83=HEAPF32[(($82)>>2)];
      __ZmlfRK6b2Vec2($3, $83, $tangent);
      __ZplRK6b2Vec2S1_($P, $2, $3);
      var $84=$iA;
      var $85=$vcp;
      var $86=(($85)|0);
      var $87=__Z7b2CrossRK6b2Vec2S1_($86, $P);
      var $88=($84)*($87);
      var $89=$wA;
      var $90=($89)-($88);
      $wA=$90;
      var $91=$mA;
      __ZmlfRK6b2Vec2($4, $91, $P);
      __ZN6b2Vec2mIERKS_($vA, $4);
      var $92=$iB;
      var $93=$vcp;
      var $94=(($93+8)|0);
      var $95=__Z7b2CrossRK6b2Vec2S1_($94, $P);
      var $96=($92)*($95);
      var $97=$wB;
      var $98=($97)+($96);
      $wB=$98;
      var $99=$mB;
      __ZmlfRK6b2Vec2($5, $99, $P);
      __ZN6b2Vec2pLERKS_($vB, $5);
      label = 6; break;
    case 6: 
      var $101=$j;
      var $102=((($101)+(1))|0);
      $j=$102;
      label = 4; break;
    case 7: 
      var $104=$indexA;
      var $105=(($6+28)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+((($104)*(12))&-1))|0);
      var $108=(($107)|0);
      var $109=$108;
      var $110=$vA;
      assert(8 % 1 === 0);HEAP32[(($109)>>2)]=HEAP32[(($110)>>2)];HEAP32[((($109)+(4))>>2)]=HEAP32[((($110)+(4))>>2)];
      var $111=$wA;
      var $112=$indexA;
      var $113=(($6+28)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+((($112)*(12))&-1))|0);
      var $116=(($115+8)|0);
      HEAPF32[(($116)>>2)]=$111;
      var $117=$indexB;
      var $118=(($6+28)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+((($117)*(12))&-1))|0);
      var $121=(($120)|0);
      var $122=$121;
      var $123=$vB;
      assert(8 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];
      var $124=$wB;
      var $125=$indexB;
      var $126=(($6+28)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+((($125)*(12))&-1))|0);
      var $129=(($128+8)|0);
      HEAPF32[(($129)>>2)]=$124;
      label = 8; break;
    case 8: 
      var $131=$i;
      var $132=((($131)+(1))|0);
      $i=$132;
      label = 2; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 216)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $pc;
      var $radiusA;
      var $radiusB;
      var $manifold;
      var $indexA;
      var $indexB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $localCenterA=__stackBase__;
      var $localCenterB=(__stackBase__)+(8);
      var $cA=(__stackBase__)+(16);
      var $aA;
      var $vA=(__stackBase__)+(24);
      var $wA;
      var $cB=(__stackBase__)+(32);
      var $aB;
      var $vB=(__stackBase__)+(40);
      var $wB;
      var $xfA=(__stackBase__)+(48);
      var $xfB=(__stackBase__)+(64);
      var $2=(__stackBase__)+(80);
      var $3=(__stackBase__)+(88);
      var $4=(__stackBase__)+(96);
      var $5=(__stackBase__)+(104);
      var $worldManifold=(__stackBase__)+(112);
      var $pointCount;
      var $j;
      var $vcp;
      var $6=(__stackBase__)+(136);
      var $7=(__stackBase__)+(144);
      var $rnA;
      var $rnB;
      var $kNormal;
      var $tangent=(__stackBase__)+(152);
      var $rtA;
      var $rtB;
      var $kTangent;
      var $vRel;
      var $8=(__stackBase__)+(160);
      var $9=(__stackBase__)+(168);
      var $10=(__stackBase__)+(176);
      var $11=(__stackBase__)+(184);
      var $12=(__stackBase__)+(192);
      var $vcp1;
      var $vcp2;
      var $rn1A;
      var $rn1B;
      var $rn2A;
      var $rn2B;
      var $k11;
      var $k22;
      var $k12;
      var $k_maxConditionNumber;
      var $13=(__stackBase__)+(200);
      $1=$this;
      var $14=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $16=$i;
      var $17=(($14+48)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($16)|(0)) < (($18)|(0));
      if ($19) { label = 3; break; } else { label = 25; break; }
    case 3: 
      var $21=(($14+40)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$i;
      var $24=(($22+((($23)*(152))&-1))|0);
      $vc=$24;
      var $25=(($14+36)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$i;
      var $28=(($26+((($27)*(88))&-1))|0);
      $pc=$28;
      var $29=$pc;
      var $30=(($29+76)|0);
      var $31=HEAPF32[(($30)>>2)];
      $radiusA=$31;
      var $32=$pc;
      var $33=(($32+80)|0);
      var $34=HEAPF32[(($33)>>2)];
      $radiusB=$34;
      var $35=$vc;
      var $36=(($35+148)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($14+44)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($37<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=__ZN9b2Contact11GetManifoldEv($41);
      $manifold=$42;
      var $43=$vc;
      var $44=(($43+112)|0);
      var $45=HEAP32[(($44)>>2)];
      $indexA=$45;
      var $46=$vc;
      var $47=(($46+116)|0);
      var $48=HEAP32[(($47)>>2)];
      $indexB=$48;
      var $49=$vc;
      var $50=(($49+120)|0);
      var $51=HEAPF32[(($50)>>2)];
      $mA=$51;
      var $52=$vc;
      var $53=(($52+124)|0);
      var $54=HEAPF32[(($53)>>2)];
      $mB=$54;
      var $55=$vc;
      var $56=(($55+128)|0);
      var $57=HEAPF32[(($56)>>2)];
      $iA=$57;
      var $58=$vc;
      var $59=(($58+132)|0);
      var $60=HEAPF32[(($59)>>2)];
      $iB=$60;
      var $61=$pc;
      var $62=(($61+48)|0);
      var $63=$localCenterA;
      var $64=$62;
      assert(8 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];
      var $65=$pc;
      var $66=(($65+56)|0);
      var $67=$localCenterB;
      var $68=$66;
      assert(8 % 1 === 0);HEAP32[(($67)>>2)]=HEAP32[(($68)>>2)];HEAP32[((($67)+(4))>>2)]=HEAP32[((($68)+(4))>>2)];
      var $69=$indexA;
      var $70=(($14+24)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+((($69)*(12))&-1))|0);
      var $73=(($72)|0);
      var $74=$cA;
      var $75=$73;
      assert(8 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];
      var $76=$indexA;
      var $77=(($14+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+((($76)*(12))&-1))|0);
      var $80=(($79+8)|0);
      var $81=HEAPF32[(($80)>>2)];
      $aA=$81;
      var $82=$indexA;
      var $83=(($14+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+((($82)*(12))&-1))|0);
      var $86=(($85)|0);
      var $87=$vA;
      var $88=$86;
      assert(8 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];
      var $89=$indexA;
      var $90=(($14+28)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+((($89)*(12))&-1))|0);
      var $93=(($92+8)|0);
      var $94=HEAPF32[(($93)>>2)];
      $wA=$94;
      var $95=$indexB;
      var $96=(($14+24)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+((($95)*(12))&-1))|0);
      var $99=(($98)|0);
      var $100=$cB;
      var $101=$99;
      assert(8 % 1 === 0);HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[((($100)+(4))>>2)]=HEAP32[((($101)+(4))>>2)];
      var $102=$indexB;
      var $103=(($14+24)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+((($102)*(12))&-1))|0);
      var $106=(($105+8)|0);
      var $107=HEAPF32[(($106)>>2)];
      $aB=$107;
      var $108=$indexB;
      var $109=(($14+28)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+((($108)*(12))&-1))|0);
      var $112=(($111)|0);
      var $113=$vB;
      var $114=$112;
      assert(8 % 1 === 0);HEAP32[(($113)>>2)]=HEAP32[(($114)>>2)];HEAP32[((($113)+(4))>>2)]=HEAP32[((($114)+(4))>>2)];
      var $115=$indexB;
      var $116=(($14+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+((($115)*(12))&-1))|0);
      var $119=(($118+8)|0);
      var $120=HEAPF32[(($119)>>2)];
      $wB=$120;
      var $121=$manifold;
      var $122=(($121+60)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|(0)) > 0;
      if ($124) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((5253516)|0), 168, ((5262912)|0), ((5253848)|0));
      throw "Reached an unreachable!"
      label = 6; break;
    case 6: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $129=(($xfA+8)|0);
      var $130=$aA;
      __ZN5b2Rot3SetEf($129, $130);
      var $131=(($xfB+8)|0);
      var $132=$aB;
      __ZN5b2Rot3SetEf($131, $132);
      var $133=(($xfA)|0);
      var $134=(($xfA+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $134, $localCenterA);
      __ZmiRK6b2Vec2S1_($2, $cA, $3);
      var $135=$133;
      var $136=$2;
      assert(8 % 1 === 0);HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($135)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];
      var $137=(($xfB)|0);
      var $138=(($xfB+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $138, $localCenterB);
      __ZmiRK6b2Vec2S1_($4, $cB, $5);
      var $139=$137;
      var $140=$4;
      assert(8 % 1 === 0);HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];HEAP32[((($139)+(4))>>2)]=HEAP32[((($140)+(4))>>2)];
      __ZN15b2WorldManifoldC1Ev($worldManifold);
      var $141=$manifold;
      var $142=$radiusA;
      var $143=$radiusB;
      __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($worldManifold, $141, $xfA, $142, $xfB, $143);
      var $144=$vc;
      var $145=(($144+72)|0);
      var $146=(($worldManifold)|0);
      var $147=$145;
      var $148=$146;
      assert(8 % 1 === 0);HEAP32[(($147)>>2)]=HEAP32[(($148)>>2)];HEAP32[((($147)+(4))>>2)]=HEAP32[((($148)+(4))>>2)];
      var $149=$vc;
      var $150=(($149+144)|0);
      var $151=HEAP32[(($150)>>2)];
      $pointCount=$151;
      $j=0;
      label = 7; break;
    case 7: 
      var $153=$j;
      var $154=$pointCount;
      var $155=(($153)|(0)) < (($154)|(0));
      if ($155) { label = 8; break; } else { label = 18; break; }
    case 8: 
      var $157=$vc;
      var $158=(($157)|0);
      var $159=(($158)|0);
      var $160=$j;
      var $161=(($159+((($160)*(36))&-1))|0);
      $vcp=$161;
      var $162=$vcp;
      var $163=(($162)|0);
      var $164=$j;
      var $165=(($worldManifold+8)|0);
      var $166=(($165+($164<<3))|0);
      __ZmiRK6b2Vec2S1_($6, $166, $cA);
      var $167=$163;
      var $168=$6;
      assert(8 % 1 === 0);HEAP32[(($167)>>2)]=HEAP32[(($168)>>2)];HEAP32[((($167)+(4))>>2)]=HEAP32[((($168)+(4))>>2)];
      var $169=$vcp;
      var $170=(($169+8)|0);
      var $171=$j;
      var $172=(($worldManifold+8)|0);
      var $173=(($172+($171<<3))|0);
      __ZmiRK6b2Vec2S1_($7, $173, $cB);
      var $174=$170;
      var $175=$7;
      assert(8 % 1 === 0);HEAP32[(($174)>>2)]=HEAP32[(($175)>>2)];HEAP32[((($174)+(4))>>2)]=HEAP32[((($175)+(4))>>2)];
      var $176=$vcp;
      var $177=(($176)|0);
      var $178=$vc;
      var $179=(($178+72)|0);
      var $180=__Z7b2CrossRK6b2Vec2S1_($177, $179);
      $rnA=$180;
      var $181=$vcp;
      var $182=(($181+8)|0);
      var $183=$vc;
      var $184=(($183+72)|0);
      var $185=__Z7b2CrossRK6b2Vec2S1_($182, $184);
      $rnB=$185;
      var $186=$mA;
      var $187=$mB;
      var $188=($186)+($187);
      var $189=$iA;
      var $190=$rnA;
      var $191=($189)*($190);
      var $192=$rnA;
      var $193=($191)*($192);
      var $194=($188)+($193);
      var $195=$iB;
      var $196=$rnB;
      var $197=($195)*($196);
      var $198=$rnB;
      var $199=($197)*($198);
      var $200=($194)+($199);
      $kNormal=$200;
      var $201=$kNormal;
      var $202=$201 > 0;
      if ($202) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $204=$kNormal;
      var $205=(1)/($204);
      var $208 = $205;label = 11; break;
    case 10: 
      var $208 = 0;label = 11; break;
    case 11: 
      var $208;
      var $209=$vcp;
      var $210=(($209+24)|0);
      HEAPF32[(($210)>>2)]=$208;
      var $211=$vc;
      var $212=(($211+72)|0);
      __Z7b2CrossRK6b2Vec2f($tangent, $212, 1);
      var $213=$vcp;
      var $214=(($213)|0);
      var $215=__Z7b2CrossRK6b2Vec2S1_($214, $tangent);
      $rtA=$215;
      var $216=$vcp;
      var $217=(($216+8)|0);
      var $218=__Z7b2CrossRK6b2Vec2S1_($217, $tangent);
      $rtB=$218;
      var $219=$mA;
      var $220=$mB;
      var $221=($219)+($220);
      var $222=$iA;
      var $223=$rtA;
      var $224=($222)*($223);
      var $225=$rtA;
      var $226=($224)*($225);
      var $227=($221)+($226);
      var $228=$iB;
      var $229=$rtB;
      var $230=($228)*($229);
      var $231=$rtB;
      var $232=($230)*($231);
      var $233=($227)+($232);
      $kTangent=$233;
      var $234=$kTangent;
      var $235=$234 > 0;
      if ($235) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $237=$kTangent;
      var $238=(1)/($237);
      var $241 = $238;label = 14; break;
    case 13: 
      var $241 = 0;label = 14; break;
    case 14: 
      var $241;
      var $242=$vcp;
      var $243=(($242+28)|0);
      HEAPF32[(($243)>>2)]=$241;
      var $244=$vcp;
      var $245=(($244+32)|0);
      HEAPF32[(($245)>>2)]=0;
      var $246=$vc;
      var $247=(($246+72)|0);
      var $248=$wB;
      var $249=$vcp;
      var $250=(($249+8)|0);
      __Z7b2CrossfRK6b2Vec2($11, $248, $250);
      __ZplRK6b2Vec2S1_($10, $vB, $11);
      __ZmiRK6b2Vec2S1_($9, $10, $vA);
      var $251=$wA;
      var $252=$vcp;
      var $253=(($252)|0);
      __Z7b2CrossfRK6b2Vec2($12, $251, $253);
      __ZmiRK6b2Vec2S1_($8, $9, $12);
      var $254=__Z5b2DotRK6b2Vec2S1_($247, $8);
      $vRel=$254;
      var $255=$vRel;
      var $256=$255 < -1;
      if ($256) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $258=$vc;
      var $259=(($258+140)|0);
      var $260=HEAPF32[(($259)>>2)];
      var $261=(-$260);
      var $262=$vRel;
      var $263=($261)*($262);
      var $264=$vcp;
      var $265=(($264+32)|0);
      HEAPF32[(($265)>>2)]=$263;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $268=$j;
      var $269=((($268)+(1))|0);
      $j=$269;
      label = 7; break;
    case 18: 
      var $271=$vc;
      var $272=(($271+144)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=(($273)|(0))==2;
      if ($274) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $276=$vc;
      var $277=(($276)|0);
      var $278=(($277)|0);
      var $279=(($278)|0);
      $vcp1=$279;
      var $280=$vc;
      var $281=(($280)|0);
      var $282=(($281)|0);
      var $283=(($282+36)|0);
      $vcp2=$283;
      var $284=$vcp1;
      var $285=(($284)|0);
      var $286=$vc;
      var $287=(($286+72)|0);
      var $288=__Z7b2CrossRK6b2Vec2S1_($285, $287);
      $rn1A=$288;
      var $289=$vcp1;
      var $290=(($289+8)|0);
      var $291=$vc;
      var $292=(($291+72)|0);
      var $293=__Z7b2CrossRK6b2Vec2S1_($290, $292);
      $rn1B=$293;
      var $294=$vcp2;
      var $295=(($294)|0);
      var $296=$vc;
      var $297=(($296+72)|0);
      var $298=__Z7b2CrossRK6b2Vec2S1_($295, $297);
      $rn2A=$298;
      var $299=$vcp2;
      var $300=(($299+8)|0);
      var $301=$vc;
      var $302=(($301+72)|0);
      var $303=__Z7b2CrossRK6b2Vec2S1_($300, $302);
      $rn2B=$303;
      var $304=$mA;
      var $305=$mB;
      var $306=($304)+($305);
      var $307=$iA;
      var $308=$rn1A;
      var $309=($307)*($308);
      var $310=$rn1A;
      var $311=($309)*($310);
      var $312=($306)+($311);
      var $313=$iB;
      var $314=$rn1B;
      var $315=($313)*($314);
      var $316=$rn1B;
      var $317=($315)*($316);
      var $318=($312)+($317);
      $k11=$318;
      var $319=$mA;
      var $320=$mB;
      var $321=($319)+($320);
      var $322=$iA;
      var $323=$rn2A;
      var $324=($322)*($323);
      var $325=$rn2A;
      var $326=($324)*($325);
      var $327=($321)+($326);
      var $328=$iB;
      var $329=$rn2B;
      var $330=($328)*($329);
      var $331=$rn2B;
      var $332=($330)*($331);
      var $333=($327)+($332);
      $k22=$333;
      var $334=$mA;
      var $335=$mB;
      var $336=($334)+($335);
      var $337=$iA;
      var $338=$rn1A;
      var $339=($337)*($338);
      var $340=$rn2A;
      var $341=($339)*($340);
      var $342=($336)+($341);
      var $343=$iB;
      var $344=$rn1B;
      var $345=($343)*($344);
      var $346=$rn2B;
      var $347=($345)*($346);
      var $348=($342)+($347);
      $k12=$348;
      $k_maxConditionNumber=1000;
      var $349=$k11;
      var $350=$k11;
      var $351=($349)*($350);
      var $352=$k11;
      var $353=$k22;
      var $354=($352)*($353);
      var $355=$k12;
      var $356=$k12;
      var $357=($355)*($356);
      var $358=($354)-($357);
      var $359=($358)*(1000);
      var $360=$351 < $359;
      if ($360) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $362=$vc;
      var $363=(($362+96)|0);
      var $364=(($363)|0);
      var $365=$k11;
      var $366=$k12;
      __ZN6b2Vec23SetEff($364, $365, $366);
      var $367=$vc;
      var $368=(($367+96)|0);
      var $369=(($368+8)|0);
      var $370=$k12;
      var $371=$k22;
      __ZN6b2Vec23SetEff($369, $370, $371);
      var $372=$vc;
      var $373=(($372+80)|0);
      var $374=$vc;
      var $375=(($374+96)|0);
      __ZNK7b2Mat2210GetInverseEv($13, $375);
      var $376=$373;
      var $377=$13;
      assert(16 % 1 === 0);HEAP32[(($376)>>2)]=HEAP32[(($377)>>2)];HEAP32[((($376)+(4))>>2)]=HEAP32[((($377)+(4))>>2)];HEAP32[((($376)+(8))>>2)]=HEAP32[((($377)+(8))>>2)];HEAP32[((($376)+(12))>>2)]=HEAP32[((($377)+(12))>>2)];
      label = 22; break;
    case 21: 
      var $379=$vc;
      var $380=(($379+144)|0);
      HEAP32[(($380)>>2)]=1;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $384=$i;
      var $385=((($384)+(1))|0);
      $i=$385;
      label = 2; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2MulRK7b2Mat22RK6b2Vec2($agg_result, $A, $v) {
  var label = 0;
  var $1;
  var $2;
  $1=$A;
  $2=$v;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=($6)*($9);
  var $11=$1;
  var $12=(($11+8)|0);
  var $13=(($12)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$2;
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=($14)*($17);
  var $19=($10)+($18);
  var $20=$1;
  var $21=(($20)|0);
  var $22=(($21+4)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$2;
  var $25=(($24)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=($23)*($26);
  var $28=$1;
  var $29=(($28+8)|0);
  var $30=(($29+4)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$2;
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=($31)*($34);
  var $36=($27)+($35);
  __ZN6b2Vec2C1Eff($agg_result, $19, $36);
  return;
}
function __ZN15b2ContactSolver13StoreImpulsesEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $manifold;
      var $j;
      $1=$this;
      var $2=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $4=$i;
      var $5=(($2+48)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|(0)) < (($6)|(0));
      if ($7) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $9=(($2+40)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$i;
      var $12=(($10+((($11)*(152))&-1))|0);
      $vc=$12;
      var $13=$vc;
      var $14=(($13+148)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($2+44)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=__ZN9b2Contact11GetManifoldEv($19);
      $manifold=$20;
      $j=0;
      label = 4; break;
    case 4: 
      var $22=$j;
      var $23=$vc;
      var $24=(($23+144)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22)|(0)) < (($25)|(0));
      if ($26) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $28=$j;
      var $29=$vc;
      var $30=(($29)|0);
      var $31=(($30+((($28)*(36))&-1))|0);
      var $32=(($31+16)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=$j;
      var $35=$manifold;
      var $36=(($35)|0);
      var $37=(($36+((($34)*(20))&-1))|0);
      var $38=(($37+8)|0);
      HEAPF32[(($38)>>2)]=$33;
      var $39=$j;
      var $40=$vc;
      var $41=(($40)|0);
      var $42=(($41+((($39)*(36))&-1))|0);
      var $43=(($42+20)|0);
      var $44=HEAPF32[(($43)>>2)];
      var $45=$j;
      var $46=$manifold;
      var $47=(($46)|0);
      var $48=(($47+((($45)*(20))&-1))|0);
      var $49=(($48+12)|0);
      HEAPF32[(($49)>>2)]=$44;
      label = 6; break;
    case 6: 
      var $51=$j;
      var $52=((($51)+(1))|0);
      $j=$52;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $55=$i;
      var $56=((($55)+(1))|0);
      $i=$56;
      label = 2; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 504)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $vc;
      var $indexA;
      var $indexB;
      var $mA;
      var $iA;
      var $mB;
      var $iB;
      var $pointCount;
      var $vA=__stackBase__;
      var $wA;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $normal=(__stackBase__)+(16);
      var $tangent=(__stackBase__)+(24);
      var $friction;
      var $j;
      var $vcp;
      var $dv=(__stackBase__)+(32);
      var $2=(__stackBase__)+(40);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      var $vt;
      var $lambda;
      var $maxFriction;
      var $newImpulse;
      var $P=(__stackBase__)+(72);
      var $6=(__stackBase__)+(80);
      var $7=(__stackBase__)+(88);
      var $vcp1;
      var $dv2=(__stackBase__)+(96);
      var $8=(__stackBase__)+(104);
      var $9=(__stackBase__)+(112);
      var $10=(__stackBase__)+(120);
      var $11=(__stackBase__)+(128);
      var $vn;
      var $lambda3;
      var $newImpulse4;
      var $P5=(__stackBase__)+(136);
      var $12=(__stackBase__)+(144);
      var $13=(__stackBase__)+(152);
      var $cp1;
      var $cp2;
      var $a=(__stackBase__)+(160);
      var $dv1=(__stackBase__)+(168);
      var $14=(__stackBase__)+(176);
      var $15=(__stackBase__)+(184);
      var $16=(__stackBase__)+(192);
      var $17=(__stackBase__)+(200);
      var $dv26=(__stackBase__)+(208);
      var $18=(__stackBase__)+(216);
      var $19=(__stackBase__)+(224);
      var $20=(__stackBase__)+(232);
      var $21=(__stackBase__)+(240);
      var $vn1;
      var $vn2;
      var $b=(__stackBase__)+(248);
      var $22=(__stackBase__)+(256);
      var $k_errorTol;
      var $x=(__stackBase__)+(264);
      var $23=(__stackBase__)+(272);
      var $d=(__stackBase__)+(280);
      var $P1=(__stackBase__)+(288);
      var $P2=(__stackBase__)+(296);
      var $24=(__stackBase__)+(304);
      var $25=(__stackBase__)+(312);
      var $26=(__stackBase__)+(320);
      var $27=(__stackBase__)+(328);
      var $d7=(__stackBase__)+(336);
      var $P18=(__stackBase__)+(344);
      var $P29=(__stackBase__)+(352);
      var $28=(__stackBase__)+(360);
      var $29=(__stackBase__)+(368);
      var $30=(__stackBase__)+(376);
      var $31=(__stackBase__)+(384);
      var $d10=(__stackBase__)+(392);
      var $P111=(__stackBase__)+(400);
      var $P212=(__stackBase__)+(408);
      var $32=(__stackBase__)+(416);
      var $33=(__stackBase__)+(424);
      var $34=(__stackBase__)+(432);
      var $35=(__stackBase__)+(440);
      var $d13=(__stackBase__)+(448);
      var $P114=(__stackBase__)+(456);
      var $P215=(__stackBase__)+(464);
      var $36=(__stackBase__)+(472);
      var $37=(__stackBase__)+(480);
      var $38=(__stackBase__)+(488);
      var $39=(__stackBase__)+(496);
      $1=$this;
      var $40=$1;
      $i=0;
      label = 2; break;
    case 2: 
      var $42=$i;
      var $43=(($40+48)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($42)|(0)) < (($44)|(0));
      if ($45) { label = 3; break; } else { label = 34; break; }
    case 3: 
      var $47=(($40+40)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$i;
      var $50=(($48+((($49)*(152))&-1))|0);
      $vc=$50;
      var $51=$vc;
      var $52=(($51+112)|0);
      var $53=HEAP32[(($52)>>2)];
      $indexA=$53;
      var $54=$vc;
      var $55=(($54+116)|0);
      var $56=HEAP32[(($55)>>2)];
      $indexB=$56;
      var $57=$vc;
      var $58=(($57+120)|0);
      var $59=HEAPF32[(($58)>>2)];
      $mA=$59;
      var $60=$vc;
      var $61=(($60+128)|0);
      var $62=HEAPF32[(($61)>>2)];
      $iA=$62;
      var $63=$vc;
      var $64=(($63+124)|0);
      var $65=HEAPF32[(($64)>>2)];
      $mB=$65;
      var $66=$vc;
      var $67=(($66+132)|0);
      var $68=HEAPF32[(($67)>>2)];
      $iB=$68;
      var $69=$vc;
      var $70=(($69+144)|0);
      var $71=HEAP32[(($70)>>2)];
      $pointCount=$71;
      var $72=$indexA;
      var $73=(($40+28)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+((($72)*(12))&-1))|0);
      var $76=(($75)|0);
      var $77=$vA;
      var $78=$76;
      assert(8 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];
      var $79=$indexA;
      var $80=(($40+28)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+((($79)*(12))&-1))|0);
      var $83=(($82+8)|0);
      var $84=HEAPF32[(($83)>>2)];
      $wA=$84;
      var $85=$indexB;
      var $86=(($40+28)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+((($85)*(12))&-1))|0);
      var $89=(($88)|0);
      var $90=$vB;
      var $91=$89;
      assert(8 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];
      var $92=$indexB;
      var $93=(($40+28)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+((($92)*(12))&-1))|0);
      var $96=(($95+8)|0);
      var $97=HEAPF32[(($96)>>2)];
      $wB=$97;
      var $98=$vc;
      var $99=(($98+72)|0);
      var $100=$normal;
      var $101=$99;
      assert(8 % 1 === 0);HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[((($100)+(4))>>2)]=HEAP32[((($101)+(4))>>2)];
      __Z7b2CrossRK6b2Vec2f($tangent, $normal, 1);
      var $102=$vc;
      var $103=(($102+136)|0);
      var $104=HEAPF32[(($103)>>2)];
      $friction=$104;
      var $105=$pointCount;
      var $106=(($105)|(0))==1;
      if ($106) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $108=$pointCount;
      var $109=(($108)|(0))==2;
      if ($109) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5253516)|0), 311, ((5262968)|0), ((5251408)|0));
      throw "Reached an unreachable!"
      label = 7; break;
    case 7: 
      $j=0;
      label = 8; break;
    case 8: 
      var $115=$j;
      var $116=$pointCount;
      var $117=(($115)|(0)) < (($116)|(0));
      if ($117) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $119=$vc;
      var $120=(($119)|0);
      var $121=(($120)|0);
      var $122=$j;
      var $123=(($121+((($122)*(36))&-1))|0);
      $vcp=$123;
      var $124=$wB;
      var $125=$vcp;
      var $126=(($125+8)|0);
      __Z7b2CrossfRK6b2Vec2($4, $124, $126);
      __ZplRK6b2Vec2S1_($3, $vB, $4);
      __ZmiRK6b2Vec2S1_($2, $3, $vA);
      var $127=$wA;
      var $128=$vcp;
      var $129=(($128)|0);
      __Z7b2CrossfRK6b2Vec2($5, $127, $129);
      __ZmiRK6b2Vec2S1_($dv, $2, $5);
      var $130=__Z5b2DotRK6b2Vec2S1_($dv, $tangent);
      $vt=$130;
      var $131=$vcp;
      var $132=(($131+28)|0);
      var $133=HEAPF32[(($132)>>2)];
      var $134=$vt;
      var $135=(-$134);
      var $136=($133)*($135);
      $lambda=$136;
      var $137=$friction;
      var $138=$vcp;
      var $139=(($138+16)|0);
      var $140=HEAPF32[(($139)>>2)];
      var $141=($137)*($140);
      $maxFriction=$141;
      var $142=$vcp;
      var $143=(($142+20)|0);
      var $144=HEAPF32[(($143)>>2)];
      var $145=$lambda;
      var $146=($144)+($145);
      var $147=$maxFriction;
      var $148=(-$147);
      var $149=$maxFriction;
      var $150=__Z7b2ClampIfET_S0_S0_S0_($146, $148, $149);
      $newImpulse=$150;
      var $151=$newImpulse;
      var $152=$vcp;
      var $153=(($152+20)|0);
      var $154=HEAPF32[(($153)>>2)];
      var $155=($151)-($154);
      $lambda=$155;
      var $156=$newImpulse;
      var $157=$vcp;
      var $158=(($157+20)|0);
      HEAPF32[(($158)>>2)]=$156;
      var $159=$lambda;
      __ZmlfRK6b2Vec2($P, $159, $tangent);
      var $160=$mA;
      __ZmlfRK6b2Vec2($6, $160, $P);
      __ZN6b2Vec2mIERKS_($vA, $6);
      var $161=$iA;
      var $162=$vcp;
      var $163=(($162)|0);
      var $164=__Z7b2CrossRK6b2Vec2S1_($163, $P);
      var $165=($161)*($164);
      var $166=$wA;
      var $167=($166)-($165);
      $wA=$167;
      var $168=$mB;
      __ZmlfRK6b2Vec2($7, $168, $P);
      __ZN6b2Vec2pLERKS_($vB, $7);
      var $169=$iB;
      var $170=$vcp;
      var $171=(($170+8)|0);
      var $172=__Z7b2CrossRK6b2Vec2S1_($171, $P);
      var $173=($169)*($172);
      var $174=$wB;
      var $175=($174)+($173);
      $wB=$175;
      label = 10; break;
    case 10: 
      var $177=$j;
      var $178=((($177)+(1))|0);
      $j=$178;
      label = 8; break;
    case 11: 
      var $180=$vc;
      var $181=(($180+144)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|(0))==1;
      if ($183) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $185=$vc;
      var $186=(($185)|0);
      var $187=(($186)|0);
      var $188=(($187)|0);
      $vcp1=$188;
      var $189=$wB;
      var $190=$vcp1;
      var $191=(($190+8)|0);
      __Z7b2CrossfRK6b2Vec2($10, $189, $191);
      __ZplRK6b2Vec2S1_($9, $vB, $10);
      __ZmiRK6b2Vec2S1_($8, $9, $vA);
      var $192=$wA;
      var $193=$vcp1;
      var $194=(($193)|0);
      __Z7b2CrossfRK6b2Vec2($11, $192, $194);
      __ZmiRK6b2Vec2S1_($dv2, $8, $11);
      var $195=__Z5b2DotRK6b2Vec2S1_($dv2, $normal);
      $vn=$195;
      var $196=$vcp1;
      var $197=(($196+24)|0);
      var $198=HEAPF32[(($197)>>2)];
      var $199=(-$198);
      var $200=$vn;
      var $201=$vcp1;
      var $202=(($201+32)|0);
      var $203=HEAPF32[(($202)>>2)];
      var $204=($200)-($203);
      var $205=($199)*($204);
      $lambda3=$205;
      var $206=$vcp1;
      var $207=(($206+16)|0);
      var $208=HEAPF32[(($207)>>2)];
      var $209=$lambda3;
      var $210=($208)+($209);
      var $211=__Z5b2MaxIfET_S0_S0_($210, 0);
      $newImpulse4=$211;
      var $212=$newImpulse4;
      var $213=$vcp1;
      var $214=(($213+16)|0);
      var $215=HEAPF32[(($214)>>2)];
      var $216=($212)-($215);
      $lambda3=$216;
      var $217=$newImpulse4;
      var $218=$vcp1;
      var $219=(($218+16)|0);
      HEAPF32[(($219)>>2)]=$217;
      var $220=$lambda3;
      __ZmlfRK6b2Vec2($P5, $220, $normal);
      var $221=$mA;
      __ZmlfRK6b2Vec2($12, $221, $P5);
      __ZN6b2Vec2mIERKS_($vA, $12);
      var $222=$iA;
      var $223=$vcp1;
      var $224=(($223)|0);
      var $225=__Z7b2CrossRK6b2Vec2S1_($224, $P5);
      var $226=($222)*($225);
      var $227=$wA;
      var $228=($227)-($226);
      $wA=$228;
      var $229=$mB;
      __ZmlfRK6b2Vec2($13, $229, $P5);
      __ZN6b2Vec2pLERKS_($vB, $13);
      var $230=$iB;
      var $231=$vcp1;
      var $232=(($231+8)|0);
      var $233=__Z7b2CrossRK6b2Vec2S1_($232, $P5);
      var $234=($230)*($233);
      var $235=$wB;
      var $236=($235)+($234);
      $wB=$236;
      label = 32; break;
    case 13: 
      var $238=$vc;
      var $239=(($238)|0);
      var $240=(($239)|0);
      var $241=(($240)|0);
      $cp1=$241;
      var $242=$vc;
      var $243=(($242)|0);
      var $244=(($243)|0);
      var $245=(($244+36)|0);
      $cp2=$245;
      var $246=$cp1;
      var $247=(($246+16)|0);
      var $248=HEAPF32[(($247)>>2)];
      var $249=$cp2;
      var $250=(($249+16)|0);
      var $251=HEAPF32[(($250)>>2)];
      __ZN6b2Vec2C1Eff($a, $248, $251);
      var $252=(($a)|0);
      var $253=HEAPF32[(($252)>>2)];
      var $254=$253 >= 0;
      if ($254) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $256=(($a+4)|0);
      var $257=HEAPF32[(($256)>>2)];
      var $258=$257 >= 0;
      if ($258) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      ___assert_func(((5253516)|0), 406, ((5262968)|0), ((5250216)|0));
      throw "Reached an unreachable!"
      label = 17; break;
    case 17: 
      var $263=$wB;
      var $264=$cp1;
      var $265=(($264+8)|0);
      __Z7b2CrossfRK6b2Vec2($16, $263, $265);
      __ZplRK6b2Vec2S1_($15, $vB, $16);
      __ZmiRK6b2Vec2S1_($14, $15, $vA);
      var $266=$wA;
      var $267=$cp1;
      var $268=(($267)|0);
      __Z7b2CrossfRK6b2Vec2($17, $266, $268);
      __ZmiRK6b2Vec2S1_($dv1, $14, $17);
      var $269=$wB;
      var $270=$cp2;
      var $271=(($270+8)|0);
      __Z7b2CrossfRK6b2Vec2($20, $269, $271);
      __ZplRK6b2Vec2S1_($19, $vB, $20);
      __ZmiRK6b2Vec2S1_($18, $19, $vA);
      var $272=$wA;
      var $273=$cp2;
      var $274=(($273)|0);
      __Z7b2CrossfRK6b2Vec2($21, $272, $274);
      __ZmiRK6b2Vec2S1_($dv26, $18, $21);
      var $275=__Z5b2DotRK6b2Vec2S1_($dv1, $normal);
      $vn1=$275;
      var $276=__Z5b2DotRK6b2Vec2S1_($dv26, $normal);
      $vn2=$276;
      __ZN6b2Vec2C1Ev($b);
      var $277=$vn1;
      var $278=$cp1;
      var $279=(($278+32)|0);
      var $280=HEAPF32[(($279)>>2)];
      var $281=($277)-($280);
      var $282=(($b)|0);
      HEAPF32[(($282)>>2)]=$281;
      var $283=$vn2;
      var $284=$cp2;
      var $285=(($284+32)|0);
      var $286=HEAPF32[(($285)>>2)];
      var $287=($283)-($286);
      var $288=(($b+4)|0);
      HEAPF32[(($288)>>2)]=$287;
      var $289=$vc;
      var $290=(($289+96)|0);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($22, $290, $a);
      __ZN6b2Vec2mIERKS_($b, $22);
      $k_errorTol=0.0010000000474974513;
      label = 18; break;
    case 18: 
      var $292=$vc;
      var $293=(($292+80)|0);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($23, $293, $b);
      __ZNK6b2Vec2ngEv($x, $23);
      var $294=(($x)|0);
      var $295=HEAPF32[(($294)>>2)];
      var $296=$295 >= 0;
      if ($296) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $298=(($x+4)|0);
      var $299=HEAPF32[(($298)>>2)];
      var $300=$299 >= 0;
      if ($300) { label = 20; break; } else { label = 21; break; }
    case 20: 
      __ZmiRK6b2Vec2S1_($d, $x, $a);
      var $302=(($d)|0);
      var $303=HEAPF32[(($302)>>2)];
      __ZmlfRK6b2Vec2($P1, $303, $normal);
      var $304=(($d+4)|0);
      var $305=HEAPF32[(($304)>>2)];
      __ZmlfRK6b2Vec2($P2, $305, $normal);
      var $306=$mA;
      __ZplRK6b2Vec2S1_($25, $P1, $P2);
      __ZmlfRK6b2Vec2($24, $306, $25);
      __ZN6b2Vec2mIERKS_($vA, $24);
      var $307=$iA;
      var $308=$cp1;
      var $309=(($308)|0);
      var $310=__Z7b2CrossRK6b2Vec2S1_($309, $P1);
      var $311=$cp2;
      var $312=(($311)|0);
      var $313=__Z7b2CrossRK6b2Vec2S1_($312, $P2);
      var $314=($310)+($313);
      var $315=($307)*($314);
      var $316=$wA;
      var $317=($316)-($315);
      $wA=$317;
      var $318=$mB;
      __ZplRK6b2Vec2S1_($27, $P1, $P2);
      __ZmlfRK6b2Vec2($26, $318, $27);
      __ZN6b2Vec2pLERKS_($vB, $26);
      var $319=$iB;
      var $320=$cp1;
      var $321=(($320+8)|0);
      var $322=__Z7b2CrossRK6b2Vec2S1_($321, $P1);
      var $323=$cp2;
      var $324=(($323+8)|0);
      var $325=__Z7b2CrossRK6b2Vec2S1_($324, $P2);
      var $326=($322)+($325);
      var $327=($319)*($326);
      var $328=$wB;
      var $329=($328)+($327);
      $wB=$329;
      var $330=(($x)|0);
      var $331=HEAPF32[(($330)>>2)];
      var $332=$cp1;
      var $333=(($332+16)|0);
      HEAPF32[(($333)>>2)]=$331;
      var $334=(($x+4)|0);
      var $335=HEAPF32[(($334)>>2)];
      var $336=$cp2;
      var $337=(($336+16)|0);
      HEAPF32[(($337)>>2)]=$335;
      label = 31; break;
    case 21: 
      var $339=$cp1;
      var $340=(($339+24)|0);
      var $341=HEAPF32[(($340)>>2)];
      var $342=(-$341);
      var $343=(($b)|0);
      var $344=HEAPF32[(($343)>>2)];
      var $345=($342)*($344);
      var $346=(($x)|0);
      HEAPF32[(($346)>>2)]=$345;
      var $347=(($x+4)|0);
      HEAPF32[(($347)>>2)]=0;
      $vn1=0;
      var $348=$vc;
      var $349=(($348+96)|0);
      var $350=(($349)|0);
      var $351=(($350+4)|0);
      var $352=HEAPF32[(($351)>>2)];
      var $353=(($x)|0);
      var $354=HEAPF32[(($353)>>2)];
      var $355=($352)*($354);
      var $356=(($b+4)|0);
      var $357=HEAPF32[(($356)>>2)];
      var $358=($355)+($357);
      $vn2=$358;
      var $359=(($x)|0);
      var $360=HEAPF32[(($359)>>2)];
      var $361=$360 >= 0;
      if ($361) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $363=$vn2;
      var $364=$363 >= 0;
      if ($364) { label = 23; break; } else { label = 24; break; }
    case 23: 
      __ZmiRK6b2Vec2S1_($d7, $x, $a);
      var $366=(($d7)|0);
      var $367=HEAPF32[(($366)>>2)];
      __ZmlfRK6b2Vec2($P18, $367, $normal);
      var $368=(($d7+4)|0);
      var $369=HEAPF32[(($368)>>2)];
      __ZmlfRK6b2Vec2($P29, $369, $normal);
      var $370=$mA;
      __ZplRK6b2Vec2S1_($29, $P18, $P29);
      __ZmlfRK6b2Vec2($28, $370, $29);
      __ZN6b2Vec2mIERKS_($vA, $28);
      var $371=$iA;
      var $372=$cp1;
      var $373=(($372)|0);
      var $374=__Z7b2CrossRK6b2Vec2S1_($373, $P18);
      var $375=$cp2;
      var $376=(($375)|0);
      var $377=__Z7b2CrossRK6b2Vec2S1_($376, $P29);
      var $378=($374)+($377);
      var $379=($371)*($378);
      var $380=$wA;
      var $381=($380)-($379);
      $wA=$381;
      var $382=$mB;
      __ZplRK6b2Vec2S1_($31, $P18, $P29);
      __ZmlfRK6b2Vec2($30, $382, $31);
      __ZN6b2Vec2pLERKS_($vB, $30);
      var $383=$iB;
      var $384=$cp1;
      var $385=(($384+8)|0);
      var $386=__Z7b2CrossRK6b2Vec2S1_($385, $P18);
      var $387=$cp2;
      var $388=(($387+8)|0);
      var $389=__Z7b2CrossRK6b2Vec2S1_($388, $P29);
      var $390=($386)+($389);
      var $391=($383)*($390);
      var $392=$wB;
      var $393=($392)+($391);
      $wB=$393;
      var $394=(($x)|0);
      var $395=HEAPF32[(($394)>>2)];
      var $396=$cp1;
      var $397=(($396+16)|0);
      HEAPF32[(($397)>>2)]=$395;
      var $398=(($x+4)|0);
      var $399=HEAPF32[(($398)>>2)];
      var $400=$cp2;
      var $401=(($400+16)|0);
      HEAPF32[(($401)>>2)]=$399;
      label = 31; break;
    case 24: 
      var $403=(($x)|0);
      HEAPF32[(($403)>>2)]=0;
      var $404=$cp2;
      var $405=(($404+24)|0);
      var $406=HEAPF32[(($405)>>2)];
      var $407=(-$406);
      var $408=(($b+4)|0);
      var $409=HEAPF32[(($408)>>2)];
      var $410=($407)*($409);
      var $411=(($x+4)|0);
      HEAPF32[(($411)>>2)]=$410;
      var $412=$vc;
      var $413=(($412+96)|0);
      var $414=(($413+8)|0);
      var $415=(($414)|0);
      var $416=HEAPF32[(($415)>>2)];
      var $417=(($x+4)|0);
      var $418=HEAPF32[(($417)>>2)];
      var $419=($416)*($418);
      var $420=(($b)|0);
      var $421=HEAPF32[(($420)>>2)];
      var $422=($419)+($421);
      $vn1=$422;
      $vn2=0;
      var $423=(($x+4)|0);
      var $424=HEAPF32[(($423)>>2)];
      var $425=$424 >= 0;
      if ($425) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $427=$vn1;
      var $428=$427 >= 0;
      if ($428) { label = 26; break; } else { label = 27; break; }
    case 26: 
      __ZmiRK6b2Vec2S1_($d10, $x, $a);
      var $430=(($d10)|0);
      var $431=HEAPF32[(($430)>>2)];
      __ZmlfRK6b2Vec2($P111, $431, $normal);
      var $432=(($d10+4)|0);
      var $433=HEAPF32[(($432)>>2)];
      __ZmlfRK6b2Vec2($P212, $433, $normal);
      var $434=$mA;
      __ZplRK6b2Vec2S1_($33, $P111, $P212);
      __ZmlfRK6b2Vec2($32, $434, $33);
      __ZN6b2Vec2mIERKS_($vA, $32);
      var $435=$iA;
      var $436=$cp1;
      var $437=(($436)|0);
      var $438=__Z7b2CrossRK6b2Vec2S1_($437, $P111);
      var $439=$cp2;
      var $440=(($439)|0);
      var $441=__Z7b2CrossRK6b2Vec2S1_($440, $P212);
      var $442=($438)+($441);
      var $443=($435)*($442);
      var $444=$wA;
      var $445=($444)-($443);
      $wA=$445;
      var $446=$mB;
      __ZplRK6b2Vec2S1_($35, $P111, $P212);
      __ZmlfRK6b2Vec2($34, $446, $35);
      __ZN6b2Vec2pLERKS_($vB, $34);
      var $447=$iB;
      var $448=$cp1;
      var $449=(($448+8)|0);
      var $450=__Z7b2CrossRK6b2Vec2S1_($449, $P111);
      var $451=$cp2;
      var $452=(($451+8)|0);
      var $453=__Z7b2CrossRK6b2Vec2S1_($452, $P212);
      var $454=($450)+($453);
      var $455=($447)*($454);
      var $456=$wB;
      var $457=($456)+($455);
      $wB=$457;
      var $458=(($x)|0);
      var $459=HEAPF32[(($458)>>2)];
      var $460=$cp1;
      var $461=(($460+16)|0);
      HEAPF32[(($461)>>2)]=$459;
      var $462=(($x+4)|0);
      var $463=HEAPF32[(($462)>>2)];
      var $464=$cp2;
      var $465=(($464+16)|0);
      HEAPF32[(($465)>>2)]=$463;
      label = 31; break;
    case 27: 
      var $467=(($x)|0);
      HEAPF32[(($467)>>2)]=0;
      var $468=(($x+4)|0);
      HEAPF32[(($468)>>2)]=0;
      var $469=(($b)|0);
      var $470=HEAPF32[(($469)>>2)];
      $vn1=$470;
      var $471=(($b+4)|0);
      var $472=HEAPF32[(($471)>>2)];
      $vn2=$472;
      var $473=$vn1;
      var $474=$473 >= 0;
      if ($474) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $476=$vn2;
      var $477=$476 >= 0;
      if ($477) { label = 29; break; } else { label = 30; break; }
    case 29: 
      __ZmiRK6b2Vec2S1_($d13, $x, $a);
      var $479=(($d13)|0);
      var $480=HEAPF32[(($479)>>2)];
      __ZmlfRK6b2Vec2($P114, $480, $normal);
      var $481=(($d13+4)|0);
      var $482=HEAPF32[(($481)>>2)];
      __ZmlfRK6b2Vec2($P215, $482, $normal);
      var $483=$mA;
      __ZplRK6b2Vec2S1_($37, $P114, $P215);
      __ZmlfRK6b2Vec2($36, $483, $37);
      __ZN6b2Vec2mIERKS_($vA, $36);
      var $484=$iA;
      var $485=$cp1;
      var $486=(($485)|0);
      var $487=__Z7b2CrossRK6b2Vec2S1_($486, $P114);
      var $488=$cp2;
      var $489=(($488)|0);
      var $490=__Z7b2CrossRK6b2Vec2S1_($489, $P215);
      var $491=($487)+($490);
      var $492=($484)*($491);
      var $493=$wA;
      var $494=($493)-($492);
      $wA=$494;
      var $495=$mB;
      __ZplRK6b2Vec2S1_($39, $P114, $P215);
      __ZmlfRK6b2Vec2($38, $495, $39);
      __ZN6b2Vec2pLERKS_($vB, $38);
      var $496=$iB;
      var $497=$cp1;
      var $498=(($497+8)|0);
      var $499=__Z7b2CrossRK6b2Vec2S1_($498, $P114);
      var $500=$cp2;
      var $501=(($500+8)|0);
      var $502=__Z7b2CrossRK6b2Vec2S1_($501, $P215);
      var $503=($499)+($502);
      var $504=($496)*($503);
      var $505=$wB;
      var $506=($505)+($504);
      $wB=$506;
      var $507=(($x)|0);
      var $508=HEAPF32[(($507)>>2)];
      var $509=$cp1;
      var $510=(($509+16)|0);
      HEAPF32[(($510)>>2)]=$508;
      var $511=(($x+4)|0);
      var $512=HEAPF32[(($511)>>2)];
      var $513=$cp2;
      var $514=(($513+16)|0);
      HEAPF32[(($514)>>2)]=$512;
      label = 31; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $518=$indexA;
      var $519=(($40+28)|0);
      var $520=HEAP32[(($519)>>2)];
      var $521=(($520+((($518)*(12))&-1))|0);
      var $522=(($521)|0);
      var $523=$522;
      var $524=$vA;
      assert(8 % 1 === 0);HEAP32[(($523)>>2)]=HEAP32[(($524)>>2)];HEAP32[((($523)+(4))>>2)]=HEAP32[((($524)+(4))>>2)];
      var $525=$wA;
      var $526=$indexA;
      var $527=(($40+28)|0);
      var $528=HEAP32[(($527)>>2)];
      var $529=(($528+((($526)*(12))&-1))|0);
      var $530=(($529+8)|0);
      HEAPF32[(($530)>>2)]=$525;
      var $531=$indexB;
      var $532=(($40+28)|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=(($533+((($531)*(12))&-1))|0);
      var $535=(($534)|0);
      var $536=$535;
      var $537=$vB;
      assert(8 % 1 === 0);HEAP32[(($536)>>2)]=HEAP32[(($537)>>2)];HEAP32[((($536)+(4))>>2)]=HEAP32[((($537)+(4))>>2)];
      var $538=$wB;
      var $539=$indexB;
      var $540=(($40+28)|0);
      var $541=HEAP32[(($540)>>2)];
      var $542=(($541+((($539)*(12))&-1))|0);
      var $543=(($542+8)|0);
      HEAPF32[(($543)>>2)]=$538;
      label = 33; break;
    case 33: 
      var $545=$i;
      var $546=((($545)+(1))|0);
      $i=$546;
      label = 2; break;
    case 34: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2ContactSolver24SolvePositionConstraintsEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 172)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $minSeparation;
      var $i;
      var $pc;
      var $indexA;
      var $indexB;
      var $localCenterA=__stackBase__;
      var $mA;
      var $iA;
      var $localCenterB=(__stackBase__)+(8);
      var $mB;
      var $iB;
      var $pointCount;
      var $cA=(__stackBase__)+(16);
      var $aA;
      var $cB=(__stackBase__)+(24);
      var $aB;
      var $j;
      var $xfA=(__stackBase__)+(32);
      var $xfB=(__stackBase__)+(48);
      var $2=(__stackBase__)+(64);
      var $3=(__stackBase__)+(72);
      var $4=(__stackBase__)+(80);
      var $5=(__stackBase__)+(88);
      var $psm=(__stackBase__)+(96);
      var $normal=(__stackBase__)+(116);
      var $point=(__stackBase__)+(124);
      var $separation;
      var $rA=(__stackBase__)+(132);
      var $rB=(__stackBase__)+(140);
      var $C;
      var $rnA;
      var $rnB;
      var $K;
      var $impulse;
      var $P=(__stackBase__)+(148);
      var $6=(__stackBase__)+(156);
      var $7=(__stackBase__)+(164);
      $1=$this;
      var $8=$1;
      $minSeparation=0;
      $i=0;
      label = 2; break;
    case 2: 
      var $10=$i;
      var $11=(($8+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|(0)) < (($12)|(0));
      if ($13) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $15=(($8+36)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$i;
      var $18=(($16+((($17)*(88))&-1))|0);
      $pc=$18;
      var $19=$pc;
      var $20=(($19+32)|0);
      var $21=HEAP32[(($20)>>2)];
      $indexA=$21;
      var $22=$pc;
      var $23=(($22+36)|0);
      var $24=HEAP32[(($23)>>2)];
      $indexB=$24;
      var $25=$pc;
      var $26=(($25+48)|0);
      var $27=$localCenterA;
      var $28=$26;
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=$pc;
      var $30=(($29+40)|0);
      var $31=HEAPF32[(($30)>>2)];
      $mA=$31;
      var $32=$pc;
      var $33=(($32+64)|0);
      var $34=HEAPF32[(($33)>>2)];
      $iA=$34;
      var $35=$pc;
      var $36=(($35+56)|0);
      var $37=$localCenterB;
      var $38=$36;
      assert(8 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];
      var $39=$pc;
      var $40=(($39+44)|0);
      var $41=HEAPF32[(($40)>>2)];
      $mB=$41;
      var $42=$pc;
      var $43=(($42+68)|0);
      var $44=HEAPF32[(($43)>>2)];
      $iB=$44;
      var $45=$pc;
      var $46=(($45+84)|0);
      var $47=HEAP32[(($46)>>2)];
      $pointCount=$47;
      var $48=$indexA;
      var $49=(($8+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+((($48)*(12))&-1))|0);
      var $52=(($51)|0);
      var $53=$cA;
      var $54=$52;
      assert(8 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];
      var $55=$indexA;
      var $56=(($8+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+((($55)*(12))&-1))|0);
      var $59=(($58+8)|0);
      var $60=HEAPF32[(($59)>>2)];
      $aA=$60;
      var $61=$indexB;
      var $62=(($8+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+((($61)*(12))&-1))|0);
      var $65=(($64)|0);
      var $66=$cB;
      var $67=$65;
      assert(8 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];
      var $68=$indexB;
      var $69=(($8+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+((($68)*(12))&-1))|0);
      var $72=(($71+8)|0);
      var $73=HEAPF32[(($72)>>2)];
      $aB=$73;
      $j=0;
      label = 4; break;
    case 4: 
      var $75=$j;
      var $76=$pointCount;
      var $77=(($75)|(0)) < (($76)|(0));
      if ($77) { label = 5; break; } else { label = 10; break; }
    case 5: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $79=(($xfA+8)|0);
      var $80=$aA;
      __ZN5b2Rot3SetEf($79, $80);
      var $81=(($xfB+8)|0);
      var $82=$aB;
      __ZN5b2Rot3SetEf($81, $82);
      var $83=(($xfA)|0);
      var $84=(($xfA+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $84, $localCenterA);
      __ZmiRK6b2Vec2S1_($2, $cA, $3);
      var $85=$83;
      var $86=$2;
      assert(8 % 1 === 0);HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[((($85)+(4))>>2)]=HEAP32[((($86)+(4))>>2)];
      var $87=(($xfB)|0);
      var $88=(($xfB+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $88, $localCenterB);
      __ZmiRK6b2Vec2S1_($4, $cB, $5);
      var $89=$87;
      var $90=$4;
      assert(8 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];
      __ZN24b2PositionSolverManifoldC1Ev($psm);
      var $91=$pc;
      var $92=$j;
      __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $91, $xfA, $xfB, $92);
      var $93=(($psm)|0);
      var $94=$normal;
      var $95=$93;
      assert(8 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($95)+(4))>>2)];
      var $96=(($psm+8)|0);
      var $97=$point;
      var $98=$96;
      assert(8 % 1 === 0);HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($97)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];
      var $99=(($psm+16)|0);
      var $100=HEAPF32[(($99)>>2)];
      $separation=$100;
      __ZmiRK6b2Vec2S1_($rA, $point, $cA);
      __ZmiRK6b2Vec2S1_($rB, $point, $cB);
      var $101=$minSeparation;
      var $102=$separation;
      var $103=__Z5b2MinIfET_S0_S0_($101, $102);
      $minSeparation=$103;
      var $104=$separation;
      var $105=($104)+(0.004999999888241291);
      var $106=($105)*(0.20000000298023224);
      var $107=__Z7b2ClampIfET_S0_S0_S0_($106, -0.20000000298023224, 0);
      $C=$107;
      var $108=__Z7b2CrossRK6b2Vec2S1_($rA, $normal);
      $rnA=$108;
      var $109=__Z7b2CrossRK6b2Vec2S1_($rB, $normal);
      $rnB=$109;
      var $110=$mA;
      var $111=$mB;
      var $112=($110)+($111);
      var $113=$iA;
      var $114=$rnA;
      var $115=($113)*($114);
      var $116=$rnA;
      var $117=($115)*($116);
      var $118=($112)+($117);
      var $119=$iB;
      var $120=$rnB;
      var $121=($119)*($120);
      var $122=$rnB;
      var $123=($121)*($122);
      var $124=($118)+($123);
      $K=$124;
      var $125=$K;
      var $126=$125 > 0;
      if ($126) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $128=$C;
      var $129=(-$128);
      var $130=$K;
      var $131=($129)/($130);
      var $134 = $131;label = 8; break;
    case 7: 
      var $134 = 0;label = 8; break;
    case 8: 
      var $134;
      $impulse=$134;
      var $135=$impulse;
      __ZmlfRK6b2Vec2($P, $135, $normal);
      var $136=$mA;
      __ZmlfRK6b2Vec2($6, $136, $P);
      __ZN6b2Vec2mIERKS_($cA, $6);
      var $137=$iA;
      var $138=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $139=($137)*($138);
      var $140=$aA;
      var $141=($140)-($139);
      $aA=$141;
      var $142=$mB;
      __ZmlfRK6b2Vec2($7, $142, $P);
      __ZN6b2Vec2pLERKS_($cB, $7);
      var $143=$iB;
      var $144=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $145=($143)*($144);
      var $146=$aB;
      var $147=($146)+($145);
      $aB=$147;
      label = 9; break;
    case 9: 
      var $149=$j;
      var $150=((($149)+(1))|0);
      $j=$150;
      label = 4; break;
    case 10: 
      var $152=$indexA;
      var $153=(($8+24)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154+((($152)*(12))&-1))|0);
      var $156=(($155)|0);
      var $157=$156;
      var $158=$cA;
      assert(8 % 1 === 0);HEAP32[(($157)>>2)]=HEAP32[(($158)>>2)];HEAP32[((($157)+(4))>>2)]=HEAP32[((($158)+(4))>>2)];
      var $159=$aA;
      var $160=$indexA;
      var $161=(($8+24)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+((($160)*(12))&-1))|0);
      var $164=(($163+8)|0);
      HEAPF32[(($164)>>2)]=$159;
      var $165=$indexB;
      var $166=(($8+24)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+((($165)*(12))&-1))|0);
      var $169=(($168)|0);
      var $170=$169;
      var $171=$cB;
      assert(8 % 1 === 0);HEAP32[(($170)>>2)]=HEAP32[(($171)>>2)];HEAP32[((($170)+(4))>>2)]=HEAP32[((($171)+(4))>>2)];
      var $172=$aB;
      var $173=$indexB;
      var $174=(($8+24)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=(($175+((($173)*(12))&-1))|0);
      var $177=(($176+8)|0);
      HEAPF32[(($177)>>2)]=$172;
      label = 11; break;
    case 11: 
      var $179=$i;
      var $180=((($179)+(1))|0);
      $i=$180;
      label = 2; break;
    case 12: 
      var $182=$minSeparation;
      var $183=$182 >= -0.014999999664723873;
      STACKTOP = __stackBase__;
      return $183;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN24b2PositionSolverManifoldC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN24b2PositionSolverManifoldC2Ev($2);
  return;
}
function __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($this, $toiIndexA, $toiIndexB) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 172)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $minSeparation;
      var $i;
      var $pc;
      var $indexA;
      var $indexB;
      var $localCenterA=__stackBase__;
      var $localCenterB=(__stackBase__)+(8);
      var $pointCount;
      var $mA;
      var $iA;
      var $mB;
      var $iB;
      var $cA=(__stackBase__)+(16);
      var $aA;
      var $cB=(__stackBase__)+(24);
      var $aB;
      var $j;
      var $xfA=(__stackBase__)+(32);
      var $xfB=(__stackBase__)+(48);
      var $4=(__stackBase__)+(64);
      var $5=(__stackBase__)+(72);
      var $6=(__stackBase__)+(80);
      var $7=(__stackBase__)+(88);
      var $psm=(__stackBase__)+(96);
      var $normal=(__stackBase__)+(116);
      var $point=(__stackBase__)+(124);
      var $separation;
      var $rA=(__stackBase__)+(132);
      var $rB=(__stackBase__)+(140);
      var $C;
      var $rnA;
      var $rnB;
      var $K;
      var $impulse;
      var $P=(__stackBase__)+(148);
      var $8=(__stackBase__)+(156);
      var $9=(__stackBase__)+(164);
      $1=$this;
      $2=$toiIndexA;
      $3=$toiIndexB;
      var $10=$1;
      $minSeparation=0;
      $i=0;
      label = 2; break;
    case 2: 
      var $12=$i;
      var $13=(($10+48)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|(0)) < (($14)|(0));
      if ($15) { label = 3; break; } else { label = 18; break; }
    case 3: 
      var $17=(($10+36)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$i;
      var $20=(($18+((($19)*(88))&-1))|0);
      $pc=$20;
      var $21=$pc;
      var $22=(($21+32)|0);
      var $23=HEAP32[(($22)>>2)];
      $indexA=$23;
      var $24=$pc;
      var $25=(($24+36)|0);
      var $26=HEAP32[(($25)>>2)];
      $indexB=$26;
      var $27=$pc;
      var $28=(($27+48)|0);
      var $29=$localCenterA;
      var $30=$28;
      assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
      var $31=$pc;
      var $32=(($31+56)|0);
      var $33=$localCenterB;
      var $34=$32;
      assert(8 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
      var $35=$pc;
      var $36=(($35+84)|0);
      var $37=HEAP32[(($36)>>2)];
      $pointCount=$37;
      $mA=0;
      $iA=0;
      var $38=$indexA;
      var $39=$2;
      var $40=(($38)|(0))==(($39)|(0));
      if ($40) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $42=$indexA;
      var $43=$3;
      var $44=(($42)|(0))==(($43)|(0));
      if ($44) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $46=$pc;
      var $47=(($46+40)|0);
      var $48=HEAPF32[(($47)>>2)];
      $mA=$48;
      var $49=$pc;
      var $50=(($49+64)|0);
      var $51=HEAPF32[(($50)>>2)];
      $iA=$51;
      label = 6; break;
    case 6: 
      var $53=$pc;
      var $54=(($53+44)|0);
      var $55=HEAPF32[(($54)>>2)];
      $mB=$55;
      var $56=$pc;
      var $57=(($56+68)|0);
      var $58=HEAPF32[(($57)>>2)];
      $iB=$58;
      var $59=$indexB;
      var $60=$2;
      var $61=(($59)|(0))==(($60)|(0));
      if ($61) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $63=$indexB;
      var $64=$3;
      var $65=(($63)|(0))==(($64)|(0));
      if ($65) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $67=$pc;
      var $68=(($67+44)|0);
      var $69=HEAPF32[(($68)>>2)];
      $mB=$69;
      var $70=$pc;
      var $71=(($70+68)|0);
      var $72=HEAPF32[(($71)>>2)];
      $iB=$72;
      label = 9; break;
    case 9: 
      var $74=$indexA;
      var $75=(($10+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+((($74)*(12))&-1))|0);
      var $78=(($77)|0);
      var $79=$cA;
      var $80=$78;
      assert(8 % 1 === 0);HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];
      var $81=$indexA;
      var $82=(($10+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+((($81)*(12))&-1))|0);
      var $85=(($84+8)|0);
      var $86=HEAPF32[(($85)>>2)];
      $aA=$86;
      var $87=$indexB;
      var $88=(($10+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+((($87)*(12))&-1))|0);
      var $91=(($90)|0);
      var $92=$cB;
      var $93=$91;
      assert(8 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];
      var $94=$indexB;
      var $95=(($10+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+((($94)*(12))&-1))|0);
      var $98=(($97+8)|0);
      var $99=HEAPF32[(($98)>>2)];
      $aB=$99;
      $j=0;
      label = 10; break;
    case 10: 
      var $101=$j;
      var $102=$pointCount;
      var $103=(($101)|(0)) < (($102)|(0));
      if ($103) { label = 11; break; } else { label = 16; break; }
    case 11: 
      __ZN11b2TransformC1Ev($xfA);
      __ZN11b2TransformC1Ev($xfB);
      var $105=(($xfA+8)|0);
      var $106=$aA;
      __ZN5b2Rot3SetEf($105, $106);
      var $107=(($xfB+8)|0);
      var $108=$aB;
      __ZN5b2Rot3SetEf($107, $108);
      var $109=(($xfA)|0);
      var $110=(($xfA+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $110, $localCenterA);
      __ZmiRK6b2Vec2S1_($4, $cA, $5);
      var $111=$109;
      var $112=$4;
      assert(8 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];
      var $113=(($xfB)|0);
      var $114=(($xfB+8)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $114, $localCenterB);
      __ZmiRK6b2Vec2S1_($6, $cB, $7);
      var $115=$113;
      var $116=$6;
      assert(8 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];
      __ZN24b2PositionSolverManifoldC1Ev($psm);
      var $117=$pc;
      var $118=$j;
      __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $117, $xfA, $xfB, $118);
      var $119=(($psm)|0);
      var $120=$normal;
      var $121=$119;
      assert(8 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($121)+(4))>>2)];
      var $122=(($psm+8)|0);
      var $123=$point;
      var $124=$122;
      assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
      var $125=(($psm+16)|0);
      var $126=HEAPF32[(($125)>>2)];
      $separation=$126;
      __ZmiRK6b2Vec2S1_($rA, $point, $cA);
      __ZmiRK6b2Vec2S1_($rB, $point, $cB);
      var $127=$minSeparation;
      var $128=$separation;
      var $129=__Z5b2MinIfET_S0_S0_($127, $128);
      $minSeparation=$129;
      var $130=$separation;
      var $131=($130)+(0.004999999888241291);
      var $132=($131)*(0.75);
      var $133=__Z7b2ClampIfET_S0_S0_S0_($132, -0.20000000298023224, 0);
      $C=$133;
      var $134=__Z7b2CrossRK6b2Vec2S1_($rA, $normal);
      $rnA=$134;
      var $135=__Z7b2CrossRK6b2Vec2S1_($rB, $normal);
      $rnB=$135;
      var $136=$mA;
      var $137=$mB;
      var $138=($136)+($137);
      var $139=$iA;
      var $140=$rnA;
      var $141=($139)*($140);
      var $142=$rnA;
      var $143=($141)*($142);
      var $144=($138)+($143);
      var $145=$iB;
      var $146=$rnB;
      var $147=($145)*($146);
      var $148=$rnB;
      var $149=($147)*($148);
      var $150=($144)+($149);
      $K=$150;
      var $151=$K;
      var $152=$151 > 0;
      if ($152) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $154=$C;
      var $155=(-$154);
      var $156=$K;
      var $157=($155)/($156);
      var $160 = $157;label = 14; break;
    case 13: 
      var $160 = 0;label = 14; break;
    case 14: 
      var $160;
      $impulse=$160;
      var $161=$impulse;
      __ZmlfRK6b2Vec2($P, $161, $normal);
      var $162=$mA;
      __ZmlfRK6b2Vec2($8, $162, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $163=$iA;
      var $164=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $165=($163)*($164);
      var $166=$aA;
      var $167=($166)-($165);
      $aA=$167;
      var $168=$mB;
      __ZmlfRK6b2Vec2($9, $168, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $169=$iB;
      var $170=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $171=($169)*($170);
      var $172=$aB;
      var $173=($172)+($171);
      $aB=$173;
      label = 15; break;
    case 15: 
      var $175=$j;
      var $176=((($175)+(1))|0);
      $j=$176;
      label = 10; break;
    case 16: 
      var $178=$indexA;
      var $179=(($10+24)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+((($178)*(12))&-1))|0);
      var $182=(($181)|0);
      var $183=$182;
      var $184=$cA;
      assert(8 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];
      var $185=$aA;
      var $186=$indexA;
      var $187=(($10+24)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+((($186)*(12))&-1))|0);
      var $190=(($189+8)|0);
      HEAPF32[(($190)>>2)]=$185;
      var $191=$indexB;
      var $192=(($10+24)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+((($191)*(12))&-1))|0);
      var $195=(($194)|0);
      var $196=$195;
      var $197=$cB;
      assert(8 % 1 === 0);HEAP32[(($196)>>2)]=HEAP32[(($197)>>2)];HEAP32[((($196)+(4))>>2)]=HEAP32[((($197)+(4))>>2)];
      var $198=$aB;
      var $199=$indexB;
      var $200=(($10+24)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+((($199)*(12))&-1))|0);
      var $203=(($202+8)|0);
      HEAPF32[(($203)>>2)]=$198;
      label = 17; break;
    case 17: 
      var $205=$i;
      var $206=((($205)+(1))|0);
      $i=$206;
      label = 2; break;
    case 18: 
      var $208=$minSeparation;
      var $209=$208 >= -0.007499999832361937;
      STACKTOP = __stackBase__;
      return $209;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN24b2PositionSolverManifoldC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  return;
}
function __ZN7b2Mat22C1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2Mat22C2Ev($2);
  return;
}
function __ZN7b2Mat22C2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+8)|0);
  __ZN6b2Vec2C1Ev($4);
  return;
}
function __ZN15b2WorldManifoldC2Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2)|0);
      __ZN6b2Vec2C1Ev($3);
      var $4=(($2+8)|0);
      var $5=(($4)|0);
      var $6=(($5+16)|0);
      var $8 = $5;label = 2; break;
    case 2: 
      var $8;
      __ZN6b2Vec2C1Ev($8);
      var $9=(($8+8)|0);
      var $10=(($9)|(0))==(($6)|(0));
      if ($10) { label = 3; break; } else { var $8 = $9;label = 2; break; }
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|(0))==0;
      if ($11) { var $17 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($13, $14, $15);
      var $17 = $13;label = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  return;
}
function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this, $pc, $xfA, $xfB, $index) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $pointA=__stackBase__;
      var $pointB=(__stackBase__)+(8);
      var $6=(__stackBase__)+(16);
      var $7=(__stackBase__)+(24);
      var $8=(__stackBase__)+(32);
      var $9=(__stackBase__)+(40);
      var $10=(__stackBase__)+(48);
      var $planePoint=(__stackBase__)+(56);
      var $clipPoint=(__stackBase__)+(64);
      var $11=(__stackBase__)+(72);
      var $12=(__stackBase__)+(80);
      var $planePoint1=(__stackBase__)+(88);
      var $clipPoint2=(__stackBase__)+(96);
      var $13=(__stackBase__)+(104);
      var $14=(__stackBase__)+(112);
      $1=$this;
      $2=$pc;
      $3=$xfA;
      $4=$xfB;
      $5=$index;
      var $15=$1;
      var $16=$2;
      var $17=(($16+84)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0)) > 0;
      if ($19) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5253516)|0), 617, ((5261504)|0), ((5249516)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $24=$2;
      var $25=(($24+72)|0);
      var $26=HEAP32[(($25)>>2)];
      if ((($26)|(0))==0) {
        label = 5; break;
      }
      else if ((($26)|(0))==1) {
        label = 6; break;
      }
      else if ((($26)|(0))==2) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
    case 5: 
      var $28=$3;
      var $29=$2;
      var $30=(($29+24)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $28, $30);
      var $31=$4;
      var $32=$2;
      var $33=(($32)|0);
      var $34=(($33)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $31, $34);
      var $35=(($15)|0);
      __ZmiRK6b2Vec2S1_($6, $pointB, $pointA);
      var $36=$35;
      var $37=$6;
      assert(8 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
      var $38=(($15)|0);
      var $39=__ZN6b2Vec29NormalizeEv($38);
      var $40=(($15+8)|0);
      __ZplRK6b2Vec2S1_($8, $pointA, $pointB);
      __ZmlfRK6b2Vec2($7, 0.5, $8);
      var $41=$40;
      var $42=$7;
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      __ZmiRK6b2Vec2S1_($9, $pointB, $pointA);
      var $43=(($15)|0);
      var $44=__Z5b2DotRK6b2Vec2S1_($9, $43);
      var $45=$2;
      var $46=(($45+76)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=($44)-($47);
      var $49=$2;
      var $50=(($49+80)|0);
      var $51=HEAPF32[(($50)>>2)];
      var $52=($48)-($51);
      var $53=(($15+16)|0);
      HEAPF32[(($53)>>2)]=$52;
      label = 8; break;
    case 6: 
      var $55=(($15)|0);
      var $56=$3;
      var $57=(($56+8)|0);
      var $58=$2;
      var $59=(($58+16)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($10, $57, $59);
      var $60=$55;
      var $61=$10;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=$3;
      var $63=$2;
      var $64=(($63+24)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint, $62, $64);
      var $65=$4;
      var $66=$5;
      var $67=$2;
      var $68=(($67)|0);
      var $69=(($68+($66<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint, $65, $69);
      __ZmiRK6b2Vec2S1_($11, $clipPoint, $planePoint);
      var $70=(($15)|0);
      var $71=__Z5b2DotRK6b2Vec2S1_($11, $70);
      var $72=$2;
      var $73=(($72+76)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=($71)-($74);
      var $76=$2;
      var $77=(($76+80)|0);
      var $78=HEAPF32[(($77)>>2)];
      var $79=($75)-($78);
      var $80=(($15+16)|0);
      HEAPF32[(($80)>>2)]=$79;
      var $81=(($15+8)|0);
      var $82=$81;
      var $83=$clipPoint;
      assert(8 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];
      label = 8; break;
    case 7: 
      var $85=(($15)|0);
      var $86=$4;
      var $87=(($86+8)|0);
      var $88=$2;
      var $89=(($88+16)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($12, $87, $89);
      var $90=$85;
      var $91=$12;
      assert(8 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];
      var $92=$4;
      var $93=$2;
      var $94=(($93+24)|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint1, $92, $94);
      var $95=$3;
      var $96=$5;
      var $97=$2;
      var $98=(($97)|0);
      var $99=(($98+($96<<3))|0);
      __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint2, $95, $99);
      __ZmiRK6b2Vec2S1_($13, $clipPoint2, $planePoint1);
      var $100=(($15)|0);
      var $101=__Z5b2DotRK6b2Vec2S1_($13, $100);
      var $102=$2;
      var $103=(($102+76)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=($101)-($104);
      var $106=$2;
      var $107=(($106+80)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=($105)-($108);
      var $110=(($15+16)|0);
      HEAPF32[(($110)>>2)]=$109;
      var $111=(($15+8)|0);
      var $112=$111;
      var $113=$clipPoint2;
      assert(8 % 1 === 0);HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($112)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];
      var $114=(($15)|0);
      var $115=(($15)|0);
      __ZNK6b2Vec2ngEv($14, $115);
      var $116=$114;
      var $117=$14;
      assert(8 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2JointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($6, $11, $12, $17, $18);
  return;
}
function __ZN22b2EdgeAndCircleContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN22b2EdgeAndCircleContactD2Ev($2);
  return;
}
function __ZN22b2EdgeAndCircleContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN22b2EdgeAndCircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN22b2EdgeAndCircleContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  return;
}
function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|(0))==0;
      if ($11) { var $17 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($13, $14, $15);
      var $17 = $13;label = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  return;
}
function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($6, $11, $12, $17, $18);
  return;
}
function __ZN23b2EdgeAndPolygonContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN23b2EdgeAndPolygonContactD2Ev($2);
  return;
}
function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN23b2EdgeAndPolygonContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2EdgeAndPolygonContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  return;
}
function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|(0))==0;
      if ($11) { var $17 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($13, $14, $15);
      var $17 = $13;label = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  return;
}
function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($6, $11, $12, $17, $18);
  return;
}
function __ZN25b2PolygonAndCircleContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN25b2PolygonAndCircleContactD2Ev($2);
  return;
}
function __ZN25b2PolygonAndCircleContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN25b2PolygonAndCircleContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN25b2PolygonAndCircleContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  return;
}
function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $mem;
      $3=$fixtureA;
      $4=$0;
      $5=$fixtureB;
      $6=$1;
      $7=$allocator;
      var $8=$7;
      var $9=__ZN16b2BlockAllocator8AllocateEi($8, 144);
      $mem=$9;
      var $10=$mem;
      var $11=(($10)|(0))==0;
      if ($11) { var $17 = 0;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$10;
      var $14=$3;
      var $15=$5;
      __ZN16b2PolygonContactC2EP9b2FixtureS1_($13, $14, $15);
      var $17 = $13;label = 3; break;
    case 3: 
      var $17;
      var $18=$17;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
  var label = 0;
  var $1;
  var $2;
  $1=$contact;
  $2=$allocator;
  var $3=$1;
  var $4=$3;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  FUNCTION_TABLE[$8]($4);
  var $9=$2;
  var $10=$1;
  var $11=$10;
  __ZN16b2BlockAllocator4FreeEPvi($9, $11, 144);
  return;
}
function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$manifold;
  $3=$xfA;
  $4=$xfB;
  var $5=$1;
  var $6=$2;
  var $7=$5;
  var $8=(($7+48)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=__ZN9b2Fixture8GetShapeEv($9);
  var $11=$10;
  var $12=$3;
  var $13=$5;
  var $14=(($13+52)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=__ZN9b2Fixture8GetShapeEv($15);
  var $17=$16;
  var $18=$4;
  __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($6, $11, $12, $17, $18);
  return;
}
function __ZN16b2PolygonContactD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2PolygonContactD2Ev($2);
  return;
}
function __ZN16b2PolygonContactD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN16b2PolygonContactD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2PolygonContactD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN9b2ContactD2Ev($3);
  return;
}
function __ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $b1, $b2, $anchor1, $anchor2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6=__stackBase__;
  var $7=(__stackBase__)+(8);
  var $d=(__stackBase__)+(16);
  $1=$this;
  $2=$b1;
  $3=$b2;
  $4=$anchor1;
  $5=$anchor2;
  var $8=$1;
  var $9=$2;
  var $10=$8;
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=$9;
  var $12=$3;
  var $13=$8;
  var $14=(($13+12)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=(($8+20)|0);
  var $16=$8;
  var $17=(($16+8)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $18, $19);
  var $20=$15;
  var $21=$6;
  assert(8 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
  var $22=(($8+28)|0);
  var $23=$8;
  var $24=(($23+12)|0);
  var $25=HEAP32[(($24)>>2)];
  var $26=$5;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($7, $25, $26);
  var $27=$22;
  var $28=$7;
  assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
  var $29=$5;
  var $30=$4;
  __ZmiRK6b2Vec2S1_($d, $29, $30);
  var $31=__ZNK6b2Vec26LengthEv($d);
  var $32=(($8+36)|0);
  HEAPF32[(($32)>>2)]=$31;
  STACKTOP = __stackBase__;
  return;
}
function __ZNK6b2Body13GetLocalPointERK6b2Vec2($agg_result, $this, $worldPoint) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$worldPoint;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  __Z6b2MulTRK11b2TransformRK6b2Vec2($agg_result, $4, $5);
  return;
}
function __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5264640)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $16=(($14)|(0))==1;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252868)|0), 41, ((5261888)|0), ((5256700)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      throw "Reached an unreachable!"
    case 6: 
      var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
      var $22=$21$0;
      $4=$22;
      var $23=$21$1;
      $5=$23;
      var $24=$6;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD2Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
      label = 7; break;
    case 7: 
      var $27=$6;
      var $28=(($27+52)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 6; break; }
    case 8: 
      var $32=(($30)|(0))==0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252868)|0), 42, ((5261888)|0), ((5253804)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
    case 11: 
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      return;
    case 13: 
      label = 14; break;
    case 14: 
      var $40=$4;
      var $41=$5;
      var $42$0=$40;
      var $42$1=0;
      var $43$0=$42$0;
      var $43$1=$41;
      ___resumeException($43$0)
    case 15: 
      var $45$0 = ___cxa_find_matching_catch(-1, -1,0); $45$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5264592)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $16=(($14)|(0))==1;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252700)|0), 41, ((5261720)|0), ((5256656)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      throw "Reached an unreachable!"
    case 6: 
      var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
      var $22=$21$0;
      $4=$22;
      var $23=$21$1;
      $5=$23;
      var $24=$6;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD2Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
      label = 7; break;
    case 7: 
      var $27=$6;
      var $28=(($27+52)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 6; break; }
    case 8: 
      var $32=(($30)|(0))==2;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252700)|0), 42, ((5261720)|0), ((5253760)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
    case 11: 
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      return;
    case 13: 
      label = 14; break;
    case 14: 
      var $40=$4;
      var $41=$5;
      var $42$0=$40;
      var $42$1=0;
      var $43$0=$42$0;
      var $43$1=$41;
      ___resumeException($43$0)
    case 15: 
      var $45$0 = ___cxa_find_matching_catch(-1, -1,0); $45$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5264544)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $16=(($14)|(0))==2;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252484)|0), 41, ((5261424)|0), ((5256612)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      throw "Reached an unreachable!"
    case 6: 
      var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
      var $22=$21$0;
      $4=$22;
      var $23=$21$1;
      $5=$23;
      var $24=$6;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD2Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
      label = 7; break;
    case 7: 
      var $27=$6;
      var $28=(($27+52)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 6; break; }
    case 8: 
      var $32=(($30)|(0))==0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252484)|0), 42, ((5261424)|0), ((5253716)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
    case 11: 
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      return;
    case 13: 
      label = 14; break;
    case 14: 
      var $40=$4;
      var $41=$5;
      var $42$0=$40;
      var $42$1=0;
      var $43$0=$42$0;
      var $43$1=$41;
      ___resumeException($43$0)
    case 15: 
      var $45$0 = ___cxa_find_matching_catch(-1, -1,0); $45$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2PolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$fixtureA;
      $3=$fixtureB;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$3;
      __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, 0, $9, 0);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5264804)|0);
      var $11=$6;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $16=(($14)|(0))==2;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252264)|0), 44, ((5262420)|0), ((5256568)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
    case 5: 
      throw "Reached an unreachable!"
    case 6: 
      var $21$0 = ___cxa_find_matching_catch(-1, -1); $21$1 = tempRet0;
      var $22=$21$0;
      $4=$22;
      var $23=$21$1;
      $5=$23;
      var $24=$6;
      (function() { try { __THREW__ = 0; return __ZN9b2ContactD2Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
      label = 7; break;
    case 7: 
      var $27=$6;
      var $28=(($27+52)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30 = (function() { try { __THREW__ = 0; return __ZNK9b2Fixture7GetTypeEv($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 6; break; }
    case 8: 
      var $32=(($30)|(0))==2;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5252264)|0), 45, ((5262420)|0), ((5253672)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 6; break; }
    case 11: 
      throw "Reached an unreachable!"
      label = 12; break;
    case 12: 
      return;
    case 13: 
      label = 14; break;
    case 14: 
      var $40=$4;
      var $41=$5;
      var $42$0=$40;
      var $42$1=0;
      var $43$0=$42$0;
      var $43$1=$41;
      ___resumeException($43$0)
    case 15: 
      var $45$0 = ___cxa_find_matching_catch(-1, -1,0); $45$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2DistanceJointC2EPK18b2DistanceJointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((5264956)|0);
      var $10=(($5+80)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $12=(($5+88)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $14=(($5+116)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $16=(($5+124)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $18=(($5+132)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $20=(($5+140)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $22=(($5+148)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $24=(($5+80)|0);
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=$24;
      var $28=$26;
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=(($5+88)|0);
      var $30=$2;
      var $31=(($30+28)|0);
      var $32=$29;
      var $33=$31;
      assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
      var $34=$2;
      var $35=(($34+36)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=(($5+104)|0);
      HEAPF32[(($37)>>2)]=$36;
      var $38=$2;
      var $39=(($38+40)|0);
      var $40=HEAPF32[(($39)>>2)];
      var $41=(($5+68)|0);
      HEAPF32[(($41)>>2)]=$40;
      var $42=$2;
      var $43=(($42+44)|0);
      var $44=HEAPF32[(($43)>>2)];
      var $45=(($5+72)|0);
      HEAPF32[(($45)>>2)]=$44;
      var $46=(($5+100)|0);
      HEAPF32[(($46)>>2)]=0;
      var $47=(($5+96)|0);
      HEAPF32[(($47)>>2)]=0;
      var $48=(($5+76)|0);
      HEAPF32[(($48)>>2)]=0;
      return;
    case 9: 
      var $50$0 = ___cxa_find_matching_catch(-1, -1); $50$1 = tempRet0;
      var $51=$50$0;
      $3=$51;
      var $52=$50$1;
      $4=$52;
      var $53=$5;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 12; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $56=$3;
      var $57=$4;
      var $58$0=$56;
      var $58$1=0;
      var $59$0=$58$0;
      var $59$1=$57;
      ___resumeException($59$0)
    case 12: 
      var $61$0 = ___cxa_find_matching_catch(-1, -1,0); $61$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK15b2DistanceJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  return 0;
}
function __ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      var $6=(__stackBase__)+(72);
      var $7=(__stackBase__)+(80);
      var $8=(__stackBase__)+(88);
      var $9=(__stackBase__)+(96);
      var $length;
      var $crAu;
      var $crBu;
      var $invMass;
      var $C;
      var $omega;
      var $d;
      var $k;
      var $h;
      var $P=(__stackBase__)+(104);
      var $10=(__stackBase__)+(112);
      var $11=(__stackBase__)+(120);
      $1=$this;
      $2=$data;
      var $12=$1;
      var $13=$12;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12+108)|0);
      HEAP32[(($18)>>2)]=$17;
      var $19=$12;
      var $20=(($19+52)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($12+112)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($12+140)|0);
      var $26=$12;
      var $27=(($26+48)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+28)|0);
      var $30=(($29)|0);
      var $31=$25;
      var $32=$30;
      assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];
      var $33=(($12+148)|0);
      var $34=$12;
      var $35=(($34+52)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+28)|0);
      var $38=(($37)|0);
      var $39=$33;
      var $40=$38;
      assert(8 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
      var $41=$12;
      var $42=(($41+48)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+120)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($12+156)|0);
      HEAPF32[(($46)>>2)]=$45;
      var $47=$12;
      var $48=(($47+52)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+120)|0);
      var $51=HEAPF32[(($50)>>2)];
      var $52=(($12+160)|0);
      HEAPF32[(($52)>>2)]=$51;
      var $53=$12;
      var $54=(($53+48)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+128)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=(($12+164)|0);
      HEAPF32[(($58)>>2)]=$57;
      var $59=$12;
      var $60=(($59+52)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+128)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=(($12+168)|0);
      HEAPF32[(($64)>>2)]=$63;
      var $65=(($12+108)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+((($66)*(12))&-1))|0);
      var $71=(($70)|0);
      var $72=$cA;
      var $73=$71;
      assert(8 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];
      var $74=(($12+108)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$2;
      var $77=(($76+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+((($75)*(12))&-1))|0);
      var $80=(($79+8)|0);
      var $81=HEAPF32[(($80)>>2)];
      $aA=$81;
      var $82=(($12+108)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$2;
      var $85=(($84+28)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+((($83)*(12))&-1))|0);
      var $88=(($87)|0);
      var $89=$vA;
      var $90=$88;
      assert(8 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];
      var $91=(($12+108)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$2;
      var $94=(($93+28)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+((($92)*(12))&-1))|0);
      var $97=(($96+8)|0);
      var $98=HEAPF32[(($97)>>2)];
      $wA=$98;
      var $99=(($12+112)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$2;
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+((($100)*(12))&-1))|0);
      var $105=(($104)|0);
      var $106=$cB;
      var $107=$105;
      assert(8 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];
      var $108=(($12+112)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$2;
      var $111=(($110+24)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+((($109)*(12))&-1))|0);
      var $114=(($113+8)|0);
      var $115=HEAPF32[(($114)>>2)];
      $aB=$115;
      var $116=(($12+112)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$2;
      var $119=(($118+28)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+((($117)*(12))&-1))|0);
      var $122=(($121)|0);
      var $123=$vB;
      var $124=$122;
      assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
      var $125=(($12+112)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$2;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+((($126)*(12))&-1))|0);
      var $131=(($130+8)|0);
      var $132=HEAPF32[(($131)>>2)];
      $wB=$132;
      var $133=$aA;
      __ZN5b2RotC1Ef($qA, $133);
      var $134=$aB;
      __ZN5b2RotC1Ef($qB, $134);
      var $135=(($12+124)|0);
      var $136=(($12+80)|0);
      var $137=(($12+140)|0);
      __ZmiRK6b2Vec2S1_($4, $136, $137);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $138=$135;
      var $139=$3;
      assert(8 % 1 === 0);HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[((($138)+(4))>>2)]=HEAP32[((($139)+(4))>>2)];
      var $140=(($12+132)|0);
      var $141=(($12+88)|0);
      var $142=(($12+148)|0);
      __ZmiRK6b2Vec2S1_($6, $141, $142);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $143=$140;
      var $144=$5;
      assert(8 % 1 === 0);HEAP32[(($143)>>2)]=HEAP32[(($144)>>2)];HEAP32[((($143)+(4))>>2)]=HEAP32[((($144)+(4))>>2)];
      var $145=(($12+116)|0);
      var $146=(($12+132)|0);
      __ZplRK6b2Vec2S1_($9, $cB, $146);
      __ZmiRK6b2Vec2S1_($8, $9, $cA);
      var $147=(($12+124)|0);
      __ZmiRK6b2Vec2S1_($7, $8, $147);
      var $148=$145;
      var $149=$7;
      assert(8 % 1 === 0);HEAP32[(($148)>>2)]=HEAP32[(($149)>>2)];HEAP32[((($148)+(4))>>2)]=HEAP32[((($149)+(4))>>2)];
      var $150=(($12+116)|0);
      var $151=__ZNK6b2Vec26LengthEv($150);
      $length=$151;
      var $152=$length;
      var $153=$152 > 0.004999999888241291;
      if ($153) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $155=(($12+116)|0);
      var $156=$length;
      var $157=(1)/($156);
      __ZN6b2Vec2mLEf($155, $157);
      label = 4; break;
    case 3: 
      var $159=(($12+116)|0);
      __ZN6b2Vec23SetEff($159, 0, 0);
      label = 4; break;
    case 4: 
      var $161=(($12+124)|0);
      var $162=(($12+116)|0);
      var $163=__Z7b2CrossRK6b2Vec2S1_($161, $162);
      $crAu=$163;
      var $164=(($12+132)|0);
      var $165=(($12+116)|0);
      var $166=__Z7b2CrossRK6b2Vec2S1_($164, $165);
      $crBu=$166;
      var $167=(($12+156)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=(($12+164)|0);
      var $170=HEAPF32[(($169)>>2)];
      var $171=$crAu;
      var $172=($170)*($171);
      var $173=$crAu;
      var $174=($172)*($173);
      var $175=($168)+($174);
      var $176=(($12+160)|0);
      var $177=HEAPF32[(($176)>>2)];
      var $178=($175)+($177);
      var $179=(($12+168)|0);
      var $180=HEAPF32[(($179)>>2)];
      var $181=$crBu;
      var $182=($180)*($181);
      var $183=$crBu;
      var $184=($182)*($183);
      var $185=($178)+($184);
      $invMass=$185;
      var $186=$invMass;
      var $187=$186 != 0;
      if ($187) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $189=$invMass;
      var $190=(1)/($189);
      var $193 = $190;label = 7; break;
    case 6: 
      var $193 = 0;label = 7; break;
    case 7: 
      var $193;
      var $194=(($12+172)|0);
      HEAPF32[(($194)>>2)]=$193;
      var $195=(($12+68)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=$196 > 0;
      if ($197) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $199=$length;
      var $200=(($12+104)|0);
      var $201=HEAPF32[(($200)>>2)];
      var $202=($199)-($201);
      $C=$202;
      var $203=(($12+68)|0);
      var $204=HEAPF32[(($203)>>2)];
      var $205=($204)*(6.2831854820251465);
      $omega=$205;
      var $206=(($12+172)|0);
      var $207=HEAPF32[(($206)>>2)];
      var $208=($207)*(2);
      var $209=(($12+72)|0);
      var $210=HEAPF32[(($209)>>2)];
      var $211=($208)*($210);
      var $212=$omega;
      var $213=($211)*($212);
      $d=$213;
      var $214=(($12+172)|0);
      var $215=HEAPF32[(($214)>>2)];
      var $216=$omega;
      var $217=($215)*($216);
      var $218=$omega;
      var $219=($217)*($218);
      $k=$219;
      var $220=$2;
      var $221=(($220)|0);
      var $222=(($221)|0);
      var $223=HEAPF32[(($222)>>2)];
      $h=$223;
      var $224=$h;
      var $225=$d;
      var $226=$h;
      var $227=$k;
      var $228=($226)*($227);
      var $229=($225)+($228);
      var $230=($224)*($229);
      var $231=(($12+96)|0);
      HEAPF32[(($231)>>2)]=$230;
      var $232=(($12+96)|0);
      var $233=HEAPF32[(($232)>>2)];
      var $234=$233 != 0;
      if ($234) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $236=(($12+96)|0);
      var $237=HEAPF32[(($236)>>2)];
      var $238=(1)/($237);
      var $241 = $238;label = 11; break;
    case 10: 
      var $241 = 0;label = 11; break;
    case 11: 
      var $241;
      var $242=(($12+96)|0);
      HEAPF32[(($242)>>2)]=$241;
      var $243=$C;
      var $244=$h;
      var $245=($243)*($244);
      var $246=$k;
      var $247=($245)*($246);
      var $248=(($12+96)|0);
      var $249=HEAPF32[(($248)>>2)];
      var $250=($247)*($249);
      var $251=(($12+76)|0);
      HEAPF32[(($251)>>2)]=$250;
      var $252=(($12+96)|0);
      var $253=HEAPF32[(($252)>>2)];
      var $254=$invMass;
      var $255=($254)+($253);
      $invMass=$255;
      var $256=$invMass;
      var $257=$256 != 0;
      if ($257) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $259=$invMass;
      var $260=(1)/($259);
      var $263 = $260;label = 14; break;
    case 13: 
      var $263 = 0;label = 14; break;
    case 14: 
      var $263;
      var $264=(($12+172)|0);
      HEAPF32[(($264)>>2)]=$263;
      label = 16; break;
    case 15: 
      var $266=(($12+96)|0);
      HEAPF32[(($266)>>2)]=0;
      var $267=(($12+76)|0);
      HEAPF32[(($267)>>2)]=0;
      label = 16; break;
    case 16: 
      var $269=$2;
      var $270=(($269)|0);
      var $271=(($270+20)|0);
      var $272=HEAP8[($271)];
      var $273=(($272) & 1);
      if ($273) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $275=$2;
      var $276=(($275)|0);
      var $277=(($276+8)|0);
      var $278=HEAPF32[(($277)>>2)];
      var $279=(($12+100)|0);
      var $280=HEAPF32[(($279)>>2)];
      var $281=($280)*($278);
      HEAPF32[(($279)>>2)]=$281;
      var $282=(($12+100)|0);
      var $283=HEAPF32[(($282)>>2)];
      var $284=(($12+116)|0);
      __ZmlfRK6b2Vec2($P, $283, $284);
      var $285=(($12+156)|0);
      var $286=HEAPF32[(($285)>>2)];
      __ZmlfRK6b2Vec2($10, $286, $P);
      __ZN6b2Vec2mIERKS_($vA, $10);
      var $287=(($12+164)|0);
      var $288=HEAPF32[(($287)>>2)];
      var $289=(($12+124)|0);
      var $290=__Z7b2CrossRK6b2Vec2S1_($289, $P);
      var $291=($288)*($290);
      var $292=$wA;
      var $293=($292)-($291);
      $wA=$293;
      var $294=(($12+160)|0);
      var $295=HEAPF32[(($294)>>2)];
      __ZmlfRK6b2Vec2($11, $295, $P);
      __ZN6b2Vec2pLERKS_($vB, $11);
      var $296=(($12+168)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=(($12+132)|0);
      var $299=__Z7b2CrossRK6b2Vec2S1_($298, $P);
      var $300=($297)*($299);
      var $301=$wB;
      var $302=($301)+($300);
      $wB=$302;
      label = 19; break;
    case 18: 
      var $304=(($12+100)|0);
      HEAPF32[(($304)>>2)]=0;
      label = 19; break;
    case 19: 
      var $306=(($12+108)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=$2;
      var $309=(($308+28)|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=(($310+((($307)*(12))&-1))|0);
      var $312=(($311)|0);
      var $313=$312;
      var $314=$vA;
      assert(8 % 1 === 0);HEAP32[(($313)>>2)]=HEAP32[(($314)>>2)];HEAP32[((($313)+(4))>>2)]=HEAP32[((($314)+(4))>>2)];
      var $315=$wA;
      var $316=(($12+108)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=$2;
      var $319=(($318+28)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+((($317)*(12))&-1))|0);
      var $322=(($321+8)|0);
      HEAPF32[(($322)>>2)]=$315;
      var $323=(($12+112)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=$2;
      var $326=(($325+28)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327+((($324)*(12))&-1))|0);
      var $329=(($328)|0);
      var $330=$329;
      var $331=$vB;
      assert(8 % 1 === 0);HEAP32[(($330)>>2)]=HEAP32[(($331)>>2)];HEAP32[((($330)+(4))>>2)]=HEAP32[((($331)+(4))>>2)];
      var $332=$wB;
      var $333=(($12+112)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=$2;
      var $336=(($335+28)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337+((($334)*(12))&-1))|0);
      var $339=(($338+8)|0);
      HEAPF32[(($339)>>2)]=$332;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN5b2RotC1Ef($this, $angle) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$angle;
  var $3=$1;
  var $4=$2;
  __ZN5b2RotC2Ef($3, $4);
  return;
}
function __ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $vA=__stackBase__;
  var $wA;
  var $vB=(__stackBase__)+(8);
  var $wB;
  var $vpA=(__stackBase__)+(16);
  var $3=(__stackBase__)+(24);
  var $vpB=(__stackBase__)+(32);
  var $4=(__stackBase__)+(40);
  var $Cdot;
  var $5=(__stackBase__)+(48);
  var $impulse;
  var $P=(__stackBase__)+(56);
  var $6=(__stackBase__)+(64);
  var $7=(__stackBase__)+(72);
  $1=$this;
  $2=$data;
  var $8=$1;
  var $9=(($8+108)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=(($11+28)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13+((($10)*(12))&-1))|0);
  var $15=(($14)|0);
  var $16=$vA;
  var $17=$15;
  assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
  var $18=(($8+108)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+28)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=(($22+((($19)*(12))&-1))|0);
  var $24=(($23+8)|0);
  var $25=HEAPF32[(($24)>>2)];
  $wA=$25;
  var $26=(($8+112)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$2;
  var $29=(($28+28)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=(($30+((($27)*(12))&-1))|0);
  var $32=(($31)|0);
  var $33=$vB;
  var $34=$32;
  assert(8 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
  var $35=(($8+112)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=$2;
  var $38=(($37+28)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=(($39+((($36)*(12))&-1))|0);
  var $41=(($40+8)|0);
  var $42=HEAPF32[(($41)>>2)];
  $wB=$42;
  var $43=$wA;
  var $44=(($8+124)|0);
  __Z7b2CrossfRK6b2Vec2($3, $43, $44);
  __ZplRK6b2Vec2S1_($vpA, $vA, $3);
  var $45=$wB;
  var $46=(($8+132)|0);
  __Z7b2CrossfRK6b2Vec2($4, $45, $46);
  __ZplRK6b2Vec2S1_($vpB, $vB, $4);
  var $47=(($8+116)|0);
  __ZmiRK6b2Vec2S1_($5, $vpB, $vpA);
  var $48=__Z5b2DotRK6b2Vec2S1_($47, $5);
  $Cdot=$48;
  var $49=(($8+172)|0);
  var $50=HEAPF32[(($49)>>2)];
  var $51=(-$50);
  var $52=$Cdot;
  var $53=(($8+76)|0);
  var $54=HEAPF32[(($53)>>2)];
  var $55=($52)+($54);
  var $56=(($8+96)|0);
  var $57=HEAPF32[(($56)>>2)];
  var $58=(($8+100)|0);
  var $59=HEAPF32[(($58)>>2)];
  var $60=($57)*($59);
  var $61=($55)+($60);
  var $62=($51)*($61);
  $impulse=$62;
  var $63=$impulse;
  var $64=(($8+100)|0);
  var $65=HEAPF32[(($64)>>2)];
  var $66=($65)+($63);
  HEAPF32[(($64)>>2)]=$66;
  var $67=$impulse;
  var $68=(($8+116)|0);
  __ZmlfRK6b2Vec2($P, $67, $68);
  var $69=(($8+156)|0);
  var $70=HEAPF32[(($69)>>2)];
  __ZmlfRK6b2Vec2($6, $70, $P);
  __ZN6b2Vec2mIERKS_($vA, $6);
  var $71=(($8+164)|0);
  var $72=HEAPF32[(($71)>>2)];
  var $73=(($8+124)|0);
  var $74=__Z7b2CrossRK6b2Vec2S1_($73, $P);
  var $75=($72)*($74);
  var $76=$wA;
  var $77=($76)-($75);
  $wA=$77;
  var $78=(($8+160)|0);
  var $79=HEAPF32[(($78)>>2)];
  __ZmlfRK6b2Vec2($7, $79, $P);
  __ZN6b2Vec2pLERKS_($vB, $7);
  var $80=(($8+168)|0);
  var $81=HEAPF32[(($80)>>2)];
  var $82=(($8+132)|0);
  var $83=__Z7b2CrossRK6b2Vec2S1_($82, $P);
  var $84=($81)*($83);
  var $85=$wB;
  var $86=($85)+($84);
  $wB=$86;
  var $87=(($8+108)|0);
  var $88=HEAP32[(($87)>>2)];
  var $89=$2;
  var $90=(($89+28)|0);
  var $91=HEAP32[(($90)>>2)];
  var $92=(($91+((($88)*(12))&-1))|0);
  var $93=(($92)|0);
  var $94=$93;
  var $95=$vA;
  assert(8 % 1 === 0);HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($95)+(4))>>2)];
  var $96=$wA;
  var $97=(($8+108)|0);
  var $98=HEAP32[(($97)>>2)];
  var $99=$2;
  var $100=(($99+28)|0);
  var $101=HEAP32[(($100)>>2)];
  var $102=(($101+((($98)*(12))&-1))|0);
  var $103=(($102+8)|0);
  HEAPF32[(($103)>>2)]=$96;
  var $104=(($8+112)|0);
  var $105=HEAP32[(($104)>>2)];
  var $106=$2;
  var $107=(($106+28)|0);
  var $108=HEAP32[(($107)>>2)];
  var $109=(($108+((($105)*(12))&-1))|0);
  var $110=(($109)|0);
  var $111=$110;
  var $112=$vB;
  assert(8 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];
  var $113=$wB;
  var $114=(($8+112)|0);
  var $115=HEAP32[(($114)>>2)];
  var $116=$2;
  var $117=(($116+28)|0);
  var $118=HEAP32[(($117)>>2)];
  var $119=(($118+((($115)*(12))&-1))|0);
  var $120=(($119+8)|0);
  HEAPF32[(($120)>>2)]=$113;
  STACKTOP = __stackBase__;
  return;
}
function __ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cA=__stackBase__;
      var $aA;
      var $cB=(__stackBase__)+(8);
      var $aB;
      var $qA=(__stackBase__)+(16);
      var $qB=(__stackBase__)+(24);
      var $rA=(__stackBase__)+(32);
      var $4=(__stackBase__)+(40);
      var $rB=(__stackBase__)+(48);
      var $5=(__stackBase__)+(56);
      var $u=(__stackBase__)+(64);
      var $6=(__stackBase__)+(72);
      var $7=(__stackBase__)+(80);
      var $length;
      var $C;
      var $impulse;
      var $P=(__stackBase__)+(88);
      var $8=(__stackBase__)+(96);
      var $9=(__stackBase__)+(104);
      $2=$this;
      $3=$data;
      var $10=$2;
      var $11=(($10+68)|0);
      var $12=HEAPF32[(($11)>>2)];
      var $13=$12 > 0;
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 4; break;
    case 3: 
      var $16=(($10+108)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$3;
      var $19=(($18+24)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+((($17)*(12))&-1))|0);
      var $22=(($21)|0);
      var $23=$cA;
      var $24=$22;
      assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=(($10+108)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$3;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+((($26)*(12))&-1))|0);
      var $31=(($30+8)|0);
      var $32=HEAPF32[(($31)>>2)];
      $aA=$32;
      var $33=(($10+112)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$3;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+((($34)*(12))&-1))|0);
      var $39=(($38)|0);
      var $40=$cB;
      var $41=$39;
      assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
      var $42=(($10+112)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$3;
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+((($43)*(12))&-1))|0);
      var $48=(($47+8)|0);
      var $49=HEAPF32[(($48)>>2)];
      $aB=$49;
      var $50=$aA;
      __ZN5b2RotC1Ef($qA, $50);
      var $51=$aB;
      __ZN5b2RotC1Ef($qB, $51);
      var $52=(($10+80)|0);
      var $53=(($10+140)|0);
      __ZmiRK6b2Vec2S1_($4, $52, $53);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $4);
      var $54=(($10+88)|0);
      var $55=(($10+148)|0);
      __ZmiRK6b2Vec2S1_($5, $54, $55);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $5);
      __ZplRK6b2Vec2S1_($7, $cB, $rB);
      __ZmiRK6b2Vec2S1_($6, $7, $cA);
      __ZmiRK6b2Vec2S1_($u, $6, $rA);
      var $56=__ZN6b2Vec29NormalizeEv($u);
      $length=$56;
      var $57=$length;
      var $58=(($10+104)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=($57)-($59);
      $C=$60;
      var $61=$C;
      var $62=__Z7b2ClampIfET_S0_S0_S0_($61, -0.20000000298023224, 0.20000000298023224);
      $C=$62;
      var $63=(($10+172)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=(-$64);
      var $66=$C;
      var $67=($65)*($66);
      $impulse=$67;
      var $68=$impulse;
      __ZmlfRK6b2Vec2($P, $68, $u);
      var $69=(($10+156)|0);
      var $70=HEAPF32[(($69)>>2)];
      __ZmlfRK6b2Vec2($8, $70, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $71=(($10+164)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $74=($72)*($73);
      var $75=$aA;
      var $76=($75)-($74);
      $aA=$76;
      var $77=(($10+160)|0);
      var $78=HEAPF32[(($77)>>2)];
      __ZmlfRK6b2Vec2($9, $78, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $79=(($10+168)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $82=($80)*($81);
      var $83=$aB;
      var $84=($83)+($82);
      $aB=$84;
      var $85=(($10+108)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$3;
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+((($86)*(12))&-1))|0);
      var $91=(($90)|0);
      var $92=$91;
      var $93=$cA;
      assert(8 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];
      var $94=$aA;
      var $95=(($10+108)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$3;
      var $98=(($97+24)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+((($96)*(12))&-1))|0);
      var $101=(($100+8)|0);
      HEAPF32[(($101)>>2)]=$94;
      var $102=(($10+112)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$3;
      var $105=(($104+24)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+((($103)*(12))&-1))|0);
      var $108=(($107)|0);
      var $109=$108;
      var $110=$cB;
      assert(8 % 1 === 0);HEAP32[(($109)>>2)]=HEAP32[(($110)>>2)];HEAP32[((($109)+(4))>>2)]=HEAP32[((($110)+(4))>>2)];
      var $111=$aB;
      var $112=(($10+112)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$3;
      var $115=(($114+24)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+((($113)*(12))&-1))|0);
      var $118=(($117+8)|0);
      HEAPF32[(($118)>>2)]=$111;
      var $119=$C;
      var $120=__Z5b2AbsIfET_S0_($119);
      var $121=$120 < 0.004999999888241291;
      $1=$121;
      label = 4; break;
    case 4: 
      var $123=$1;
      STACKTOP = __stackBase__;
      return $123;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK15b2DistanceJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+80)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $this, $localPoint) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$localPoint;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  __Z5b2MulRK11b2TransformRK6b2Vec2($agg_result, $4, $5);
  return;
}
function __ZNK15b2DistanceJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+88)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK15b2DistanceJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+100)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  var $8=(($3+116)|0);
  __ZmlfRK6b2Vec2($agg_result, $7, $8);
  return;
}
function __ZN15b2DistanceJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5252176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5256540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5253644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5251320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+80)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+80)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5250172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+88)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+88)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5249472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+104)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((5248792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$38,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $39=(($2+68)|0);
  var $40=HEAPF32[(($39)>>2)];
  var $41=$40;
  __Z5b2LogPKcz(((5248248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$41,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $42=(($2+72)|0);
  var $43=HEAPF32[(($42)>>2)];
  var $44=$43;
  __Z5b2LogPKcz(((5247748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$44,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $45=$2;
  var $46=(($45+56)|0);
  var $47=HEAP32[(($46)>>2)];
  __Z5b2LogPKcz(((5247328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$47,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN15b2DistanceJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2DistanceJointD2Ev($2);
  return;
}
function __ZN15b2DistanceJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2DistanceJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2DistanceJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN5b2RotC2Ef($this, $angle) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$angle;
  var $3=$1;
  var $4=$2;
  var $5=Math.sin($4);
  var $6=(($3)|0);
  HEAPF32[(($6)>>2)]=$5;
  var $7=$2;
  var $8=Math.cos($7);
  var $9=(($3+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  return;
}
function __ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  return 1;
}
function __ZNK15b2FrictionJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+92)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  return $7;
}
function __ZNK15b2FrictionJoint11GetMaxForceEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+96)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK15b2FrictionJoint12GetMaxTorqueEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+100)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN18b2FrictionJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  var $6=(__stackBase__)+(8);
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  var $7=$1;
  var $8=$2;
  var $9=$7;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$3;
  var $12=$7;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=(($7+20)|0);
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $17, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
  var $21=(($7+28)|0);
  var $22=$7;
  var $23=(($22+12)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $24, $25);
  var $26=$21;
  var $27=$6;
  assert(8 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function __ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $aA;
      var $vA=__stackBase__;
      var $wA;
      var $aB;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $qA=(__stackBase__)+(16);
      var $qB=(__stackBase__)+(24);
      var $3=(__stackBase__)+(32);
      var $4=(__stackBase__)+(40);
      var $5=(__stackBase__)+(48);
      var $6=(__stackBase__)+(56);
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $K=(__stackBase__)+(64);
      var $7=(__stackBase__)+(80);
      var $P=(__stackBase__)+(96);
      var $8=(__stackBase__)+(104);
      var $9=(__stackBase__)+(112);
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=$10;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($10+104)|0);
      HEAP32[(($16)>>2)]=$15;
      var $17=$10;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($10+108)|0);
      HEAP32[(($22)>>2)]=$21;
      var $23=(($10+128)|0);
      var $24=$10;
      var $25=(($24+48)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+28)|0);
      var $28=(($27)|0);
      var $29=$23;
      var $30=$28;
      assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
      var $31=(($10+136)|0);
      var $32=$10;
      var $33=(($32+52)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+28)|0);
      var $36=(($35)|0);
      var $37=$31;
      var $38=$36;
      assert(8 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];
      var $39=$10;
      var $40=(($39+48)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+120)|0);
      var $43=HEAPF32[(($42)>>2)];
      var $44=(($10+144)|0);
      HEAPF32[(($44)>>2)]=$43;
      var $45=$10;
      var $46=(($45+52)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+120)|0);
      var $49=HEAPF32[(($48)>>2)];
      var $50=(($10+148)|0);
      HEAPF32[(($50)>>2)]=$49;
      var $51=$10;
      var $52=(($51+48)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+128)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=(($10+152)|0);
      HEAPF32[(($56)>>2)]=$55;
      var $57=$10;
      var $58=(($57+52)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+128)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($10+156)|0);
      HEAPF32[(($62)>>2)]=$61;
      var $63=(($10+104)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$2;
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+((($64)*(12))&-1))|0);
      var $69=(($68+8)|0);
      var $70=HEAPF32[(($69)>>2)];
      $aA=$70;
      var $71=(($10+104)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+28)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+((($72)*(12))&-1))|0);
      var $77=(($76)|0);
      var $78=$vA;
      var $79=$77;
      assert(8 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];
      var $80=(($10+104)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$2;
      var $83=(($82+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+((($81)*(12))&-1))|0);
      var $86=(($85+8)|0);
      var $87=HEAPF32[(($86)>>2)];
      $wA=$87;
      var $88=(($10+108)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$2;
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+((($89)*(12))&-1))|0);
      var $94=(($93+8)|0);
      var $95=HEAPF32[(($94)>>2)];
      $aB=$95;
      var $96=(($10+108)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$2;
      var $99=(($98+28)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+((($97)*(12))&-1))|0);
      var $102=(($101)|0);
      var $103=$vB;
      var $104=$102;
      assert(8 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
      var $105=(($10+108)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=(($107+28)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+((($106)*(12))&-1))|0);
      var $111=(($110+8)|0);
      var $112=HEAPF32[(($111)>>2)];
      $wB=$112;
      var $113=$aA;
      __ZN5b2RotC1Ef($qA, $113);
      var $114=$aB;
      __ZN5b2RotC1Ef($qB, $114);
      var $115=(($10+112)|0);
      var $116=(($10+68)|0);
      var $117=(($10+128)|0);
      __ZmiRK6b2Vec2S1_($4, $116, $117);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $118=$115;
      var $119=$3;
      assert(8 % 1 === 0);HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[((($118)+(4))>>2)]=HEAP32[((($119)+(4))>>2)];
      var $120=(($10+120)|0);
      var $121=(($10+76)|0);
      var $122=(($10+136)|0);
      __ZmiRK6b2Vec2S1_($6, $121, $122);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $123=$120;
      var $124=$5;
      assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
      var $125=(($10+144)|0);
      var $126=HEAPF32[(($125)>>2)];
      $mA=$126;
      var $127=(($10+148)|0);
      var $128=HEAPF32[(($127)>>2)];
      $mB=$128;
      var $129=(($10+152)|0);
      var $130=HEAPF32[(($129)>>2)];
      $iA=$130;
      var $131=(($10+156)|0);
      var $132=HEAPF32[(($131)>>2)];
      $iB=$132;
      __ZN7b2Mat22C1Ev($K);
      var $133=$mA;
      var $134=$mB;
      var $135=($133)+($134);
      var $136=$iA;
      var $137=(($10+112)|0);
      var $138=(($137+4)|0);
      var $139=HEAPF32[(($138)>>2)];
      var $140=($136)*($139);
      var $141=(($10+112)|0);
      var $142=(($141+4)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=($140)*($143);
      var $145=($135)+($144);
      var $146=$iB;
      var $147=(($10+120)|0);
      var $148=(($147+4)|0);
      var $149=HEAPF32[(($148)>>2)];
      var $150=($146)*($149);
      var $151=(($10+120)|0);
      var $152=(($151+4)|0);
      var $153=HEAPF32[(($152)>>2)];
      var $154=($150)*($153);
      var $155=($145)+($154);
      var $156=(($K)|0);
      var $157=(($156)|0);
      HEAPF32[(($157)>>2)]=$155;
      var $158=$iA;
      var $159=(-$158);
      var $160=(($10+112)|0);
      var $161=(($160)|0);
      var $162=HEAPF32[(($161)>>2)];
      var $163=($159)*($162);
      var $164=(($10+112)|0);
      var $165=(($164+4)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=($163)*($166);
      var $168=$iB;
      var $169=(($10+120)|0);
      var $170=(($169)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=($168)*($171);
      var $173=(($10+120)|0);
      var $174=(($173+4)|0);
      var $175=HEAPF32[(($174)>>2)];
      var $176=($172)*($175);
      var $177=($167)-($176);
      var $178=(($K)|0);
      var $179=(($178+4)|0);
      HEAPF32[(($179)>>2)]=$177;
      var $180=(($K)|0);
      var $181=(($180+4)|0);
      var $182=HEAPF32[(($181)>>2)];
      var $183=(($K+8)|0);
      var $184=(($183)|0);
      HEAPF32[(($184)>>2)]=$182;
      var $185=$mA;
      var $186=$mB;
      var $187=($185)+($186);
      var $188=$iA;
      var $189=(($10+112)|0);
      var $190=(($189)|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=($188)*($191);
      var $193=(($10+112)|0);
      var $194=(($193)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=($192)*($195);
      var $197=($187)+($196);
      var $198=$iB;
      var $199=(($10+120)|0);
      var $200=(($199)|0);
      var $201=HEAPF32[(($200)>>2)];
      var $202=($198)*($201);
      var $203=(($10+120)|0);
      var $204=(($203)|0);
      var $205=HEAPF32[(($204)>>2)];
      var $206=($202)*($205);
      var $207=($197)+($206);
      var $208=(($K+8)|0);
      var $209=(($208+4)|0);
      HEAPF32[(($209)>>2)]=$207;
      var $210=(($10+160)|0);
      __ZNK7b2Mat2210GetInverseEv($7, $K);
      var $211=$210;
      var $212=$7;
      assert(16 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($212)+(4))>>2)];HEAP32[((($211)+(8))>>2)]=HEAP32[((($212)+(8))>>2)];HEAP32[((($211)+(12))>>2)]=HEAP32[((($212)+(12))>>2)];
      var $213=$iA;
      var $214=$iB;
      var $215=($213)+($214);
      var $216=(($10+176)|0);
      HEAPF32[(($216)>>2)]=$215;
      var $217=(($10+176)|0);
      var $218=HEAPF32[(($217)>>2)];
      var $219=$218 > 0;
      if ($219) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $221=(($10+176)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=(1)/($222);
      var $224=(($10+176)|0);
      HEAPF32[(($224)>>2)]=$223;
      label = 3; break;
    case 3: 
      var $226=$2;
      var $227=(($226)|0);
      var $228=(($227+20)|0);
      var $229=HEAP8[($228)];
      var $230=(($229) & 1);
      if ($230) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $232=(($10+84)|0);
      var $233=$2;
      var $234=(($233)|0);
      var $235=(($234+8)|0);
      var $236=HEAPF32[(($235)>>2)];
      __ZN6b2Vec2mLEf($232, $236);
      var $237=$2;
      var $238=(($237)|0);
      var $239=(($238+8)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=(($10+92)|0);
      var $242=HEAPF32[(($241)>>2)];
      var $243=($242)*($240);
      HEAPF32[(($241)>>2)]=$243;
      var $244=(($10+84)|0);
      var $245=(($244)|0);
      var $246=HEAPF32[(($245)>>2)];
      var $247=(($10+84)|0);
      var $248=(($247+4)|0);
      var $249=HEAPF32[(($248)>>2)];
      __ZN6b2Vec2C1Eff($P, $246, $249);
      var $250=$mA;
      __ZmlfRK6b2Vec2($8, $250, $P);
      __ZN6b2Vec2mIERKS_($vA, $8);
      var $251=$iA;
      var $252=(($10+112)|0);
      var $253=__Z7b2CrossRK6b2Vec2S1_($252, $P);
      var $254=(($10+92)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=($253)+($255);
      var $257=($251)*($256);
      var $258=$wA;
      var $259=($258)-($257);
      $wA=$259;
      var $260=$mB;
      __ZmlfRK6b2Vec2($9, $260, $P);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $261=$iB;
      var $262=(($10+120)|0);
      var $263=__Z7b2CrossRK6b2Vec2S1_($262, $P);
      var $264=(($10+92)|0);
      var $265=HEAPF32[(($264)>>2)];
      var $266=($263)+($265);
      var $267=($261)*($266);
      var $268=$wB;
      var $269=($268)+($267);
      $wB=$269;
      label = 6; break;
    case 5: 
      var $271=(($10+84)|0);
      __ZN6b2Vec27SetZeroEv($271);
      var $272=(($10+92)|0);
      HEAPF32[(($272)>>2)]=0;
      label = 6; break;
    case 6: 
      var $274=(($10+104)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=$2;
      var $277=(($276+28)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+((($275)*(12))&-1))|0);
      var $280=(($279)|0);
      var $281=$280;
      var $282=$vA;
      assert(8 % 1 === 0);HEAP32[(($281)>>2)]=HEAP32[(($282)>>2)];HEAP32[((($281)+(4))>>2)]=HEAP32[((($282)+(4))>>2)];
      var $283=$wA;
      var $284=(($10+104)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$2;
      var $287=(($286+28)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=(($288+((($285)*(12))&-1))|0);
      var $290=(($289+8)|0);
      HEAPF32[(($290)>>2)]=$283;
      var $291=(($10+108)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=$2;
      var $294=(($293+28)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=(($295+((($292)*(12))&-1))|0);
      var $297=(($296)|0);
      var $298=$297;
      var $299=$vB;
      assert(8 % 1 === 0);HEAP32[(($298)>>2)]=HEAP32[(($299)>>2)];HEAP32[((($298)+(4))>>2)]=HEAP32[((($299)+(4))>>2)];
      var $300=$wB;
      var $301=(($10+108)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=$2;
      var $304=(($303+28)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=(($305+((($302)*(12))&-1))|0);
      var $307=(($306+8)|0);
      HEAPF32[(($307)>>2)]=$300;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $h;
      var $Cdot;
      var $impulse;
      var $oldImpulse;
      var $maxImpulse;
      var $Cdot1=(__stackBase__)+(16);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(32);
      var $5=(__stackBase__)+(40);
      var $6=(__stackBase__)+(48);
      var $impulse2=(__stackBase__)+(56);
      var $7=(__stackBase__)+(64);
      var $oldImpulse3=(__stackBase__)+(72);
      var $maxImpulse4;
      var $8=(__stackBase__)+(80);
      var $9=(__stackBase__)+(88);
      var $10=(__stackBase__)+(96);
      $1=$this;
      $2=$data;
      var $11=$1;
      var $12=(($11+104)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+((($13)*(12))&-1))|0);
      var $18=(($17)|0);
      var $19=$vA;
      var $20=$18;
      assert(8 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
      var $21=(($11+104)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$2;
      var $24=(($23+28)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+((($22)*(12))&-1))|0);
      var $27=(($26+8)|0);
      var $28=HEAPF32[(($27)>>2)];
      $wA=$28;
      var $29=(($11+108)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=(($31+28)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+((($30)*(12))&-1))|0);
      var $35=(($34)|0);
      var $36=$vB;
      var $37=$35;
      assert(8 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
      var $38=(($11+108)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$2;
      var $41=(($40+28)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+((($39)*(12))&-1))|0);
      var $44=(($43+8)|0);
      var $45=HEAPF32[(($44)>>2)];
      $wB=$45;
      var $46=(($11+144)|0);
      var $47=HEAPF32[(($46)>>2)];
      $mA=$47;
      var $48=(($11+148)|0);
      var $49=HEAPF32[(($48)>>2)];
      $mB=$49;
      var $50=(($11+152)|0);
      var $51=HEAPF32[(($50)>>2)];
      $iA=$51;
      var $52=(($11+156)|0);
      var $53=HEAPF32[(($52)>>2)];
      $iB=$53;
      var $54=$2;
      var $55=(($54)|0);
      var $56=(($55)|0);
      var $57=HEAPF32[(($56)>>2)];
      $h=$57;
      var $58=$wB;
      var $59=$wA;
      var $60=($58)-($59);
      $Cdot=$60;
      var $61=(($11+176)|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=(-$62);
      var $64=$Cdot;
      var $65=($63)*($64);
      $impulse=$65;
      var $66=(($11+92)|0);
      var $67=HEAPF32[(($66)>>2)];
      $oldImpulse=$67;
      var $68=$h;
      var $69=(($11+100)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=($68)*($70);
      $maxImpulse=$71;
      var $72=(($11+92)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$impulse;
      var $75=($73)+($74);
      var $76=$maxImpulse;
      var $77=(-$76);
      var $78=$maxImpulse;
      var $79=__Z7b2ClampIfET_S0_S0_S0_($75, $77, $78);
      var $80=(($11+92)|0);
      HEAPF32[(($80)>>2)]=$79;
      var $81=(($11+92)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$oldImpulse;
      var $84=($82)-($83);
      $impulse=$84;
      var $85=$iA;
      var $86=$impulse;
      var $87=($85)*($86);
      var $88=$wA;
      var $89=($88)-($87);
      $wA=$89;
      var $90=$iB;
      var $91=$impulse;
      var $92=($90)*($91);
      var $93=$wB;
      var $94=($93)+($92);
      $wB=$94;
      var $95=$wB;
      var $96=(($11+120)|0);
      __Z7b2CrossfRK6b2Vec2($5, $95, $96);
      __ZplRK6b2Vec2S1_($4, $vB, $5);
      __ZmiRK6b2Vec2S1_($3, $4, $vA);
      var $97=$wA;
      var $98=(($11+112)|0);
      __Z7b2CrossfRK6b2Vec2($6, $97, $98);
      __ZmiRK6b2Vec2S1_($Cdot1, $3, $6);
      var $99=(($11+160)|0);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($7, $99, $Cdot1);
      __ZNK6b2Vec2ngEv($impulse2, $7);
      var $100=(($11+84)|0);
      var $101=$oldImpulse3;
      var $102=$100;
      assert(8 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];
      var $103=(($11+84)|0);
      __ZN6b2Vec2pLERKS_($103, $impulse2);
      var $104=$h;
      var $105=(($11+96)|0);
      var $106=HEAPF32[(($105)>>2)];
      var $107=($104)*($106);
      $maxImpulse4=$107;
      var $108=(($11+84)|0);
      var $109=__ZNK6b2Vec213LengthSquaredEv($108);
      var $110=$maxImpulse4;
      var $111=$maxImpulse4;
      var $112=($110)*($111);
      var $113=$109 > $112;
      if ($113) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $115=(($11+84)|0);
      var $116=__ZN6b2Vec29NormalizeEv($115);
      var $117=(($11+84)|0);
      var $118=$maxImpulse4;
      __ZN6b2Vec2mLEf($117, $118);
      label = 3; break;
    case 3: 
      var $120=(($11+84)|0);
      __ZmiRK6b2Vec2S1_($8, $120, $oldImpulse3);
      var $121=$impulse2;
      var $122=$8;
      assert(8 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
      var $123=$mA;
      __ZmlfRK6b2Vec2($9, $123, $impulse2);
      __ZN6b2Vec2mIERKS_($vA, $9);
      var $124=$iA;
      var $125=(($11+112)|0);
      var $126=__Z7b2CrossRK6b2Vec2S1_($125, $impulse2);
      var $127=($124)*($126);
      var $128=$wA;
      var $129=($128)-($127);
      $wA=$129;
      var $130=$mB;
      __ZmlfRK6b2Vec2($10, $130, $impulse2);
      __ZN6b2Vec2pLERKS_($vB, $10);
      var $131=$iB;
      var $132=(($11+120)|0);
      var $133=__Z7b2CrossRK6b2Vec2S1_($132, $impulse2);
      var $134=($131)*($133);
      var $135=$wB;
      var $136=($135)+($134);
      $wB=$136;
      var $137=(($11+104)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$2;
      var $140=(($139+28)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+((($138)*(12))&-1))|0);
      var $143=(($142)|0);
      var $144=$143;
      var $145=$vA;
      assert(8 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];
      var $146=$wA;
      var $147=(($11+104)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$2;
      var $150=(($149+28)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151+((($148)*(12))&-1))|0);
      var $153=(($152+8)|0);
      HEAPF32[(($153)>>2)]=$146;
      var $154=(($11+108)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$2;
      var $157=(($156+28)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158+((($155)*(12))&-1))|0);
      var $160=(($159)|0);
      var $161=$160;
      var $162=$vB;
      assert(8 % 1 === 0);HEAP32[(($161)>>2)]=HEAP32[(($162)>>2)];HEAP32[((($161)+(4))>>2)]=HEAP32[((($162)+(4))>>2)];
      var $163=$wB;
      var $164=(($11+108)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=$2;
      var $167=(($166+28)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+((($165)*(12))&-1))|0);
      var $170=(($169+8)|0);
      HEAPF32[(($170)>>2)]=$163;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK15b2FrictionJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK15b2FrictionJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK15b2FrictionJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+84)|0);
  __ZmlfRK6b2Vec2($agg_result, $4, $5);
  return;
}
function __ZN15b2FrictionJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5251292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5250144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5249444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5248756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5248204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5247704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+96)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((5247300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$38,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $39=(($2+100)|0);
  var $40=HEAPF32[(($39)>>2)];
  var $41=$40;
  __Z5b2LogPKcz(((5257920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$41,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $42=$2;
  var $43=(($42+56)|0);
  var $44=HEAP32[(($43)>>2)];
  __Z5b2LogPKcz(((5257520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$44,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN15b2FrictionJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2FrictionJointD2Ev($2);
  return;
}
function __ZN15b2FrictionJointC2EPK18b2FrictionJointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((5264904)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $14=(($5+84)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $16=(($5+112)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $18=(($5+120)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $20=(($5+128)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $22=(($5+136)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $24=(($5+160)|0);
      (function() { try { __THREW__ = 0; return __ZN7b2Mat22C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $26=(($5+68)|0);
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=$26;
      var $30=$28;
      assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
      var $31=(($5+76)|0);
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=(($5+84)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $38=(($5+92)|0);
      HEAPF32[(($38)>>2)]=0;
      var $39=$2;
      var $40=(($39+36)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42=(($5+96)|0);
      HEAPF32[(($42)>>2)]=$41;
      var $43=$2;
      var $44=(($43+40)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($5+100)|0);
      HEAPF32[(($46)>>2)]=$45;
      return;
    case 11: 
      var $48$0 = ___cxa_find_matching_catch(-1, -1); $48$1 = tempRet0;
      var $49=$48$0;
      $3=$49;
      var $50=$48$1;
      $4=$50;
      var $51=$5;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $54=$3;
      var $55=$4;
      var $56$0=$54;
      var $56$1=0;
      var $57$0=$56$0;
      var $57$1=$55;
      ___resumeException($57$0)
    case 14: 
      var $59$0 = ___cxa_find_matching_catch(-1, -1,0); $59$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2FrictionJoint11SetMaxForceEf($this, $force) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$force;
      var $3=$1;
      var $4=$2;
      var $5=__Z9b2IsValidf($4);
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$2;
      var $8=$7 >= 0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5251916)|0), 217, ((5262760)|0), ((5256492)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $13=$2;
      var $14=(($3+96)|0);
      HEAPF32[(($14)>>2)]=$13;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2FrictionJoint12SetMaxTorqueEf($this, $torque) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$torque;
      var $3=$1;
      var $4=$2;
      var $5=__Z9b2IsValidf($4);
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$2;
      var $8=$7 >= 0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5251916)|0), 228, ((5262716)|0), ((5253608)|0));
      throw "Reached an unreachable!"
      label = 5; break;
    case 5: 
      var $13=$2;
      var $14=(($3+100)|0);
      HEAPF32[(($14)>>2)]=$13;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2FrictionJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2FrictionJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2FrictionJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN11b2GearJointC2EPK14b2GearJointDef($this, $def) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 160)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $coordinateA;
      var $coordinateB;
      var $xfA=__stackBase__;
      var $aA;
      var $xfC=(__stackBase__)+(16);
      var $aC;
      var $revolute;
      var $prismatic;
      var $pC=(__stackBase__)+(32);
      var $pA=(__stackBase__)+(40);
      var $5=(__stackBase__)+(48);
      var $6=(__stackBase__)+(56);
      var $7=(__stackBase__)+(64);
      var $8=(__stackBase__)+(72);
      var $xfB=(__stackBase__)+(80);
      var $aB;
      var $xfD=(__stackBase__)+(96);
      var $aD;
      var $revolute1;
      var $prismatic2;
      var $pD=(__stackBase__)+(112);
      var $pB=(__stackBase__)+(120);
      var $9=(__stackBase__)+(128);
      var $10=(__stackBase__)+(136);
      var $11=(__stackBase__)+(144);
      var $12=(__stackBase__)+(152);
      $1=$this;
      $2=$def;
      var $13=$1;
      var $14=$13;
      var $15=$2;
      var $16=$15;
      __ZN7b2JointC2EPK10b2JointDef($14, $16);
      var $17=$13;
      HEAP32[(($17)>>2)]=((5265448)|0);
      var $18=(($13+92)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 20; break; }
    case 2: 
      var $20=(($13+100)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 20; break; }
    case 3: 
      var $22=(($13+108)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 20; break; }
    case 4: 
      var $24=(($13+116)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 20; break; }
    case 5: 
      var $26=(($13+124)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $28=(($13+132)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 20; break; }
    case 7: 
      var $30=(($13+176)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 20; break; }
    case 8: 
      var $32=(($13+184)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 20; break; }
    case 9: 
      var $34=(($13+192)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 20; break; }
    case 10: 
      var $36=(($13+200)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $38=(($13+240)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 20; break; }
    case 12: 
      var $40=(($13+248)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $42=$2;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($13+68)|0);
      HEAP32[(($45)>>2)]=$44;
      var $46=$2;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($13+72)|0);
      HEAP32[(($49)>>2)]=$48;
      var $50=(($13+68)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52 = (function() { try { __THREW__ = 0; return __ZNK7b2Joint7GetTypeEv($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $54=(($13+76)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=(($13+72)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57 = (function() { try { __THREW__ = 0; return __ZNK7b2Joint7GetTypeEv($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 20; break; }
    case 15: 
      var $59=(($13+80)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=(($13+76)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0))==1;
      if ($62) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $64=(($13+76)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))==2;
      if ($66) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 21; break;
    case 18: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5251684)|0), 53, ((5263684)|0), ((5256388)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 20; break; }
    case 19: 
      throw "Reached an unreachable!"
    case 20: 
      var $71$0 = ___cxa_find_matching_catch(-1, -1); $71$1 = tempRet0;
      var $72=$71$0;
      $3=$72;
      var $73=$71$1;
      $4=$73;
      var $74=$13;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 53; break; }
      label = 21; break;
    case 21: 
      var $77=(($13+80)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|(0))==1;
      if ($79) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $81=(($13+80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82)|(0))==2;
      if ($83) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 26; break;
    case 24: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5251684)|0), 54, ((5263684)|0), ((5253456)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 20; break; }
    case 25: 
      throw "Reached an unreachable!"
      label = 26; break;
    case 26: 
      var $89=(($13+68)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91 = (function() { try { __THREW__ = 0; return __ZN7b2Joint8GetBodyAEv($90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 20; break; }
    case 27: 
      var $93=(($13+84)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=(($13+68)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96 = (function() { try { __THREW__ = 0; return __ZN7b2Joint8GetBodyBEv($95) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 20; break; }
    case 28: 
      var $98=$13;
      var $99=(($98+48)|0);
      HEAP32[(($99)>>2)]=$96;
      var $100=$13;
      var $101=(($100+48)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+12)|0);
      var $104=$xfA;
      var $105=$103;
      assert(16 % 1 === 0);HEAP32[(($104)>>2)]=HEAP32[(($105)>>2)];HEAP32[((($104)+(4))>>2)]=HEAP32[((($105)+(4))>>2)];HEAP32[((($104)+(8))>>2)]=HEAP32[((($105)+(8))>>2)];HEAP32[((($104)+(12))>>2)]=HEAP32[((($105)+(12))>>2)];
      var $106=$13;
      var $107=(($106+48)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+28)|0);
      var $110=(($109+28)|0);
      var $111=HEAPF32[(($110)>>2)];
      $aA=$111;
      var $112=(($13+84)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+12)|0);
      var $115=$xfC;
      var $116=$114;
      assert(16 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];HEAP32[((($115)+(8))>>2)]=HEAP32[((($116)+(8))>>2)];HEAP32[((($115)+(12))>>2)]=HEAP32[((($116)+(12))>>2)];
      var $117=(($13+84)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+28)|0);
      var $120=(($119+28)|0);
      var $121=HEAPF32[(($120)>>2)];
      $aC=$121;
      var $122=(($13+76)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|(0))==1;
      if ($124) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $126=$2;
      var $127=(($126+20)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$128;
      $revolute=$129;
      var $130=(($13+108)|0);
      var $131=$revolute;
      var $132=(($131+68)|0);
      var $133=$130;
      var $134=$132;
      assert(8 % 1 === 0);HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];
      var $135=(($13+92)|0);
      var $136=$revolute;
      var $137=(($136+76)|0);
      var $138=$135;
      var $139=$137;
      assert(8 % 1 === 0);HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[((($138)+(4))>>2)]=HEAP32[((($139)+(4))>>2)];
      var $140=$revolute;
      var $141=(($140+116)|0);
      var $142=HEAPF32[(($141)>>2)];
      var $143=(($13+140)|0);
      HEAPF32[(($143)>>2)]=$142;
      var $144=(($13+124)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 20; break; }
    case 30: 
      var $146=$aA;
      var $147=$aC;
      var $148=($146)-($147);
      var $149=(($13+140)|0);
      var $150=HEAPF32[(($149)>>2)];
      var $151=($148)-($150);
      $coordinateA=$151;
      label = 38; break;
    case 31: 
      var $153=$2;
      var $154=(($153+20)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$155;
      $prismatic=$156;
      var $157=(($13+108)|0);
      var $158=$prismatic;
      var $159=(($158+68)|0);
      var $160=$157;
      var $161=$159;
      assert(8 % 1 === 0);HEAP32[(($160)>>2)]=HEAP32[(($161)>>2)];HEAP32[((($160)+(4))>>2)]=HEAP32[((($161)+(4))>>2)];
      var $162=(($13+92)|0);
      var $163=$prismatic;
      var $164=(($163+76)|0);
      var $165=$162;
      var $166=$164;
      assert(8 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($166)+(4))>>2)];
      var $167=$prismatic;
      var $168=(($167+100)|0);
      var $169=HEAPF32[(($168)>>2)];
      var $170=(($13+140)|0);
      HEAPF32[(($170)>>2)]=$169;
      var $171=(($13+124)|0);
      var $172=$prismatic;
      var $173=(($172+84)|0);
      var $174=$171;
      var $175=$173;
      assert(8 % 1 === 0);HEAP32[(($174)>>2)]=HEAP32[(($175)>>2)];HEAP32[((($174)+(4))>>2)]=HEAP32[((($175)+(4))>>2)];
      var $176=(($13+108)|0);
      var $177=$pC;
      var $178=$176;
      assert(8 % 1 === 0);HEAP32[(($177)>>2)]=HEAP32[(($178)>>2)];HEAP32[((($177)+(4))>>2)]=HEAP32[((($178)+(4))>>2)];
      var $179=(($xfC+8)|0);
      var $180=(($xfA+8)|0);
      var $181=(($13+92)|0);
      (function() { try { __THREW__ = 0; return __Z5b2MulRK5b2RotRK6b2Vec2($6, $180, $181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 20; break; }
    case 32: 
      var $183=(($xfA)|0);
      var $184=(($xfC)|0);
      (function() { try { __THREW__ = 0; return __ZmiRK6b2Vec2S1_($7, $183, $184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 20; break; }
    case 33: 
      (function() { try { __THREW__ = 0; return __ZplRK6b2Vec2S1_($5, $6, $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 20; break; }
    case 34: 
      (function() { try { __THREW__ = 0; return __Z6b2MulTRK5b2RotRK6b2Vec2($pA, $179, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 20; break; }
    case 35: 
      (function() { try { __THREW__ = 0; return __ZmiRK6b2Vec2S1_($8, $pA, $pC) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 20; break; }
    case 36: 
      var $189=(($13+124)|0);
      var $190 = (function() { try { __THREW__ = 0; return __Z5b2DotRK6b2Vec2S1_($8, $189) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 20; break; }
    case 37: 
      $coordinateA=$190;
      label = 38; break;
    case 38: 
      var $193=(($13+72)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195 = (function() { try { __THREW__ = 0; return __ZN7b2Joint8GetBodyAEv($194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 20; break; }
    case 39: 
      var $197=(($13+88)|0);
      HEAP32[(($197)>>2)]=$195;
      var $198=(($13+72)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200 = (function() { try { __THREW__ = 0; return __ZN7b2Joint8GetBodyBEv($199) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 20; break; }
    case 40: 
      var $202=$13;
      var $203=(($202+52)|0);
      HEAP32[(($203)>>2)]=$200;
      var $204=$13;
      var $205=(($204+52)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206+12)|0);
      var $208=$xfB;
      var $209=$207;
      assert(16 % 1 === 0);HEAP32[(($208)>>2)]=HEAP32[(($209)>>2)];HEAP32[((($208)+(4))>>2)]=HEAP32[((($209)+(4))>>2)];HEAP32[((($208)+(8))>>2)]=HEAP32[((($209)+(8))>>2)];HEAP32[((($208)+(12))>>2)]=HEAP32[((($209)+(12))>>2)];
      var $210=$13;
      var $211=(($210+52)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($212+28)|0);
      var $214=(($213+28)|0);
      var $215=HEAPF32[(($214)>>2)];
      $aB=$215;
      var $216=(($13+88)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217+12)|0);
      var $219=$xfD;
      var $220=$218;
      assert(16 % 1 === 0);HEAP32[(($219)>>2)]=HEAP32[(($220)>>2)];HEAP32[((($219)+(4))>>2)]=HEAP32[((($220)+(4))>>2)];HEAP32[((($219)+(8))>>2)]=HEAP32[((($220)+(8))>>2)];HEAP32[((($219)+(12))>>2)]=HEAP32[((($220)+(12))>>2)];
      var $221=(($13+88)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=(($222+28)|0);
      var $224=(($223+28)|0);
      var $225=HEAPF32[(($224)>>2)];
      $aD=$225;
      var $226=(($13+80)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227)|(0))==1;
      if ($228) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $230=$2;
      var $231=(($230+24)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=$232;
      $revolute1=$233;
      var $234=(($13+116)|0);
      var $235=$revolute1;
      var $236=(($235+68)|0);
      var $237=$234;
      var $238=$236;
      assert(8 % 1 === 0);HEAP32[(($237)>>2)]=HEAP32[(($238)>>2)];HEAP32[((($237)+(4))>>2)]=HEAP32[((($238)+(4))>>2)];
      var $239=(($13+100)|0);
      var $240=$revolute1;
      var $241=(($240+76)|0);
      var $242=$239;
      var $243=$241;
      assert(8 % 1 === 0);HEAP32[(($242)>>2)]=HEAP32[(($243)>>2)];HEAP32[((($242)+(4))>>2)]=HEAP32[((($243)+(4))>>2)];
      var $244=$revolute1;
      var $245=(($244+116)|0);
      var $246=HEAPF32[(($245)>>2)];
      var $247=(($13+144)|0);
      HEAPF32[(($247)>>2)]=$246;
      var $248=(($13+132)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 20; break; }
    case 42: 
      var $250=$aB;
      var $251=$aD;
      var $252=($250)-($251);
      var $253=(($13+144)|0);
      var $254=HEAPF32[(($253)>>2)];
      var $255=($252)-($254);
      $coordinateB=$255;
      label = 50; break;
    case 43: 
      var $257=$2;
      var $258=(($257+24)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$259;
      $prismatic2=$260;
      var $261=(($13+116)|0);
      var $262=$prismatic2;
      var $263=(($262+68)|0);
      var $264=$261;
      var $265=$263;
      assert(8 % 1 === 0);HEAP32[(($264)>>2)]=HEAP32[(($265)>>2)];HEAP32[((($264)+(4))>>2)]=HEAP32[((($265)+(4))>>2)];
      var $266=(($13+100)|0);
      var $267=$prismatic2;
      var $268=(($267+76)|0);
      var $269=$266;
      var $270=$268;
      assert(8 % 1 === 0);HEAP32[(($269)>>2)]=HEAP32[(($270)>>2)];HEAP32[((($269)+(4))>>2)]=HEAP32[((($270)+(4))>>2)];
      var $271=$prismatic2;
      var $272=(($271+100)|0);
      var $273=HEAPF32[(($272)>>2)];
      var $274=(($13+144)|0);
      HEAPF32[(($274)>>2)]=$273;
      var $275=(($13+132)|0);
      var $276=$prismatic2;
      var $277=(($276+84)|0);
      var $278=$275;
      var $279=$277;
      assert(8 % 1 === 0);HEAP32[(($278)>>2)]=HEAP32[(($279)>>2)];HEAP32[((($278)+(4))>>2)]=HEAP32[((($279)+(4))>>2)];
      var $280=(($13+116)|0);
      var $281=$pD;
      var $282=$280;
      assert(8 % 1 === 0);HEAP32[(($281)>>2)]=HEAP32[(($282)>>2)];HEAP32[((($281)+(4))>>2)]=HEAP32[((($282)+(4))>>2)];
      var $283=(($xfD+8)|0);
      var $284=(($xfB+8)|0);
      var $285=(($13+100)|0);
      (function() { try { __THREW__ = 0; return __Z5b2MulRK5b2RotRK6b2Vec2($10, $284, $285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 20; break; }
    case 44: 
      var $287=(($xfB)|0);
      var $288=(($xfD)|0);
      (function() { try { __THREW__ = 0; return __ZmiRK6b2Vec2S1_($11, $287, $288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 20; break; }
    case 45: 
      (function() { try { __THREW__ = 0; return __ZplRK6b2Vec2S1_($9, $10, $11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 20; break; }
    case 46: 
      (function() { try { __THREW__ = 0; return __Z6b2MulTRK5b2RotRK6b2Vec2($pB, $283, $9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 20; break; }
    case 47: 
      (function() { try { __THREW__ = 0; return __ZmiRK6b2Vec2S1_($12, $pB, $pD) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 20; break; }
    case 48: 
      var $293=(($13+132)|0);
      var $294 = (function() { try { __THREW__ = 0; return __Z5b2DotRK6b2Vec2S1_($12, $293) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 20; break; }
    case 49: 
      $coordinateB=$294;
      label = 50; break;
    case 50: 
      var $297=$2;
      var $298=(($297+28)|0);
      var $299=HEAPF32[(($298)>>2)];
      var $300=(($13+152)|0);
      HEAPF32[(($300)>>2)]=$299;
      var $301=$coordinateA;
      var $302=(($13+152)|0);
      var $303=HEAPF32[(($302)>>2)];
      var $304=$coordinateB;
      var $305=($303)*($304);
      var $306=($301)+($305);
      var $307=(($13+148)|0);
      HEAPF32[(($307)>>2)]=$306;
      var $308=(($13+156)|0);
      HEAPF32[(($308)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    case 51: 
      label = 52; break;
    case 52: 
      var $311=$3;
      var $312=$4;
      var $313$0=$311;
      var $313$1=0;
      var $314$0=$313$0;
      var $314$1=$312;
      ___resumeException($314$0)
    case 53: 
      var $316$0 = ___cxa_find_matching_catch(-1, -1,0); $316$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 216)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $cC=(__stackBase__)+(32);
      var $aC;
      var $vC=(__stackBase__)+(40);
      var $wC;
      var $cD=(__stackBase__)+(48);
      var $aD;
      var $vD=(__stackBase__)+(56);
      var $wD;
      var $qA=(__stackBase__)+(64);
      var $qB=(__stackBase__)+(72);
      var $qC=(__stackBase__)+(80);
      var $qD=(__stackBase__)+(88);
      var $u=(__stackBase__)+(96);
      var $rC=(__stackBase__)+(104);
      var $3=(__stackBase__)+(112);
      var $rA=(__stackBase__)+(120);
      var $4=(__stackBase__)+(128);
      var $u1=(__stackBase__)+(136);
      var $rD=(__stackBase__)+(144);
      var $5=(__stackBase__)+(152);
      var $rB=(__stackBase__)+(160);
      var $6=(__stackBase__)+(168);
      var $7=(__stackBase__)+(176);
      var $8=(__stackBase__)+(184);
      var $9=(__stackBase__)+(192);
      var $10=(__stackBase__)+(200);
      var $11=(__stackBase__)+(208);
      $1=$this;
      $2=$data;
      var $12=$1;
      var $13=$12;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12+160)|0);
      HEAP32[(($18)>>2)]=$17;
      var $19=$12;
      var $20=(($19+52)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($12+164)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($12+84)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($12+168)|0);
      HEAP32[(($29)>>2)]=$28;
      var $30=(($12+88)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($12+172)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=(($12+176)|0);
      var $36=$12;
      var $37=(($36+48)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+28)|0);
      var $40=(($39)|0);
      var $41=$35;
      var $42=$40;
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      var $43=(($12+184)|0);
      var $44=$12;
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+28)|0);
      var $48=(($47)|0);
      var $49=$43;
      var $50=$48;
      assert(8 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];
      var $51=(($12+192)|0);
      var $52=(($12+84)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+28)|0);
      var $55=(($54)|0);
      var $56=$51;
      var $57=$55;
      assert(8 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];
      var $58=(($12+200)|0);
      var $59=(($12+88)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+28)|0);
      var $62=(($61)|0);
      var $63=$58;
      var $64=$62;
      assert(8 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];
      var $65=$12;
      var $66=(($65+48)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+120)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=(($12+208)|0);
      HEAPF32[(($70)>>2)]=$69;
      var $71=$12;
      var $72=(($71+52)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+120)|0);
      var $75=HEAPF32[(($74)>>2)];
      var $76=(($12+212)|0);
      HEAPF32[(($76)>>2)]=$75;
      var $77=(($12+84)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+120)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=(($12+216)|0);
      HEAPF32[(($81)>>2)]=$80;
      var $82=(($12+88)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+120)|0);
      var $85=HEAPF32[(($84)>>2)];
      var $86=(($12+220)|0);
      HEAPF32[(($86)>>2)]=$85;
      var $87=$12;
      var $88=(($87+48)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+128)|0);
      var $91=HEAPF32[(($90)>>2)];
      var $92=(($12+224)|0);
      HEAPF32[(($92)>>2)]=$91;
      var $93=$12;
      var $94=(($93+52)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+128)|0);
      var $97=HEAPF32[(($96)>>2)];
      var $98=(($12+228)|0);
      HEAPF32[(($98)>>2)]=$97;
      var $99=(($12+84)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+128)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=(($12+232)|0);
      HEAPF32[(($103)>>2)]=$102;
      var $104=(($12+88)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+128)|0);
      var $107=HEAPF32[(($106)>>2)];
      var $108=(($12+236)|0);
      HEAPF32[(($108)>>2)]=$107;
      var $109=(($12+160)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$2;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+((($110)*(12))&-1))|0);
      var $115=(($114)|0);
      var $116=$cA;
      var $117=$115;
      assert(8 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];
      var $118=(($12+160)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$2;
      var $121=(($120+24)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+((($119)*(12))&-1))|0);
      var $124=(($123+8)|0);
      var $125=HEAPF32[(($124)>>2)];
      $aA=$125;
      var $126=(($12+160)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$2;
      var $129=(($128+28)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+((($127)*(12))&-1))|0);
      var $132=(($131)|0);
      var $133=$vA;
      var $134=$132;
      assert(8 % 1 === 0);HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];
      var $135=(($12+160)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$2;
      var $138=(($137+28)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+((($136)*(12))&-1))|0);
      var $141=(($140+8)|0);
      var $142=HEAPF32[(($141)>>2)];
      $wA=$142;
      var $143=(($12+164)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$2;
      var $146=(($145+24)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+((($144)*(12))&-1))|0);
      var $149=(($148)|0);
      var $150=$cB;
      var $151=$149;
      assert(8 % 1 === 0);HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];HEAP32[((($150)+(4))>>2)]=HEAP32[((($151)+(4))>>2)];
      var $152=(($12+164)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$2;
      var $155=(($154+24)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+((($153)*(12))&-1))|0);
      var $158=(($157+8)|0);
      var $159=HEAPF32[(($158)>>2)];
      $aB=$159;
      var $160=(($12+164)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$2;
      var $163=(($162+28)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+((($161)*(12))&-1))|0);
      var $166=(($165)|0);
      var $167=$vB;
      var $168=$166;
      assert(8 % 1 === 0);HEAP32[(($167)>>2)]=HEAP32[(($168)>>2)];HEAP32[((($167)+(4))>>2)]=HEAP32[((($168)+(4))>>2)];
      var $169=(($12+164)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$2;
      var $172=(($171+28)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173+((($170)*(12))&-1))|0);
      var $175=(($174+8)|0);
      var $176=HEAPF32[(($175)>>2)];
      $wB=$176;
      var $177=(($12+168)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$2;
      var $180=(($179+24)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+((($178)*(12))&-1))|0);
      var $183=(($182)|0);
      var $184=$cC;
      var $185=$183;
      assert(8 % 1 === 0);HEAP32[(($184)>>2)]=HEAP32[(($185)>>2)];HEAP32[((($184)+(4))>>2)]=HEAP32[((($185)+(4))>>2)];
      var $186=(($12+168)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=$2;
      var $189=(($188+24)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190+((($187)*(12))&-1))|0);
      var $192=(($191+8)|0);
      var $193=HEAPF32[(($192)>>2)];
      $aC=$193;
      var $194=(($12+168)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=$2;
      var $197=(($196+28)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+((($195)*(12))&-1))|0);
      var $200=(($199)|0);
      var $201=$vC;
      var $202=$200;
      assert(8 % 1 === 0);HEAP32[(($201)>>2)]=HEAP32[(($202)>>2)];HEAP32[((($201)+(4))>>2)]=HEAP32[((($202)+(4))>>2)];
      var $203=(($12+168)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$2;
      var $206=(($205+28)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($207+((($204)*(12))&-1))|0);
      var $209=(($208+8)|0);
      var $210=HEAPF32[(($209)>>2)];
      $wC=$210;
      var $211=(($12+172)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$2;
      var $214=(($213+24)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($215+((($212)*(12))&-1))|0);
      var $217=(($216)|0);
      var $218=$cD;
      var $219=$217;
      assert(8 % 1 === 0);HEAP32[(($218)>>2)]=HEAP32[(($219)>>2)];HEAP32[((($218)+(4))>>2)]=HEAP32[((($219)+(4))>>2)];
      var $220=(($12+172)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$2;
      var $223=(($222+24)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=(($224+((($221)*(12))&-1))|0);
      var $226=(($225+8)|0);
      var $227=HEAPF32[(($226)>>2)];
      $aD=$227;
      var $228=(($12+172)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=$2;
      var $231=(($230+28)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=(($232+((($229)*(12))&-1))|0);
      var $234=(($233)|0);
      var $235=$vD;
      var $236=$234;
      assert(8 % 1 === 0);HEAP32[(($235)>>2)]=HEAP32[(($236)>>2)];HEAP32[((($235)+(4))>>2)]=HEAP32[((($236)+(4))>>2)];
      var $237=(($12+172)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$2;
      var $240=(($239+28)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241+((($238)*(12))&-1))|0);
      var $243=(($242+8)|0);
      var $244=HEAPF32[(($243)>>2)];
      $wD=$244;
      var $245=$aA;
      __ZN5b2RotC1Ef($qA, $245);
      var $246=$aB;
      __ZN5b2RotC1Ef($qB, $246);
      var $247=$aC;
      __ZN5b2RotC1Ef($qC, $247);
      var $248=$aD;
      __ZN5b2RotC1Ef($qD, $248);
      var $249=(($12+272)|0);
      HEAPF32[(($249)>>2)]=0;
      var $250=(($12+76)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251)|(0))==1;
      if ($252) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $254=(($12+240)|0);
      __ZN6b2Vec27SetZeroEv($254);
      var $255=(($12+256)|0);
      HEAPF32[(($255)>>2)]=1;
      var $256=(($12+264)|0);
      HEAPF32[(($256)>>2)]=1;
      var $257=(($12+224)|0);
      var $258=HEAPF32[(($257)>>2)];
      var $259=(($12+232)|0);
      var $260=HEAPF32[(($259)>>2)];
      var $261=($258)+($260);
      var $262=(($12+272)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=($263)+($261);
      HEAPF32[(($262)>>2)]=$264;
      label = 4; break;
    case 3: 
      var $266=(($12+124)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u, $qC, $266);
      var $267=(($12+108)|0);
      var $268=(($12+192)|0);
      __ZmiRK6b2Vec2S1_($3, $267, $268);
      __Z5b2MulRK5b2RotRK6b2Vec2($rC, $qC, $3);
      var $269=(($12+92)|0);
      var $270=(($12+176)|0);
      __ZmiRK6b2Vec2S1_($4, $269, $270);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $4);
      var $271=(($12+240)|0);
      var $272=$271;
      var $273=$u;
      assert(8 % 1 === 0);HEAP32[(($272)>>2)]=HEAP32[(($273)>>2)];HEAP32[((($272)+(4))>>2)]=HEAP32[((($273)+(4))>>2)];
      var $274=__Z7b2CrossRK6b2Vec2S1_($rC, $u);
      var $275=(($12+264)|0);
      HEAPF32[(($275)>>2)]=$274;
      var $276=__Z7b2CrossRK6b2Vec2S1_($rA, $u);
      var $277=(($12+256)|0);
      HEAPF32[(($277)>>2)]=$276;
      var $278=(($12+216)|0);
      var $279=HEAPF32[(($278)>>2)];
      var $280=(($12+208)|0);
      var $281=HEAPF32[(($280)>>2)];
      var $282=($279)+($281);
      var $283=(($12+232)|0);
      var $284=HEAPF32[(($283)>>2)];
      var $285=(($12+264)|0);
      var $286=HEAPF32[(($285)>>2)];
      var $287=($284)*($286);
      var $288=(($12+264)|0);
      var $289=HEAPF32[(($288)>>2)];
      var $290=($287)*($289);
      var $291=($282)+($290);
      var $292=(($12+224)|0);
      var $293=HEAPF32[(($292)>>2)];
      var $294=(($12+256)|0);
      var $295=HEAPF32[(($294)>>2)];
      var $296=($293)*($295);
      var $297=(($12+256)|0);
      var $298=HEAPF32[(($297)>>2)];
      var $299=($296)*($298);
      var $300=($291)+($299);
      var $301=(($12+272)|0);
      var $302=HEAPF32[(($301)>>2)];
      var $303=($302)+($300);
      HEAPF32[(($301)>>2)]=$303;
      label = 4; break;
    case 4: 
      var $305=(($12+80)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306)|(0))==1;
      if ($307) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $309=(($12+248)|0);
      __ZN6b2Vec27SetZeroEv($309);
      var $310=(($12+152)|0);
      var $311=HEAPF32[(($310)>>2)];
      var $312=(($12+260)|0);
      HEAPF32[(($312)>>2)]=$311;
      var $313=(($12+152)|0);
      var $314=HEAPF32[(($313)>>2)];
      var $315=(($12+268)|0);
      HEAPF32[(($315)>>2)]=$314;
      var $316=(($12+152)|0);
      var $317=HEAPF32[(($316)>>2)];
      var $318=(($12+152)|0);
      var $319=HEAPF32[(($318)>>2)];
      var $320=($317)*($319);
      var $321=(($12+228)|0);
      var $322=HEAPF32[(($321)>>2)];
      var $323=(($12+236)|0);
      var $324=HEAPF32[(($323)>>2)];
      var $325=($322)+($324);
      var $326=($320)*($325);
      var $327=(($12+272)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=($328)+($326);
      HEAPF32[(($327)>>2)]=$329;
      label = 7; break;
    case 6: 
      var $331=(($12+132)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u1, $qD, $331);
      var $332=(($12+116)|0);
      var $333=(($12+200)|0);
      __ZmiRK6b2Vec2S1_($5, $332, $333);
      __Z5b2MulRK5b2RotRK6b2Vec2($rD, $qD, $5);
      var $334=(($12+100)|0);
      var $335=(($12+184)|0);
      __ZmiRK6b2Vec2S1_($6, $334, $335);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $6);
      var $336=(($12+248)|0);
      var $337=(($12+152)|0);
      var $338=HEAPF32[(($337)>>2)];
      __ZmlfRK6b2Vec2($7, $338, $u1);
      var $339=$336;
      var $340=$7;
      assert(8 % 1 === 0);HEAP32[(($339)>>2)]=HEAP32[(($340)>>2)];HEAP32[((($339)+(4))>>2)]=HEAP32[((($340)+(4))>>2)];
      var $341=(($12+152)|0);
      var $342=HEAPF32[(($341)>>2)];
      var $343=__Z7b2CrossRK6b2Vec2S1_($rD, $u1);
      var $344=($342)*($343);
      var $345=(($12+268)|0);
      HEAPF32[(($345)>>2)]=$344;
      var $346=(($12+152)|0);
      var $347=HEAPF32[(($346)>>2)];
      var $348=__Z7b2CrossRK6b2Vec2S1_($rB, $u1);
      var $349=($347)*($348);
      var $350=(($12+260)|0);
      HEAPF32[(($350)>>2)]=$349;
      var $351=(($12+152)|0);
      var $352=HEAPF32[(($351)>>2)];
      var $353=(($12+152)|0);
      var $354=HEAPF32[(($353)>>2)];
      var $355=($352)*($354);
      var $356=(($12+220)|0);
      var $357=HEAPF32[(($356)>>2)];
      var $358=(($12+212)|0);
      var $359=HEAPF32[(($358)>>2)];
      var $360=($357)+($359);
      var $361=($355)*($360);
      var $362=(($12+236)|0);
      var $363=HEAPF32[(($362)>>2)];
      var $364=(($12+268)|0);
      var $365=HEAPF32[(($364)>>2)];
      var $366=($363)*($365);
      var $367=(($12+268)|0);
      var $368=HEAPF32[(($367)>>2)];
      var $369=($366)*($368);
      var $370=($361)+($369);
      var $371=(($12+228)|0);
      var $372=HEAPF32[(($371)>>2)];
      var $373=(($12+260)|0);
      var $374=HEAPF32[(($373)>>2)];
      var $375=($372)*($374);
      var $376=(($12+260)|0);
      var $377=HEAPF32[(($376)>>2)];
      var $378=($375)*($377);
      var $379=($370)+($378);
      var $380=(($12+272)|0);
      var $381=HEAPF32[(($380)>>2)];
      var $382=($381)+($379);
      HEAPF32[(($380)>>2)]=$382;
      label = 7; break;
    case 7: 
      var $384=(($12+272)|0);
      var $385=HEAPF32[(($384)>>2)];
      var $386=$385 > 0;
      if ($386) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $388=(($12+272)|0);
      var $389=HEAPF32[(($388)>>2)];
      var $390=(1)/($389);
      var $393 = $390;label = 10; break;
    case 9: 
      var $393 = 0;label = 10; break;
    case 10: 
      var $393;
      var $394=(($12+272)|0);
      HEAPF32[(($394)>>2)]=$393;
      var $395=$2;
      var $396=(($395)|0);
      var $397=(($396+20)|0);
      var $398=HEAP8[($397)];
      var $399=(($398) & 1);
      if ($399) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $401=(($12+208)|0);
      var $402=HEAPF32[(($401)>>2)];
      var $403=(($12+156)|0);
      var $404=HEAPF32[(($403)>>2)];
      var $405=($402)*($404);
      var $406=(($12+240)|0);
      __ZmlfRK6b2Vec2($8, $405, $406);
      __ZN6b2Vec2pLERKS_($vA, $8);
      var $407=(($12+224)|0);
      var $408=HEAPF32[(($407)>>2)];
      var $409=(($12+156)|0);
      var $410=HEAPF32[(($409)>>2)];
      var $411=($408)*($410);
      var $412=(($12+256)|0);
      var $413=HEAPF32[(($412)>>2)];
      var $414=($411)*($413);
      var $415=$wA;
      var $416=($415)+($414);
      $wA=$416;
      var $417=(($12+212)|0);
      var $418=HEAPF32[(($417)>>2)];
      var $419=(($12+156)|0);
      var $420=HEAPF32[(($419)>>2)];
      var $421=($418)*($420);
      var $422=(($12+248)|0);
      __ZmlfRK6b2Vec2($9, $421, $422);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $423=(($12+228)|0);
      var $424=HEAPF32[(($423)>>2)];
      var $425=(($12+156)|0);
      var $426=HEAPF32[(($425)>>2)];
      var $427=($424)*($426);
      var $428=(($12+260)|0);
      var $429=HEAPF32[(($428)>>2)];
      var $430=($427)*($429);
      var $431=$wB;
      var $432=($431)+($430);
      $wB=$432;
      var $433=(($12+216)|0);
      var $434=HEAPF32[(($433)>>2)];
      var $435=(($12+156)|0);
      var $436=HEAPF32[(($435)>>2)];
      var $437=($434)*($436);
      var $438=(($12+240)|0);
      __ZmlfRK6b2Vec2($10, $437, $438);
      __ZN6b2Vec2mIERKS_($vC, $10);
      var $439=(($12+232)|0);
      var $440=HEAPF32[(($439)>>2)];
      var $441=(($12+156)|0);
      var $442=HEAPF32[(($441)>>2)];
      var $443=($440)*($442);
      var $444=(($12+264)|0);
      var $445=HEAPF32[(($444)>>2)];
      var $446=($443)*($445);
      var $447=$wC;
      var $448=($447)-($446);
      $wC=$448;
      var $449=(($12+220)|0);
      var $450=HEAPF32[(($449)>>2)];
      var $451=(($12+156)|0);
      var $452=HEAPF32[(($451)>>2)];
      var $453=($450)*($452);
      var $454=(($12+248)|0);
      __ZmlfRK6b2Vec2($11, $453, $454);
      __ZN6b2Vec2mIERKS_($vD, $11);
      var $455=(($12+236)|0);
      var $456=HEAPF32[(($455)>>2)];
      var $457=(($12+156)|0);
      var $458=HEAPF32[(($457)>>2)];
      var $459=($456)*($458);
      var $460=(($12+268)|0);
      var $461=HEAPF32[(($460)>>2)];
      var $462=($459)*($461);
      var $463=$wD;
      var $464=($463)-($462);
      $wD=$464;
      label = 13; break;
    case 12: 
      var $466=(($12+156)|0);
      HEAPF32[(($466)>>2)]=0;
      label = 13; break;
    case 13: 
      var $468=(($12+160)|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=$2;
      var $471=(($470+28)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=(($472+((($469)*(12))&-1))|0);
      var $474=(($473)|0);
      var $475=$474;
      var $476=$vA;
      assert(8 % 1 === 0);HEAP32[(($475)>>2)]=HEAP32[(($476)>>2)];HEAP32[((($475)+(4))>>2)]=HEAP32[((($476)+(4))>>2)];
      var $477=$wA;
      var $478=(($12+160)|0);
      var $479=HEAP32[(($478)>>2)];
      var $480=$2;
      var $481=(($480+28)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=(($482+((($479)*(12))&-1))|0);
      var $484=(($483+8)|0);
      HEAPF32[(($484)>>2)]=$477;
      var $485=(($12+164)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=$2;
      var $488=(($487+28)|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=(($489+((($486)*(12))&-1))|0);
      var $491=(($490)|0);
      var $492=$491;
      var $493=$vB;
      assert(8 % 1 === 0);HEAP32[(($492)>>2)]=HEAP32[(($493)>>2)];HEAP32[((($492)+(4))>>2)]=HEAP32[((($493)+(4))>>2)];
      var $494=$wB;
      var $495=(($12+164)|0);
      var $496=HEAP32[(($495)>>2)];
      var $497=$2;
      var $498=(($497+28)|0);
      var $499=HEAP32[(($498)>>2)];
      var $500=(($499+((($496)*(12))&-1))|0);
      var $501=(($500+8)|0);
      HEAPF32[(($501)>>2)]=$494;
      var $502=(($12+168)|0);
      var $503=HEAP32[(($502)>>2)];
      var $504=$2;
      var $505=(($504+28)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=(($506+((($503)*(12))&-1))|0);
      var $508=(($507)|0);
      var $509=$508;
      var $510=$vC;
      assert(8 % 1 === 0);HEAP32[(($509)>>2)]=HEAP32[(($510)>>2)];HEAP32[((($509)+(4))>>2)]=HEAP32[((($510)+(4))>>2)];
      var $511=$wC;
      var $512=(($12+168)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=$2;
      var $515=(($514+28)|0);
      var $516=HEAP32[(($515)>>2)];
      var $517=(($516+((($513)*(12))&-1))|0);
      var $518=(($517+8)|0);
      HEAPF32[(($518)>>2)]=$511;
      var $519=(($12+172)|0);
      var $520=HEAP32[(($519)>>2)];
      var $521=$2;
      var $522=(($521+28)|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=(($523+((($520)*(12))&-1))|0);
      var $525=(($524)|0);
      var $526=$525;
      var $527=$vD;
      assert(8 % 1 === 0);HEAP32[(($526)>>2)]=HEAP32[(($527)>>2)];HEAP32[((($526)+(4))>>2)]=HEAP32[((($527)+(4))>>2)];
      var $528=$wD;
      var $529=(($12+172)|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=$2;
      var $532=(($531+28)|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=(($533+((($530)*(12))&-1))|0);
      var $535=(($534+8)|0);
      HEAPF32[(($535)>>2)]=$528;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $vA=__stackBase__;
  var $wA;
  var $vB=(__stackBase__)+(8);
  var $wB;
  var $vC=(__stackBase__)+(16);
  var $wC;
  var $vD=(__stackBase__)+(24);
  var $wD;
  var $Cdot;
  var $3=(__stackBase__)+(32);
  var $4=(__stackBase__)+(40);
  var $impulse;
  var $5=(__stackBase__)+(48);
  var $6=(__stackBase__)+(56);
  var $7=(__stackBase__)+(64);
  var $8=(__stackBase__)+(72);
  $1=$this;
  $2=$data;
  var $9=$1;
  var $10=(($9+160)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$2;
  var $13=(($12+28)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14+((($11)*(12))&-1))|0);
  var $16=(($15)|0);
  var $17=$vA;
  var $18=$16;
  assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
  var $19=(($9+160)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=$2;
  var $22=(($21+28)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=(($23+((($20)*(12))&-1))|0);
  var $25=(($24+8)|0);
  var $26=HEAPF32[(($25)>>2)];
  $wA=$26;
  var $27=(($9+164)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+28)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+((($28)*(12))&-1))|0);
  var $33=(($32)|0);
  var $34=$vB;
  var $35=$33;
  assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
  var $36=(($9+164)|0);
  var $37=HEAP32[(($36)>>2)];
  var $38=$2;
  var $39=(($38+28)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=(($40+((($37)*(12))&-1))|0);
  var $42=(($41+8)|0);
  var $43=HEAPF32[(($42)>>2)];
  $wB=$43;
  var $44=(($9+168)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$2;
  var $47=(($46+28)|0);
  var $48=HEAP32[(($47)>>2)];
  var $49=(($48+((($45)*(12))&-1))|0);
  var $50=(($49)|0);
  var $51=$vC;
  var $52=$50;
  assert(8 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];
  var $53=(($9+168)|0);
  var $54=HEAP32[(($53)>>2)];
  var $55=$2;
  var $56=(($55+28)|0);
  var $57=HEAP32[(($56)>>2)];
  var $58=(($57+((($54)*(12))&-1))|0);
  var $59=(($58+8)|0);
  var $60=HEAPF32[(($59)>>2)];
  $wC=$60;
  var $61=(($9+172)|0);
  var $62=HEAP32[(($61)>>2)];
  var $63=$2;
  var $64=(($63+28)|0);
  var $65=HEAP32[(($64)>>2)];
  var $66=(($65+((($62)*(12))&-1))|0);
  var $67=(($66)|0);
  var $68=$vD;
  var $69=$67;
  assert(8 % 1 === 0);HEAP32[(($68)>>2)]=HEAP32[(($69)>>2)];HEAP32[((($68)+(4))>>2)]=HEAP32[((($69)+(4))>>2)];
  var $70=(($9+172)|0);
  var $71=HEAP32[(($70)>>2)];
  var $72=$2;
  var $73=(($72+28)|0);
  var $74=HEAP32[(($73)>>2)];
  var $75=(($74+((($71)*(12))&-1))|0);
  var $76=(($75+8)|0);
  var $77=HEAPF32[(($76)>>2)];
  $wD=$77;
  var $78=(($9+240)|0);
  __ZmiRK6b2Vec2S1_($3, $vA, $vC);
  var $79=__Z5b2DotRK6b2Vec2S1_($78, $3);
  var $80=(($9+248)|0);
  __ZmiRK6b2Vec2S1_($4, $vB, $vD);
  var $81=__Z5b2DotRK6b2Vec2S1_($80, $4);
  var $82=($79)+($81);
  $Cdot=$82;
  var $83=(($9+256)|0);
  var $84=HEAPF32[(($83)>>2)];
  var $85=$wA;
  var $86=($84)*($85);
  var $87=(($9+264)|0);
  var $88=HEAPF32[(($87)>>2)];
  var $89=$wC;
  var $90=($88)*($89);
  var $91=($86)-($90);
  var $92=(($9+260)|0);
  var $93=HEAPF32[(($92)>>2)];
  var $94=$wB;
  var $95=($93)*($94);
  var $96=(($9+268)|0);
  var $97=HEAPF32[(($96)>>2)];
  var $98=$wD;
  var $99=($97)*($98);
  var $100=($95)-($99);
  var $101=($91)+($100);
  var $102=$Cdot;
  var $103=($102)+($101);
  $Cdot=$103;
  var $104=(($9+272)|0);
  var $105=HEAPF32[(($104)>>2)];
  var $106=(-$105);
  var $107=$Cdot;
  var $108=($106)*($107);
  $impulse=$108;
  var $109=$impulse;
  var $110=(($9+156)|0);
  var $111=HEAPF32[(($110)>>2)];
  var $112=($111)+($109);
  HEAPF32[(($110)>>2)]=$112;
  var $113=(($9+208)|0);
  var $114=HEAPF32[(($113)>>2)];
  var $115=$impulse;
  var $116=($114)*($115);
  var $117=(($9+240)|0);
  __ZmlfRK6b2Vec2($5, $116, $117);
  __ZN6b2Vec2pLERKS_($vA, $5);
  var $118=(($9+224)|0);
  var $119=HEAPF32[(($118)>>2)];
  var $120=$impulse;
  var $121=($119)*($120);
  var $122=(($9+256)|0);
  var $123=HEAPF32[(($122)>>2)];
  var $124=($121)*($123);
  var $125=$wA;
  var $126=($125)+($124);
  $wA=$126;
  var $127=(($9+212)|0);
  var $128=HEAPF32[(($127)>>2)];
  var $129=$impulse;
  var $130=($128)*($129);
  var $131=(($9+248)|0);
  __ZmlfRK6b2Vec2($6, $130, $131);
  __ZN6b2Vec2pLERKS_($vB, $6);
  var $132=(($9+228)|0);
  var $133=HEAPF32[(($132)>>2)];
  var $134=$impulse;
  var $135=($133)*($134);
  var $136=(($9+260)|0);
  var $137=HEAPF32[(($136)>>2)];
  var $138=($135)*($137);
  var $139=$wB;
  var $140=($139)+($138);
  $wB=$140;
  var $141=(($9+216)|0);
  var $142=HEAPF32[(($141)>>2)];
  var $143=$impulse;
  var $144=($142)*($143);
  var $145=(($9+240)|0);
  __ZmlfRK6b2Vec2($7, $144, $145);
  __ZN6b2Vec2mIERKS_($vC, $7);
  var $146=(($9+232)|0);
  var $147=HEAPF32[(($146)>>2)];
  var $148=$impulse;
  var $149=($147)*($148);
  var $150=(($9+264)|0);
  var $151=HEAPF32[(($150)>>2)];
  var $152=($149)*($151);
  var $153=$wC;
  var $154=($153)-($152);
  $wC=$154;
  var $155=(($9+220)|0);
  var $156=HEAPF32[(($155)>>2)];
  var $157=$impulse;
  var $158=($156)*($157);
  var $159=(($9+248)|0);
  __ZmlfRK6b2Vec2($8, $158, $159);
  __ZN6b2Vec2mIERKS_($vD, $8);
  var $160=(($9+236)|0);
  var $161=HEAPF32[(($160)>>2)];
  var $162=$impulse;
  var $163=($161)*($162);
  var $164=(($9+268)|0);
  var $165=HEAPF32[(($164)>>2)];
  var $166=($163)*($165);
  var $167=$wD;
  var $168=($167)-($166);
  $wD=$168;
  var $169=(($9+160)|0);
  var $170=HEAP32[(($169)>>2)];
  var $171=$2;
  var $172=(($171+28)|0);
  var $173=HEAP32[(($172)>>2)];
  var $174=(($173+((($170)*(12))&-1))|0);
  var $175=(($174)|0);
  var $176=$175;
  var $177=$vA;
  assert(8 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];
  var $178=$wA;
  var $179=(($9+160)|0);
  var $180=HEAP32[(($179)>>2)];
  var $181=$2;
  var $182=(($181+28)|0);
  var $183=HEAP32[(($182)>>2)];
  var $184=(($183+((($180)*(12))&-1))|0);
  var $185=(($184+8)|0);
  HEAPF32[(($185)>>2)]=$178;
  var $186=(($9+164)|0);
  var $187=HEAP32[(($186)>>2)];
  var $188=$2;
  var $189=(($188+28)|0);
  var $190=HEAP32[(($189)>>2)];
  var $191=(($190+((($187)*(12))&-1))|0);
  var $192=(($191)|0);
  var $193=$192;
  var $194=$vB;
  assert(8 % 1 === 0);HEAP32[(($193)>>2)]=HEAP32[(($194)>>2)];HEAP32[((($193)+(4))>>2)]=HEAP32[((($194)+(4))>>2)];
  var $195=$wB;
  var $196=(($9+164)|0);
  var $197=HEAP32[(($196)>>2)];
  var $198=$2;
  var $199=(($198+28)|0);
  var $200=HEAP32[(($199)>>2)];
  var $201=(($200+((($197)*(12))&-1))|0);
  var $202=(($201+8)|0);
  HEAPF32[(($202)>>2)]=$195;
  var $203=(($9+168)|0);
  var $204=HEAP32[(($203)>>2)];
  var $205=$2;
  var $206=(($205+28)|0);
  var $207=HEAP32[(($206)>>2)];
  var $208=(($207+((($204)*(12))&-1))|0);
  var $209=(($208)|0);
  var $210=$209;
  var $211=$vC;
  assert(8 % 1 === 0);HEAP32[(($210)>>2)]=HEAP32[(($211)>>2)];HEAP32[((($210)+(4))>>2)]=HEAP32[((($211)+(4))>>2)];
  var $212=$wC;
  var $213=(($9+168)|0);
  var $214=HEAP32[(($213)>>2)];
  var $215=$2;
  var $216=(($215+28)|0);
  var $217=HEAP32[(($216)>>2)];
  var $218=(($217+((($214)*(12))&-1))|0);
  var $219=(($218+8)|0);
  HEAPF32[(($219)>>2)]=$212;
  var $220=(($9+172)|0);
  var $221=HEAP32[(($220)>>2)];
  var $222=$2;
  var $223=(($222+28)|0);
  var $224=HEAP32[(($223)>>2)];
  var $225=(($224+((($221)*(12))&-1))|0);
  var $226=(($225)|0);
  var $227=$226;
  var $228=$vD;
  assert(8 % 1 === 0);HEAP32[(($227)>>2)]=HEAP32[(($228)>>2)];HEAP32[((($227)+(4))>>2)]=HEAP32[((($228)+(4))>>2)];
  var $229=$wD;
  var $230=(($9+172)|0);
  var $231=HEAP32[(($230)>>2)];
  var $232=$2;
  var $233=(($232+28)|0);
  var $234=HEAP32[(($233)>>2)];
  var $235=(($234+((($231)*(12))&-1))|0);
  var $236=(($235+8)|0);
  HEAPF32[(($236)>>2)]=$229;
  STACKTOP = __stackBase__;
  return;
}
function __ZNK11b2GearJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  var $L;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+156)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3+256)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=($5)*($7);
  $L=$8;
  var $9=$2;
  var $10=$L;
  var $11=($9)*($10);
  return $11;
}
function __ZNK11b2GearJoint8GetRatioEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+152)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=(__stackBase__)+(8);
      var $aB;
      var $cC=(__stackBase__)+(16);
      var $aC;
      var $cD=(__stackBase__)+(24);
      var $aD;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $qC=(__stackBase__)+(48);
      var $qD=(__stackBase__)+(56);
      var $linearError;
      var $coordinateA;
      var $coordinateB;
      var $JvAC=(__stackBase__)+(64);
      var $JvBD=(__stackBase__)+(72);
      var $JwA;
      var $JwB;
      var $JwC;
      var $JwD;
      var $mass;
      var $u=(__stackBase__)+(80);
      var $rC=(__stackBase__)+(88);
      var $3=(__stackBase__)+(96);
      var $rA=(__stackBase__)+(104);
      var $4=(__stackBase__)+(112);
      var $pC=(__stackBase__)+(120);
      var $pA=(__stackBase__)+(128);
      var $5=(__stackBase__)+(136);
      var $6=(__stackBase__)+(144);
      var $7=(__stackBase__)+(152);
      var $u1=(__stackBase__)+(160);
      var $rD=(__stackBase__)+(168);
      var $8=(__stackBase__)+(176);
      var $rB=(__stackBase__)+(184);
      var $9=(__stackBase__)+(192);
      var $10=(__stackBase__)+(200);
      var $pD=(__stackBase__)+(208);
      var $pB=(__stackBase__)+(216);
      var $11=(__stackBase__)+(224);
      var $12=(__stackBase__)+(232);
      var $13=(__stackBase__)+(240);
      var $C;
      var $impulse;
      var $14=(__stackBase__)+(248);
      var $15=(__stackBase__)+(256);
      var $16=(__stackBase__)+(264);
      var $17=(__stackBase__)+(272);
      $1=$this;
      $2=$data;
      var $18=$1;
      var $19=(($18+160)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+((($20)*(12))&-1))|0);
      var $25=(($24)|0);
      var $26=$cA;
      var $27=$25;
      assert(8 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
      var $28=(($18+160)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+((($29)*(12))&-1))|0);
      var $34=(($33+8)|0);
      var $35=HEAPF32[(($34)>>2)];
      $aA=$35;
      var $36=(($18+164)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$2;
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+((($37)*(12))&-1))|0);
      var $42=(($41)|0);
      var $43=$cB;
      var $44=$42;
      assert(8 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
      var $45=(($18+164)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$2;
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+((($46)*(12))&-1))|0);
      var $51=(($50+8)|0);
      var $52=HEAPF32[(($51)>>2)];
      $aB=$52;
      var $53=(($18+168)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$2;
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+((($54)*(12))&-1))|0);
      var $59=(($58)|0);
      var $60=$cC;
      var $61=$59;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=(($18+168)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($63)*(12))&-1))|0);
      var $68=(($67+8)|0);
      var $69=HEAPF32[(($68)>>2)];
      $aC=$69;
      var $70=(($18+172)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$2;
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+((($71)*(12))&-1))|0);
      var $76=(($75)|0);
      var $77=$cD;
      var $78=$76;
      assert(8 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];
      var $79=(($18+172)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+((($80)*(12))&-1))|0);
      var $85=(($84+8)|0);
      var $86=HEAPF32[(($85)>>2)];
      $aD=$86;
      var $87=$aA;
      __ZN5b2RotC1Ef($qA, $87);
      var $88=$aB;
      __ZN5b2RotC1Ef($qB, $88);
      var $89=$aC;
      __ZN5b2RotC1Ef($qC, $89);
      var $90=$aD;
      __ZN5b2RotC1Ef($qD, $90);
      $linearError=0;
      __ZN6b2Vec2C1Ev($JvAC);
      __ZN6b2Vec2C1Ev($JvBD);
      $mass=0;
      var $91=(($18+76)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|(0))==1;
      if ($93) { label = 2; break; } else { label = 3; break; }
    case 2: 
      __ZN6b2Vec27SetZeroEv($JvAC);
      $JwA=1;
      $JwC=1;
      var $95=(($18+224)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=(($18+232)|0);
      var $98=HEAPF32[(($97)>>2)];
      var $99=($96)+($98);
      var $100=$mass;
      var $101=($100)+($99);
      $mass=$101;
      var $102=$aA;
      var $103=$aC;
      var $104=($102)-($103);
      var $105=(($18+140)|0);
      var $106=HEAPF32[(($105)>>2)];
      var $107=($104)-($106);
      $coordinateA=$107;
      label = 4; break;
    case 3: 
      var $109=(($18+124)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u, $qC, $109);
      var $110=(($18+108)|0);
      var $111=(($18+192)|0);
      __ZmiRK6b2Vec2S1_($3, $110, $111);
      __Z5b2MulRK5b2RotRK6b2Vec2($rC, $qC, $3);
      var $112=(($18+92)|0);
      var $113=(($18+176)|0);
      __ZmiRK6b2Vec2S1_($4, $112, $113);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $4);
      var $114=$JvAC;
      var $115=$u;
      assert(8 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];
      var $116=__Z7b2CrossRK6b2Vec2S1_($rC, $u);
      $JwC=$116;
      var $117=__Z7b2CrossRK6b2Vec2S1_($rA, $u);
      $JwA=$117;
      var $118=(($18+216)|0);
      var $119=HEAPF32[(($118)>>2)];
      var $120=(($18+208)|0);
      var $121=HEAPF32[(($120)>>2)];
      var $122=($119)+($121);
      var $123=(($18+232)|0);
      var $124=HEAPF32[(($123)>>2)];
      var $125=$JwC;
      var $126=($124)*($125);
      var $127=$JwC;
      var $128=($126)*($127);
      var $129=($122)+($128);
      var $130=(($18+224)|0);
      var $131=HEAPF32[(($130)>>2)];
      var $132=$JwA;
      var $133=($131)*($132);
      var $134=$JwA;
      var $135=($133)*($134);
      var $136=($129)+($135);
      var $137=$mass;
      var $138=($137)+($136);
      $mass=$138;
      var $139=(($18+108)|0);
      var $140=(($18+192)|0);
      __ZmiRK6b2Vec2S1_($pC, $139, $140);
      __ZmiRK6b2Vec2S1_($6, $cA, $cC);
      __ZplRK6b2Vec2S1_($5, $rA, $6);
      __Z6b2MulTRK5b2RotRK6b2Vec2($pA, $qC, $5);
      __ZmiRK6b2Vec2S1_($7, $pA, $pC);
      var $141=(($18+124)|0);
      var $142=__Z5b2DotRK6b2Vec2S1_($7, $141);
      $coordinateA=$142;
      label = 4; break;
    case 4: 
      var $144=(($18+80)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145)|(0))==1;
      if ($146) { label = 5; break; } else { label = 6; break; }
    case 5: 
      __ZN6b2Vec27SetZeroEv($JvBD);
      var $148=(($18+152)|0);
      var $149=HEAPF32[(($148)>>2)];
      $JwB=$149;
      var $150=(($18+152)|0);
      var $151=HEAPF32[(($150)>>2)];
      $JwD=$151;
      var $152=(($18+152)|0);
      var $153=HEAPF32[(($152)>>2)];
      var $154=(($18+152)|0);
      var $155=HEAPF32[(($154)>>2)];
      var $156=($153)*($155);
      var $157=(($18+228)|0);
      var $158=HEAPF32[(($157)>>2)];
      var $159=(($18+236)|0);
      var $160=HEAPF32[(($159)>>2)];
      var $161=($158)+($160);
      var $162=($156)*($161);
      var $163=$mass;
      var $164=($163)+($162);
      $mass=$164;
      var $165=$aB;
      var $166=$aD;
      var $167=($165)-($166);
      var $168=(($18+144)|0);
      var $169=HEAPF32[(($168)>>2)];
      var $170=($167)-($169);
      $coordinateB=$170;
      label = 7; break;
    case 6: 
      var $172=(($18+132)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($u1, $qD, $172);
      var $173=(($18+116)|0);
      var $174=(($18+200)|0);
      __ZmiRK6b2Vec2S1_($8, $173, $174);
      __Z5b2MulRK5b2RotRK6b2Vec2($rD, $qD, $8);
      var $175=(($18+100)|0);
      var $176=(($18+184)|0);
      __ZmiRK6b2Vec2S1_($9, $175, $176);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $9);
      var $177=(($18+152)|0);
      var $178=HEAPF32[(($177)>>2)];
      __ZmlfRK6b2Vec2($10, $178, $u1);
      var $179=$JvBD;
      var $180=$10;
      assert(8 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];
      var $181=(($18+152)|0);
      var $182=HEAPF32[(($181)>>2)];
      var $183=__Z7b2CrossRK6b2Vec2S1_($rD, $u1);
      var $184=($182)*($183);
      $JwD=$184;
      var $185=(($18+152)|0);
      var $186=HEAPF32[(($185)>>2)];
      var $187=__Z7b2CrossRK6b2Vec2S1_($rB, $u1);
      var $188=($186)*($187);
      $JwB=$188;
      var $189=(($18+152)|0);
      var $190=HEAPF32[(($189)>>2)];
      var $191=(($18+152)|0);
      var $192=HEAPF32[(($191)>>2)];
      var $193=($190)*($192);
      var $194=(($18+220)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=(($18+212)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=($195)+($197);
      var $199=($193)*($198);
      var $200=(($18+236)|0);
      var $201=HEAPF32[(($200)>>2)];
      var $202=$JwD;
      var $203=($201)*($202);
      var $204=$JwD;
      var $205=($203)*($204);
      var $206=($199)+($205);
      var $207=(($18+228)|0);
      var $208=HEAPF32[(($207)>>2)];
      var $209=$JwB;
      var $210=($208)*($209);
      var $211=$JwB;
      var $212=($210)*($211);
      var $213=($206)+($212);
      var $214=$mass;
      var $215=($214)+($213);
      $mass=$215;
      var $216=(($18+116)|0);
      var $217=(($18+200)|0);
      __ZmiRK6b2Vec2S1_($pD, $216, $217);
      __ZmiRK6b2Vec2S1_($12, $cB, $cD);
      __ZplRK6b2Vec2S1_($11, $rB, $12);
      __Z6b2MulTRK5b2RotRK6b2Vec2($pB, $qD, $11);
      __ZmiRK6b2Vec2S1_($13, $pB, $pD);
      var $218=(($18+132)|0);
      var $219=__Z5b2DotRK6b2Vec2S1_($13, $218);
      $coordinateB=$219;
      label = 7; break;
    case 7: 
      var $221=$coordinateA;
      var $222=(($18+152)|0);
      var $223=HEAPF32[(($222)>>2)];
      var $224=$coordinateB;
      var $225=($223)*($224);
      var $226=($221)+($225);
      var $227=(($18+148)|0);
      var $228=HEAPF32[(($227)>>2)];
      var $229=($226)-($228);
      $C=$229;
      $impulse=0;
      var $230=$mass;
      var $231=$230 > 0;
      if ($231) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $233=$C;
      var $234=(-$233);
      var $235=$mass;
      var $236=($234)/($235);
      $impulse=$236;
      label = 9; break;
    case 9: 
      var $238=(($18+208)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=$impulse;
      var $241=($239)*($240);
      __ZmlfRK6b2Vec2($14, $241, $JvAC);
      __ZN6b2Vec2pLERKS_($cA, $14);
      var $242=(($18+224)|0);
      var $243=HEAPF32[(($242)>>2)];
      var $244=$impulse;
      var $245=($243)*($244);
      var $246=$JwA;
      var $247=($245)*($246);
      var $248=$aA;
      var $249=($248)+($247);
      $aA=$249;
      var $250=(($18+212)|0);
      var $251=HEAPF32[(($250)>>2)];
      var $252=$impulse;
      var $253=($251)*($252);
      __ZmlfRK6b2Vec2($15, $253, $JvBD);
      __ZN6b2Vec2pLERKS_($cB, $15);
      var $254=(($18+228)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=$impulse;
      var $257=($255)*($256);
      var $258=$JwB;
      var $259=($257)*($258);
      var $260=$aB;
      var $261=($260)+($259);
      $aB=$261;
      var $262=(($18+216)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=$impulse;
      var $265=($263)*($264);
      __ZmlfRK6b2Vec2($16, $265, $JvAC);
      __ZN6b2Vec2mIERKS_($cC, $16);
      var $266=(($18+232)|0);
      var $267=HEAPF32[(($266)>>2)];
      var $268=$impulse;
      var $269=($267)*($268);
      var $270=$JwC;
      var $271=($269)*($270);
      var $272=$aC;
      var $273=($272)-($271);
      $aC=$273;
      var $274=(($18+220)|0);
      var $275=HEAPF32[(($274)>>2)];
      var $276=$impulse;
      var $277=($275)*($276);
      __ZmlfRK6b2Vec2($17, $277, $JvBD);
      __ZN6b2Vec2mIERKS_($cD, $17);
      var $278=(($18+236)|0);
      var $279=HEAPF32[(($278)>>2)];
      var $280=$impulse;
      var $281=($279)*($280);
      var $282=$JwD;
      var $283=($281)*($282);
      var $284=$aD;
      var $285=($284)-($283);
      $aD=$285;
      var $286=(($18+160)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$2;
      var $289=(($288+24)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=(($290+((($287)*(12))&-1))|0);
      var $292=(($291)|0);
      var $293=$292;
      var $294=$cA;
      assert(8 % 1 === 0);HEAP32[(($293)>>2)]=HEAP32[(($294)>>2)];HEAP32[((($293)+(4))>>2)]=HEAP32[((($294)+(4))>>2)];
      var $295=$aA;
      var $296=(($18+160)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$2;
      var $299=(($298+24)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=(($300+((($297)*(12))&-1))|0);
      var $302=(($301+8)|0);
      HEAPF32[(($302)>>2)]=$295;
      var $303=(($18+164)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=$2;
      var $306=(($305+24)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($307+((($304)*(12))&-1))|0);
      var $309=(($308)|0);
      var $310=$309;
      var $311=$cB;
      assert(8 % 1 === 0);HEAP32[(($310)>>2)]=HEAP32[(($311)>>2)];HEAP32[((($310)+(4))>>2)]=HEAP32[((($311)+(4))>>2)];
      var $312=$aB;
      var $313=(($18+164)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$2;
      var $316=(($315+24)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317+((($314)*(12))&-1))|0);
      var $319=(($318+8)|0);
      HEAPF32[(($319)>>2)]=$312;
      var $320=(($18+168)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=$2;
      var $323=(($322+24)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324+((($321)*(12))&-1))|0);
      var $326=(($325)|0);
      var $327=$326;
      var $328=$cC;
      assert(8 % 1 === 0);HEAP32[(($327)>>2)]=HEAP32[(($328)>>2)];HEAP32[((($327)+(4))>>2)]=HEAP32[((($328)+(4))>>2)];
      var $329=$aC;
      var $330=(($18+168)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=$2;
      var $333=(($332+24)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=(($334+((($331)*(12))&-1))|0);
      var $336=(($335+8)|0);
      HEAPF32[(($336)>>2)]=$329;
      var $337=(($18+172)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=$2;
      var $340=(($339+24)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341+((($338)*(12))&-1))|0);
      var $343=(($342)|0);
      var $344=$343;
      var $345=$cD;
      assert(8 % 1 === 0);HEAP32[(($344)>>2)]=HEAP32[(($345)>>2)];HEAP32[((($344)+(4))>>2)]=HEAP32[((($345)+(4))>>2)];
      var $346=$aD;
      var $347=(($18+172)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=$2;
      var $350=(($349+24)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=(($351+((($348)*(12))&-1))|0);
      var $353=(($352+8)|0);
      HEAPF32[(($353)>>2)]=$346;
      var $354=$linearError;
      var $355=$354 < 0.004999999888241291;
      STACKTOP = __stackBase__;
      return $355;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK11b2GearJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+92)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK11b2GearJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+100)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK11b2GearJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+156)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3+240)|0);
  __ZmlfRK6b2Vec2($P, $5, $6);
  var $7=$2;
  __ZmlfRK6b2Vec2($agg_result, $7, $P);
  STACKTOP = __stackBase__;
  return;
}
function __ZN11b2GearJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  var $index1;
  var $index2;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  var $13=(($2+68)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14+56)|0);
  var $16=HEAP32[(($15)>>2)];
  $index1=$16;
  var $17=(($2+72)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=(($18+56)|0);
  var $20=HEAP32[(($19)>>2)];
  $index2=$20;
  __Z5b2LogPKcz(((5250120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $21=$indexA;
  __Z5b2LogPKcz(((5249416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$21,tempInt));
  var $22=$indexB;
  __Z5b2LogPKcz(((5248728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$22,tempInt));
  var $23=$2;
  var $24=(($23+61)|0);
  var $25=HEAP8[($24)];
  var $26=(($25) & 1);
  var $27=(($26)&(1));
  __Z5b2LogPKcz(((5248168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$27,tempInt));
  var $28=$index1;
  __Z5b2LogPKcz(((5247676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$28,tempInt));
  var $29=$index2;
  __Z5b2LogPKcz(((5247272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$29,tempInt));
  var $30=(($2+152)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$31;
  __Z5b2LogPKcz(((5257896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$32,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $33=$2;
  var $34=(($33+56)|0);
  var $35=HEAP32[(($34)>>2)];
  __Z5b2LogPKcz(((5257476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$35,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN11b2GearJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2GearJointD2Ev($2);
  return;
}
function __ZN11b2GearJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN11b2GearJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2GearJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN11b2GearJoint8SetRatioEf($this, $ratio) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$ratio;
      var $3=$1;
      var $4=$2;
      var $5=__Z9b2IsValidf($4);
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5251684)|0), 398, ((5263736)|0), ((5251232)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $10=$2;
      var $11=(($3+152)|0);
      HEAPF32[(($11)>>2)]=$10;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2Joint6CreateEPK10b2JointDefP16b2BlockAllocator($def, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $joint;
      var $mem;
      var $mem1;
      var $mem2;
      var $mem3;
      var $mem4;
      var $mem5;
      var $mem6;
      var $mem7;
      var $mem8;
      var $mem9;
      $1=$def;
      $2=$allocator;
      $joint=0;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      if ((($5)|(0))==3) {
        label = 2; break;
      }
      else if ((($5)|(0))==5) {
        label = 5; break;
      }
      else if ((($5)|(0))==2) {
        label = 8; break;
      }
      else if ((($5)|(0))==1) {
        label = 11; break;
      }
      else if ((($5)|(0))==4) {
        label = 14; break;
      }
      else if ((($5)|(0))==6) {
        label = 17; break;
      }
      else if ((($5)|(0))==7) {
        label = 20; break;
      }
      else if ((($5)|(0))==8) {
        label = 23; break;
      }
      else if ((($5)|(0))==9) {
        label = 26; break;
      }
      else if ((($5)|(0))==10) {
        label = 29; break;
      }
      else {
      label = 32; break;
      }
    case 2: 
      var $7=$2;
      var $8=__ZN16b2BlockAllocator8AllocateEi($7, 176);
      $mem=$8;
      var $9=$mem;
      var $10=(($9)|(0))==0;
      if ($10) { var $16 = 0;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $12=$9;
      var $13=$1;
      var $14=$13;
      __ZN15b2DistanceJointC2EPK18b2DistanceJointDef($12, $14);
      var $16 = $12;label = 4; break;
    case 4: 
      var $16;
      var $17=$16;
      $joint=$17;
      label = 33; break;
    case 5: 
      var $19=$2;
      var $20=__ZN16b2BlockAllocator8AllocateEi($19, 168);
      $mem1=$20;
      var $21=$mem1;
      var $22=(($21)|(0))==0;
      if ($22) { var $28 = 0;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $24=$21;
      var $25=$1;
      var $26=$25;
      __ZN12b2MouseJointC2EPK15b2MouseJointDef($24, $26);
      var $28 = $24;label = 7; break;
    case 7: 
      var $28;
      var $29=$28;
      $joint=$29;
      label = 33; break;
    case 8: 
      var $31=$2;
      var $32=__ZN16b2BlockAllocator8AllocateEi($31, 256);
      $mem2=$32;
      var $33=$mem2;
      var $34=(($33)|(0))==0;
      if ($34) { var $40 = 0;label = 10; break; } else { label = 9; break; }
    case 9: 
      var $36=$33;
      var $37=$1;
      var $38=$37;
      __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($36, $38);
      var $40 = $36;label = 10; break;
    case 10: 
      var $40;
      var $41=$40;
      $joint=$41;
      label = 33; break;
    case 11: 
      var $43=$2;
      var $44=__ZN16b2BlockAllocator8AllocateEi($43, 228);
      $mem3=$44;
      var $45=$mem3;
      var $46=(($45)|(0))==0;
      if ($46) { var $52 = 0;label = 13; break; } else { label = 12; break; }
    case 12: 
      var $48=$45;
      var $49=$1;
      var $50=$49;
      __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($48, $50);
      var $52 = $48;label = 13; break;
    case 13: 
      var $52;
      var $53=$52;
      $joint=$53;
      label = 33; break;
    case 14: 
      var $55=$2;
      var $56=__ZN16b2BlockAllocator8AllocateEi($55, 196);
      $mem4=$56;
      var $57=$mem4;
      var $58=(($57)|(0))==0;
      if ($58) { var $64 = 0;label = 16; break; } else { label = 15; break; }
    case 15: 
      var $60=$57;
      var $61=$1;
      var $62=$61;
      __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($60, $62);
      var $64 = $60;label = 16; break;
    case 16: 
      var $64;
      var $65=$64;
      $joint=$65;
      label = 33; break;
    case 17: 
      var $67=$2;
      var $68=__ZN16b2BlockAllocator8AllocateEi($67, 276);
      $mem5=$68;
      var $69=$mem5;
      var $70=(($69)|(0))==0;
      if ($70) { var $76 = 0;label = 19; break; } else { label = 18; break; }
    case 18: 
      var $72=$69;
      var $73=$1;
      var $74=$73;
      __ZN11b2GearJointC2EPK14b2GearJointDef($72, $74);
      var $76 = $72;label = 19; break;
    case 19: 
      var $76;
      var $77=$76;
      $joint=$77;
      label = 33; break;
    case 20: 
      var $79=$2;
      var $80=__ZN16b2BlockAllocator8AllocateEi($79, 224);
      $mem6=$80;
      var $81=$mem6;
      var $82=(($81)|(0))==0;
      if ($82) { var $88 = 0;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $84=$81;
      var $85=$1;
      var $86=$85;
      __ZN12b2WheelJointC2EPK15b2WheelJointDef($84, $86);
      var $88 = $84;label = 22; break;
    case 22: 
      var $88;
      var $89=$88;
      $joint=$89;
      label = 33; break;
    case 23: 
      var $91=$2;
      var $92=__ZN16b2BlockAllocator8AllocateEi($91, 208);
      $mem7=$92;
      var $93=$mem7;
      var $94=(($93)|(0))==0;
      if ($94) { var $100 = 0;label = 25; break; } else { label = 24; break; }
    case 24: 
      var $96=$93;
      var $97=$1;
      var $98=$97;
      __ZN11b2WeldJointC2EPK14b2WeldJointDef($96, $98);
      var $100 = $96;label = 25; break;
    case 25: 
      var $100;
      var $101=$100;
      $joint=$101;
      label = 33; break;
    case 26: 
      var $103=$2;
      var $104=__ZN16b2BlockAllocator8AllocateEi($103, 180);
      $mem8=$104;
      var $105=$mem8;
      var $106=(($105)|(0))==0;
      if ($106) { var $112 = 0;label = 28; break; } else { label = 27; break; }
    case 27: 
      var $108=$105;
      var $109=$1;
      var $110=$109;
      __ZN15b2FrictionJointC2EPK18b2FrictionJointDef($108, $110);
      var $112 = $108;label = 28; break;
    case 28: 
      var $112;
      var $113=$112;
      $joint=$113;
      label = 33; break;
    case 29: 
      var $115=$2;
      var $116=__ZN16b2BlockAllocator8AllocateEi($115, 168);
      $mem9=$116;
      var $117=$mem9;
      var $118=(($117)|(0))==0;
      if ($118) { var $124 = 0;label = 31; break; } else { label = 30; break; }
    case 30: 
      var $120=$117;
      var $121=$1;
      var $122=$121;
      __ZN11b2RopeJointC2EPK14b2RopeJointDef($120, $122);
      var $124 = $120;label = 31; break;
    case 31: 
      var $124;
      var $125=$124;
      $joint=$125;
      label = 33; break;
    case 32: 
      ___assert_func(((5251532)|0), 113, ((5261004)|0), ((5256340)|0));
      throw "Reached an unreachable!"
    case 33: 
      var $128=$joint;
      return $128;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2MouseJoint9GetTargetEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  return $3;
}
function __ZN12b2MouseJoint11SetMaxForceEf($this, $force) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$force;
  var $3=$1;
  var $4=$2;
  var $5=(($3+104)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK12b2MouseJoint11GetMaxForceEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+104)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN12b2MouseJoint12SetFrequencyEf($this, $hz) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$hz;
  var $3=$1;
  var $4=$2;
  var $5=(($3+84)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK12b2MouseJoint12GetFrequencyEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+84)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN12b2MouseJoint15SetDampingRatioEf($this, $ratio) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$ratio;
  var $3=$1;
  var $4=$2;
  var $5=(($3+88)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK12b2MouseJoint15GetDampingRatioEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+88)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK6b2Body7GetMassEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+116)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK7b2Joint8IsActiveEv($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$this;
      var $2=$1;
      var $3=(($2+48)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=__ZNK6b2Body8IsActiveEv($4);
      if ($5) { label = 2; break; } else { var $11 = 0;label = 3; break; }
    case 2: 
      var $7=(($2+52)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=__ZNK6b2Body8IsActiveEv($8);
      var $11 = $9;label = 3; break;
    case 3: 
      var $11;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2Joint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  $1=$this;
  var $2=$1;
  __Z5b2LogPKcz(((5251184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN7b2JointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2JointD2Ev($2);
  return;
}
function __ZN7b2JointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2MouseJoint9SetTargetERK6b2Vec2($this, $target) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$target;
      var $3=$1;
      var $4=$3;
      var $5=(($4+52)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=__ZNK6b2Body7IsAwakeEv($6);
      var $8=(($7)&(1));
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$3;
      var $12=(($11+52)|0);
      var $13=HEAP32[(($12)>>2)];
      __ZN6b2Body8SetAwakeEb($13, 1);
      label = 3; break;
    case 3: 
      var $15=(($3+76)|0);
      var $16=$2;
      var $17=$15;
      var $18=$16;
      assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2Joint7DestroyEPS_P16b2BlockAllocator($joint, $allocator) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$joint;
      $2=$allocator;
      var $3=$1;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      FUNCTION_TABLE[$7]($3);
      var $8=$1;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      if ((($10)|(0))==3) {
        label = 2; break;
      }
      else if ((($10)|(0))==5) {
        label = 3; break;
      }
      else if ((($10)|(0))==2) {
        label = 4; break;
      }
      else if ((($10)|(0))==1) {
        label = 5; break;
      }
      else if ((($10)|(0))==4) {
        label = 6; break;
      }
      else if ((($10)|(0))==6) {
        label = 7; break;
      }
      else if ((($10)|(0))==7) {
        label = 8; break;
      }
      else if ((($10)|(0))==8) {
        label = 9; break;
      }
      else if ((($10)|(0))==9) {
        label = 10; break;
      }
      else if ((($10)|(0))==10) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
    case 2: 
      var $12=$2;
      var $13=$1;
      var $14=$13;
      __ZN16b2BlockAllocator4FreeEPvi($12, $14, 176);
      label = 13; break;
    case 3: 
      var $16=$2;
      var $17=$1;
      var $18=$17;
      __ZN16b2BlockAllocator4FreeEPvi($16, $18, 168);
      label = 13; break;
    case 4: 
      var $20=$2;
      var $21=$1;
      var $22=$21;
      __ZN16b2BlockAllocator4FreeEPvi($20, $22, 256);
      label = 13; break;
    case 5: 
      var $24=$2;
      var $25=$1;
      var $26=$25;
      __ZN16b2BlockAllocator4FreeEPvi($24, $26, 228);
      label = 13; break;
    case 6: 
      var $28=$2;
      var $29=$1;
      var $30=$29;
      __ZN16b2BlockAllocator4FreeEPvi($28, $30, 196);
      label = 13; break;
    case 7: 
      var $32=$2;
      var $33=$1;
      var $34=$33;
      __ZN16b2BlockAllocator4FreeEPvi($32, $34, 276);
      label = 13; break;
    case 8: 
      var $36=$2;
      var $37=$1;
      var $38=$37;
      __ZN16b2BlockAllocator4FreeEPvi($36, $38, 224);
      label = 13; break;
    case 9: 
      var $40=$2;
      var $41=$1;
      var $42=$41;
      __ZN16b2BlockAllocator4FreeEPvi($40, $42, 208);
      label = 13; break;
    case 10: 
      var $44=$2;
      var $45=$1;
      var $46=$45;
      __ZN16b2BlockAllocator4FreeEPvi($44, $46, 180);
      label = 13; break;
    case 11: 
      var $48=$2;
      var $49=$1;
      var $50=$49;
      __ZN16b2BlockAllocator4FreeEPvi($48, $50, 168);
      label = 13; break;
    case 12: 
      ___assert_func(((5251532)|0), 166, ((5260944)|0), ((5256340)|0));
      throw "Reached an unreachable!"
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2JointC2EPK10b2JointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$def;
      var $3=$1;
      var $4=$3;
      HEAP32[(($4)>>2)]=((5264448)|0);
      var $5=(($3+16)|0);
      var $6=(($3+32)|0);
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)|(0))!=(($12)|(0));
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5251532)|0), 173, ((5260904)|0), ((5253368)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $18=$2;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($3+4)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=(($3+8)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=(($3+12)|0);
      HEAP32[(($23)>>2)]=0;
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($3+48)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=$2;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($3+52)|0);
      HEAP32[(($31)>>2)]=$30;
      var $32=(($3+56)|0);
      HEAP32[(($32)>>2)]=0;
      var $33=$2;
      var $34=(($33+16)|0);
      var $35=HEAP8[($34)];
      var $36=(($35) & 1);
      var $37=(($3+61)|0);
      var $38=(($36)&(1));
      HEAP8[($37)]=$38;
      var $39=(($3+60)|0);
      HEAP8[($39)]=0;
      var $40=$2;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($3+64)|0);
      HEAP32[(($43)>>2)]=$42;
      var $44=(($3+16)|0);
      var $45=(($44+4)|0);
      HEAP32[(($45)>>2)]=0;
      var $46=(($3+16)|0);
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=0;
      var $48=(($3+16)|0);
      var $49=(($48+8)|0);
      HEAP32[(($49)>>2)]=0;
      var $50=(($3+16)|0);
      var $51=(($50+12)|0);
      HEAP32[(($51)>>2)]=0;
      var $52=(($3+32)|0);
      var $53=(($52+4)|0);
      HEAP32[(($53)>>2)]=0;
      var $54=(($3+32)|0);
      var $55=(($54)|0);
      HEAP32[(($55)>>2)]=0;
      var $56=(($3+32)|0);
      var $57=(($56+8)|0);
      HEAP32[(($57)>>2)]=0;
      var $58=(($3+32)|0);
      var $59=(($58+12)|0);
      HEAP32[(($59)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2MouseJointC2EPK15b2MouseJointDef($this, $def) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$this;
      $2=$def;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$8;
      __ZN7b2JointC2EPK10b2JointDef($7, $9);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5265248)|0);
      var $11=(($6+68)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 13; break; }
    case 2: 
      var $13=(($6+76)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $15=(($6+96)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $17=(($6+120)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $19=(($6+128)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $21=(($6+144)|0);
      (function() { try { __THREW__ = 0; return __ZN7b2Mat22C1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $23=(($6+160)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $25=$2;
      var $26=(($25+20)|0);
      var $27 = (function() { try { __THREW__ = 0; return __ZNK6b2Vec27IsValidEv($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 13; break; }
    case 9: 
      if ($27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 14; break;
    case 11: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5251356)|0), 34, ((5263444)|0), ((5256280)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
    case 12: 
      throw "Reached an unreachable!"
    case 13: 
      var $33$0 = ___cxa_find_matching_catch(-1, -1); $33$1 = tempRet0;
      var $34=$33$0;
      $3=$34;
      var $35=$33$1;
      $4=$35;
      var $36=$6;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 38; break; }
      label = 14; break;
    case 14: 
      var $39=$2;
      var $40=(($39+28)|0);
      var $41=HEAPF32[(($40)>>2)];
      var $42 = (function() { try { __THREW__ = 0; return __Z9b2IsValidf($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 13; break; }
    case 15: 
      if ($42) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $45=$2;
      var $46=(($45+28)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=$47 >= 0;
      if ($48) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 20; break;
    case 18: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5251356)|0), 35, ((5263444)|0), ((5253316)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 13; break; }
    case 19: 
      throw "Reached an unreachable!"
      label = 20; break;
    case 20: 
      var $54=$2;
      var $55=(($54+32)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57 = (function() { try { __THREW__ = 0; return __Z9b2IsValidf($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 13; break; }
    case 21: 
      if ($57) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $60=$2;
      var $61=(($60+32)|0);
      var $62=HEAPF32[(($61)>>2)];
      var $63=$62 >= 0;
      if ($63) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 26; break;
    case 24: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5251356)|0), 36, ((5263444)|0), ((5251128)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 13; break; }
    case 25: 
      throw "Reached an unreachable!"
      label = 26; break;
    case 26: 
      var $69=$2;
      var $70=(($69+36)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72 = (function() { try { __THREW__ = 0; return __Z9b2IsValidf($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 13; break; }
    case 27: 
      if ($72) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $75=$2;
      var $76=(($75+36)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=$77 >= 0;
      if ($78) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 32; break;
    case 30: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5251356)|0), 37, ((5263444)|0), ((5250060)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 13; break; }
    case 31: 
      throw "Reached an unreachable!"
      label = 32; break;
    case 32: 
      var $84=(($6+76)|0);
      var $85=$2;
      var $86=(($85+20)|0);
      var $87=$84;
      var $88=$86;
      assert(8 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];
      var $89=(($6+68)|0);
      var $90=$6;
      var $91=(($90+52)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93 = (function() { try { __THREW__ = 0; return __ZNK6b2Body12GetTransformEv($92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 13; break; }
    case 33: 
      var $95=(($6+76)|0);
      (function() { try { __THREW__ = 0; return __Z6b2MulTRK11b2TransformRK6b2Vec2($5, $93, $95) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 13; break; }
    case 34: 
      var $97=$89;
      var $98=$5;
      assert(8 % 1 === 0);HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($97)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];
      var $99=$2;
      var $100=(($99+28)|0);
      var $101=HEAPF32[(($100)>>2)];
      var $102=(($6+104)|0);
      HEAPF32[(($102)>>2)]=$101;
      var $103=(($6+96)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 13; break; }
    case 35: 
      var $105=$2;
      var $106=(($105+32)|0);
      var $107=HEAPF32[(($106)>>2)];
      var $108=(($6+84)|0);
      HEAPF32[(($108)>>2)]=$107;
      var $109=$2;
      var $110=(($109+36)|0);
      var $111=HEAPF32[(($110)>>2)];
      var $112=(($6+88)|0);
      HEAPF32[(($112)>>2)]=$111;
      var $113=(($6+92)|0);
      HEAPF32[(($113)>>2)]=0;
      var $114=(($6+108)|0);
      HEAPF32[(($114)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    case 36: 
      label = 37; break;
    case 37: 
      var $117=$3;
      var $118=$4;
      var $119$0=$117;
      var $119$1=0;
      var $120$0=$119$0;
      var $120$1=$118;
      ___resumeException($120$0)
    case 38: 
      var $122$0 = ___cxa_find_matching_catch(-1, -1,0); $122$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cB=__stackBase__;
      var $aB;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $qB=(__stackBase__)+(16);
      var $mass;
      var $omega;
      var $d;
      var $k;
      var $h;
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(32);
      var $K=(__stackBase__)+(40);
      var $5=(__stackBase__)+(56);
      var $6=(__stackBase__)+(72);
      var $7=(__stackBase__)+(80);
      var $8=(__stackBase__)+(88);
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=$9;
      var $11=(($10+52)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($9+116)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=(($9+128)|0);
      var $17=$9;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+28)|0);
      var $21=(($20)|0);
      var $22=$16;
      var $23=$21;
      assert(8 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
      var $24=$9;
      var $25=(($24+52)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+120)|0);
      var $28=HEAPF32[(($27)>>2)];
      var $29=(($9+136)|0);
      HEAPF32[(($29)>>2)]=$28;
      var $30=$9;
      var $31=(($30+52)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+128)|0);
      var $34=HEAPF32[(($33)>>2)];
      var $35=(($9+140)|0);
      HEAPF32[(($35)>>2)]=$34;
      var $36=(($9+116)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$2;
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+((($37)*(12))&-1))|0);
      var $42=(($41)|0);
      var $43=$cB;
      var $44=$42;
      assert(8 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
      var $45=(($9+116)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$2;
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+((($46)*(12))&-1))|0);
      var $51=(($50+8)|0);
      var $52=HEAPF32[(($51)>>2)];
      $aB=$52;
      var $53=(($9+116)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$2;
      var $56=(($55+28)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+((($54)*(12))&-1))|0);
      var $59=(($58)|0);
      var $60=$vB;
      var $61=$59;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=(($9+116)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+28)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($63)*(12))&-1))|0);
      var $68=(($67+8)|0);
      var $69=HEAPF32[(($68)>>2)];
      $wB=$69;
      var $70=$aB;
      __ZN5b2RotC1Ef($qB, $70);
      var $71=$9;
      var $72=(($71+52)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=__ZNK6b2Body7GetMassEv($73);
      $mass=$74;
      var $75=(($9+84)|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=($76)*(6.2831854820251465);
      $omega=$77;
      var $78=$mass;
      var $79=($78)*(2);
      var $80=(($9+88)|0);
      var $81=HEAPF32[(($80)>>2)];
      var $82=($79)*($81);
      var $83=$omega;
      var $84=($82)*($83);
      $d=$84;
      var $85=$mass;
      var $86=$omega;
      var $87=$omega;
      var $88=($86)*($87);
      var $89=($85)*($88);
      $k=$89;
      var $90=$2;
      var $91=(($90)|0);
      var $92=(($91)|0);
      var $93=HEAPF32[(($92)>>2)];
      $h=$93;
      var $94=$d;
      var $95=$h;
      var $96=$k;
      var $97=($95)*($96);
      var $98=($94)+($97);
      var $99=$98 > 1.1920928955078125e-7;
      if ($99) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5251356)|0), 125, ((5263496)|0), ((5249388)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $104=$h;
      var $105=$d;
      var $106=$h;
      var $107=$k;
      var $108=($106)*($107);
      var $109=($105)+($108);
      var $110=($104)*($109);
      var $111=(($9+108)|0);
      HEAPF32[(($111)>>2)]=$110;
      var $112=(($9+108)|0);
      var $113=HEAPF32[(($112)>>2)];
      var $114=$113 != 0;
      if ($114) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $116=(($9+108)|0);
      var $117=HEAPF32[(($116)>>2)];
      var $118=(1)/($117);
      var $119=(($9+108)|0);
      HEAPF32[(($119)>>2)]=$118;
      label = 6; break;
    case 6: 
      var $121=$h;
      var $122=$k;
      var $123=($121)*($122);
      var $124=(($9+108)|0);
      var $125=HEAPF32[(($124)>>2)];
      var $126=($123)*($125);
      var $127=(($9+92)|0);
      HEAPF32[(($127)>>2)]=$126;
      var $128=(($9+120)|0);
      var $129=(($9+68)|0);
      var $130=(($9+128)|0);
      __ZmiRK6b2Vec2S1_($4, $129, $130);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qB, $4);
      var $131=$128;
      var $132=$3;
      assert(8 % 1 === 0);HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[((($131)+(4))>>2)]=HEAP32[((($132)+(4))>>2)];
      __ZN7b2Mat22C1Ev($K);
      var $133=(($9+136)|0);
      var $134=HEAPF32[(($133)>>2)];
      var $135=(($9+140)|0);
      var $136=HEAPF32[(($135)>>2)];
      var $137=(($9+120)|0);
      var $138=(($137+4)|0);
      var $139=HEAPF32[(($138)>>2)];
      var $140=($136)*($139);
      var $141=(($9+120)|0);
      var $142=(($141+4)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=($140)*($143);
      var $145=($134)+($144);
      var $146=(($9+108)|0);
      var $147=HEAPF32[(($146)>>2)];
      var $148=($145)+($147);
      var $149=(($K)|0);
      var $150=(($149)|0);
      HEAPF32[(($150)>>2)]=$148;
      var $151=(($9+140)|0);
      var $152=HEAPF32[(($151)>>2)];
      var $153=(-$152);
      var $154=(($9+120)|0);
      var $155=(($154)|0);
      var $156=HEAPF32[(($155)>>2)];
      var $157=($153)*($156);
      var $158=(($9+120)|0);
      var $159=(($158+4)|0);
      var $160=HEAPF32[(($159)>>2)];
      var $161=($157)*($160);
      var $162=(($K)|0);
      var $163=(($162+4)|0);
      HEAPF32[(($163)>>2)]=$161;
      var $164=(($K)|0);
      var $165=(($164+4)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=(($K+8)|0);
      var $168=(($167)|0);
      HEAPF32[(($168)>>2)]=$166;
      var $169=(($9+136)|0);
      var $170=HEAPF32[(($169)>>2)];
      var $171=(($9+140)|0);
      var $172=HEAPF32[(($171)>>2)];
      var $173=(($9+120)|0);
      var $174=(($173)|0);
      var $175=HEAPF32[(($174)>>2)];
      var $176=($172)*($175);
      var $177=(($9+120)|0);
      var $178=(($177)|0);
      var $179=HEAPF32[(($178)>>2)];
      var $180=($176)*($179);
      var $181=($170)+($180);
      var $182=(($9+108)|0);
      var $183=HEAPF32[(($182)>>2)];
      var $184=($181)+($183);
      var $185=(($K+8)|0);
      var $186=(($185+4)|0);
      HEAPF32[(($186)>>2)]=$184;
      var $187=(($9+144)|0);
      __ZNK7b2Mat2210GetInverseEv($5, $K);
      var $188=$187;
      var $189=$5;
      assert(16 % 1 === 0);HEAP32[(($188)>>2)]=HEAP32[(($189)>>2)];HEAP32[((($188)+(4))>>2)]=HEAP32[((($189)+(4))>>2)];HEAP32[((($188)+(8))>>2)]=HEAP32[((($189)+(8))>>2)];HEAP32[((($188)+(12))>>2)]=HEAP32[((($189)+(12))>>2)];
      var $190=(($9+160)|0);
      var $191=(($9+120)|0);
      __ZplRK6b2Vec2S1_($7, $cB, $191);
      var $192=(($9+76)|0);
      __ZmiRK6b2Vec2S1_($6, $7, $192);
      var $193=$190;
      var $194=$6;
      assert(8 % 1 === 0);HEAP32[(($193)>>2)]=HEAP32[(($194)>>2)];HEAP32[((($193)+(4))>>2)]=HEAP32[((($194)+(4))>>2)];
      var $195=(($9+160)|0);
      var $196=(($9+92)|0);
      var $197=HEAPF32[(($196)>>2)];
      __ZN6b2Vec2mLEf($195, $197);
      var $198=$wB;
      var $199=($198)*(0.9800000190734863);
      $wB=$199;
      var $200=$2;
      var $201=(($200)|0);
      var $202=(($201+20)|0);
      var $203=HEAP8[($202)];
      var $204=(($203) & 1);
      if ($204) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $206=(($9+96)|0);
      var $207=$2;
      var $208=(($207)|0);
      var $209=(($208+8)|0);
      var $210=HEAPF32[(($209)>>2)];
      __ZN6b2Vec2mLEf($206, $210);
      var $211=(($9+136)|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=(($9+96)|0);
      __ZmlfRK6b2Vec2($8, $212, $213);
      __ZN6b2Vec2pLERKS_($vB, $8);
      var $214=(($9+140)|0);
      var $215=HEAPF32[(($214)>>2)];
      var $216=(($9+120)|0);
      var $217=(($9+96)|0);
      var $218=__Z7b2CrossRK6b2Vec2S1_($216, $217);
      var $219=($215)*($218);
      var $220=$wB;
      var $221=($220)+($219);
      $wB=$221;
      label = 9; break;
    case 8: 
      var $223=(($9+96)|0);
      __ZN6b2Vec27SetZeroEv($223);
      label = 9; break;
    case 9: 
      var $225=(($9+116)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$2;
      var $228=(($227+28)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=(($229+((($226)*(12))&-1))|0);
      var $231=(($230)|0);
      var $232=$231;
      var $233=$vB;
      assert(8 % 1 === 0);HEAP32[(($232)>>2)]=HEAP32[(($233)>>2)];HEAP32[((($232)+(4))>>2)]=HEAP32[((($233)+(4))>>2)];
      var $234=$wB;
      var $235=(($9+116)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=$2;
      var $238=(($237+28)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($239+((($236)*(12))&-1))|0);
      var $241=(($240+8)|0);
      HEAPF32[(($241)>>2)]=$234;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  return 1;
}
function __ZNK12b2MouseJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=0;
  return $5;
}
function __ZNK6b2Body8GetAngleEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=(($3+28)|0);
  var $5=HEAPF32[(($4)>>2)];
  return $5;
}
function __ZN6b2Vec37SetZeroEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAPF32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAPF32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  HEAPF32[(($5)>>2)]=0;
  return;
}
function __ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $vB=__stackBase__;
      var $wB;
      var $Cdot=(__stackBase__)+(8);
      var $3=(__stackBase__)+(16);
      var $impulse=(__stackBase__)+(24);
      var $4=(__stackBase__)+(32);
      var $5=(__stackBase__)+(40);
      var $6=(__stackBase__)+(48);
      var $7=(__stackBase__)+(56);
      var $oldImpulse=(__stackBase__)+(64);
      var $maxImpulse;
      var $8=(__stackBase__)+(72);
      var $9=(__stackBase__)+(80);
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=(($10+116)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+28)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+((($12)*(12))&-1))|0);
      var $17=(($16)|0);
      var $18=$vB;
      var $19=$17;
      assert(8 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
      var $20=(($10+116)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+((($21)*(12))&-1))|0);
      var $26=(($25+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      $wB=$27;
      var $28=$wB;
      var $29=(($10+120)|0);
      __Z7b2CrossfRK6b2Vec2($3, $28, $29);
      __ZplRK6b2Vec2S1_($Cdot, $vB, $3);
      var $30=(($10+144)|0);
      var $31=(($10+160)|0);
      __ZplRK6b2Vec2S1_($5, $Cdot, $31);
      var $32=(($10+108)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=(($10+96)|0);
      __ZmlfRK6b2Vec2($6, $33, $34);
      __ZplRK6b2Vec2S1_($7, $5, $6);
      __ZNK6b2Vec2ngEv($4, $7);
      __Z5b2MulRK7b2Mat22RK6b2Vec2($impulse, $30, $4);
      var $35=(($10+96)|0);
      var $36=$oldImpulse;
      var $37=$35;
      assert(8 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
      var $38=(($10+96)|0);
      __ZN6b2Vec2pLERKS_($38, $impulse);
      var $39=$2;
      var $40=(($39)|0);
      var $41=(($40)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($10+104)|0);
      var $44=HEAPF32[(($43)>>2)];
      var $45=($42)*($44);
      $maxImpulse=$45;
      var $46=(($10+96)|0);
      var $47=__ZNK6b2Vec213LengthSquaredEv($46);
      var $48=$maxImpulse;
      var $49=$maxImpulse;
      var $50=($48)*($49);
      var $51=$47 > $50;
      if ($51) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $53=(($10+96)|0);
      var $54=$maxImpulse;
      var $55=(($10+96)|0);
      var $56=__ZNK6b2Vec26LengthEv($55);
      var $57=($54)/($56);
      __ZN6b2Vec2mLEf($53, $57);
      label = 3; break;
    case 3: 
      var $59=(($10+96)|0);
      __ZmiRK6b2Vec2S1_($8, $59, $oldImpulse);
      var $60=$impulse;
      var $61=$8;
      assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
      var $62=(($10+136)|0);
      var $63=HEAPF32[(($62)>>2)];
      __ZmlfRK6b2Vec2($9, $63, $impulse);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $64=(($10+140)|0);
      var $65=HEAPF32[(($64)>>2)];
      var $66=(($10+120)|0);
      var $67=__Z7b2CrossRK6b2Vec2S1_($66, $impulse);
      var $68=($65)*($67);
      var $69=$wB;
      var $70=($69)+($68);
      $wB=$70;
      var $71=(($10+116)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+28)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+((($72)*(12))&-1))|0);
      var $77=(($76)|0);
      var $78=$77;
      var $79=$vB;
      assert(8 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];
      var $80=$wB;
      var $81=(($10+116)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$2;
      var $84=(($83+28)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+((($82)*(12))&-1))|0);
      var $87=(($86+8)|0);
      HEAPF32[(($87)>>2)]=$80;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2MouseJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];
  return;
}
function __ZNK12b2MouseJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK12b2MouseJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+96)|0);
  __ZmlfRK6b2Vec2($agg_result, $4, $5);
  return;
}
function __ZN12b2MouseJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  $1=$this;
  var $2=$1;
  __Z5b2LogPKcz(((5248688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN12b2MouseJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2MouseJointD2Ev($2);
  return;
}
function __ZN12b2MouseJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN12b2MouseJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2MouseJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN19b2PrismaticJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $bA, $bB, $anchor, $axis) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6=__stackBase__;
  var $7=(__stackBase__)+(8);
  var $8=(__stackBase__)+(16);
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  $5=$axis;
  var $9=$1;
  var $10=$2;
  var $11=$9;
  var $12=(($11+8)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$3;
  var $14=$9;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=(($9+20)|0);
  var $17=$9;
  var $18=(($17+8)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $19, $20);
  var $21=$16;
  var $22=$6;
  assert(8 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
  var $23=(($9+28)|0);
  var $24=$9;
  var $25=(($24+12)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($7, $26, $27);
  var $28=$23;
  var $29=$7;
  assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
  var $30=(($9+36)|0);
  var $31=$9;
  var $32=(($31+8)|0);
  var $33=HEAP32[(($32)>>2)];
  var $34=$5;
  __ZNK6b2Body14GetLocalVectorERK6b2Vec2($8, $33, $34);
  var $35=$30;
  var $36=$8;
  assert(8 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
  var $37=$9;
  var $38=(($37+12)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=__ZNK6b2Body8GetAngleEv($39);
  var $41=$9;
  var $42=(($41+8)|0);
  var $43=HEAP32[(($42)>>2)];
  var $44=__ZNK6b2Body8GetAngleEv($43);
  var $45=($40)-($44);
  var $46=(($9+44)|0);
  HEAPF32[(($46)>>2)]=$45;
  STACKTOP = __stackBase__;
  return;
}
function __ZNK6b2Body14GetLocalVectorERK6b2Vec2($agg_result, $this, $worldVector) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$worldVector;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=(($4+8)|0);
  var $6=$2;
  __Z6b2MulTRK5b2RotRK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZN7b2Mat33C1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2Mat33C2Ev($2);
  return;
}
function __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($this, $def) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$this;
      $2=$def;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$8;
      __ZN7b2JointC2EPK10b2JointDef($7, $9);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5264752)|0);
      var $11=(($6+68)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 17; break; }
    case 2: 
      var $13=(($6+76)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 17; break; }
    case 3: 
      var $15=(($6+84)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $17=(($6+92)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 17; break; }
    case 5: 
      var $19=(($6+104)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec3C1Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 17; break; }
    case 6: 
      var $21=(($6+152)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 17; break; }
    case 7: 
      var $23=(($6+160)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $25=(($6+184)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $27=(($6+192)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 17; break; }
    case 10: 
      var $29=(($6+216)|0);
      (function() { try { __THREW__ = 0; return __ZN7b2Mat33C1Ev($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $31=(($6+68)|0);
      var $32=$2;
      var $33=(($32+20)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=(($6+76)|0);
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=$36;
      var $40=$38;
      assert(8 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
      var $41=(($6+84)|0);
      var $42=$2;
      var $43=(($42+36)|0);
      var $44=$41;
      var $45=$43;
      assert(8 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];
      var $46=(($6+84)|0);
      var $47 = (function() { try { __THREW__ = 0; return __ZN6b2Vec29NormalizeEv($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $49=(($6+92)|0);
      var $50=(($6+84)|0);
      (function() { try { __THREW__ = 0; return __Z7b2CrossfRK6b2Vec2($5, 1, $50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $52=$49;
      var $53=$5;
      assert(8 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];
      var $54=$2;
      var $55=(($54+44)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=(($6+100)|0);
      HEAPF32[(($57)>>2)]=$56;
      var $58=(($6+104)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec37SetZeroEv($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $60=(($6+252)|0);
      HEAPF32[(($60)>>2)]=0;
      var $61=(($6+116)|0);
      HEAPF32[(($61)>>2)]=0;
      var $62=$2;
      var $63=(($62+52)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=(($6+120)|0);
      HEAPF32[(($65)>>2)]=$64;
      var $66=$2;
      var $67=(($66+56)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=(($6+124)|0);
      HEAPF32[(($69)>>2)]=$68;
      var $70=$2;
      var $71=(($70+64)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=(($6+128)|0);
      HEAPF32[(($73)>>2)]=$72;
      var $74=$2;
      var $75=(($74+68)|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=(($6+132)|0);
      HEAPF32[(($77)>>2)]=$76;
      var $78=$2;
      var $79=(($78+48)|0);
      var $80=HEAP8[($79)];
      var $81=(($80) & 1);
      var $82=(($6+136)|0);
      var $83=(($81)&(1));
      HEAP8[($82)]=$83;
      var $84=$2;
      var $85=(($84+60)|0);
      var $86=HEAP8[($85)];
      var $87=(($86) & 1);
      var $88=(($6+137)|0);
      var $89=(($87)&(1));
      HEAP8[($88)]=$89;
      var $90=(($6+140)|0);
      HEAP32[(($90)>>2)]=0;
      var $91=(($6+184)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($91) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $93=(($6+192)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 17; break; }
    case 16: 
      STACKTOP = __stackBase__;
      return;
    case 17: 
      var $96$0 = ___cxa_find_matching_catch(-1, -1); $96$1 = tempRet0;
      var $97=$96$0;
      $3=$97;
      var $98=$96$1;
      $4=$98;
      var $99=$6;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 20; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $102=$3;
      var $103=$4;
      var $104$0=$102;
      var $104$1=0;
      var $105$0=$104$0;
      var $105$1=$103;
      ___resumeException($105$0)
    case 20: 
      var $107$0 = ___cxa_find_matching_catch(-1, -1,0); $107$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec33SetEfff($this, $x_, $y_, $z_) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$x_;
  $3=$y_;
  $4=$z_;
  var $5=$1;
  var $6=$2;
  var $7=(($5)|0);
  HEAPF32[(($7)>>2)]=$6;
  var $8=$3;
  var $9=(($5+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  var $10=$4;
  var $11=(($5+8)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function __ZN6b2Vec3mLEf($this, $s) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$s;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($6)*($4);
  HEAPF32[(($5)>>2)]=$7;
  var $8=$2;
  var $9=(($3+4)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=($10)*($8);
  HEAPF32[(($9)>>2)]=$11;
  var $12=$2;
  var $13=(($3+8)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=($14)*($12);
  HEAPF32[(($13)>>2)]=$15;
  return;
}
function __ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $rA=(__stackBase__)+(48);
      var $3=(__stackBase__)+(56);
      var $rB=(__stackBase__)+(64);
      var $4=(__stackBase__)+(72);
      var $d=(__stackBase__)+(80);
      var $5=(__stackBase__)+(88);
      var $6=(__stackBase__)+(96);
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $7=(__stackBase__)+(104);
      var $8=(__stackBase__)+(112);
      var $9=(__stackBase__)+(120);
      var $10=(__stackBase__)+(128);
      var $k11;
      var $k12;
      var $k13;
      var $k22;
      var $k23;
      var $k33;
      var $jointTranslation;
      var $P=(__stackBase__)+(136);
      var $11=(__stackBase__)+(144);
      var $12=(__stackBase__)+(152);
      var $LA;
      var $LB;
      var $13=(__stackBase__)+(160);
      var $14=(__stackBase__)+(168);
      $1=$this;
      $2=$data;
      var $15=$1;
      var $16=$15;
      var $17=(($16+48)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($15+144)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=$15;
      var $23=(($22+52)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($15+148)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($15+152)|0);
      var $29=$15;
      var $30=(($29+48)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+28)|0);
      var $33=(($32)|0);
      var $34=$28;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=(($15+160)|0);
      var $37=$15;
      var $38=(($37+52)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+28)|0);
      var $41=(($40)|0);
      var $42=$36;
      var $43=$41;
      assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
      var $44=$15;
      var $45=(($44+48)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($15+168)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$15;
      var $51=(($50+52)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+120)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($15+172)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$15;
      var $57=(($56+48)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($15+176)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=$15;
      var $63=(($62+52)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+128)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=(($15+180)|0);
      HEAPF32[(($67)>>2)]=$66;
      var $68=(($15+144)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$2;
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+((($69)*(12))&-1))|0);
      var $74=(($73)|0);
      var $75=$cA;
      var $76=$74;
      assert(8 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];
      var $77=(($15+144)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$2;
      var $80=(($79+24)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+((($78)*(12))&-1))|0);
      var $83=(($82+8)|0);
      var $84=HEAPF32[(($83)>>2)];
      $aA=$84;
      var $85=(($15+144)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=(($87+28)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+((($86)*(12))&-1))|0);
      var $91=(($90)|0);
      var $92=$vA;
      var $93=$91;
      assert(8 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];
      var $94=(($15+144)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$2;
      var $97=(($96+28)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+((($95)*(12))&-1))|0);
      var $100=(($99+8)|0);
      var $101=HEAPF32[(($100)>>2)];
      $wA=$101;
      var $102=(($15+148)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+24)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+((($103)*(12))&-1))|0);
      var $108=(($107)|0);
      var $109=$cB;
      var $110=$108;
      assert(8 % 1 === 0);HEAP32[(($109)>>2)]=HEAP32[(($110)>>2)];HEAP32[((($109)+(4))>>2)]=HEAP32[((($110)+(4))>>2)];
      var $111=(($15+148)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$2;
      var $114=(($113+24)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+((($112)*(12))&-1))|0);
      var $117=(($116+8)|0);
      var $118=HEAPF32[(($117)>>2)];
      $aB=$118;
      var $119=(($15+148)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$2;
      var $122=(($121+28)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+((($120)*(12))&-1))|0);
      var $125=(($124)|0);
      var $126=$vB;
      var $127=$125;
      assert(8 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];
      var $128=(($15+148)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$2;
      var $131=(($130+28)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+((($129)*(12))&-1))|0);
      var $134=(($133+8)|0);
      var $135=HEAPF32[(($134)>>2)];
      $wB=$135;
      var $136=$aA;
      __ZN5b2RotC1Ef($qA, $136);
      var $137=$aB;
      __ZN5b2RotC1Ef($qB, $137);
      var $138=(($15+68)|0);
      var $139=(($15+152)|0);
      __ZmiRK6b2Vec2S1_($3, $138, $139);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $140=(($15+76)|0);
      var $141=(($15+160)|0);
      __ZmiRK6b2Vec2S1_($4, $140, $141);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZmiRK6b2Vec2S1_($6, $cB, $cA);
      __ZplRK6b2Vec2S1_($5, $6, $rB);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $142=(($15+168)|0);
      var $143=HEAPF32[(($142)>>2)];
      $mA=$143;
      var $144=(($15+172)|0);
      var $145=HEAPF32[(($144)>>2)];
      $mB=$145;
      var $146=(($15+176)|0);
      var $147=HEAPF32[(($146)>>2)];
      $iA=$147;
      var $148=(($15+180)|0);
      var $149=HEAPF32[(($148)>>2)];
      $iB=$149;
      var $150=(($15+184)|0);
      var $151=(($15+84)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $qA, $151);
      var $152=$150;
      var $153=$7;
      assert(8 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];
      __ZplRK6b2Vec2S1_($8, $d, $rA);
      var $154=(($15+184)|0);
      var $155=__Z7b2CrossRK6b2Vec2S1_($8, $154);
      var $156=(($15+208)|0);
      HEAPF32[(($156)>>2)]=$155;
      var $157=(($15+184)|0);
      var $158=__Z7b2CrossRK6b2Vec2S1_($rB, $157);
      var $159=(($15+212)|0);
      HEAPF32[(($159)>>2)]=$158;
      var $160=$mA;
      var $161=$mB;
      var $162=($160)+($161);
      var $163=$iA;
      var $164=(($15+208)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=($163)*($165);
      var $167=(($15+208)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=($166)*($168);
      var $170=($162)+($169);
      var $171=$iB;
      var $172=(($15+212)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=($171)*($173);
      var $175=(($15+212)|0);
      var $176=HEAPF32[(($175)>>2)];
      var $177=($174)*($176);
      var $178=($170)+($177);
      var $179=(($15+252)|0);
      HEAPF32[(($179)>>2)]=$178;
      var $180=(($15+252)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=$181 > 0;
      if ($182) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $184=(($15+252)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(1)/($185);
      var $187=(($15+252)|0);
      HEAPF32[(($187)>>2)]=$186;
      label = 3; break;
    case 3: 
      var $189=(($15+192)|0);
      var $190=(($15+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($9, $qA, $190);
      var $191=$189;
      var $192=$9;
      assert(8 % 1 === 0);HEAP32[(($191)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($191)+(4))>>2)]=HEAP32[((($192)+(4))>>2)];
      __ZplRK6b2Vec2S1_($10, $d, $rA);
      var $193=(($15+192)|0);
      var $194=__Z7b2CrossRK6b2Vec2S1_($10, $193);
      var $195=(($15+200)|0);
      HEAPF32[(($195)>>2)]=$194;
      var $196=(($15+192)|0);
      var $197=__Z7b2CrossRK6b2Vec2S1_($rB, $196);
      var $198=(($15+204)|0);
      HEAPF32[(($198)>>2)]=$197;
      var $199=$mA;
      var $200=$mB;
      var $201=($199)+($200);
      var $202=$iA;
      var $203=(($15+200)|0);
      var $204=HEAPF32[(($203)>>2)];
      var $205=($202)*($204);
      var $206=(($15+200)|0);
      var $207=HEAPF32[(($206)>>2)];
      var $208=($205)*($207);
      var $209=($201)+($208);
      var $210=$iB;
      var $211=(($15+204)|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=($210)*($212);
      var $214=(($15+204)|0);
      var $215=HEAPF32[(($214)>>2)];
      var $216=($213)*($215);
      var $217=($209)+($216);
      $k11=$217;
      var $218=$iA;
      var $219=(($15+200)|0);
      var $220=HEAPF32[(($219)>>2)];
      var $221=($218)*($220);
      var $222=$iB;
      var $223=(($15+204)|0);
      var $224=HEAPF32[(($223)>>2)];
      var $225=($222)*($224);
      var $226=($221)+($225);
      $k12=$226;
      var $227=$iA;
      var $228=(($15+200)|0);
      var $229=HEAPF32[(($228)>>2)];
      var $230=($227)*($229);
      var $231=(($15+208)|0);
      var $232=HEAPF32[(($231)>>2)];
      var $233=($230)*($232);
      var $234=$iB;
      var $235=(($15+204)|0);
      var $236=HEAPF32[(($235)>>2)];
      var $237=($234)*($236);
      var $238=(($15+212)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=($237)*($239);
      var $241=($233)+($240);
      $k13=$241;
      var $242=$iA;
      var $243=$iB;
      var $244=($242)+($243);
      $k22=$244;
      var $245=$k22;
      var $246=$245 == 0;
      if ($246) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $k22=1;
      label = 5; break;
    case 5: 
      var $249=$iA;
      var $250=(($15+208)|0);
      var $251=HEAPF32[(($250)>>2)];
      var $252=($249)*($251);
      var $253=$iB;
      var $254=(($15+212)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=($253)*($255);
      var $257=($252)+($256);
      $k23=$257;
      var $258=$mA;
      var $259=$mB;
      var $260=($258)+($259);
      var $261=$iA;
      var $262=(($15+208)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=($261)*($263);
      var $265=(($15+208)|0);
      var $266=HEAPF32[(($265)>>2)];
      var $267=($264)*($266);
      var $268=($260)+($267);
      var $269=$iB;
      var $270=(($15+212)|0);
      var $271=HEAPF32[(($270)>>2)];
      var $272=($269)*($271);
      var $273=(($15+212)|0);
      var $274=HEAPF32[(($273)>>2)];
      var $275=($272)*($274);
      var $276=($268)+($275);
      $k33=$276;
      var $277=(($15+216)|0);
      var $278=(($277)|0);
      var $279=$k11;
      var $280=$k12;
      var $281=$k13;
      __ZN6b2Vec33SetEfff($278, $279, $280, $281);
      var $282=(($15+216)|0);
      var $283=(($282+12)|0);
      var $284=$k12;
      var $285=$k22;
      var $286=$k23;
      __ZN6b2Vec33SetEfff($283, $284, $285, $286);
      var $287=(($15+216)|0);
      var $288=(($287+24)|0);
      var $289=$k13;
      var $290=$k23;
      var $291=$k33;
      __ZN6b2Vec33SetEfff($288, $289, $290, $291);
      var $292=(($15+136)|0);
      var $293=HEAP8[($292)];
      var $294=(($293) & 1);
      if ($294) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $296=(($15+184)|0);
      var $297=__Z5b2DotRK6b2Vec2S1_($296, $d);
      $jointTranslation=$297;
      var $298=(($15+124)|0);
      var $299=HEAPF32[(($298)>>2)];
      var $300=(($15+120)|0);
      var $301=HEAPF32[(($300)>>2)];
      var $302=($299)-($301);
      var $303=__Z5b2AbsIfET_S0_($302);
      var $304=$303 < 0.009999999776482582;
      if ($304) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $306=(($15+140)|0);
      HEAP32[(($306)>>2)]=3;
      label = 19; break;
    case 8: 
      var $308=$jointTranslation;
      var $309=(($15+120)|0);
      var $310=HEAPF32[(($309)>>2)];
      var $311=$308 <= $310;
      if ($311) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $313=(($15+140)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=(($314)|(0))!=1;
      if ($315) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $317=(($15+140)|0);
      HEAP32[(($317)>>2)]=1;
      var $318=(($15+104)|0);
      var $319=(($318+8)|0);
      HEAPF32[(($319)>>2)]=0;
      label = 11; break;
    case 11: 
      label = 18; break;
    case 12: 
      var $322=$jointTranslation;
      var $323=(($15+124)|0);
      var $324=HEAPF32[(($323)>>2)];
      var $325=$322 >= $324;
      if ($325) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $327=(($15+140)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|(0))!=2;
      if ($329) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $331=(($15+140)|0);
      HEAP32[(($331)>>2)]=2;
      var $332=(($15+104)|0);
      var $333=(($332+8)|0);
      HEAPF32[(($333)>>2)]=0;
      label = 15; break;
    case 15: 
      label = 17; break;
    case 16: 
      var $336=(($15+140)|0);
      HEAP32[(($336)>>2)]=0;
      var $337=(($15+104)|0);
      var $338=(($337+8)|0);
      HEAPF32[(($338)>>2)]=0;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $343=(($15+140)|0);
      HEAP32[(($343)>>2)]=0;
      var $344=(($15+104)|0);
      var $345=(($344+8)|0);
      HEAPF32[(($345)>>2)]=0;
      label = 21; break;
    case 21: 
      var $347=(($15+137)|0);
      var $348=HEAP8[($347)];
      var $349=(($348) & 1);
      var $350=(($349)&(1));
      var $351=(($350)|(0))==0;
      if ($351) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $353=(($15+116)|0);
      HEAPF32[(($353)>>2)]=0;
      label = 23; break;
    case 23: 
      var $355=$2;
      var $356=(($355)|0);
      var $357=(($356+20)|0);
      var $358=HEAP8[($357)];
      var $359=(($358) & 1);
      if ($359) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $361=(($15+104)|0);
      var $362=$2;
      var $363=(($362)|0);
      var $364=(($363+8)|0);
      var $365=HEAPF32[(($364)>>2)];
      __ZN6b2Vec3mLEf($361, $365);
      var $366=$2;
      var $367=(($366)|0);
      var $368=(($367+8)|0);
      var $369=HEAPF32[(($368)>>2)];
      var $370=(($15+116)|0);
      var $371=HEAPF32[(($370)>>2)];
      var $372=($371)*($369);
      HEAPF32[(($370)>>2)]=$372;
      var $373=(($15+104)|0);
      var $374=(($373)|0);
      var $375=HEAPF32[(($374)>>2)];
      var $376=(($15+192)|0);
      __ZmlfRK6b2Vec2($11, $375, $376);
      var $377=(($15+116)|0);
      var $378=HEAPF32[(($377)>>2)];
      var $379=(($15+104)|0);
      var $380=(($379+8)|0);
      var $381=HEAPF32[(($380)>>2)];
      var $382=($378)+($381);
      var $383=(($15+184)|0);
      __ZmlfRK6b2Vec2($12, $382, $383);
      __ZplRK6b2Vec2S1_($P, $11, $12);
      var $384=(($15+104)|0);
      var $385=(($384)|0);
      var $386=HEAPF32[(($385)>>2)];
      var $387=(($15+200)|0);
      var $388=HEAPF32[(($387)>>2)];
      var $389=($386)*($388);
      var $390=(($15+104)|0);
      var $391=(($390+4)|0);
      var $392=HEAPF32[(($391)>>2)];
      var $393=($389)+($392);
      var $394=(($15+116)|0);
      var $395=HEAPF32[(($394)>>2)];
      var $396=(($15+104)|0);
      var $397=(($396+8)|0);
      var $398=HEAPF32[(($397)>>2)];
      var $399=($395)+($398);
      var $400=(($15+208)|0);
      var $401=HEAPF32[(($400)>>2)];
      var $402=($399)*($401);
      var $403=($393)+($402);
      $LA=$403;
      var $404=(($15+104)|0);
      var $405=(($404)|0);
      var $406=HEAPF32[(($405)>>2)];
      var $407=(($15+204)|0);
      var $408=HEAPF32[(($407)>>2)];
      var $409=($406)*($408);
      var $410=(($15+104)|0);
      var $411=(($410+4)|0);
      var $412=HEAPF32[(($411)>>2)];
      var $413=($409)+($412);
      var $414=(($15+116)|0);
      var $415=HEAPF32[(($414)>>2)];
      var $416=(($15+104)|0);
      var $417=(($416+8)|0);
      var $418=HEAPF32[(($417)>>2)];
      var $419=($415)+($418);
      var $420=(($15+212)|0);
      var $421=HEAPF32[(($420)>>2)];
      var $422=($419)*($421);
      var $423=($413)+($422);
      $LB=$423;
      var $424=$mA;
      __ZmlfRK6b2Vec2($13, $424, $P);
      __ZN6b2Vec2mIERKS_($vA, $13);
      var $425=$iA;
      var $426=$LA;
      var $427=($425)*($426);
      var $428=$wA;
      var $429=($428)-($427);
      $wA=$429;
      var $430=$mB;
      __ZmlfRK6b2Vec2($14, $430, $P);
      __ZN6b2Vec2pLERKS_($vB, $14);
      var $431=$iB;
      var $432=$LB;
      var $433=($431)*($432);
      var $434=$wB;
      var $435=($434)+($433);
      $wB=$435;
      label = 26; break;
    case 25: 
      var $437=(($15+104)|0);
      __ZN6b2Vec37SetZeroEv($437);
      var $438=(($15+116)|0);
      HEAPF32[(($438)>>2)]=0;
      label = 26; break;
    case 26: 
      var $440=(($15+144)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442=$2;
      var $443=(($442+28)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=(($444+((($441)*(12))&-1))|0);
      var $446=(($445)|0);
      var $447=$446;
      var $448=$vA;
      assert(8 % 1 === 0);HEAP32[(($447)>>2)]=HEAP32[(($448)>>2)];HEAP32[((($447)+(4))>>2)]=HEAP32[((($448)+(4))>>2)];
      var $449=$wA;
      var $450=(($15+144)|0);
      var $451=HEAP32[(($450)>>2)];
      var $452=$2;
      var $453=(($452+28)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=(($454+((($451)*(12))&-1))|0);
      var $456=(($455+8)|0);
      HEAPF32[(($456)>>2)]=$449;
      var $457=(($15+148)|0);
      var $458=HEAP32[(($457)>>2)];
      var $459=$2;
      var $460=(($459+28)|0);
      var $461=HEAP32[(($460)>>2)];
      var $462=(($461+((($458)*(12))&-1))|0);
      var $463=(($462)|0);
      var $464=$463;
      var $465=$vB;
      assert(8 % 1 === 0);HEAP32[(($464)>>2)]=HEAP32[(($465)>>2)];HEAP32[((($464)+(4))>>2)]=HEAP32[((($465)+(4))>>2)];
      var $466=$wB;
      var $467=(($15+148)|0);
      var $468=HEAP32[(($467)>>2)];
      var $469=$2;
      var $470=(($469+28)|0);
      var $471=HEAP32[(($470)>>2)];
      var $472=(($471+((($468)*(12))&-1))|0);
      var $473=(($472+8)|0);
      HEAPF32[(($473)>>2)]=$466;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN6b2Vec3pLERKS_($this, $v) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$v;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($8)+($6);
  HEAPF32[(($7)>>2)]=$9;
  var $10=$2;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($3+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=($14)+($12);
  HEAPF32[(($13)>>2)]=$15;
  var $16=$2;
  var $17=(($16+8)|0);
  var $18=HEAPF32[(($17)>>2)];
  var $19=(($3+8)|0);
  var $20=HEAPF32[(($19)>>2)];
  var $21=($20)+($18);
  HEAPF32[(($19)>>2)]=$21;
  return;
}
function __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 292)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $Cdot;
      var $3=(__stackBase__)+(16);
      var $impulse;
      var $oldImpulse;
      var $maxImpulse;
      var $P=(__stackBase__)+(24);
      var $LA;
      var $LB;
      var $4=(__stackBase__)+(32);
      var $5=(__stackBase__)+(40);
      var $Cdot1=(__stackBase__)+(48);
      var $6=(__stackBase__)+(56);
      var $Cdot2;
      var $7=(__stackBase__)+(64);
      var $Cdot3=(__stackBase__)+(72);
      var $f1=(__stackBase__)+(84);
      var $df=(__stackBase__)+(96);
      var $8=(__stackBase__)+(108);
      var $b=(__stackBase__)+(120);
      var $9=(__stackBase__)+(128);
      var $10=(__stackBase__)+(136);
      var $11=(__stackBase__)+(144);
      var $f2r=(__stackBase__)+(152);
      var $12=(__stackBase__)+(160);
      var $13=(__stackBase__)+(168);
      var $14=(__stackBase__)+(176);
      var $P4=(__stackBase__)+(188);
      var $15=(__stackBase__)+(196);
      var $16=(__stackBase__)+(204);
      var $LA5;
      var $LB6;
      var $17=(__stackBase__)+(212);
      var $18=(__stackBase__)+(220);
      var $df7=(__stackBase__)+(228);
      var $19=(__stackBase__)+(236);
      var $P8=(__stackBase__)+(244);
      var $LA9;
      var $LB10;
      var $20=(__stackBase__)+(252);
      var $21=(__stackBase__)+(260);
      var $Cdot10=(__stackBase__)+(268);
      var $22=(__stackBase__)+(276);
      var $test=(__stackBase__)+(284);
      $1=$this;
      $2=$data;
      var $23=$1;
      var $24=(($23+144)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=(($26+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+((($25)*(12))&-1))|0);
      var $30=(($29)|0);
      var $31=$vA;
      var $32=$30;
      assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];
      var $33=(($23+144)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+28)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+((($34)*(12))&-1))|0);
      var $39=(($38+8)|0);
      var $40=HEAPF32[(($39)>>2)];
      $wA=$40;
      var $41=(($23+148)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=(($43+28)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+((($42)*(12))&-1))|0);
      var $47=(($46)|0);
      var $48=$vB;
      var $49=$47;
      assert(8 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
      var $50=(($23+148)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+((($51)*(12))&-1))|0);
      var $56=(($55+8)|0);
      var $57=HEAPF32[(($56)>>2)];
      $wB=$57;
      var $58=(($23+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $mA=$59;
      var $60=(($23+172)|0);
      var $61=HEAPF32[(($60)>>2)];
      $mB=$61;
      var $62=(($23+176)|0);
      var $63=HEAPF32[(($62)>>2)];
      $iA=$63;
      var $64=(($23+180)|0);
      var $65=HEAPF32[(($64)>>2)];
      $iB=$65;
      var $66=(($23+137)|0);
      var $67=HEAP8[($66)];
      var $68=(($67) & 1);
      if ($68) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $70=(($23+140)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|(0))!=3;
      if ($72) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $74=(($23+184)|0);
      __ZmiRK6b2Vec2S1_($3, $vB, $vA);
      var $75=__Z5b2DotRK6b2Vec2S1_($74, $3);
      var $76=(($23+212)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=$wB;
      var $79=($77)*($78);
      var $80=($75)+($79);
      var $81=(($23+208)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$wA;
      var $84=($82)*($83);
      var $85=($80)-($84);
      $Cdot=$85;
      var $86=(($23+252)|0);
      var $87=HEAPF32[(($86)>>2)];
      var $88=(($23+132)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=$Cdot;
      var $91=($89)-($90);
      var $92=($87)*($91);
      $impulse=$92;
      var $93=(($23+116)|0);
      var $94=HEAPF32[(($93)>>2)];
      $oldImpulse=$94;
      var $95=$2;
      var $96=(($95)|0);
      var $97=(($96)|0);
      var $98=HEAPF32[(($97)>>2)];
      var $99=(($23+128)|0);
      var $100=HEAPF32[(($99)>>2)];
      var $101=($98)*($100);
      $maxImpulse=$101;
      var $102=(($23+116)|0);
      var $103=HEAPF32[(($102)>>2)];
      var $104=$impulse;
      var $105=($103)+($104);
      var $106=$maxImpulse;
      var $107=(-$106);
      var $108=$maxImpulse;
      var $109=__Z7b2ClampIfET_S0_S0_S0_($105, $107, $108);
      var $110=(($23+116)|0);
      HEAPF32[(($110)>>2)]=$109;
      var $111=(($23+116)|0);
      var $112=HEAPF32[(($111)>>2)];
      var $113=$oldImpulse;
      var $114=($112)-($113);
      $impulse=$114;
      var $115=$impulse;
      var $116=(($23+184)|0);
      __ZmlfRK6b2Vec2($P, $115, $116);
      var $117=$impulse;
      var $118=(($23+208)|0);
      var $119=HEAPF32[(($118)>>2)];
      var $120=($117)*($119);
      $LA=$120;
      var $121=$impulse;
      var $122=(($23+212)|0);
      var $123=HEAPF32[(($122)>>2)];
      var $124=($121)*($123);
      $LB=$124;
      var $125=$mA;
      __ZmlfRK6b2Vec2($4, $125, $P);
      __ZN6b2Vec2mIERKS_($vA, $4);
      var $126=$iA;
      var $127=$LA;
      var $128=($126)*($127);
      var $129=$wA;
      var $130=($129)-($128);
      $wA=$130;
      var $131=$mB;
      __ZmlfRK6b2Vec2($5, $131, $P);
      __ZN6b2Vec2pLERKS_($vB, $5);
      var $132=$iB;
      var $133=$LB;
      var $134=($132)*($133);
      var $135=$wB;
      var $136=($135)+($134);
      $wB=$136;
      label = 4; break;
    case 4: 
      __ZN6b2Vec2C1Ev($Cdot1);
      var $138=(($23+192)|0);
      __ZmiRK6b2Vec2S1_($6, $vB, $vA);
      var $139=__Z5b2DotRK6b2Vec2S1_($138, $6);
      var $140=(($23+204)|0);
      var $141=HEAPF32[(($140)>>2)];
      var $142=$wB;
      var $143=($141)*($142);
      var $144=($139)+($143);
      var $145=(($23+200)|0);
      var $146=HEAPF32[(($145)>>2)];
      var $147=$wA;
      var $148=($146)*($147);
      var $149=($144)-($148);
      var $150=(($Cdot1)|0);
      HEAPF32[(($150)>>2)]=$149;
      var $151=$wB;
      var $152=$wA;
      var $153=($151)-($152);
      var $154=(($Cdot1+4)|0);
      HEAPF32[(($154)>>2)]=$153;
      var $155=(($23+136)|0);
      var $156=HEAP8[($155)];
      var $157=(($156) & 1);
      if ($157) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $159=(($23+140)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160)|(0))!=0;
      if ($161) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $163=(($23+184)|0);
      __ZmiRK6b2Vec2S1_($7, $vB, $vA);
      var $164=__Z5b2DotRK6b2Vec2S1_($163, $7);
      var $165=(($23+212)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=$wB;
      var $168=($166)*($167);
      var $169=($164)+($168);
      var $170=(($23+208)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=$wA;
      var $173=($171)*($172);
      var $174=($169)-($173);
      $Cdot2=$174;
      var $175=(($Cdot1)|0);
      var $176=HEAPF32[(($175)>>2)];
      var $177=(($Cdot1+4)|0);
      var $178=HEAPF32[(($177)>>2)];
      var $179=$Cdot2;
      __ZN6b2Vec3C1Efff($Cdot3, $176, $178, $179);
      var $180=(($23+104)|0);
      var $181=$f1;
      var $182=$180;
      assert(12 % 1 === 0);HEAP32[(($181)>>2)]=HEAP32[(($182)>>2)];HEAP32[((($181)+(4))>>2)]=HEAP32[((($182)+(4))>>2)];HEAP32[((($181)+(8))>>2)]=HEAP32[((($182)+(8))>>2)];
      var $183=(($23+216)|0);
      __ZNK6b2Vec3ngEv($8, $Cdot3);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($df, $183, $8);
      var $184=(($23+104)|0);
      __ZN6b2Vec3pLERKS_($184, $df);
      var $185=(($23+140)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186)|(0))==1;
      if ($187) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $189=(($23+104)|0);
      var $190=(($189+8)|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=__Z5b2MaxIfET_S0_S0_($191, 0);
      var $193=(($23+104)|0);
      var $194=(($193+8)|0);
      HEAPF32[(($194)>>2)]=$192;
      label = 11; break;
    case 8: 
      var $196=(($23+140)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($197)|(0))==2;
      if ($198) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $200=(($23+104)|0);
      var $201=(($200+8)|0);
      var $202=HEAPF32[(($201)>>2)];
      var $203=__Z5b2MinIfET_S0_S0_($202, 0);
      var $204=(($23+104)|0);
      var $205=(($204+8)|0);
      HEAPF32[(($205)>>2)]=$203;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      __ZNK6b2Vec2ngEv($9, $Cdot1);
      var $208=(($23+104)|0);
      var $209=(($208+8)|0);
      var $210=HEAPF32[(($209)>>2)];
      var $211=(($f1+8)|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=($210)-($212);
      var $214=(($23+216)|0);
      var $215=(($214+24)|0);
      var $216=(($215)|0);
      var $217=HEAPF32[(($216)>>2)];
      var $218=(($23+216)|0);
      var $219=(($218+24)|0);
      var $220=(($219+4)|0);
      var $221=HEAPF32[(($220)>>2)];
      __ZN6b2Vec2C1Eff($11, $217, $221);
      __ZmlfRK6b2Vec2($10, $213, $11);
      __ZmiRK6b2Vec2S1_($b, $9, $10);
      var $222=(($23+216)|0);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($12, $222, $b);
      var $223=(($f1)|0);
      var $224=HEAPF32[(($223)>>2)];
      var $225=(($f1+4)|0);
      var $226=HEAPF32[(($225)>>2)];
      __ZN6b2Vec2C1Eff($13, $224, $226);
      __ZplRK6b2Vec2S1_($f2r, $12, $13);
      var $227=(($f2r)|0);
      var $228=HEAPF32[(($227)>>2)];
      var $229=(($23+104)|0);
      var $230=(($229)|0);
      HEAPF32[(($230)>>2)]=$228;
      var $231=(($f2r+4)|0);
      var $232=HEAPF32[(($231)>>2)];
      var $233=(($23+104)|0);
      var $234=(($233+4)|0);
      HEAPF32[(($234)>>2)]=$232;
      var $235=(($23+104)|0);
      __ZmiRK6b2Vec3S1_($14, $235, $f1);
      var $236=$df;
      var $237=$14;
      assert(12 % 1 === 0);HEAP32[(($236)>>2)]=HEAP32[(($237)>>2)];HEAP32[((($236)+(4))>>2)]=HEAP32[((($237)+(4))>>2)];HEAP32[((($236)+(8))>>2)]=HEAP32[((($237)+(8))>>2)];
      var $238=(($df)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=(($23+192)|0);
      __ZmlfRK6b2Vec2($15, $239, $240);
      var $241=(($df+8)|0);
      var $242=HEAPF32[(($241)>>2)];
      var $243=(($23+184)|0);
      __ZmlfRK6b2Vec2($16, $242, $243);
      __ZplRK6b2Vec2S1_($P4, $15, $16);
      var $244=(($df)|0);
      var $245=HEAPF32[(($244)>>2)];
      var $246=(($23+200)|0);
      var $247=HEAPF32[(($246)>>2)];
      var $248=($245)*($247);
      var $249=(($df+4)|0);
      var $250=HEAPF32[(($249)>>2)];
      var $251=($248)+($250);
      var $252=(($df+8)|0);
      var $253=HEAPF32[(($252)>>2)];
      var $254=(($23+208)|0);
      var $255=HEAPF32[(($254)>>2)];
      var $256=($253)*($255);
      var $257=($251)+($256);
      $LA5=$257;
      var $258=(($df)|0);
      var $259=HEAPF32[(($258)>>2)];
      var $260=(($23+204)|0);
      var $261=HEAPF32[(($260)>>2)];
      var $262=($259)*($261);
      var $263=(($df+4)|0);
      var $264=HEAPF32[(($263)>>2)];
      var $265=($262)+($264);
      var $266=(($df+8)|0);
      var $267=HEAPF32[(($266)>>2)];
      var $268=(($23+212)|0);
      var $269=HEAPF32[(($268)>>2)];
      var $270=($267)*($269);
      var $271=($265)+($270);
      $LB6=$271;
      var $272=$mA;
      __ZmlfRK6b2Vec2($17, $272, $P4);
      __ZN6b2Vec2mIERKS_($vA, $17);
      var $273=$iA;
      var $274=$LA5;
      var $275=($273)*($274);
      var $276=$wA;
      var $277=($276)-($275);
      $wA=$277;
      var $278=$mB;
      __ZmlfRK6b2Vec2($18, $278, $P4);
      __ZN6b2Vec2pLERKS_($vB, $18);
      var $279=$iB;
      var $280=$LB6;
      var $281=($279)*($280);
      var $282=$wB;
      var $283=($282)+($281);
      $wB=$283;
      label = 16; break;
    case 12: 
      var $285=(($23+216)|0);
      __ZNK6b2Vec2ngEv($19, $Cdot1);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($df7, $285, $19);
      var $286=(($df7)|0);
      var $287=HEAPF32[(($286)>>2)];
      var $288=(($23+104)|0);
      var $289=(($288)|0);
      var $290=HEAPF32[(($289)>>2)];
      var $291=($290)+($287);
      HEAPF32[(($289)>>2)]=$291;
      var $292=(($df7+4)|0);
      var $293=HEAPF32[(($292)>>2)];
      var $294=(($23+104)|0);
      var $295=(($294+4)|0);
      var $296=HEAPF32[(($295)>>2)];
      var $297=($296)+($293);
      HEAPF32[(($295)>>2)]=$297;
      var $298=(($df7)|0);
      var $299=HEAPF32[(($298)>>2)];
      var $300=(($23+192)|0);
      __ZmlfRK6b2Vec2($P8, $299, $300);
      var $301=(($df7)|0);
      var $302=HEAPF32[(($301)>>2)];
      var $303=(($23+200)|0);
      var $304=HEAPF32[(($303)>>2)];
      var $305=($302)*($304);
      var $306=(($df7+4)|0);
      var $307=HEAPF32[(($306)>>2)];
      var $308=($305)+($307);
      $LA9=$308;
      var $309=(($df7)|0);
      var $310=HEAPF32[(($309)>>2)];
      var $311=(($23+204)|0);
      var $312=HEAPF32[(($311)>>2)];
      var $313=($310)*($312);
      var $314=(($df7+4)|0);
      var $315=HEAPF32[(($314)>>2)];
      var $316=($313)+($315);
      $LB10=$316;
      var $317=$mA;
      __ZmlfRK6b2Vec2($20, $317, $P8);
      __ZN6b2Vec2mIERKS_($vA, $20);
      var $318=$iA;
      var $319=$LA9;
      var $320=($318)*($319);
      var $321=$wA;
      var $322=($321)-($320);
      $wA=$322;
      var $323=$mB;
      __ZmlfRK6b2Vec2($21, $323, $P8);
      __ZN6b2Vec2pLERKS_($vB, $21);
      var $324=$iB;
      var $325=$LB10;
      var $326=($324)*($325);
      var $327=$wB;
      var $328=($327)+($326);
      $wB=$328;
      var $329=$Cdot10;
      var $330=$Cdot1;
      assert(8 % 1 === 0);HEAP32[(($329)>>2)]=HEAP32[(($330)>>2)];HEAP32[((($329)+(4))>>2)]=HEAP32[((($330)+(4))>>2)];
      var $331=(($23+192)|0);
      __ZmiRK6b2Vec2S1_($22, $vB, $vA);
      var $332=__Z5b2DotRK6b2Vec2S1_($331, $22);
      var $333=(($23+204)|0);
      var $334=HEAPF32[(($333)>>2)];
      var $335=$wB;
      var $336=($334)*($335);
      var $337=($332)+($336);
      var $338=(($23+200)|0);
      var $339=HEAPF32[(($338)>>2)];
      var $340=$wA;
      var $341=($339)*($340);
      var $342=($337)-($341);
      var $343=(($Cdot1)|0);
      HEAPF32[(($343)>>2)]=$342;
      var $344=$wB;
      var $345=$wA;
      var $346=($344)-($345);
      var $347=(($Cdot1+4)|0);
      HEAPF32[(($347)>>2)]=$346;
      var $348=(($Cdot1)|0);
      var $349=HEAPF32[(($348)>>2)];
      var $350=__Z5b2AbsIfET_S0_($349);
      var $351=$350 > 0.009999999776482582;
      if ($351) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $353=(($Cdot1+4)|0);
      var $354=HEAPF32[(($353)>>2)];
      var $355=__Z5b2AbsIfET_S0_($354);
      var $356=$355 > 0.009999999776482582;
      if ($356) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $358=(($23+216)|0);
      __Z7b2Mul22RK7b2Mat33RK6b2Vec2($test, $358, $df7);
      var $359=(($Cdot1)|0);
      var $360=HEAPF32[(($359)>>2)];
      var $361=$360;
      HEAPF32[(($359)>>2)]=$361;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $364=(($23+144)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$2;
      var $367=(($366+28)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=(($368+((($365)*(12))&-1))|0);
      var $370=(($369)|0);
      var $371=$370;
      var $372=$vA;
      assert(8 % 1 === 0);HEAP32[(($371)>>2)]=HEAP32[(($372)>>2)];HEAP32[((($371)+(4))>>2)]=HEAP32[((($372)+(4))>>2)];
      var $373=$wA;
      var $374=(($23+144)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=$2;
      var $377=(($376+28)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=(($378+((($375)*(12))&-1))|0);
      var $380=(($379+8)|0);
      HEAPF32[(($380)>>2)]=$373;
      var $381=(($23+148)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=$2;
      var $384=(($383+28)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=(($385+((($382)*(12))&-1))|0);
      var $387=(($386)|0);
      var $388=$387;
      var $389=$vB;
      assert(8 % 1 === 0);HEAP32[(($388)>>2)]=HEAP32[(($389)>>2)];HEAP32[((($388)+(4))>>2)]=HEAP32[((($389)+(4))>>2)];
      var $390=$wB;
      var $391=(($23+148)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=$2;
      var $394=(($393+28)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=(($395+((($392)*(12))&-1))|0);
      var $397=(($396+8)|0);
      HEAPF32[(($397)>>2)]=$390;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Vec3ngEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN6b2Vec3C1Ev($agg_result);
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=(-$7);
  var $9=(($2+8)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=(-$10);
  __ZN6b2Vec33SetEfff($agg_result, $5, $8, $11);
  return;
}
function __ZmiRK6b2Vec3S1_($agg_result, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)-($8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)-($15);
  var $17=$1;
  var $18=(($17+8)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+8)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=($19)-($22);
  __ZN6b2Vec3C1Efff($agg_result, $9, $16, $23);
  return;
}
function __Z7b2Mul22RK7b2Mat33RK6b2Vec2($agg_result, $A, $v) {
  var label = 0;
  var $1;
  var $2;
  $1=$A;
  $2=$v;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=($6)*($9);
  var $11=$1;
  var $12=(($11+12)|0);
  var $13=(($12)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$2;
  var $16=(($15+4)|0);
  var $17=HEAPF32[(($16)>>2)];
  var $18=($14)*($17);
  var $19=($10)+($18);
  var $20=$1;
  var $21=(($20)|0);
  var $22=(($21+4)|0);
  var $23=HEAPF32[(($22)>>2)];
  var $24=$2;
  var $25=(($24)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=($23)*($26);
  var $28=$1;
  var $29=(($28+12)|0);
  var $30=(($29+4)|0);
  var $31=HEAPF32[(($30)>>2)];
  var $32=$2;
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=($31)*($34);
  var $36=($27)+($35);
  __ZN6b2Vec2C1Eff($agg_result, $19, $36);
  return;
}
function __ZNK16b2PrismaticJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+104)|0);
  var $6=(($5+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=($4)*($7);
  return $8;
}
function __ZNK16b2PrismaticJoint14IsLimitEnabledEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+136)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZNK16b2PrismaticJoint13GetLowerLimitEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+120)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK16b2PrismaticJoint13GetUpperLimitEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+124)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK16b2PrismaticJoint14IsMotorEnabledEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+137)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 284)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=(__stackBase__)+(8);
      var $aB;
      var $qA=(__stackBase__)+(16);
      var $qB=(__stackBase__)+(24);
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $rA=(__stackBase__)+(32);
      var $3=(__stackBase__)+(40);
      var $rB=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $d=(__stackBase__)+(64);
      var $5=(__stackBase__)+(72);
      var $6=(__stackBase__)+(80);
      var $axis=(__stackBase__)+(88);
      var $a1;
      var $7=(__stackBase__)+(96);
      var $a2;
      var $perp=(__stackBase__)+(104);
      var $s1;
      var $8=(__stackBase__)+(112);
      var $s2;
      var $impulse=(__stackBase__)+(120);
      var $C1=(__stackBase__)+(132);
      var $linearError;
      var $angularError;
      var $active;
      var $C2;
      var $translation;
      var $k11;
      var $k12;
      var $k13;
      var $k22;
      var $k23;
      var $k33;
      var $K=(__stackBase__)+(140);
      var $C=(__stackBase__)+(176);
      var $9=(__stackBase__)+(188);
      var $10=(__stackBase__)+(200);
      var $k111;
      var $k122;
      var $k223;
      var $K4=(__stackBase__)+(212);
      var $impulse1=(__stackBase__)+(228);
      var $11=(__stackBase__)+(236);
      var $P=(__stackBase__)+(244);
      var $12=(__stackBase__)+(252);
      var $13=(__stackBase__)+(260);
      var $LA;
      var $LB;
      var $14=(__stackBase__)+(268);
      var $15=(__stackBase__)+(276);
      $1=$this;
      $2=$data;
      var $16=$1;
      var $17=(($16+144)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+((($18)*(12))&-1))|0);
      var $23=(($22)|0);
      var $24=$cA;
      var $25=$23;
      assert(8 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];
      var $26=(($16+144)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+((($27)*(12))&-1))|0);
      var $32=(($31+8)|0);
      var $33=HEAPF32[(($32)>>2)];
      $aA=$33;
      var $34=(($16+148)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+((($35)*(12))&-1))|0);
      var $40=(($39)|0);
      var $41=$cB;
      var $42=$40;
      assert(8 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
      var $43=(($16+148)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+((($44)*(12))&-1))|0);
      var $49=(($48+8)|0);
      var $50=HEAPF32[(($49)>>2)];
      $aB=$50;
      var $51=$aA;
      __ZN5b2RotC1Ef($qA, $51);
      var $52=$aB;
      __ZN5b2RotC1Ef($qB, $52);
      var $53=(($16+168)|0);
      var $54=HEAPF32[(($53)>>2)];
      $mA=$54;
      var $55=(($16+172)|0);
      var $56=HEAPF32[(($55)>>2)];
      $mB=$56;
      var $57=(($16+176)|0);
      var $58=HEAPF32[(($57)>>2)];
      $iA=$58;
      var $59=(($16+180)|0);
      var $60=HEAPF32[(($59)>>2)];
      $iB=$60;
      var $61=(($16+68)|0);
      var $62=(($16+152)|0);
      __ZmiRK6b2Vec2S1_($3, $61, $62);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $63=(($16+76)|0);
      var $64=(($16+160)|0);
      __ZmiRK6b2Vec2S1_($4, $63, $64);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $65=(($16+84)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($axis, $qA, $65);
      __ZplRK6b2Vec2S1_($7, $d, $rA);
      var $66=__Z7b2CrossRK6b2Vec2S1_($7, $axis);
      $a1=$66;
      var $67=__Z7b2CrossRK6b2Vec2S1_($rB, $axis);
      $a2=$67;
      var $68=(($16+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($perp, $qA, $68);
      __ZplRK6b2Vec2S1_($8, $d, $rA);
      var $69=__Z7b2CrossRK6b2Vec2S1_($8, $perp);
      $s1=$69;
      var $70=__Z7b2CrossRK6b2Vec2S1_($rB, $perp);
      $s2=$70;
      __ZN6b2Vec3C1Ev($impulse);
      __ZN6b2Vec2C1Ev($C1);
      var $71=__Z5b2DotRK6b2Vec2S1_($perp, $d);
      var $72=(($C1)|0);
      HEAPF32[(($72)>>2)]=$71;
      var $73=$aB;
      var $74=$aA;
      var $75=($73)-($74);
      var $76=(($16+100)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=($75)-($77);
      var $79=(($C1+4)|0);
      HEAPF32[(($79)>>2)]=$78;
      var $80=(($C1)|0);
      var $81=HEAPF32[(($80)>>2)];
      var $82=__Z5b2AbsIfET_S0_($81);
      $linearError=$82;
      var $83=(($C1+4)|0);
      var $84=HEAPF32[(($83)>>2)];
      var $85=__Z5b2AbsIfET_S0_($84);
      $angularError=$85;
      $active=0;
      $C2=0;
      var $86=(($16+136)|0);
      var $87=HEAP8[($86)];
      var $88=(($87) & 1);
      if ($88) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $90=__Z5b2DotRK6b2Vec2S1_($axis, $d);
      $translation=$90;
      var $91=(($16+124)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=(($16+120)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=($92)-($94);
      var $96=__Z5b2AbsIfET_S0_($95);
      var $97=$96 < 0.009999999776482582;
      if ($97) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $99=$translation;
      var $100=__Z7b2ClampIfET_S0_S0_S0_($99, -0.20000000298023224, 0.20000000298023224);
      $C2=$100;
      var $101=$linearError;
      var $102=$translation;
      var $103=__Z5b2AbsIfET_S0_($102);
      var $104=__Z5b2MaxIfET_S0_S0_($101, $103);
      $linearError=$104;
      $active=1;
      label = 10; break;
    case 4: 
      var $106=$translation;
      var $107=(($16+120)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=$106 <= $108;
      if ($109) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $111=$translation;
      var $112=(($16+120)|0);
      var $113=HEAPF32[(($112)>>2)];
      var $114=($111)-($113);
      var $115=($114)+(0.004999999888241291);
      var $116=__Z7b2ClampIfET_S0_S0_S0_($115, -0.20000000298023224, 0);
      $C2=$116;
      var $117=$linearError;
      var $118=(($16+120)|0);
      var $119=HEAPF32[(($118)>>2)];
      var $120=$translation;
      var $121=($119)-($120);
      var $122=__Z5b2MaxIfET_S0_S0_($117, $121);
      $linearError=$122;
      $active=1;
      label = 9; break;
    case 6: 
      var $124=$translation;
      var $125=(($16+124)|0);
      var $126=HEAPF32[(($125)>>2)];
      var $127=$124 >= $126;
      if ($127) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $129=$translation;
      var $130=(($16+124)|0);
      var $131=HEAPF32[(($130)>>2)];
      var $132=($129)-($131);
      var $133=($132)-(0.004999999888241291);
      var $134=__Z7b2ClampIfET_S0_S0_S0_($133, 0, 0.20000000298023224);
      $C2=$134;
      var $135=$linearError;
      var $136=$translation;
      var $137=(($16+124)|0);
      var $138=HEAPF32[(($137)>>2)];
      var $139=($136)-($138);
      var $140=__Z5b2MaxIfET_S0_S0_($135, $139);
      $linearError=$140;
      $active=1;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $145=$active;
      var $146=(($145) & 1);
      if ($146) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $148=$mA;
      var $149=$mB;
      var $150=($148)+($149);
      var $151=$iA;
      var $152=$s1;
      var $153=($151)*($152);
      var $154=$s1;
      var $155=($153)*($154);
      var $156=($150)+($155);
      var $157=$iB;
      var $158=$s2;
      var $159=($157)*($158);
      var $160=$s2;
      var $161=($159)*($160);
      var $162=($156)+($161);
      $k11=$162;
      var $163=$iA;
      var $164=$s1;
      var $165=($163)*($164);
      var $166=$iB;
      var $167=$s2;
      var $168=($166)*($167);
      var $169=($165)+($168);
      $k12=$169;
      var $170=$iA;
      var $171=$s1;
      var $172=($170)*($171);
      var $173=$a1;
      var $174=($172)*($173);
      var $175=$iB;
      var $176=$s2;
      var $177=($175)*($176);
      var $178=$a2;
      var $179=($177)*($178);
      var $180=($174)+($179);
      $k13=$180;
      var $181=$iA;
      var $182=$iB;
      var $183=($181)+($182);
      $k22=$183;
      var $184=$k22;
      var $185=$184 == 0;
      if ($185) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $k22=1;
      label = 14; break;
    case 14: 
      var $188=$iA;
      var $189=$a1;
      var $190=($188)*($189);
      var $191=$iB;
      var $192=$a2;
      var $193=($191)*($192);
      var $194=($190)+($193);
      $k23=$194;
      var $195=$mA;
      var $196=$mB;
      var $197=($195)+($196);
      var $198=$iA;
      var $199=$a1;
      var $200=($198)*($199);
      var $201=$a1;
      var $202=($200)*($201);
      var $203=($197)+($202);
      var $204=$iB;
      var $205=$a2;
      var $206=($204)*($205);
      var $207=$a2;
      var $208=($206)*($207);
      var $209=($203)+($208);
      $k33=$209;
      __ZN7b2Mat33C1Ev($K);
      var $210=(($K)|0);
      var $211=$k11;
      var $212=$k12;
      var $213=$k13;
      __ZN6b2Vec33SetEfff($210, $211, $212, $213);
      var $214=(($K+12)|0);
      var $215=$k12;
      var $216=$k22;
      var $217=$k23;
      __ZN6b2Vec33SetEfff($214, $215, $216, $217);
      var $218=(($K+24)|0);
      var $219=$k13;
      var $220=$k23;
      var $221=$k33;
      __ZN6b2Vec33SetEfff($218, $219, $220, $221);
      __ZN6b2Vec3C1Ev($C);
      var $222=(($C1)|0);
      var $223=HEAPF32[(($222)>>2)];
      var $224=(($C)|0);
      HEAPF32[(($224)>>2)]=$223;
      var $225=(($C1+4)|0);
      var $226=HEAPF32[(($225)>>2)];
      var $227=(($C+4)|0);
      HEAPF32[(($227)>>2)]=$226;
      var $228=$C2;
      var $229=(($C+8)|0);
      HEAPF32[(($229)>>2)]=$228;
      __ZNK6b2Vec3ngEv($10, $C);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($9, $K, $10);
      var $230=$impulse;
      var $231=$9;
      assert(12 % 1 === 0);HEAP32[(($230)>>2)]=HEAP32[(($231)>>2)];HEAP32[((($230)+(4))>>2)]=HEAP32[((($231)+(4))>>2)];HEAP32[((($230)+(8))>>2)]=HEAP32[((($231)+(8))>>2)];
      label = 18; break;
    case 15: 
      var $233=$mA;
      var $234=$mB;
      var $235=($233)+($234);
      var $236=$iA;
      var $237=$s1;
      var $238=($236)*($237);
      var $239=$s1;
      var $240=($238)*($239);
      var $241=($235)+($240);
      var $242=$iB;
      var $243=$s2;
      var $244=($242)*($243);
      var $245=$s2;
      var $246=($244)*($245);
      var $247=($241)+($246);
      $k111=$247;
      var $248=$iA;
      var $249=$s1;
      var $250=($248)*($249);
      var $251=$iB;
      var $252=$s2;
      var $253=($251)*($252);
      var $254=($250)+($253);
      $k122=$254;
      var $255=$iA;
      var $256=$iB;
      var $257=($255)+($256);
      $k223=$257;
      var $258=$k223;
      var $259=$258 == 0;
      if ($259) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $k223=1;
      label = 17; break;
    case 17: 
      __ZN7b2Mat22C1Ev($K4);
      var $262=(($K4)|0);
      var $263=$k111;
      var $264=$k122;
      __ZN6b2Vec23SetEff($262, $263, $264);
      var $265=(($K4+8)|0);
      var $266=$k122;
      var $267=$k223;
      __ZN6b2Vec23SetEff($265, $266, $267);
      __ZNK6b2Vec2ngEv($11, $C1);
      __ZNK7b2Mat225SolveERK6b2Vec2($impulse1, $K4, $11);
      var $268=(($impulse1)|0);
      var $269=HEAPF32[(($268)>>2)];
      var $270=(($impulse)|0);
      HEAPF32[(($270)>>2)]=$269;
      var $271=(($impulse1+4)|0);
      var $272=HEAPF32[(($271)>>2)];
      var $273=(($impulse+4)|0);
      HEAPF32[(($273)>>2)]=$272;
      var $274=(($impulse+8)|0);
      HEAPF32[(($274)>>2)]=0;
      label = 18; break;
    case 18: 
      var $276=(($impulse)|0);
      var $277=HEAPF32[(($276)>>2)];
      __ZmlfRK6b2Vec2($12, $277, $perp);
      var $278=(($impulse+8)|0);
      var $279=HEAPF32[(($278)>>2)];
      __ZmlfRK6b2Vec2($13, $279, $axis);
      __ZplRK6b2Vec2S1_($P, $12, $13);
      var $280=(($impulse)|0);
      var $281=HEAPF32[(($280)>>2)];
      var $282=$s1;
      var $283=($281)*($282);
      var $284=(($impulse+4)|0);
      var $285=HEAPF32[(($284)>>2)];
      var $286=($283)+($285);
      var $287=(($impulse+8)|0);
      var $288=HEAPF32[(($287)>>2)];
      var $289=$a1;
      var $290=($288)*($289);
      var $291=($286)+($290);
      $LA=$291;
      var $292=(($impulse)|0);
      var $293=HEAPF32[(($292)>>2)];
      var $294=$s2;
      var $295=($293)*($294);
      var $296=(($impulse+4)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=($295)+($297);
      var $299=(($impulse+8)|0);
      var $300=HEAPF32[(($299)>>2)];
      var $301=$a2;
      var $302=($300)*($301);
      var $303=($298)+($302);
      $LB=$303;
      var $304=$mA;
      __ZmlfRK6b2Vec2($14, $304, $P);
      __ZN6b2Vec2mIERKS_($cA, $14);
      var $305=$iA;
      var $306=$LA;
      var $307=($305)*($306);
      var $308=$aA;
      var $309=($308)-($307);
      $aA=$309;
      var $310=$mB;
      __ZmlfRK6b2Vec2($15, $310, $P);
      __ZN6b2Vec2pLERKS_($cB, $15);
      var $311=$iB;
      var $312=$LB;
      var $313=($311)*($312);
      var $314=$aB;
      var $315=($314)+($313);
      $aB=$315;
      var $316=(($16+144)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=$2;
      var $319=(($318+24)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+((($317)*(12))&-1))|0);
      var $322=(($321)|0);
      var $323=$322;
      var $324=$cA;
      assert(8 % 1 === 0);HEAP32[(($323)>>2)]=HEAP32[(($324)>>2)];HEAP32[((($323)+(4))>>2)]=HEAP32[((($324)+(4))>>2)];
      var $325=$aA;
      var $326=(($16+144)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=$2;
      var $329=(($328+24)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=(($330+((($327)*(12))&-1))|0);
      var $332=(($331+8)|0);
      HEAPF32[(($332)>>2)]=$325;
      var $333=(($16+148)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=$2;
      var $336=(($335+24)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337+((($334)*(12))&-1))|0);
      var $339=(($338)|0);
      var $340=$339;
      var $341=$cB;
      assert(8 % 1 === 0);HEAP32[(($340)>>2)]=HEAP32[(($341)>>2)];HEAP32[((($340)+(4))>>2)]=HEAP32[((($341)+(4))>>2)];
      var $342=$aB;
      var $343=(($16+148)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=$2;
      var $346=(($345+24)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=(($347+((($344)*(12))&-1))|0);
      var $349=(($348+8)|0);
      HEAPF32[(($349)>>2)]=$342;
      var $350=$linearError;
      var $351=$350 <= 0.004999999888241291;
      if ($351) { label = 19; break; } else { var $356 = 0;label = 20; break; }
    case 19: 
      var $353=$angularError;
      var $354=$353 <= 0.03490658849477768;
      var $356 = $354;label = 20; break;
    case 20: 
      var $356;
      STACKTOP = __stackBase__;
      return $356;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK7b2Mat225SolveERK6b2Vec2($agg_result, $this, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $a11;
      var $a12;
      var $a21;
      var $a22;
      var $det;
      $1=$this;
      $2=$b;
      var $3=$1;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAPF32[(($5)>>2)];
      $a11=$6;
      var $7=(($3+8)|0);
      var $8=(($7)|0);
      var $9=HEAPF32[(($8)>>2)];
      $a12=$9;
      var $10=(($3)|0);
      var $11=(($10+4)|0);
      var $12=HEAPF32[(($11)>>2)];
      $a21=$12;
      var $13=(($3+8)|0);
      var $14=(($13+4)|0);
      var $15=HEAPF32[(($14)>>2)];
      $a22=$15;
      var $16=$a11;
      var $17=$a22;
      var $18=($16)*($17);
      var $19=$a12;
      var $20=$a21;
      var $21=($19)*($20);
      var $22=($18)-($21);
      $det=$22;
      var $23=$det;
      var $24=$23 != 0;
      if ($24) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $26=$det;
      var $27=(1)/($26);
      $det=$27;
      label = 3; break;
    case 3: 
      __ZN6b2Vec2C1Ev($agg_result);
      var $29=$det;
      var $30=$a22;
      var $31=$2;
      var $32=(($31)|0);
      var $33=HEAPF32[(($32)>>2)];
      var $34=($30)*($33);
      var $35=$a12;
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=($35)*($38);
      var $40=($34)-($39);
      var $41=($29)*($40);
      var $42=(($agg_result)|0);
      HEAPF32[(($42)>>2)]=$41;
      var $43=$det;
      var $44=$a11;
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=HEAPF32[(($46)>>2)];
      var $48=($44)*($47);
      var $49=$a21;
      var $50=$2;
      var $51=(($50)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=($49)*($52);
      var $54=($48)-($53);
      var $55=($43)*($54);
      var $56=(($agg_result+4)|0);
      HEAPF32[(($56)>>2)]=$55;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK16b2PrismaticJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK16b2PrismaticJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK16b2PrismaticJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(8);
  var $5=(__stackBase__)+(16);
  $1=$this;
  $2=$inv_dt;
  var $6=$1;
  var $7=$2;
  var $8=(($6+104)|0);
  var $9=(($8)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=(($6+192)|0);
  __ZmlfRK6b2Vec2($4, $10, $11);
  var $12=(($6+116)|0);
  var $13=HEAPF32[(($12)>>2)];
  var $14=(($6+104)|0);
  var $15=(($14+8)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=($13)+($16);
  var $18=(($6+184)|0);
  __ZmlfRK6b2Vec2($5, $17, $18);
  __ZplRK6b2Vec2S1_($3, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, $7, $3);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK16b2PrismaticJoint19GetJointTranslationEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $pA=__stackBase__;
  var $pB=(__stackBase__)+(8);
  var $d=(__stackBase__)+(16);
  var $axis=(__stackBase__)+(24);
  var $translation;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pA, $5, $6);
  var $7=$2;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pB, $9, $10);
  __ZmiRK6b2Vec2S1_($d, $pB, $pA);
  var $11=$2;
  var $12=(($11+48)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($2+84)|0);
  __ZNK6b2Body14GetWorldVectorERK6b2Vec2($axis, $13, $14);
  var $15=__Z5b2DotRK6b2Vec2S1_($d, $axis);
  $translation=$15;
  var $16=$translation;
  STACKTOP = __stackBase__;
  return $16;
}
function __ZNK6b2Body14GetWorldVectorERK6b2Vec2($agg_result, $this, $localVector) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$localVector;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=(($4+8)|0);
  var $6=$2;
  __Z5b2MulRK5b2RotRK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK16b2PrismaticJoint13GetJointSpeedEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $bA;
  var $bB;
  var $rA=__stackBase__;
  var $2=(__stackBase__)+(8);
  var $rB=(__stackBase__)+(16);
  var $3=(__stackBase__)+(24);
  var $p1=(__stackBase__)+(32);
  var $p2=(__stackBase__)+(40);
  var $d=(__stackBase__)+(48);
  var $axis=(__stackBase__)+(56);
  var $vA=(__stackBase__)+(64);
  var $vB=(__stackBase__)+(72);
  var $wA;
  var $wB;
  var $speed;
  var $4=(__stackBase__)+(80);
  var $5=(__stackBase__)+(88);
  var $6=(__stackBase__)+(96);
  var $7=(__stackBase__)+(104);
  var $8=(__stackBase__)+(112);
  var $9=(__stackBase__)+(120);
  $1=$this;
  var $10=$1;
  var $11=$10;
  var $12=(($11+48)|0);
  var $13=HEAP32[(($12)>>2)];
  $bA=$13;
  var $14=$10;
  var $15=(($14+52)|0);
  var $16=HEAP32[(($15)>>2)];
  $bB=$16;
  var $17=$bA;
  var $18=(($17+12)|0);
  var $19=(($18+8)|0);
  var $20=(($10+68)|0);
  var $21=$bA;
  var $22=(($21+28)|0);
  var $23=(($22)|0);
  __ZmiRK6b2Vec2S1_($2, $20, $23);
  __Z5b2MulRK5b2RotRK6b2Vec2($rA, $19, $2);
  var $24=$bB;
  var $25=(($24+12)|0);
  var $26=(($25+8)|0);
  var $27=(($10+76)|0);
  var $28=$bB;
  var $29=(($28+28)|0);
  var $30=(($29)|0);
  __ZmiRK6b2Vec2S1_($3, $27, $30);
  __Z5b2MulRK5b2RotRK6b2Vec2($rB, $26, $3);
  var $31=$bA;
  var $32=(($31+28)|0);
  var $33=(($32+16)|0);
  __ZplRK6b2Vec2S1_($p1, $33, $rA);
  var $34=$bB;
  var $35=(($34+28)|0);
  var $36=(($35+16)|0);
  __ZplRK6b2Vec2S1_($p2, $36, $rB);
  __ZmiRK6b2Vec2S1_($d, $p2, $p1);
  var $37=$bA;
  var $38=(($37+12)|0);
  var $39=(($38+8)|0);
  var $40=(($10+84)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($axis, $39, $40);
  var $41=$bA;
  var $42=(($41+64)|0);
  var $43=$vA;
  var $44=$42;
  assert(8 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
  var $45=$bB;
  var $46=(($45+64)|0);
  var $47=$vB;
  var $48=$46;
  assert(8 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];
  var $49=$bA;
  var $50=(($49+72)|0);
  var $51=HEAPF32[(($50)>>2)];
  $wA=$51;
  var $52=$bB;
  var $53=(($52+72)|0);
  var $54=HEAPF32[(($53)>>2)];
  $wB=$54;
  var $55=$wA;
  __Z7b2CrossfRK6b2Vec2($4, $55, $axis);
  var $56=__Z5b2DotRK6b2Vec2S1_($d, $4);
  var $57=$wB;
  __Z7b2CrossfRK6b2Vec2($8, $57, $rB);
  __ZplRK6b2Vec2S1_($7, $vB, $8);
  __ZmiRK6b2Vec2S1_($6, $7, $vA);
  var $58=$wA;
  __Z7b2CrossfRK6b2Vec2($9, $58, $rA);
  __ZmiRK6b2Vec2S1_($5, $6, $9);
  var $59=__Z5b2DotRK6b2Vec2S1_($axis, $5);
  var $60=($56)+($59);
  $speed=$60;
  var $61=$speed;
  STACKTOP = __stackBase__;
  return $61;
}
function __ZN16b2PrismaticJoint11EnableLimitEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&(1));
      var $8=(($4+136)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&(1));
      var $12=(($7)|(0))!=(($11)|(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$4;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      __ZN6b2Body8SetAwakeEb($16, 1);
      var $17=$4;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      __ZN6b2Body8SetAwakeEb($19, 1);
      var $20=$2;
      var $21=(($20) & 1);
      var $22=(($4+136)|0);
      var $23=(($21)&(1));
      HEAP8[($22)]=$23;
      var $24=(($4+104)|0);
      var $25=(($24+8)|0);
      HEAPF32[(($25)>>2)]=0;
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2PrismaticJoint11EnableMotorEb($this, $flag) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+48)|0);
  var $7=HEAP32[(($6)>>2)];
  __ZN6b2Body8SetAwakeEb($7, 1);
  var $8=$4;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  __ZN6b2Body8SetAwakeEb($10, 1);
  var $11=$2;
  var $12=(($11) & 1);
  var $13=(($4+137)|0);
  var $14=(($12)&(1));
  HEAP8[($13)]=$14;
  return;
}
function __ZN16b2PrismaticJoint13SetMotorSpeedEf($this, $speed) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$speed;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+132)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function __ZN16b2PrismaticJoint9SetLimitsEff($this, $lower, $upper) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$lower;
      $3=$upper;
      var $4=$1;
      var $5=$2;
      var $6=$3;
      var $7=$5 <= $6;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5251044)|0), 575, ((5262368)|0), ((5256232)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $12=$2;
      var $13=(($4+120)|0);
      var $14=HEAPF32[(($13)>>2)];
      var $15=$12 != $14;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $17=$3;
      var $18=(($4+124)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$17 != $19;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$4;
      var $23=(($22+48)|0);
      var $24=HEAP32[(($23)>>2)];
      __ZN6b2Body8SetAwakeEb($24, 1);
      var $25=$4;
      var $26=(($25+52)|0);
      var $27=HEAP32[(($26)>>2)];
      __ZN6b2Body8SetAwakeEb($27, 1);
      var $28=$2;
      var $29=(($4+120)|0);
      HEAPF32[(($29)>>2)]=$28;
      var $30=$3;
      var $31=(($4+124)|0);
      HEAPF32[(($31)>>2)]=$30;
      var $32=(($4+104)|0);
      var $33=(($32+8)|0);
      HEAPF32[(($33)>>2)]=0;
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK16b2PrismaticJoint13GetMotorForceEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+116)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  return $7;
}
function __ZN16b2PrismaticJoint16SetMaxMotorForceEf($this, $force) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$force;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+128)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function __ZN16b2PrismaticJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5253288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5251100)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5250032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5249352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5248644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5248124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+84)|0);
  var $37=(($36)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$38;
  var $40=(($2+84)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$42;
  __Z5b2LogPKcz(((5247636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$39,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$43,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $44=(($2+100)|0);
  var $45=HEAPF32[(($44)>>2)];
  var $46=$45;
  __Z5b2LogPKcz(((5247240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$46,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $47=(($2+136)|0);
  var $48=HEAP8[($47)];
  var $49=(($48) & 1);
  var $50=(($49)&(1));
  __Z5b2LogPKcz(((5257864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$50,tempInt));
  var $51=(($2+120)|0);
  var $52=HEAPF32[(($51)>>2)];
  var $53=$52;
  __Z5b2LogPKcz(((5257440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$53,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $54=(($2+124)|0);
  var $55=HEAPF32[(($54)>>2)];
  var $56=$55;
  __Z5b2LogPKcz(((5256848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $57=(($2+137)|0);
  var $58=HEAP8[($57)];
  var $59=(($58) & 1);
  var $60=(($59)&(1));
  __Z5b2LogPKcz(((5256248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$60,tempInt));
  var $61=(($2+132)|0);
  var $62=HEAPF32[(($61)>>2)];
  var $63=$62;
  __Z5b2LogPKcz(((5255856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$63,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $64=(($2+128)|0);
  var $65=HEAPF32[(($64)>>2)];
  var $66=$65;
  __Z5b2LogPKcz(((5255604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$66,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $67=$2;
  var $68=(($67+56)|0);
  var $69=HEAP32[(($68)>>2)];
  __Z5b2LogPKcz(((5255368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$69,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN16b2PrismaticJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2PrismaticJointD2Ev($2);
  return;
}
function __ZN16b2PrismaticJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN16b2PrismaticJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2PrismaticJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN7b2Mat33C2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec3C1Ev($3);
  var $4=(($2+12)|0);
  __ZN6b2Vec3C1Ev($4);
  var $5=(($2+24)|0);
  __ZN6b2Vec3C1Ev($5);
  return;
}
function __ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      var $6=(__stackBase__)+(72);
      var $7=(__stackBase__)+(80);
      var $8=(__stackBase__)+(88);
      var $9=(__stackBase__)+(96);
      var $10=(__stackBase__)+(104);
      var $lengthA;
      var $lengthB;
      var $ruA;
      var $ruB;
      var $mA;
      var $mB;
      var $PA=(__stackBase__)+(112);
      var $PB=(__stackBase__)+(120);
      var $11=(__stackBase__)+(128);
      var $12=(__stackBase__)+(136);
      $1=$this;
      $2=$data;
      var $13=$1;
      var $14=$13;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($13+120)|0);
      HEAP32[(($19)>>2)]=$18;
      var $20=$13;
      var $21=(($20+52)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($13+124)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=(($13+160)|0);
      var $27=$13;
      var $28=(($27+48)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+28)|0);
      var $31=(($30)|0);
      var $32=$26;
      var $33=$31;
      assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
      var $34=(($13+168)|0);
      var $35=$13;
      var $36=(($35+52)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+28)|0);
      var $39=(($38)|0);
      var $40=$34;
      var $41=$39;
      assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
      var $42=$13;
      var $43=(($42+48)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+120)|0);
      var $46=HEAPF32[(($45)>>2)];
      var $47=(($13+176)|0);
      HEAPF32[(($47)>>2)]=$46;
      var $48=$13;
      var $49=(($48+52)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+120)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($13+180)|0);
      HEAPF32[(($53)>>2)]=$52;
      var $54=$13;
      var $55=(($54+48)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+128)|0);
      var $58=HEAPF32[(($57)>>2)];
      var $59=(($13+184)|0);
      HEAPF32[(($59)>>2)]=$58;
      var $60=$13;
      var $61=(($60+52)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+128)|0);
      var $64=HEAPF32[(($63)>>2)];
      var $65=(($13+188)|0);
      HEAPF32[(($65)>>2)]=$64;
      var $66=(($13+120)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$2;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+((($67)*(12))&-1))|0);
      var $72=(($71)|0);
      var $73=$cA;
      var $74=$72;
      assert(8 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];
      var $75=(($13+120)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$2;
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+((($76)*(12))&-1))|0);
      var $81=(($80+8)|0);
      var $82=HEAPF32[(($81)>>2)];
      $aA=$82;
      var $83=(($13+120)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+28)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+((($84)*(12))&-1))|0);
      var $89=(($88)|0);
      var $90=$vA;
      var $91=$89;
      assert(8 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];
      var $92=(($13+120)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$2;
      var $95=(($94+28)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+((($93)*(12))&-1))|0);
      var $98=(($97+8)|0);
      var $99=HEAPF32[(($98)>>2)];
      $wA=$99;
      var $100=(($13+124)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$2;
      var $103=(($102+24)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+((($101)*(12))&-1))|0);
      var $106=(($105)|0);
      var $107=$cB;
      var $108=$106;
      assert(8 % 1 === 0);HEAP32[(($107)>>2)]=HEAP32[(($108)>>2)];HEAP32[((($107)+(4))>>2)]=HEAP32[((($108)+(4))>>2)];
      var $109=(($13+124)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$2;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+((($110)*(12))&-1))|0);
      var $115=(($114+8)|0);
      var $116=HEAPF32[(($115)>>2)];
      $aB=$116;
      var $117=(($13+124)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$2;
      var $120=(($119+28)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+((($118)*(12))&-1))|0);
      var $123=(($122)|0);
      var $124=$vB;
      var $125=$123;
      assert(8 % 1 === 0);HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($124)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];
      var $126=(($13+124)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$2;
      var $129=(($128+28)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+((($127)*(12))&-1))|0);
      var $132=(($131+8)|0);
      var $133=HEAPF32[(($132)>>2)];
      $wB=$133;
      var $134=$aA;
      __ZN5b2RotC1Ef($qA, $134);
      var $135=$aB;
      __ZN5b2RotC1Ef($qB, $135);
      var $136=(($13+144)|0);
      var $137=(($13+92)|0);
      var $138=(($13+160)|0);
      __ZmiRK6b2Vec2S1_($4, $137, $138);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $139=$136;
      var $140=$3;
      assert(8 % 1 === 0);HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];HEAP32[((($139)+(4))>>2)]=HEAP32[((($140)+(4))>>2)];
      var $141=(($13+152)|0);
      var $142=(($13+100)|0);
      var $143=(($13+168)|0);
      __ZmiRK6b2Vec2S1_($6, $142, $143);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $144=$141;
      var $145=$5;
      assert(8 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];
      var $146=(($13+128)|0);
      var $147=(($13+144)|0);
      __ZplRK6b2Vec2S1_($8, $cA, $147);
      var $148=(($13+68)|0);
      __ZmiRK6b2Vec2S1_($7, $8, $148);
      var $149=$146;
      var $150=$7;
      assert(8 % 1 === 0);HEAP32[(($149)>>2)]=HEAP32[(($150)>>2)];HEAP32[((($149)+(4))>>2)]=HEAP32[((($150)+(4))>>2)];
      var $151=(($13+136)|0);
      var $152=(($13+152)|0);
      __ZplRK6b2Vec2S1_($10, $cB, $152);
      var $153=(($13+76)|0);
      __ZmiRK6b2Vec2S1_($9, $10, $153);
      var $154=$151;
      var $155=$9;
      assert(8 % 1 === 0);HEAP32[(($154)>>2)]=HEAP32[(($155)>>2)];HEAP32[((($154)+(4))>>2)]=HEAP32[((($155)+(4))>>2)];
      var $156=(($13+128)|0);
      var $157=__ZNK6b2Vec26LengthEv($156);
      $lengthA=$157;
      var $158=(($13+136)|0);
      var $159=__ZNK6b2Vec26LengthEv($158);
      $lengthB=$159;
      var $160=$lengthA;
      var $161=$160 > 0.04999999701976776;
      if ($161) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $163=(($13+128)|0);
      var $164=$lengthA;
      var $165=(1)/($164);
      __ZN6b2Vec2mLEf($163, $165);
      label = 4; break;
    case 3: 
      var $167=(($13+128)|0);
      __ZN6b2Vec27SetZeroEv($167);
      label = 4; break;
    case 4: 
      var $169=$lengthB;
      var $170=$169 > 0.04999999701976776;
      if ($170) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $172=(($13+136)|0);
      var $173=$lengthB;
      var $174=(1)/($173);
      __ZN6b2Vec2mLEf($172, $174);
      label = 7; break;
    case 6: 
      var $176=(($13+136)|0);
      __ZN6b2Vec27SetZeroEv($176);
      label = 7; break;
    case 7: 
      var $178=(($13+144)|0);
      var $179=(($13+128)|0);
      var $180=__Z7b2CrossRK6b2Vec2S1_($178, $179);
      $ruA=$180;
      var $181=(($13+152)|0);
      var $182=(($13+136)|0);
      var $183=__Z7b2CrossRK6b2Vec2S1_($181, $182);
      $ruB=$183;
      var $184=(($13+176)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(($13+184)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=$ruA;
      var $189=($187)*($188);
      var $190=$ruA;
      var $191=($189)*($190);
      var $192=($185)+($191);
      $mA=$192;
      var $193=(($13+180)|0);
      var $194=HEAPF32[(($193)>>2)];
      var $195=(($13+188)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=$ruB;
      var $198=($196)*($197);
      var $199=$ruB;
      var $200=($198)*($199);
      var $201=($194)+($200);
      $mB=$201;
      var $202=$mA;
      var $203=(($13+112)|0);
      var $204=HEAPF32[(($203)>>2)];
      var $205=(($13+112)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=($204)*($206);
      var $208=$mB;
      var $209=($207)*($208);
      var $210=($202)+($209);
      var $211=(($13+192)|0);
      HEAPF32[(($211)>>2)]=$210;
      var $212=(($13+192)|0);
      var $213=HEAPF32[(($212)>>2)];
      var $214=$213 > 0;
      if ($214) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $216=(($13+192)|0);
      var $217=HEAPF32[(($216)>>2)];
      var $218=(1)/($217);
      var $219=(($13+192)|0);
      HEAPF32[(($219)>>2)]=$218;
      label = 9; break;
    case 9: 
      var $221=$2;
      var $222=(($221)|0);
      var $223=(($222+20)|0);
      var $224=HEAP8[($223)];
      var $225=(($224) & 1);
      if ($225) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $227=$2;
      var $228=(($227)|0);
      var $229=(($228+8)|0);
      var $230=HEAPF32[(($229)>>2)];
      var $231=(($13+116)|0);
      var $232=HEAPF32[(($231)>>2)];
      var $233=($232)*($230);
      HEAPF32[(($231)>>2)]=$233;
      var $234=(($13+116)|0);
      var $235=HEAPF32[(($234)>>2)];
      var $236=(-$235);
      var $237=(($13+128)|0);
      __ZmlfRK6b2Vec2($PA, $236, $237);
      var $238=(($13+112)|0);
      var $239=HEAPF32[(($238)>>2)];
      var $240=(-$239);
      var $241=(($13+116)|0);
      var $242=HEAPF32[(($241)>>2)];
      var $243=($240)*($242);
      var $244=(($13+136)|0);
      __ZmlfRK6b2Vec2($PB, $243, $244);
      var $245=(($13+176)|0);
      var $246=HEAPF32[(($245)>>2)];
      __ZmlfRK6b2Vec2($11, $246, $PA);
      __ZN6b2Vec2pLERKS_($vA, $11);
      var $247=(($13+184)|0);
      var $248=HEAPF32[(($247)>>2)];
      var $249=(($13+144)|0);
      var $250=__Z7b2CrossRK6b2Vec2S1_($249, $PA);
      var $251=($248)*($250);
      var $252=$wA;
      var $253=($252)+($251);
      $wA=$253;
      var $254=(($13+180)|0);
      var $255=HEAPF32[(($254)>>2)];
      __ZmlfRK6b2Vec2($12, $255, $PB);
      __ZN6b2Vec2pLERKS_($vB, $12);
      var $256=(($13+188)|0);
      var $257=HEAPF32[(($256)>>2)];
      var $258=(($13+152)|0);
      var $259=__Z7b2CrossRK6b2Vec2S1_($258, $PB);
      var $260=($257)*($259);
      var $261=$wB;
      var $262=($261)+($260);
      $wB=$262;
      label = 12; break;
    case 11: 
      var $264=(($13+116)|0);
      HEAPF32[(($264)>>2)]=0;
      label = 12; break;
    case 12: 
      var $266=(($13+120)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=$2;
      var $269=(($268+28)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270+((($267)*(12))&-1))|0);
      var $272=(($271)|0);
      var $273=$272;
      var $274=$vA;
      assert(8 % 1 === 0);HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];HEAP32[((($273)+(4))>>2)]=HEAP32[((($274)+(4))>>2)];
      var $275=$wA;
      var $276=(($13+120)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$2;
      var $279=(($278+28)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+((($277)*(12))&-1))|0);
      var $282=(($281+8)|0);
      HEAPF32[(($282)>>2)]=$275;
      var $283=(($13+124)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$2;
      var $286=(($285+28)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=(($287+((($284)*(12))&-1))|0);
      var $289=(($288)|0);
      var $290=$289;
      var $291=$vB;
      assert(8 % 1 === 0);HEAP32[(($290)>>2)]=HEAP32[(($291)>>2)];HEAP32[((($290)+(4))>>2)]=HEAP32[((($291)+(4))>>2)];
      var $292=$wB;
      var $293=(($13+124)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=$2;
      var $296=(($295+28)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=(($297+((($294)*(12))&-1))|0);
      var $299=(($298+8)|0);
      HEAPF32[(($299)>>2)]=$292;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $vA=__stackBase__;
  var $wA;
  var $vB=(__stackBase__)+(8);
  var $wB;
  var $vpA=(__stackBase__)+(16);
  var $3=(__stackBase__)+(24);
  var $vpB=(__stackBase__)+(32);
  var $4=(__stackBase__)+(40);
  var $Cdot;
  var $impulse;
  var $PA=(__stackBase__)+(48);
  var $PB=(__stackBase__)+(56);
  var $5=(__stackBase__)+(64);
  var $6=(__stackBase__)+(72);
  $1=$this;
  $2=$data;
  var $7=$1;
  var $8=(($7+120)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=(($10+28)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+((($9)*(12))&-1))|0);
  var $14=(($13)|0);
  var $15=$vA;
  var $16=$14;
  assert(8 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];
  var $17=(($7+120)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$2;
  var $20=(($19+28)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=(($21+((($18)*(12))&-1))|0);
  var $23=(($22+8)|0);
  var $24=HEAPF32[(($23)>>2)];
  $wA=$24;
  var $25=(($7+124)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$2;
  var $28=(($27+28)|0);
  var $29=HEAP32[(($28)>>2)];
  var $30=(($29+((($26)*(12))&-1))|0);
  var $31=(($30)|0);
  var $32=$vB;
  var $33=$31;
  assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
  var $34=(($7+124)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=$2;
  var $37=(($36+28)|0);
  var $38=HEAP32[(($37)>>2)];
  var $39=(($38+((($35)*(12))&-1))|0);
  var $40=(($39+8)|0);
  var $41=HEAPF32[(($40)>>2)];
  $wB=$41;
  var $42=$wA;
  var $43=(($7+144)|0);
  __Z7b2CrossfRK6b2Vec2($3, $42, $43);
  __ZplRK6b2Vec2S1_($vpA, $vA, $3);
  var $44=$wB;
  var $45=(($7+152)|0);
  __Z7b2CrossfRK6b2Vec2($4, $44, $45);
  __ZplRK6b2Vec2S1_($vpB, $vB, $4);
  var $46=(($7+128)|0);
  var $47=__Z5b2DotRK6b2Vec2S1_($46, $vpA);
  var $48=(-$47);
  var $49=(($7+112)|0);
  var $50=HEAPF32[(($49)>>2)];
  var $51=(($7+136)|0);
  var $52=__Z5b2DotRK6b2Vec2S1_($51, $vpB);
  var $53=($50)*($52);
  var $54=($48)-($53);
  $Cdot=$54;
  var $55=(($7+192)|0);
  var $56=HEAPF32[(($55)>>2)];
  var $57=(-$56);
  var $58=$Cdot;
  var $59=($57)*($58);
  $impulse=$59;
  var $60=$impulse;
  var $61=(($7+116)|0);
  var $62=HEAPF32[(($61)>>2)];
  var $63=($62)+($60);
  HEAPF32[(($61)>>2)]=$63;
  var $64=$impulse;
  var $65=(-$64);
  var $66=(($7+128)|0);
  __ZmlfRK6b2Vec2($PA, $65, $66);
  var $67=(($7+112)|0);
  var $68=HEAPF32[(($67)>>2)];
  var $69=(-$68);
  var $70=$impulse;
  var $71=($69)*($70);
  var $72=(($7+136)|0);
  __ZmlfRK6b2Vec2($PB, $71, $72);
  var $73=(($7+176)|0);
  var $74=HEAPF32[(($73)>>2)];
  __ZmlfRK6b2Vec2($5, $74, $PA);
  __ZN6b2Vec2pLERKS_($vA, $5);
  var $75=(($7+184)|0);
  var $76=HEAPF32[(($75)>>2)];
  var $77=(($7+144)|0);
  var $78=__Z7b2CrossRK6b2Vec2S1_($77, $PA);
  var $79=($76)*($78);
  var $80=$wA;
  var $81=($80)+($79);
  $wA=$81;
  var $82=(($7+180)|0);
  var $83=HEAPF32[(($82)>>2)];
  __ZmlfRK6b2Vec2($6, $83, $PB);
  __ZN6b2Vec2pLERKS_($vB, $6);
  var $84=(($7+188)|0);
  var $85=HEAPF32[(($84)>>2)];
  var $86=(($7+152)|0);
  var $87=__Z7b2CrossRK6b2Vec2S1_($86, $PB);
  var $88=($85)*($87);
  var $89=$wB;
  var $90=($89)+($88);
  $wB=$90;
  var $91=(($7+120)|0);
  var $92=HEAP32[(($91)>>2)];
  var $93=$2;
  var $94=(($93+28)|0);
  var $95=HEAP32[(($94)>>2)];
  var $96=(($95+((($92)*(12))&-1))|0);
  var $97=(($96)|0);
  var $98=$97;
  var $99=$vA;
  assert(8 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];
  var $100=$wA;
  var $101=(($7+120)|0);
  var $102=HEAP32[(($101)>>2)];
  var $103=$2;
  var $104=(($103+28)|0);
  var $105=HEAP32[(($104)>>2)];
  var $106=(($105+((($102)*(12))&-1))|0);
  var $107=(($106+8)|0);
  HEAPF32[(($107)>>2)]=$100;
  var $108=(($7+124)|0);
  var $109=HEAP32[(($108)>>2)];
  var $110=$2;
  var $111=(($110+28)|0);
  var $112=HEAP32[(($111)>>2)];
  var $113=(($112+((($109)*(12))&-1))|0);
  var $114=(($113)|0);
  var $115=$114;
  var $116=$vB;
  assert(8 % 1 === 0);HEAP32[(($115)>>2)]=HEAP32[(($116)>>2)];HEAP32[((($115)+(4))>>2)]=HEAP32[((($116)+(4))>>2)];
  var $117=$wB;
  var $118=(($7+124)|0);
  var $119=HEAP32[(($118)>>2)];
  var $120=$2;
  var $121=(($120+28)|0);
  var $122=HEAP32[(($121)>>2)];
  var $123=(($122+((($119)*(12))&-1))|0);
  var $124=(($123+8)|0);
  HEAPF32[(($124)>>2)]=$117;
  STACKTOP = __stackBase__;
  return;
}
function __ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f($this, $bA, $bB, $groundA, $groundB, $anchorA, $anchorB, $r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9=__stackBase__;
      var $10=(__stackBase__)+(8);
      var $dA=(__stackBase__)+(16);
      var $dB=(__stackBase__)+(24);
      $1=$this;
      $2=$bA;
      $3=$bB;
      $4=$groundA;
      $5=$groundB;
      $6=$anchorA;
      $7=$anchorB;
      $8=$r;
      var $11=$1;
      var $12=$2;
      var $13=$11;
      var $14=(($13+8)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$3;
      var $16=$11;
      var $17=(($16+12)|0);
      HEAP32[(($17)>>2)]=$15;
      var $18=(($11+20)|0);
      var $19=$4;
      var $20=$18;
      var $21=$19;
      assert(8 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
      var $22=(($11+28)|0);
      var $23=$5;
      var $24=$22;
      var $25=$23;
      assert(8 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];
      var $26=(($11+36)|0);
      var $27=$11;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$6;
      __ZNK6b2Body13GetLocalPointERK6b2Vec2($9, $29, $30);
      var $31=$26;
      var $32=$9;
      assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];
      var $33=(($11+44)|0);
      var $34=$11;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$7;
      __ZNK6b2Body13GetLocalPointERK6b2Vec2($10, $36, $37);
      var $38=$33;
      var $39=$10;
      assert(8 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];
      var $40=$6;
      var $41=$4;
      __ZmiRK6b2Vec2S1_($dA, $40, $41);
      var $42=__ZNK6b2Vec26LengthEv($dA);
      var $43=(($11+52)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$7;
      var $45=$5;
      __ZmiRK6b2Vec2S1_($dB, $44, $45);
      var $46=__ZNK6b2Vec26LengthEv($dB);
      var $47=(($11+56)|0);
      HEAPF32[(($47)>>2)]=$46;
      var $48=$8;
      var $49=(($11+60)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=(($11+60)|0);
      var $51=HEAPF32[(($50)>>2)];
      var $52=$51 > 1.1920928955078125e-7;
      if ($52) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5250752)|0), 51, ((5262240)|0), ((5256156)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((5265100)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 15; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 15; break; }
    case 3: 
      var $14=(($5+92)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $16=(($5+100)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $18=(($5+128)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $20=(($5+136)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $22=(($5+144)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $24=(($5+152)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $26=(($5+160)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $28=(($5+168)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $30=(($5+68)|0);
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=$30;
      var $34=$32;
      assert(8 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
      var $35=(($5+76)|0);
      var $36=$2;
      var $37=(($36+28)|0);
      var $38=$35;
      var $39=$37;
      assert(8 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];
      var $40=(($5+92)|0);
      var $41=$2;
      var $42=(($41+36)|0);
      var $43=$40;
      var $44=$42;
      assert(8 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
      var $45=(($5+100)|0);
      var $46=$2;
      var $47=(($46+44)|0);
      var $48=$45;
      var $49=$47;
      assert(8 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
      var $50=$2;
      var $51=(($50+52)|0);
      var $52=HEAPF32[(($51)>>2)];
      var $53=(($5+84)|0);
      HEAPF32[(($53)>>2)]=$52;
      var $54=$2;
      var $55=(($54+56)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=(($5+88)|0);
      HEAPF32[(($57)>>2)]=$56;
      var $58=$2;
      var $59=(($58+60)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=$60 != 0;
      if ($61) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 16; break;
    case 13: 
      (function() { try { __THREW__ = 0; return ___assert_func(((5250752)|0), 65, ((5263128)|0), ((5253268)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
    case 14: 
      throw "Reached an unreachable!"
    case 15: 
      var $66$0 = ___cxa_find_matching_catch(-1, -1); $66$1 = tempRet0;
      var $67=$66$0;
      $3=$67;
      var $68=$66$1;
      $4=$68;
      var $69=$5;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 19; break; }
      label = 16; break;
    case 16: 
      var $72=$2;
      var $73=(($72+60)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=(($5+112)|0);
      HEAPF32[(($75)>>2)]=$74;
      var $76=$2;
      var $77=(($76+52)|0);
      var $78=HEAPF32[(($77)>>2)];
      var $79=(($5+112)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+56)|0);
      var $83=HEAPF32[(($82)>>2)];
      var $84=($80)*($83);
      var $85=($78)+($84);
      var $86=(($5+108)|0);
      HEAPF32[(($86)>>2)]=$85;
      var $87=(($5+116)|0);
      HEAPF32[(($87)>>2)]=0;
      return;
    case 17: 
      label = 18; break;
    case 18: 
      var $90=$3;
      var $91=$4;
      var $92$0=$90;
      var $92$1=0;
      var $93$0=$92$0;
      var $93$1=$91;
      ___resumeException($93$0)
    case 19: 
      var $95$0 = ___cxa_find_matching_catch(-1, -1,0); $95$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2PulleyJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  return 0;
}
function __ZNK13b2PulleyJoint8GetRatioEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+112)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=(__stackBase__)+(8);
      var $aB;
      var $qA=(__stackBase__)+(16);
      var $qB=(__stackBase__)+(24);
      var $rA=(__stackBase__)+(32);
      var $3=(__stackBase__)+(40);
      var $rB=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $uA=(__stackBase__)+(64);
      var $5=(__stackBase__)+(72);
      var $uB=(__stackBase__)+(80);
      var $6=(__stackBase__)+(88);
      var $lengthA;
      var $lengthB;
      var $ruA;
      var $ruB;
      var $mA;
      var $mB;
      var $mass;
      var $C;
      var $linearError;
      var $impulse;
      var $PA=(__stackBase__)+(96);
      var $PB=(__stackBase__)+(104);
      var $7=(__stackBase__)+(112);
      var $8=(__stackBase__)+(120);
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=(($9+120)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+((($11)*(12))&-1))|0);
      var $16=(($15)|0);
      var $17=$cA;
      var $18=$16;
      assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
      var $19=(($9+120)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+((($20)*(12))&-1))|0);
      var $25=(($24+8)|0);
      var $26=HEAPF32[(($25)>>2)];
      $aA=$26;
      var $27=(($9+124)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+((($28)*(12))&-1))|0);
      var $33=(($32)|0);
      var $34=$cB;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=(($9+124)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$2;
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+((($37)*(12))&-1))|0);
      var $42=(($41+8)|0);
      var $43=HEAPF32[(($42)>>2)];
      $aB=$43;
      var $44=$aA;
      __ZN5b2RotC1Ef($qA, $44);
      var $45=$aB;
      __ZN5b2RotC1Ef($qB, $45);
      var $46=(($9+92)|0);
      var $47=(($9+160)|0);
      __ZmiRK6b2Vec2S1_($3, $46, $47);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $48=(($9+100)|0);
      var $49=(($9+168)|0);
      __ZmiRK6b2Vec2S1_($4, $48, $49);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($5, $cA, $rA);
      var $50=(($9+68)|0);
      __ZmiRK6b2Vec2S1_($uA, $5, $50);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      var $51=(($9+76)|0);
      __ZmiRK6b2Vec2S1_($uB, $6, $51);
      var $52=__ZNK6b2Vec26LengthEv($uA);
      $lengthA=$52;
      var $53=__ZNK6b2Vec26LengthEv($uB);
      $lengthB=$53;
      var $54=$lengthA;
      var $55=$54 > 0.04999999701976776;
      if ($55) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $57=$lengthA;
      var $58=(1)/($57);
      __ZN6b2Vec2mLEf($uA, $58);
      label = 4; break;
    case 3: 
      __ZN6b2Vec27SetZeroEv($uA);
      label = 4; break;
    case 4: 
      var $61=$lengthB;
      var $62=$61 > 0.04999999701976776;
      if ($62) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $64=$lengthB;
      var $65=(1)/($64);
      __ZN6b2Vec2mLEf($uB, $65);
      label = 7; break;
    case 6: 
      __ZN6b2Vec27SetZeroEv($uB);
      label = 7; break;
    case 7: 
      var $68=__Z7b2CrossRK6b2Vec2S1_($rA, $uA);
      $ruA=$68;
      var $69=__Z7b2CrossRK6b2Vec2S1_($rB, $uB);
      $ruB=$69;
      var $70=(($9+176)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=(($9+184)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=$ruA;
      var $75=($73)*($74);
      var $76=$ruA;
      var $77=($75)*($76);
      var $78=($71)+($77);
      $mA=$78;
      var $79=(($9+180)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=(($9+188)|0);
      var $82=HEAPF32[(($81)>>2)];
      var $83=$ruB;
      var $84=($82)*($83);
      var $85=$ruB;
      var $86=($84)*($85);
      var $87=($80)+($86);
      $mB=$87;
      var $88=$mA;
      var $89=(($9+112)|0);
      var $90=HEAPF32[(($89)>>2)];
      var $91=(($9+112)|0);
      var $92=HEAPF32[(($91)>>2)];
      var $93=($90)*($92);
      var $94=$mB;
      var $95=($93)*($94);
      var $96=($88)+($95);
      $mass=$96;
      var $97=$mass;
      var $98=$97 > 0;
      if ($98) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $100=$mass;
      var $101=(1)/($100);
      $mass=$101;
      label = 9; break;
    case 9: 
      var $103=(($9+108)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=$lengthA;
      var $106=($104)-($105);
      var $107=(($9+112)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=$lengthB;
      var $110=($108)*($109);
      var $111=($106)-($110);
      $C=$111;
      var $112=$C;
      var $113=__Z5b2AbsIfET_S0_($112);
      $linearError=$113;
      var $114=$mass;
      var $115=(-$114);
      var $116=$C;
      var $117=($115)*($116);
      $impulse=$117;
      var $118=$impulse;
      var $119=(-$118);
      __ZmlfRK6b2Vec2($PA, $119, $uA);
      var $120=(($9+112)|0);
      var $121=HEAPF32[(($120)>>2)];
      var $122=(-$121);
      var $123=$impulse;
      var $124=($122)*($123);
      __ZmlfRK6b2Vec2($PB, $124, $uB);
      var $125=(($9+176)|0);
      var $126=HEAPF32[(($125)>>2)];
      __ZmlfRK6b2Vec2($7, $126, $PA);
      __ZN6b2Vec2pLERKS_($cA, $7);
      var $127=(($9+184)|0);
      var $128=HEAPF32[(($127)>>2)];
      var $129=__Z7b2CrossRK6b2Vec2S1_($rA, $PA);
      var $130=($128)*($129);
      var $131=$aA;
      var $132=($131)+($130);
      $aA=$132;
      var $133=(($9+180)|0);
      var $134=HEAPF32[(($133)>>2)];
      __ZmlfRK6b2Vec2($8, $134, $PB);
      __ZN6b2Vec2pLERKS_($cB, $8);
      var $135=(($9+188)|0);
      var $136=HEAPF32[(($135)>>2)];
      var $137=__Z7b2CrossRK6b2Vec2S1_($rB, $PB);
      var $138=($136)*($137);
      var $139=$aB;
      var $140=($139)+($138);
      $aB=$140;
      var $141=(($9+120)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$2;
      var $144=(($143+24)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+((($142)*(12))&-1))|0);
      var $147=(($146)|0);
      var $148=$147;
      var $149=$cA;
      assert(8 % 1 === 0);HEAP32[(($148)>>2)]=HEAP32[(($149)>>2)];HEAP32[((($148)+(4))>>2)]=HEAP32[((($149)+(4))>>2)];
      var $150=$aA;
      var $151=(($9+120)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$2;
      var $154=(($153+24)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155+((($152)*(12))&-1))|0);
      var $157=(($156+8)|0);
      HEAPF32[(($157)>>2)]=$150;
      var $158=(($9+124)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$2;
      var $161=(($160+24)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+((($159)*(12))&-1))|0);
      var $164=(($163)|0);
      var $165=$164;
      var $166=$cB;
      assert(8 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($166)+(4))>>2)];
      var $167=$aB;
      var $168=(($9+124)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$2;
      var $171=(($170+24)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172+((($169)*(12))&-1))|0);
      var $174=(($173+8)|0);
      HEAPF32[(($174)>>2)]=$167;
      var $175=$linearError;
      var $176=$175 < 0.004999999888241291;
      STACKTOP = __stackBase__;
      return $176;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK13b2PulleyJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+92)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK13b2PulleyJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+100)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK13b2PulleyJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+116)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=(($3+136)|0);
  __ZmlfRK6b2Vec2($P, $5, $6);
  var $7=$2;
  __ZmlfRK6b2Vec2($agg_result, $7, $P);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK13b2PulleyJoint16GetGroundAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];
  return;
}
function __ZNK13b2PulleyJoint16GetGroundAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];
  return;
}
function __ZNK13b2PulleyJoint10GetLengthAEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $p=__stackBase__;
  var $s=(__stackBase__)+(8);
  var $d=(__stackBase__)+(16);
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+92)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($p, $5, $6);
  var $7=(($2+68)|0);
  var $8=$s;
  var $9=$7;
  assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];
  __ZmiRK6b2Vec2S1_($d, $p, $s);
  var $10=__ZNK6b2Vec26LengthEv($d);
  STACKTOP = __stackBase__;
  return $10;
}
function __ZNK13b2PulleyJoint10GetLengthBEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $p=__stackBase__;
  var $s=(__stackBase__)+(8);
  var $d=(__stackBase__)+(16);
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+100)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($p, $5, $6);
  var $7=(($2+76)|0);
  var $8=$s;
  var $9=$7;
  assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];
  __ZmiRK6b2Vec2S1_($d, $p, $s);
  var $10=__ZNK6b2Vec26LengthEv($d);
  STACKTOP = __stackBase__;
  return $10;
}
function __ZN13b2PulleyJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5251020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5250004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5249324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5248608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5248080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5247592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+92)|0);
  var $37=(($36)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$38;
  var $40=(($2+92)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$42;
  __Z5b2LogPKcz(((5247196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$39,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$43,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $44=(($2+100)|0);
  var $45=(($44)|0);
  var $46=HEAPF32[(($45)>>2)];
  var $47=$46;
  var $48=(($2+100)|0);
  var $49=(($48+4)|0);
  var $50=HEAPF32[(($49)>>2)];
  var $51=$50;
  __Z5b2LogPKcz(((5257820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$47,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$51,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $52=(($2+84)|0);
  var $53=HEAPF32[(($52)>>2)];
  var $54=$53;
  __Z5b2LogPKcz(((5257412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$54,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $55=(($2+88)|0);
  var $56=HEAPF32[(($55)>>2)];
  var $57=$56;
  __Z5b2LogPKcz(((5256820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$57,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $58=(($2+112)|0);
  var $59=HEAPF32[(($58)>>2)];
  var $60=$59;
  __Z5b2LogPKcz(((5256208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$60,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $61=$2;
  var $62=(($61+56)|0);
  var $63=HEAP32[(($62)>>2)];
  __Z5b2LogPKcz(((5255812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$63,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN13b2PulleyJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN13b2PulleyJointD2Ev($2);
  return;
}
function __ZN13b2PulleyJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN13b2PulleyJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN13b2PulleyJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN18b2RevoluteJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  var $6=(__stackBase__)+(8);
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  var $7=$1;
  var $8=$2;
  var $9=$7;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$3;
  var $12=$7;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=(($7+20)|0);
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $17, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
  var $21=(($7+28)|0);
  var $22=$7;
  var $23=(($22+12)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $24, $25);
  var $26=$21;
  var $27=$6;
  assert(8 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
  var $28=$7;
  var $29=(($28+12)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=__ZNK6b2Body8GetAngleEv($30);
  var $32=$7;
  var $33=(($32+8)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=__ZNK6b2Body8GetAngleEv($34);
  var $36=($31)-($35);
  var $37=(($7+36)|0);
  HEAPF32[(($37)>>2)]=$36;
  STACKTOP = __stackBase__;
  return;
}
function __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((5264828)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $14=(($5+84)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec3C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $16=(($5+136)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $18=(($5+144)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $20=(($5+152)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $22=(($5+160)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $24=(($5+184)|0);
      (function() { try { __THREW__ = 0; return __ZN7b2Mat33C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $26=(($5+68)|0);
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=$26;
      var $30=$28;
      assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
      var $31=(($5+76)|0);
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=(($5+116)|0);
      HEAPF32[(($39)>>2)]=$38;
      var $40=(($5+84)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec37SetZeroEv($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $42=(($5+96)|0);
      HEAPF32[(($42)>>2)]=0;
      var $43=$2;
      var $44=(($43+44)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($5+120)|0);
      HEAPF32[(($46)>>2)]=$45;
      var $47=$2;
      var $48=(($47+48)|0);
      var $49=HEAPF32[(($48)>>2)];
      var $50=(($5+124)|0);
      HEAPF32[(($50)>>2)]=$49;
      var $51=$2;
      var $52=(($51+60)|0);
      var $53=HEAPF32[(($52)>>2)];
      var $54=(($5+104)|0);
      HEAPF32[(($54)>>2)]=$53;
      var $55=$2;
      var $56=(($55+56)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=(($5+108)|0);
      HEAPF32[(($58)>>2)]=$57;
      var $59=$2;
      var $60=(($59+40)|0);
      var $61=HEAP8[($60)];
      var $62=(($61) & 1);
      var $63=(($5+112)|0);
      var $64=(($62)&(1));
      HEAP8[($63)]=$64;
      var $65=$2;
      var $66=(($65+52)|0);
      var $67=HEAP8[($66)];
      var $68=(($67) & 1);
      var $69=(($5+100)|0);
      var $70=(($68)&(1));
      HEAP8[($69)]=$70;
      var $71=(($5+224)|0);
      HEAP32[(($71)>>2)]=0;
      return;
    case 11: 
      var $73$0 = ___cxa_find_matching_catch(-1, -1); $73$1 = tempRet0;
      var $74=$73$0;
      $3=$74;
      var $75=$73$1;
      $4=$75;
      var $76=$5;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $79=$3;
      var $80=$4;
      var $81$0=$79;
      var $81$1=0;
      var $82$0=$81$0;
      var $82$1=$80;
      ___resumeException($82$0)
    case 14: 
      var $84$0 = ___cxa_find_matching_catch(-1, -1,0); $84$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      var $6=(__stackBase__)+(72);
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $fixedRotation;
      var $jointAngle;
      var $P=(__stackBase__)+(80);
      var $7=(__stackBase__)+(88);
      var $8=(__stackBase__)+(96);
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=$9;
      var $11=(($10+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($9+128)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=$9;
      var $17=(($16+52)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($9+132)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=(($9+152)|0);
      var $23=$9;
      var $24=(($23+48)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+28)|0);
      var $27=(($26)|0);
      var $28=$22;
      var $29=$27;
      assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
      var $30=(($9+160)|0);
      var $31=$9;
      var $32=(($31+52)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+28)|0);
      var $35=(($34)|0);
      var $36=$30;
      var $37=$35;
      assert(8 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
      var $38=$9;
      var $39=(($38+48)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+120)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($9+168)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$9;
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($9+172)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$9;
      var $51=(($50+48)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+128)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($9+176)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$9;
      var $57=(($56+52)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($9+180)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=(($9+128)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($63)*(12))&-1))|0);
      var $68=(($67)|0);
      var $69=$cA;
      var $70=$68;
      assert(8 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];
      var $71=(($9+128)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+((($72)*(12))&-1))|0);
      var $77=(($76+8)|0);
      var $78=HEAPF32[(($77)>>2)];
      $aA=$78;
      var $79=(($9+128)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+28)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+((($80)*(12))&-1))|0);
      var $85=(($84)|0);
      var $86=$vA;
      var $87=$85;
      assert(8 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];
      var $88=(($9+128)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$2;
      var $91=(($90+28)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+((($89)*(12))&-1))|0);
      var $94=(($93+8)|0);
      var $95=HEAPF32[(($94)>>2)];
      $wA=$95;
      var $96=(($9+132)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$2;
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+((($97)*(12))&-1))|0);
      var $102=(($101)|0);
      var $103=$cB;
      var $104=$102;
      assert(8 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
      var $105=(($9+132)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+((($106)*(12))&-1))|0);
      var $111=(($110+8)|0);
      var $112=HEAPF32[(($111)>>2)];
      $aB=$112;
      var $113=(($9+132)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+((($114)*(12))&-1))|0);
      var $119=(($118)|0);
      var $120=$vB;
      var $121=$119;
      assert(8 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($121)+(4))>>2)];
      var $122=(($9+132)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$2;
      var $125=(($124+28)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+((($123)*(12))&-1))|0);
      var $128=(($127+8)|0);
      var $129=HEAPF32[(($128)>>2)];
      $wB=$129;
      var $130=$aA;
      __ZN5b2RotC1Ef($qA, $130);
      var $131=$aB;
      __ZN5b2RotC1Ef($qB, $131);
      var $132=(($9+136)|0);
      var $133=(($9+68)|0);
      var $134=(($9+152)|0);
      __ZmiRK6b2Vec2S1_($4, $133, $134);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $135=$132;
      var $136=$3;
      assert(8 % 1 === 0);HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($135)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];
      var $137=(($9+144)|0);
      var $138=(($9+76)|0);
      var $139=(($9+160)|0);
      __ZmiRK6b2Vec2S1_($6, $138, $139);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $140=$137;
      var $141=$5;
      assert(8 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];
      var $142=(($9+168)|0);
      var $143=HEAPF32[(($142)>>2)];
      $mA=$143;
      var $144=(($9+172)|0);
      var $145=HEAPF32[(($144)>>2)];
      $mB=$145;
      var $146=(($9+176)|0);
      var $147=HEAPF32[(($146)>>2)];
      $iA=$147;
      var $148=(($9+180)|0);
      var $149=HEAPF32[(($148)>>2)];
      $iB=$149;
      var $150=$iA;
      var $151=$iB;
      var $152=($150)+($151);
      var $153=$152 == 0;
      var $154=(($153)&(1));
      $fixedRotation=$154;
      var $155=$mA;
      var $156=$mB;
      var $157=($155)+($156);
      var $158=(($9+136)|0);
      var $159=(($158+4)|0);
      var $160=HEAPF32[(($159)>>2)];
      var $161=(($9+136)|0);
      var $162=(($161+4)|0);
      var $163=HEAPF32[(($162)>>2)];
      var $164=($160)*($163);
      var $165=$iA;
      var $166=($164)*($165);
      var $167=($157)+($166);
      var $168=(($9+144)|0);
      var $169=(($168+4)|0);
      var $170=HEAPF32[(($169)>>2)];
      var $171=(($9+144)|0);
      var $172=(($171+4)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=($170)*($173);
      var $175=$iB;
      var $176=($174)*($175);
      var $177=($167)+($176);
      var $178=(($9+184)|0);
      var $179=(($178)|0);
      var $180=(($179)|0);
      HEAPF32[(($180)>>2)]=$177;
      var $181=(($9+136)|0);
      var $182=(($181+4)|0);
      var $183=HEAPF32[(($182)>>2)];
      var $184=(-$183);
      var $185=(($9+136)|0);
      var $186=(($185)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=($184)*($187);
      var $189=$iA;
      var $190=($188)*($189);
      var $191=(($9+144)|0);
      var $192=(($191+4)|0);
      var $193=HEAPF32[(($192)>>2)];
      var $194=(($9+144)|0);
      var $195=(($194)|0);
      var $196=HEAPF32[(($195)>>2)];
      var $197=($193)*($196);
      var $198=$iB;
      var $199=($197)*($198);
      var $200=($190)-($199);
      var $201=(($9+184)|0);
      var $202=(($201+12)|0);
      var $203=(($202)|0);
      HEAPF32[(($203)>>2)]=$200;
      var $204=(($9+136)|0);
      var $205=(($204+4)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=(-$206);
      var $208=$iA;
      var $209=($207)*($208);
      var $210=(($9+144)|0);
      var $211=(($210+4)|0);
      var $212=HEAPF32[(($211)>>2)];
      var $213=$iB;
      var $214=($212)*($213);
      var $215=($209)-($214);
      var $216=(($9+184)|0);
      var $217=(($216+24)|0);
      var $218=(($217)|0);
      HEAPF32[(($218)>>2)]=$215;
      var $219=(($9+184)|0);
      var $220=(($219+12)|0);
      var $221=(($220)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=(($9+184)|0);
      var $224=(($223)|0);
      var $225=(($224+4)|0);
      HEAPF32[(($225)>>2)]=$222;
      var $226=$mA;
      var $227=$mB;
      var $228=($226)+($227);
      var $229=(($9+136)|0);
      var $230=(($229)|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=(($9+136)|0);
      var $233=(($232)|0);
      var $234=HEAPF32[(($233)>>2)];
      var $235=($231)*($234);
      var $236=$iA;
      var $237=($235)*($236);
      var $238=($228)+($237);
      var $239=(($9+144)|0);
      var $240=(($239)|0);
      var $241=HEAPF32[(($240)>>2)];
      var $242=(($9+144)|0);
      var $243=(($242)|0);
      var $244=HEAPF32[(($243)>>2)];
      var $245=($241)*($244);
      var $246=$iB;
      var $247=($245)*($246);
      var $248=($238)+($247);
      var $249=(($9+184)|0);
      var $250=(($249+12)|0);
      var $251=(($250+4)|0);
      HEAPF32[(($251)>>2)]=$248;
      var $252=(($9+136)|0);
      var $253=(($252)|0);
      var $254=HEAPF32[(($253)>>2)];
      var $255=$iA;
      var $256=($254)*($255);
      var $257=(($9+144)|0);
      var $258=(($257)|0);
      var $259=HEAPF32[(($258)>>2)];
      var $260=$iB;
      var $261=($259)*($260);
      var $262=($256)+($261);
      var $263=(($9+184)|0);
      var $264=(($263+24)|0);
      var $265=(($264+4)|0);
      HEAPF32[(($265)>>2)]=$262;
      var $266=(($9+184)|0);
      var $267=(($266+24)|0);
      var $268=(($267)|0);
      var $269=HEAPF32[(($268)>>2)];
      var $270=(($9+184)|0);
      var $271=(($270)|0);
      var $272=(($271+8)|0);
      HEAPF32[(($272)>>2)]=$269;
      var $273=(($9+184)|0);
      var $274=(($273+24)|0);
      var $275=(($274+4)|0);
      var $276=HEAPF32[(($275)>>2)];
      var $277=(($9+184)|0);
      var $278=(($277+12)|0);
      var $279=(($278+8)|0);
      HEAPF32[(($279)>>2)]=$276;
      var $280=$iA;
      var $281=$iB;
      var $282=($280)+($281);
      var $283=(($9+184)|0);
      var $284=(($283+24)|0);
      var $285=(($284+8)|0);
      HEAPF32[(($285)>>2)]=$282;
      var $286=$iA;
      var $287=$iB;
      var $288=($286)+($287);
      var $289=(($9+220)|0);
      HEAPF32[(($289)>>2)]=$288;
      var $290=(($9+220)|0);
      var $291=HEAPF32[(($290)>>2)];
      var $292=$291 > 0;
      if ($292) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $294=(($9+220)|0);
      var $295=HEAPF32[(($294)>>2)];
      var $296=(1)/($295);
      var $297=(($9+220)|0);
      HEAPF32[(($297)>>2)]=$296;
      label = 3; break;
    case 3: 
      var $299=(($9+100)|0);
      var $300=HEAP8[($299)];
      var $301=(($300) & 1);
      var $302=(($301)&(1));
      var $303=(($302)|(0))==0;
      if ($303) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $305=$fixedRotation;
      var $306=(($305) & 1);
      if ($306) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $308=(($9+96)|0);
      HEAPF32[(($308)>>2)]=0;
      label = 6; break;
    case 6: 
      var $310=(($9+112)|0);
      var $311=HEAP8[($310)];
      var $312=(($311) & 1);
      if ($312) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $314=$fixedRotation;
      var $315=(($314) & 1);
      var $316=(($315)&(1));
      var $317=(($316)|(0))==0;
      if ($317) { label = 8; break; } else { label = 22; break; }
    case 8: 
      var $319=$aB;
      var $320=$aA;
      var $321=($319)-($320);
      var $322=(($9+116)|0);
      var $323=HEAPF32[(($322)>>2)];
      var $324=($321)-($323);
      $jointAngle=$324;
      var $325=(($9+124)|0);
      var $326=HEAPF32[(($325)>>2)];
      var $327=(($9+120)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=($326)-($328);
      var $330=__Z5b2AbsIfET_S0_($329);
      var $331=$330 < 0.06981317698955536;
      if ($331) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $333=(($9+224)|0);
      HEAP32[(($333)>>2)]=3;
      label = 21; break;
    case 10: 
      var $335=$jointAngle;
      var $336=(($9+120)|0);
      var $337=HEAPF32[(($336)>>2)];
      var $338=$335 <= $337;
      if ($338) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $340=(($9+224)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341)|(0))!=1;
      if ($342) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $344=(($9+84)|0);
      var $345=(($344+8)|0);
      HEAPF32[(($345)>>2)]=0;
      label = 13; break;
    case 13: 
      var $347=(($9+224)|0);
      HEAP32[(($347)>>2)]=1;
      label = 20; break;
    case 14: 
      var $349=$jointAngle;
      var $350=(($9+124)|0);
      var $351=HEAPF32[(($350)>>2)];
      var $352=$349 >= $351;
      if ($352) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $354=(($9+224)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=(($355)|(0))!=2;
      if ($356) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $358=(($9+84)|0);
      var $359=(($358+8)|0);
      HEAPF32[(($359)>>2)]=0;
      label = 17; break;
    case 17: 
      var $361=(($9+224)|0);
      HEAP32[(($361)>>2)]=2;
      label = 19; break;
    case 18: 
      var $363=(($9+224)|0);
      HEAP32[(($363)>>2)]=0;
      var $364=(($9+84)|0);
      var $365=(($364+8)|0);
      HEAPF32[(($365)>>2)]=0;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 23; break;
    case 22: 
      var $370=(($9+224)|0);
      HEAP32[(($370)>>2)]=0;
      label = 23; break;
    case 23: 
      var $372=$2;
      var $373=(($372)|0);
      var $374=(($373+20)|0);
      var $375=HEAP8[($374)];
      var $376=(($375) & 1);
      if ($376) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $378=(($9+84)|0);
      var $379=$2;
      var $380=(($379)|0);
      var $381=(($380+8)|0);
      var $382=HEAPF32[(($381)>>2)];
      __ZN6b2Vec3mLEf($378, $382);
      var $383=$2;
      var $384=(($383)|0);
      var $385=(($384+8)|0);
      var $386=HEAPF32[(($385)>>2)];
      var $387=(($9+96)|0);
      var $388=HEAPF32[(($387)>>2)];
      var $389=($388)*($386);
      HEAPF32[(($387)>>2)]=$389;
      var $390=(($9+84)|0);
      var $391=(($390)|0);
      var $392=HEAPF32[(($391)>>2)];
      var $393=(($9+84)|0);
      var $394=(($393+4)|0);
      var $395=HEAPF32[(($394)>>2)];
      __ZN6b2Vec2C1Eff($P, $392, $395);
      var $396=$mA;
      __ZmlfRK6b2Vec2($7, $396, $P);
      __ZN6b2Vec2mIERKS_($vA, $7);
      var $397=$iA;
      var $398=(($9+136)|0);
      var $399=__Z7b2CrossRK6b2Vec2S1_($398, $P);
      var $400=(($9+96)|0);
      var $401=HEAPF32[(($400)>>2)];
      var $402=($399)+($401);
      var $403=(($9+84)|0);
      var $404=(($403+8)|0);
      var $405=HEAPF32[(($404)>>2)];
      var $406=($402)+($405);
      var $407=($397)*($406);
      var $408=$wA;
      var $409=($408)-($407);
      $wA=$409;
      var $410=$mB;
      __ZmlfRK6b2Vec2($8, $410, $P);
      __ZN6b2Vec2pLERKS_($vB, $8);
      var $411=$iB;
      var $412=(($9+144)|0);
      var $413=__Z7b2CrossRK6b2Vec2S1_($412, $P);
      var $414=(($9+96)|0);
      var $415=HEAPF32[(($414)>>2)];
      var $416=($413)+($415);
      var $417=(($9+84)|0);
      var $418=(($417+8)|0);
      var $419=HEAPF32[(($418)>>2)];
      var $420=($416)+($419);
      var $421=($411)*($420);
      var $422=$wB;
      var $423=($422)+($421);
      $wB=$423;
      label = 26; break;
    case 25: 
      var $425=(($9+84)|0);
      __ZN6b2Vec37SetZeroEv($425);
      var $426=(($9+96)|0);
      HEAPF32[(($426)>>2)]=0;
      label = 26; break;
    case 26: 
      var $428=(($9+128)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=$2;
      var $431=(($430+28)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($432+((($429)*(12))&-1))|0);
      var $434=(($433)|0);
      var $435=$434;
      var $436=$vA;
      assert(8 % 1 === 0);HEAP32[(($435)>>2)]=HEAP32[(($436)>>2)];HEAP32[((($435)+(4))>>2)]=HEAP32[((($436)+(4))>>2)];
      var $437=$wA;
      var $438=(($9+128)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=$2;
      var $441=(($440+28)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=(($442+((($439)*(12))&-1))|0);
      var $444=(($443+8)|0);
      HEAPF32[(($444)>>2)]=$437;
      var $445=(($9+132)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=$2;
      var $448=(($447+28)|0);
      var $449=HEAP32[(($448)>>2)];
      var $450=(($449+((($446)*(12))&-1))|0);
      var $451=(($450)|0);
      var $452=$451;
      var $453=$vB;
      assert(8 % 1 === 0);HEAP32[(($452)>>2)]=HEAP32[(($453)>>2)];HEAP32[((($452)+(4))>>2)]=HEAP32[((($453)+(4))>>2)];
      var $454=$wB;
      var $455=(($9+132)|0);
      var $456=HEAP32[(($455)>>2)];
      var $457=$2;
      var $458=(($457+28)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=(($459+((($456)*(12))&-1))|0);
      var $461=(($460+8)|0);
      HEAPF32[(($461)>>2)]=$454;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK15b2RevoluteJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+84)|0);
  var $6=(($5+8)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=($4)*($7);
  return $8;
}
function __ZNK15b2RevoluteJoint13GetJointAngleEv($this) {
  var label = 0;
  var $1;
  var $bA;
  var $bB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  $bA=$5;
  var $6=$2;
  var $7=(($6+52)|0);
  var $8=HEAP32[(($7)>>2)];
  $bB=$8;
  var $9=$bB;
  var $10=(($9+28)|0);
  var $11=(($10+28)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$bA;
  var $14=(($13+28)|0);
  var $15=(($14+28)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=($12)-($16);
  var $18=(($2+116)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=($17)-($19);
  return $20;
}
function __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 268)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $fixedRotation;
      var $Cdot;
      var $impulse;
      var $oldImpulse;
      var $maxImpulse;
      var $Cdot1=(__stackBase__)+(16);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(32);
      var $5=(__stackBase__)+(40);
      var $6=(__stackBase__)+(48);
      var $Cdot2;
      var $Cdot3=(__stackBase__)+(56);
      var $impulse4=(__stackBase__)+(68);
      var $7=(__stackBase__)+(80);
      var $newImpulse;
      var $rhs=(__stackBase__)+(92);
      var $8=(__stackBase__)+(100);
      var $9=(__stackBase__)+(108);
      var $10=(__stackBase__)+(116);
      var $reduced=(__stackBase__)+(124);
      var $newImpulse5;
      var $rhs6=(__stackBase__)+(132);
      var $11=(__stackBase__)+(140);
      var $12=(__stackBase__)+(148);
      var $13=(__stackBase__)+(156);
      var $reduced7=(__stackBase__)+(164);
      var $P=(__stackBase__)+(172);
      var $14=(__stackBase__)+(180);
      var $15=(__stackBase__)+(188);
      var $Cdot8=(__stackBase__)+(196);
      var $16=(__stackBase__)+(204);
      var $17=(__stackBase__)+(212);
      var $18=(__stackBase__)+(220);
      var $19=(__stackBase__)+(228);
      var $impulse9=(__stackBase__)+(236);
      var $20=(__stackBase__)+(244);
      var $21=(__stackBase__)+(252);
      var $22=(__stackBase__)+(260);
      $1=$this;
      $2=$data;
      var $23=$1;
      var $24=(($23+128)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=(($26+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+((($25)*(12))&-1))|0);
      var $30=(($29)|0);
      var $31=$vA;
      var $32=$30;
      assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];
      var $33=(($23+128)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+28)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+((($34)*(12))&-1))|0);
      var $39=(($38+8)|0);
      var $40=HEAPF32[(($39)>>2)];
      $wA=$40;
      var $41=(($23+132)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=(($43+28)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+((($42)*(12))&-1))|0);
      var $47=(($46)|0);
      var $48=$vB;
      var $49=$47;
      assert(8 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
      var $50=(($23+132)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+((($51)*(12))&-1))|0);
      var $56=(($55+8)|0);
      var $57=HEAPF32[(($56)>>2)];
      $wB=$57;
      var $58=(($23+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $mA=$59;
      var $60=(($23+172)|0);
      var $61=HEAPF32[(($60)>>2)];
      $mB=$61;
      var $62=(($23+176)|0);
      var $63=HEAPF32[(($62)>>2)];
      $iA=$63;
      var $64=(($23+180)|0);
      var $65=HEAPF32[(($64)>>2)];
      $iB=$65;
      var $66=$iA;
      var $67=$iB;
      var $68=($66)+($67);
      var $69=$68 == 0;
      var $70=(($69)&(1));
      $fixedRotation=$70;
      var $71=(($23+100)|0);
      var $72=HEAP8[($71)];
      var $73=(($72) & 1);
      if ($73) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $75=(($23+224)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|(0))!=3;
      if ($77) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $79=$fixedRotation;
      var $80=(($79) & 1);
      var $81=(($80)&(1));
      var $82=(($81)|(0))==0;
      if ($82) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $84=$wB;
      var $85=$wA;
      var $86=($84)-($85);
      var $87=(($23+108)|0);
      var $88=HEAPF32[(($87)>>2)];
      var $89=($86)-($88);
      $Cdot=$89;
      var $90=(($23+220)|0);
      var $91=HEAPF32[(($90)>>2)];
      var $92=(-$91);
      var $93=$Cdot;
      var $94=($92)*($93);
      $impulse=$94;
      var $95=(($23+96)|0);
      var $96=HEAPF32[(($95)>>2)];
      $oldImpulse=$96;
      var $97=$2;
      var $98=(($97)|0);
      var $99=(($98)|0);
      var $100=HEAPF32[(($99)>>2)];
      var $101=(($23+104)|0);
      var $102=HEAPF32[(($101)>>2)];
      var $103=($100)*($102);
      $maxImpulse=$103;
      var $104=(($23+96)|0);
      var $105=HEAPF32[(($104)>>2)];
      var $106=$impulse;
      var $107=($105)+($106);
      var $108=$maxImpulse;
      var $109=(-$108);
      var $110=$maxImpulse;
      var $111=__Z7b2ClampIfET_S0_S0_S0_($107, $109, $110);
      var $112=(($23+96)|0);
      HEAPF32[(($112)>>2)]=$111;
      var $113=(($23+96)|0);
      var $114=HEAPF32[(($113)>>2)];
      var $115=$oldImpulse;
      var $116=($114)-($115);
      $impulse=$116;
      var $117=$iA;
      var $118=$impulse;
      var $119=($117)*($118);
      var $120=$wA;
      var $121=($120)-($119);
      $wA=$121;
      var $122=$iB;
      var $123=$impulse;
      var $124=($122)*($123);
      var $125=$wB;
      var $126=($125)+($124);
      $wB=$126;
      label = 5; break;
    case 5: 
      var $128=(($23+112)|0);
      var $129=HEAP8[($128)];
      var $130=(($129) & 1);
      if ($130) { label = 6; break; } else { label = 23; break; }
    case 6: 
      var $132=(($23+224)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|(0))!=0;
      if ($134) { label = 7; break; } else { label = 23; break; }
    case 7: 
      var $136=$fixedRotation;
      var $137=(($136) & 1);
      var $138=(($137)&(1));
      var $139=(($138)|(0))==0;
      if ($139) { label = 8; break; } else { label = 23; break; }
    case 8: 
      var $141=$wB;
      var $142=(($23+144)|0);
      __Z7b2CrossfRK6b2Vec2($5, $141, $142);
      __ZplRK6b2Vec2S1_($4, $vB, $5);
      __ZmiRK6b2Vec2S1_($3, $4, $vA);
      var $143=$wA;
      var $144=(($23+136)|0);
      __Z7b2CrossfRK6b2Vec2($6, $143, $144);
      __ZmiRK6b2Vec2S1_($Cdot1, $3, $6);
      var $145=$wB;
      var $146=$wA;
      var $147=($145)-($146);
      $Cdot2=$147;
      var $148=(($Cdot1)|0);
      var $149=HEAPF32[(($148)>>2)];
      var $150=(($Cdot1+4)|0);
      var $151=HEAPF32[(($150)>>2)];
      var $152=$Cdot2;
      __ZN6b2Vec3C1Efff($Cdot3, $149, $151, $152);
      var $153=(($23+184)|0);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($7, $153, $Cdot3);
      __ZNK6b2Vec3ngEv($impulse4, $7);
      var $154=(($23+224)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|(0))==3;
      if ($156) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $158=(($23+84)|0);
      __ZN6b2Vec3pLERKS_($158, $impulse4);
      label = 22; break;
    case 10: 
      var $160=(($23+224)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=(($161)|(0))==1;
      if ($162) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $164=(($23+84)|0);
      var $165=(($164+8)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=(($impulse4+8)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=($166)+($168);
      $newImpulse=$169;
      var $170=$newImpulse;
      var $171=$170 < 0;
      if ($171) { label = 12; break; } else { label = 13; break; }
    case 12: 
      __ZNK6b2Vec2ngEv($8, $Cdot1);
      var $173=(($23+84)|0);
      var $174=(($173+8)|0);
      var $175=HEAPF32[(($174)>>2)];
      var $176=(($23+184)|0);
      var $177=(($176+24)|0);
      var $178=(($177)|0);
      var $179=HEAPF32[(($178)>>2)];
      var $180=(($23+184)|0);
      var $181=(($180+24)|0);
      var $182=(($181+4)|0);
      var $183=HEAPF32[(($182)>>2)];
      __ZN6b2Vec2C1Eff($10, $179, $183);
      __ZmlfRK6b2Vec2($9, $175, $10);
      __ZplRK6b2Vec2S1_($rhs, $8, $9);
      var $184=(($23+184)|0);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced, $184, $rhs);
      var $185=(($reduced)|0);
      var $186=HEAPF32[(($185)>>2)];
      var $187=(($impulse4)|0);
      HEAPF32[(($187)>>2)]=$186;
      var $188=(($reduced+4)|0);
      var $189=HEAPF32[(($188)>>2)];
      var $190=(($impulse4+4)|0);
      HEAPF32[(($190)>>2)]=$189;
      var $191=(($23+84)|0);
      var $192=(($191+8)|0);
      var $193=HEAPF32[(($192)>>2)];
      var $194=(-$193);
      var $195=(($impulse4+8)|0);
      HEAPF32[(($195)>>2)]=$194;
      var $196=(($reduced)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=(($23+84)|0);
      var $199=(($198)|0);
      var $200=HEAPF32[(($199)>>2)];
      var $201=($200)+($197);
      HEAPF32[(($199)>>2)]=$201;
      var $202=(($reduced+4)|0);
      var $203=HEAPF32[(($202)>>2)];
      var $204=(($23+84)|0);
      var $205=(($204+4)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=($206)+($203);
      HEAPF32[(($205)>>2)]=$207;
      var $208=(($23+84)|0);
      var $209=(($208+8)|0);
      HEAPF32[(($209)>>2)]=0;
      label = 14; break;
    case 13: 
      var $211=(($23+84)|0);
      __ZN6b2Vec3pLERKS_($211, $impulse4);
      label = 14; break;
    case 14: 
      label = 21; break;
    case 15: 
      var $214=(($23+224)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($215)|(0))==2;
      if ($216) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $218=(($23+84)|0);
      var $219=(($218+8)|0);
      var $220=HEAPF32[(($219)>>2)];
      var $221=(($impulse4+8)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=($220)+($222);
      $newImpulse5=$223;
      var $224=$newImpulse5;
      var $225=$224 > 0;
      if ($225) { label = 17; break; } else { label = 18; break; }
    case 17: 
      __ZNK6b2Vec2ngEv($11, $Cdot1);
      var $227=(($23+84)|0);
      var $228=(($227+8)|0);
      var $229=HEAPF32[(($228)>>2)];
      var $230=(($23+184)|0);
      var $231=(($230+24)|0);
      var $232=(($231)|0);
      var $233=HEAPF32[(($232)>>2)];
      var $234=(($23+184)|0);
      var $235=(($234+24)|0);
      var $236=(($235+4)|0);
      var $237=HEAPF32[(($236)>>2)];
      __ZN6b2Vec2C1Eff($13, $233, $237);
      __ZmlfRK6b2Vec2($12, $229, $13);
      __ZplRK6b2Vec2S1_($rhs6, $11, $12);
      var $238=(($23+184)|0);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced7, $238, $rhs6);
      var $239=(($reduced7)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=(($impulse4)|0);
      HEAPF32[(($241)>>2)]=$240;
      var $242=(($reduced7+4)|0);
      var $243=HEAPF32[(($242)>>2)];
      var $244=(($impulse4+4)|0);
      HEAPF32[(($244)>>2)]=$243;
      var $245=(($23+84)|0);
      var $246=(($245+8)|0);
      var $247=HEAPF32[(($246)>>2)];
      var $248=(-$247);
      var $249=(($impulse4+8)|0);
      HEAPF32[(($249)>>2)]=$248;
      var $250=(($reduced7)|0);
      var $251=HEAPF32[(($250)>>2)];
      var $252=(($23+84)|0);
      var $253=(($252)|0);
      var $254=HEAPF32[(($253)>>2)];
      var $255=($254)+($251);
      HEAPF32[(($253)>>2)]=$255;
      var $256=(($reduced7+4)|0);
      var $257=HEAPF32[(($256)>>2)];
      var $258=(($23+84)|0);
      var $259=(($258+4)|0);
      var $260=HEAPF32[(($259)>>2)];
      var $261=($260)+($257);
      HEAPF32[(($259)>>2)]=$261;
      var $262=(($23+84)|0);
      var $263=(($262+8)|0);
      HEAPF32[(($263)>>2)]=0;
      label = 19; break;
    case 18: 
      var $265=(($23+84)|0);
      __ZN6b2Vec3pLERKS_($265, $impulse4);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $270=(($impulse4)|0);
      var $271=HEAPF32[(($270)>>2)];
      var $272=(($impulse4+4)|0);
      var $273=HEAPF32[(($272)>>2)];
      __ZN6b2Vec2C1Eff($P, $271, $273);
      var $274=$mA;
      __ZmlfRK6b2Vec2($14, $274, $P);
      __ZN6b2Vec2mIERKS_($vA, $14);
      var $275=$iA;
      var $276=(($23+136)|0);
      var $277=__Z7b2CrossRK6b2Vec2S1_($276, $P);
      var $278=(($impulse4+8)|0);
      var $279=HEAPF32[(($278)>>2)];
      var $280=($277)+($279);
      var $281=($275)*($280);
      var $282=$wA;
      var $283=($282)-($281);
      $wA=$283;
      var $284=$mB;
      __ZmlfRK6b2Vec2($15, $284, $P);
      __ZN6b2Vec2pLERKS_($vB, $15);
      var $285=$iB;
      var $286=(($23+144)|0);
      var $287=__Z7b2CrossRK6b2Vec2S1_($286, $P);
      var $288=(($impulse4+8)|0);
      var $289=HEAPF32[(($288)>>2)];
      var $290=($287)+($289);
      var $291=($285)*($290);
      var $292=$wB;
      var $293=($292)+($291);
      $wB=$293;
      label = 24; break;
    case 23: 
      var $295=$wB;
      var $296=(($23+144)|0);
      __Z7b2CrossfRK6b2Vec2($18, $295, $296);
      __ZplRK6b2Vec2S1_($17, $vB, $18);
      __ZmiRK6b2Vec2S1_($16, $17, $vA);
      var $297=$wA;
      var $298=(($23+136)|0);
      __Z7b2CrossfRK6b2Vec2($19, $297, $298);
      __ZmiRK6b2Vec2S1_($Cdot8, $16, $19);
      var $299=(($23+184)|0);
      __ZNK6b2Vec2ngEv($20, $Cdot8);
      __ZNK7b2Mat337Solve22ERK6b2Vec2($impulse9, $299, $20);
      var $300=(($impulse9)|0);
      var $301=HEAPF32[(($300)>>2)];
      var $302=(($23+84)|0);
      var $303=(($302)|0);
      var $304=HEAPF32[(($303)>>2)];
      var $305=($304)+($301);
      HEAPF32[(($303)>>2)]=$305;
      var $306=(($impulse9+4)|0);
      var $307=HEAPF32[(($306)>>2)];
      var $308=(($23+84)|0);
      var $309=(($308+4)|0);
      var $310=HEAPF32[(($309)>>2)];
      var $311=($310)+($307);
      HEAPF32[(($309)>>2)]=$311;
      var $312=$mA;
      __ZmlfRK6b2Vec2($21, $312, $impulse9);
      __ZN6b2Vec2mIERKS_($vA, $21);
      var $313=$iA;
      var $314=(($23+136)|0);
      var $315=__Z7b2CrossRK6b2Vec2S1_($314, $impulse9);
      var $316=($313)*($315);
      var $317=$wA;
      var $318=($317)-($316);
      $wA=$318;
      var $319=$mB;
      __ZmlfRK6b2Vec2($22, $319, $impulse9);
      __ZN6b2Vec2pLERKS_($vB, $22);
      var $320=$iB;
      var $321=(($23+144)|0);
      var $322=__Z7b2CrossRK6b2Vec2S1_($321, $impulse9);
      var $323=($320)*($322);
      var $324=$wB;
      var $325=($324)+($323);
      $wB=$325;
      label = 24; break;
    case 24: 
      var $327=(($23+128)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=$2;
      var $330=(($329+28)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=(($331+((($328)*(12))&-1))|0);
      var $333=(($332)|0);
      var $334=$333;
      var $335=$vA;
      assert(8 % 1 === 0);HEAP32[(($334)>>2)]=HEAP32[(($335)>>2)];HEAP32[((($334)+(4))>>2)]=HEAP32[((($335)+(4))>>2)];
      var $336=$wA;
      var $337=(($23+128)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=$2;
      var $340=(($339+28)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341+((($338)*(12))&-1))|0);
      var $343=(($342+8)|0);
      HEAPF32[(($343)>>2)]=$336;
      var $344=(($23+132)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=$2;
      var $347=(($346+28)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=(($348+((($345)*(12))&-1))|0);
      var $350=(($349)|0);
      var $351=$350;
      var $352=$vB;
      assert(8 % 1 === 0);HEAP32[(($351)>>2)]=HEAP32[(($352)>>2)];HEAP32[((($351)+(4))>>2)]=HEAP32[((($352)+(4))>>2)];
      var $353=$wB;
      var $354=(($23+132)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=$2;
      var $357=(($356+28)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=(($358+((($355)*(12))&-1))|0);
      var $360=(($359+8)|0);
      HEAPF32[(($360)>>2)]=$353;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 136)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=(__stackBase__)+(8);
      var $aB;
      var $qA=(__stackBase__)+(16);
      var $qB=(__stackBase__)+(24);
      var $angularError;
      var $positionError;
      var $fixedRotation;
      var $angle;
      var $limitImpulse;
      var $C;
      var $C1;
      var $C2;
      var $rA=(__stackBase__)+(32);
      var $3=(__stackBase__)+(40);
      var $rB=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $C3=(__stackBase__)+(64);
      var $5=(__stackBase__)+(72);
      var $6=(__stackBase__)+(80);
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $K=(__stackBase__)+(88);
      var $impulse=(__stackBase__)+(104);
      var $7=(__stackBase__)+(112);
      var $8=(__stackBase__)+(120);
      var $9=(__stackBase__)+(128);
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=(($10+128)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+((($12)*(12))&-1))|0);
      var $17=(($16)|0);
      var $18=$cA;
      var $19=$17;
      assert(8 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
      var $20=(($10+128)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+24)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+((($21)*(12))&-1))|0);
      var $26=(($25+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      $aA=$27;
      var $28=(($10+132)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+((($29)*(12))&-1))|0);
      var $34=(($33)|0);
      var $35=$cB;
      var $36=$34;
      assert(8 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
      var $37=(($10+132)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+((($38)*(12))&-1))|0);
      var $43=(($42+8)|0);
      var $44=HEAPF32[(($43)>>2)];
      $aB=$44;
      var $45=$aA;
      __ZN5b2RotC1Ef($qA, $45);
      var $46=$aB;
      __ZN5b2RotC1Ef($qB, $46);
      $angularError=0;
      $positionError=0;
      var $47=(($10+176)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($10+180)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=($48)+($50);
      var $52=$51 == 0;
      var $53=(($52)&(1));
      $fixedRotation=$53;
      var $54=(($10+112)|0);
      var $55=HEAP8[($54)];
      var $56=(($55) & 1);
      if ($56) { label = 2; break; } else { label = 13; break; }
    case 2: 
      var $58=(($10+224)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|(0))!=0;
      if ($60) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $62=$fixedRotation;
      var $63=(($62) & 1);
      var $64=(($63)&(1));
      var $65=(($64)|(0))==0;
      if ($65) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $67=$aB;
      var $68=$aA;
      var $69=($67)-($68);
      var $70=(($10+116)|0);
      var $71=HEAPF32[(($70)>>2)];
      var $72=($69)-($71);
      $angle=$72;
      $limitImpulse=0;
      var $73=(($10+224)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0))==3;
      if ($75) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $77=$angle;
      var $78=(($10+120)|0);
      var $79=HEAPF32[(($78)>>2)];
      var $80=($77)-($79);
      var $81=__Z7b2ClampIfET_S0_S0_S0_($80, -0.13962635397911072, 0.13962635397911072);
      $C=$81;
      var $82=(($10+220)|0);
      var $83=HEAPF32[(($82)>>2)];
      var $84=(-$83);
      var $85=$C;
      var $86=($84)*($85);
      $limitImpulse=$86;
      var $87=$C;
      var $88=__Z5b2AbsIfET_S0_($87);
      $angularError=$88;
      label = 12; break;
    case 6: 
      var $90=(($10+224)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)|(0))==1;
      if ($92) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $94=$angle;
      var $95=(($10+120)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=($94)-($96);
      $C1=$97;
      var $98=$C1;
      var $99=(-$98);
      $angularError=$99;
      var $100=$C1;
      var $101=($100)+(0.03490658849477768);
      var $102=__Z7b2ClampIfET_S0_S0_S0_($101, -0.13962635397911072, 0);
      $C1=$102;
      var $103=(($10+220)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=(-$104);
      var $106=$C1;
      var $107=($105)*($106);
      $limitImpulse=$107;
      label = 11; break;
    case 8: 
      var $109=(($10+224)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|(0))==2;
      if ($111) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $113=$angle;
      var $114=(($10+124)|0);
      var $115=HEAPF32[(($114)>>2)];
      var $116=($113)-($115);
      $C2=$116;
      var $117=$C2;
      $angularError=$117;
      var $118=$C2;
      var $119=($118)-(0.03490658849477768);
      var $120=__Z7b2ClampIfET_S0_S0_S0_($119, 0, 0.13962635397911072);
      $C2=$120;
      var $121=(($10+220)|0);
      var $122=HEAPF32[(($121)>>2)];
      var $123=(-$122);
      var $124=$C2;
      var $125=($123)*($124);
      $limitImpulse=$125;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $129=(($10+176)|0);
      var $130=HEAPF32[(($129)>>2)];
      var $131=$limitImpulse;
      var $132=($130)*($131);
      var $133=$aA;
      var $134=($133)-($132);
      $aA=$134;
      var $135=(($10+180)|0);
      var $136=HEAPF32[(($135)>>2)];
      var $137=$limitImpulse;
      var $138=($136)*($137);
      var $139=$aB;
      var $140=($139)+($138);
      $aB=$140;
      label = 13; break;
    case 13: 
      var $142=$aA;
      __ZN5b2Rot3SetEf($qA, $142);
      var $143=$aB;
      __ZN5b2Rot3SetEf($qB, $143);
      var $144=(($10+68)|0);
      var $145=(($10+152)|0);
      __ZmiRK6b2Vec2S1_($3, $144, $145);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $146=(($10+76)|0);
      var $147=(($10+160)|0);
      __ZmiRK6b2Vec2S1_($4, $146, $147);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($C3, $5, $rA);
      var $148=__ZNK6b2Vec26LengthEv($C3);
      $positionError=$148;
      var $149=(($10+168)|0);
      var $150=HEAPF32[(($149)>>2)];
      $mA=$150;
      var $151=(($10+172)|0);
      var $152=HEAPF32[(($151)>>2)];
      $mB=$152;
      var $153=(($10+176)|0);
      var $154=HEAPF32[(($153)>>2)];
      $iA=$154;
      var $155=(($10+180)|0);
      var $156=HEAPF32[(($155)>>2)];
      $iB=$156;
      __ZN7b2Mat22C1Ev($K);
      var $157=$mA;
      var $158=$mB;
      var $159=($157)+($158);
      var $160=$iA;
      var $161=(($rA+4)|0);
      var $162=HEAPF32[(($161)>>2)];
      var $163=($160)*($162);
      var $164=(($rA+4)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=($163)*($165);
      var $167=($159)+($166);
      var $168=$iB;
      var $169=(($rB+4)|0);
      var $170=HEAPF32[(($169)>>2)];
      var $171=($168)*($170);
      var $172=(($rB+4)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=($171)*($173);
      var $175=($167)+($174);
      var $176=(($K)|0);
      var $177=(($176)|0);
      HEAPF32[(($177)>>2)]=$175;
      var $178=$iA;
      var $179=(-$178);
      var $180=(($rA)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=($179)*($181);
      var $183=(($rA+4)|0);
      var $184=HEAPF32[(($183)>>2)];
      var $185=($182)*($184);
      var $186=$iB;
      var $187=(($rB)|0);
      var $188=HEAPF32[(($187)>>2)];
      var $189=($186)*($188);
      var $190=(($rB+4)|0);
      var $191=HEAPF32[(($190)>>2)];
      var $192=($189)*($191);
      var $193=($185)-($192);
      var $194=(($K)|0);
      var $195=(($194+4)|0);
      HEAPF32[(($195)>>2)]=$193;
      var $196=(($K)|0);
      var $197=(($196+4)|0);
      var $198=HEAPF32[(($197)>>2)];
      var $199=(($K+8)|0);
      var $200=(($199)|0);
      HEAPF32[(($200)>>2)]=$198;
      var $201=$mA;
      var $202=$mB;
      var $203=($201)+($202);
      var $204=$iA;
      var $205=(($rA)|0);
      var $206=HEAPF32[(($205)>>2)];
      var $207=($204)*($206);
      var $208=(($rA)|0);
      var $209=HEAPF32[(($208)>>2)];
      var $210=($207)*($209);
      var $211=($203)+($210);
      var $212=$iB;
      var $213=(($rB)|0);
      var $214=HEAPF32[(($213)>>2)];
      var $215=($212)*($214);
      var $216=(($rB)|0);
      var $217=HEAPF32[(($216)>>2)];
      var $218=($215)*($217);
      var $219=($211)+($218);
      var $220=(($K+8)|0);
      var $221=(($220+4)|0);
      HEAPF32[(($221)>>2)]=$219;
      __ZNK7b2Mat225SolveERK6b2Vec2($7, $K, $C3);
      __ZNK6b2Vec2ngEv($impulse, $7);
      var $222=$mA;
      __ZmlfRK6b2Vec2($8, $222, $impulse);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $223=$iA;
      var $224=__Z7b2CrossRK6b2Vec2S1_($rA, $impulse);
      var $225=($223)*($224);
      var $226=$aA;
      var $227=($226)-($225);
      $aA=$227;
      var $228=$mB;
      __ZmlfRK6b2Vec2($9, $228, $impulse);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $229=$iB;
      var $230=__Z7b2CrossRK6b2Vec2S1_($rB, $impulse);
      var $231=($229)*($230);
      var $232=$aB;
      var $233=($232)+($231);
      $aB=$233;
      var $234=(($10+128)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=$2;
      var $237=(($236+24)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($238+((($235)*(12))&-1))|0);
      var $240=(($239)|0);
      var $241=$240;
      var $242=$cA;
      assert(8 % 1 === 0);HEAP32[(($241)>>2)]=HEAP32[(($242)>>2)];HEAP32[((($241)+(4))>>2)]=HEAP32[((($242)+(4))>>2)];
      var $243=$aA;
      var $244=(($10+128)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$2;
      var $247=(($246+24)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=(($248+((($245)*(12))&-1))|0);
      var $250=(($249+8)|0);
      HEAPF32[(($250)>>2)]=$243;
      var $251=(($10+132)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$2;
      var $254=(($253+24)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=(($255+((($252)*(12))&-1))|0);
      var $257=(($256)|0);
      var $258=$257;
      var $259=$cB;
      assert(8 % 1 === 0);HEAP32[(($258)>>2)]=HEAP32[(($259)>>2)];HEAP32[((($258)+(4))>>2)]=HEAP32[((($259)+(4))>>2)];
      var $260=$aB;
      var $261=(($10+132)|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=$2;
      var $264=(($263+24)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265+((($262)*(12))&-1))|0);
      var $267=(($266+8)|0);
      HEAPF32[(($267)>>2)]=$260;
      var $268=$positionError;
      var $269=$268 <= 0.004999999888241291;
      if ($269) { label = 14; break; } else { var $274 = 0;label = 15; break; }
    case 14: 
      var $271=$angularError;
      var $272=$271 <= 0.03490658849477768;
      var $274 = $272;label = 15; break;
    case 15: 
      var $274;
      STACKTOP = __stackBase__;
      return $274;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK15b2RevoluteJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK15b2RevoluteJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK15b2RevoluteJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+84)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3+84)|0);
  var $8=(($7+4)|0);
  var $9=HEAPF32[(($8)>>2)];
  __ZN6b2Vec2C1Eff($P, $6, $9);
  var $10=$2;
  __ZmlfRK6b2Vec2($agg_result, $10, $P);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK15b2RevoluteJoint13GetJointSpeedEv($this) {
  var label = 0;
  var $1;
  var $bA;
  var $bB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  $bA=$5;
  var $6=$2;
  var $7=(($6+52)|0);
  var $8=HEAP32[(($7)>>2)];
  $bB=$8;
  var $9=$bB;
  var $10=(($9+72)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=$bA;
  var $13=(($12+72)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=($11)-($14);
  return $15;
}
function __ZNK15b2RevoluteJoint14IsMotorEnabledEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+100)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZNK15b2RevoluteJoint14GetMotorTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+96)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  return $7;
}
function __ZNK15b2RevoluteJoint14IsLimitEnabledEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+112)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZNK15b2RevoluteJoint13GetLowerLimitEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+120)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK15b2RevoluteJoint13GetUpperLimitEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+124)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN15b2RevoluteJoint11EnableMotorEb($this, $flag) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+48)|0);
  var $7=HEAP32[(($6)>>2)];
  __ZN6b2Body8SetAwakeEb($7, 1);
  var $8=$4;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  __ZN6b2Body8SetAwakeEb($10, 1);
  var $11=$2;
  var $12=(($11) & 1);
  var $13=(($4+100)|0);
  var $14=(($12)&(1));
  HEAP8[($13)]=$14;
  return;
}
function __ZN15b2RevoluteJoint13SetMotorSpeedEf($this, $speed) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$speed;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+108)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function __ZN15b2RevoluteJoint17SetMaxMotorTorqueEf($this, $torque) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$torque;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+104)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function __ZN15b2RevoluteJoint11EnableLimitEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      var $7=(($6)&(1));
      var $8=(($4+112)|0);
      var $9=HEAP8[($8)];
      var $10=(($9) & 1);
      var $11=(($10)&(1));
      var $12=(($7)|(0))!=(($11)|(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$4;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      __ZN6b2Body8SetAwakeEb($16, 1);
      var $17=$4;
      var $18=(($17+52)|0);
      var $19=HEAP32[(($18)>>2)];
      __ZN6b2Body8SetAwakeEb($19, 1);
      var $20=$2;
      var $21=(($20) & 1);
      var $22=(($4+112)|0);
      var $23=(($21)&(1));
      HEAP8[($22)]=$23;
      var $24=(($4+84)|0);
      var $25=(($24+8)|0);
      HEAPF32[(($25)>>2)]=0;
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2RevoluteJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5253232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5250992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5249976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5249288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5248564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5248036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+116)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((5247560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$38,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $39=(($2+112)|0);
  var $40=HEAP8[($39)];
  var $41=(($40) & 1);
  var $42=(($41)&(1));
  __Z5b2LogPKcz(((5247164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$42,tempInt));
  var $43=(($2+120)|0);
  var $44=HEAPF32[(($43)>>2)];
  var $45=$44;
  __Z5b2LogPKcz(((5257792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$45,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $46=(($2+124)|0);
  var $47=HEAPF32[(($46)>>2)];
  var $48=$47;
  __Z5b2LogPKcz(((5257384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$48,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $49=(($2+100)|0);
  var $50=HEAP8[($49)];
  var $51=(($50) & 1);
  var $52=(($51)&(1));
  __Z5b2LogPKcz(((5256788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$52,tempInt));
  var $53=(($2+108)|0);
  var $54=HEAPF32[(($53)>>2)];
  var $55=$54;
  __Z5b2LogPKcz(((5256180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$55,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $56=(($2+104)|0);
  var $57=HEAPF32[(($56)>>2)];
  var $58=$57;
  __Z5b2LogPKcz(((5255780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$58,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $59=$2;
  var $60=(($59+56)|0);
  var $61=HEAP32[(($60)>>2)];
  __Z5b2LogPKcz(((5255560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$61,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN15b2RevoluteJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2RevoluteJointD2Ev($2);
  return;
}
function __ZN15b2RevoluteJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2RevoluteJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2RevoluteJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      var $6=(__stackBase__)+(72);
      var $7=(__stackBase__)+(80);
      var $8=(__stackBase__)+(88);
      var $9=(__stackBase__)+(96);
      var $C;
      var $crA;
      var $crB;
      var $invMass;
      var $P=(__stackBase__)+(104);
      var $10=(__stackBase__)+(112);
      var $11=(__stackBase__)+(120);
      $1=$this;
      $2=$data;
      var $12=$1;
      var $13=$12;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12+96)|0);
      HEAP32[(($18)>>2)]=$17;
      var $19=$12;
      var $20=(($19+52)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($12+100)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($12+128)|0);
      var $26=$12;
      var $27=(($26+48)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+28)|0);
      var $30=(($29)|0);
      var $31=$25;
      var $32=$30;
      assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];
      var $33=(($12+136)|0);
      var $34=$12;
      var $35=(($34+52)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+28)|0);
      var $38=(($37)|0);
      var $39=$33;
      var $40=$38;
      assert(8 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
      var $41=$12;
      var $42=(($41+48)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+120)|0);
      var $45=HEAPF32[(($44)>>2)];
      var $46=(($12+144)|0);
      HEAPF32[(($46)>>2)]=$45;
      var $47=$12;
      var $48=(($47+52)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+120)|0);
      var $51=HEAPF32[(($50)>>2)];
      var $52=(($12+148)|0);
      HEAPF32[(($52)>>2)]=$51;
      var $53=$12;
      var $54=(($53+48)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+128)|0);
      var $57=HEAPF32[(($56)>>2)];
      var $58=(($12+152)|0);
      HEAPF32[(($58)>>2)]=$57;
      var $59=$12;
      var $60=(($59+52)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+128)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=(($12+156)|0);
      HEAPF32[(($64)>>2)]=$63;
      var $65=(($12+96)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+((($66)*(12))&-1))|0);
      var $71=(($70)|0);
      var $72=$cA;
      var $73=$71;
      assert(8 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];
      var $74=(($12+96)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$2;
      var $77=(($76+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+((($75)*(12))&-1))|0);
      var $80=(($79+8)|0);
      var $81=HEAPF32[(($80)>>2)];
      $aA=$81;
      var $82=(($12+96)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$2;
      var $85=(($84+28)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+((($83)*(12))&-1))|0);
      var $88=(($87)|0);
      var $89=$vA;
      var $90=$88;
      assert(8 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];
      var $91=(($12+96)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$2;
      var $94=(($93+28)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+((($92)*(12))&-1))|0);
      var $97=(($96+8)|0);
      var $98=HEAPF32[(($97)>>2)];
      $wA=$98;
      var $99=(($12+100)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$2;
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+((($100)*(12))&-1))|0);
      var $105=(($104)|0);
      var $106=$cB;
      var $107=$105;
      assert(8 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];
      var $108=(($12+100)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$2;
      var $111=(($110+24)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+((($109)*(12))&-1))|0);
      var $114=(($113+8)|0);
      var $115=HEAPF32[(($114)>>2)];
      $aB=$115;
      var $116=(($12+100)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$2;
      var $119=(($118+28)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+((($117)*(12))&-1))|0);
      var $122=(($121)|0);
      var $123=$vB;
      var $124=$122;
      assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];
      var $125=(($12+100)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$2;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+((($126)*(12))&-1))|0);
      var $131=(($130+8)|0);
      var $132=HEAPF32[(($131)>>2)];
      $wB=$132;
      var $133=$aA;
      __ZN5b2RotC1Ef($qA, $133);
      var $134=$aB;
      __ZN5b2RotC1Ef($qB, $134);
      var $135=(($12+112)|0);
      var $136=(($12+68)|0);
      var $137=(($12+128)|0);
      __ZmiRK6b2Vec2S1_($4, $136, $137);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $138=$135;
      var $139=$3;
      assert(8 % 1 === 0);HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[((($138)+(4))>>2)]=HEAP32[((($139)+(4))>>2)];
      var $140=(($12+120)|0);
      var $141=(($12+76)|0);
      var $142=(($12+136)|0);
      __ZmiRK6b2Vec2S1_($6, $141, $142);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $143=$140;
      var $144=$5;
      assert(8 % 1 === 0);HEAP32[(($143)>>2)]=HEAP32[(($144)>>2)];HEAP32[((($143)+(4))>>2)]=HEAP32[((($144)+(4))>>2)];
      var $145=(($12+104)|0);
      var $146=(($12+120)|0);
      __ZplRK6b2Vec2S1_($9, $cB, $146);
      __ZmiRK6b2Vec2S1_($8, $9, $cA);
      var $147=(($12+112)|0);
      __ZmiRK6b2Vec2S1_($7, $8, $147);
      var $148=$145;
      var $149=$7;
      assert(8 % 1 === 0);HEAP32[(($148)>>2)]=HEAP32[(($149)>>2)];HEAP32[((($148)+(4))>>2)]=HEAP32[((($149)+(4))>>2)];
      var $150=(($12+104)|0);
      var $151=__ZNK6b2Vec26LengthEv($150);
      var $152=(($12+88)|0);
      HEAPF32[(($152)>>2)]=$151;
      var $153=(($12+88)|0);
      var $154=HEAPF32[(($153)>>2)];
      var $155=(($12+84)|0);
      var $156=HEAPF32[(($155)>>2)];
      var $157=($154)-($156);
      $C=$157;
      var $158=$C;
      var $159=$158 > 0;
      if ($159) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $161=(($12+164)|0);
      HEAP32[(($161)>>2)]=2;
      label = 4; break;
    case 3: 
      var $163=(($12+164)|0);
      HEAP32[(($163)>>2)]=0;
      label = 4; break;
    case 4: 
      var $165=(($12+88)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=$166 > 0.004999999888241291;
      if ($167) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $169=(($12+104)|0);
      var $170=(($12+88)|0);
      var $171=HEAPF32[(($170)>>2)];
      var $172=(1)/($171);
      __ZN6b2Vec2mLEf($169, $172);
      label = 7; break;
    case 6: 
      var $174=(($12+104)|0);
      __ZN6b2Vec27SetZeroEv($174);
      var $175=(($12+160)|0);
      HEAPF32[(($175)>>2)]=0;
      var $176=(($12+92)|0);
      HEAPF32[(($176)>>2)]=0;
      label = 14; break;
    case 7: 
      var $178=(($12+112)|0);
      var $179=(($12+104)|0);
      var $180=__Z7b2CrossRK6b2Vec2S1_($178, $179);
      $crA=$180;
      var $181=(($12+120)|0);
      var $182=(($12+104)|0);
      var $183=__Z7b2CrossRK6b2Vec2S1_($181, $182);
      $crB=$183;
      var $184=(($12+144)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(($12+152)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=$crA;
      var $189=($187)*($188);
      var $190=$crA;
      var $191=($189)*($190);
      var $192=($185)+($191);
      var $193=(($12+148)|0);
      var $194=HEAPF32[(($193)>>2)];
      var $195=($192)+($194);
      var $196=(($12+156)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=$crB;
      var $199=($197)*($198);
      var $200=$crB;
      var $201=($199)*($200);
      var $202=($195)+($201);
      $invMass=$202;
      var $203=$invMass;
      var $204=$203 != 0;
      if ($204) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $206=$invMass;
      var $207=(1)/($206);
      var $210 = $207;label = 10; break;
    case 9: 
      var $210 = 0;label = 10; break;
    case 10: 
      var $210;
      var $211=(($12+160)|0);
      HEAPF32[(($211)>>2)]=$210;
      var $212=$2;
      var $213=(($212)|0);
      var $214=(($213+20)|0);
      var $215=HEAP8[($214)];
      var $216=(($215) & 1);
      if ($216) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $218=$2;
      var $219=(($218)|0);
      var $220=(($219+8)|0);
      var $221=HEAPF32[(($220)>>2)];
      var $222=(($12+92)|0);
      var $223=HEAPF32[(($222)>>2)];
      var $224=($223)*($221);
      HEAPF32[(($222)>>2)]=$224;
      var $225=(($12+92)|0);
      var $226=HEAPF32[(($225)>>2)];
      var $227=(($12+104)|0);
      __ZmlfRK6b2Vec2($P, $226, $227);
      var $228=(($12+144)|0);
      var $229=HEAPF32[(($228)>>2)];
      __ZmlfRK6b2Vec2($10, $229, $P);
      __ZN6b2Vec2mIERKS_($vA, $10);
      var $230=(($12+152)|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=(($12+112)|0);
      var $233=__Z7b2CrossRK6b2Vec2S1_($232, $P);
      var $234=($231)*($233);
      var $235=$wA;
      var $236=($235)-($234);
      $wA=$236;
      var $237=(($12+148)|0);
      var $238=HEAPF32[(($237)>>2)];
      __ZmlfRK6b2Vec2($11, $238, $P);
      __ZN6b2Vec2pLERKS_($vB, $11);
      var $239=(($12+156)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=(($12+120)|0);
      var $242=__Z7b2CrossRK6b2Vec2S1_($241, $P);
      var $243=($240)*($242);
      var $244=$wB;
      var $245=($244)+($243);
      $wB=$245;
      label = 13; break;
    case 12: 
      var $247=(($12+92)|0);
      HEAPF32[(($247)>>2)]=0;
      label = 13; break;
    case 13: 
      var $249=(($12+96)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=$2;
      var $252=(($251+28)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+((($250)*(12))&-1))|0);
      var $255=(($254)|0);
      var $256=$255;
      var $257=$vA;
      assert(8 % 1 === 0);HEAP32[(($256)>>2)]=HEAP32[(($257)>>2)];HEAP32[((($256)+(4))>>2)]=HEAP32[((($257)+(4))>>2)];
      var $258=$wA;
      var $259=(($12+96)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$2;
      var $262=(($261+28)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=(($263+((($260)*(12))&-1))|0);
      var $265=(($264+8)|0);
      HEAPF32[(($265)>>2)]=$258;
      var $266=(($12+100)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=$2;
      var $269=(($268+28)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270+((($267)*(12))&-1))|0);
      var $272=(($271)|0);
      var $273=$272;
      var $274=$vB;
      assert(8 % 1 === 0);HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];HEAP32[((($273)+(4))>>2)]=HEAP32[((($274)+(4))>>2)];
      var $275=$wB;
      var $276=(($12+100)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$2;
      var $279=(($278+28)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+((($277)*(12))&-1))|0);
      var $282=(($281+8)|0);
      HEAPF32[(($282)>>2)]=$275;
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2RevoluteJoint9SetLimitsEff($this, $lower, $upper) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      $2=$lower;
      $3=$upper;
      var $4=$1;
      var $5=$2;
      var $6=$3;
      var $7=$5 <= $6;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((5250616)|0), 473, ((5262608)|0), ((5256120)|0));
      throw "Reached an unreachable!"
      label = 4; break;
    case 4: 
      var $12=$2;
      var $13=(($4+120)|0);
      var $14=HEAPF32[(($13)>>2)];
      var $15=$12 != $14;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $17=$3;
      var $18=(($4+124)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$17 != $19;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$4;
      var $23=(($22+48)|0);
      var $24=HEAP32[(($23)>>2)];
      __ZN6b2Body8SetAwakeEb($24, 1);
      var $25=$4;
      var $26=(($25+52)|0);
      var $27=HEAP32[(($26)>>2)];
      __ZN6b2Body8SetAwakeEb($27, 1);
      var $28=(($4+84)|0);
      var $29=(($28+8)|0);
      HEAPF32[(($29)>>2)]=0;
      var $30=$2;
      var $31=(($4+120)|0);
      HEAPF32[(($31)>>2)]=$30;
      var $32=$3;
      var $33=(($4+124)|0);
      HEAPF32[(($33)>>2)]=$32;
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2RopeJointC2EPK14b2RopeJointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((5265396)|0);
      var $10=(($5+68)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $12=(($5+76)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $14=(($5+104)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $16=(($5+112)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $18=(($5+120)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $20=(($5+128)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $22=(($5+136)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $24=(($5+68)|0);
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=$24;
      var $28=$26;
      assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
      var $29=(($5+76)|0);
      var $30=$2;
      var $31=(($30+28)|0);
      var $32=$29;
      var $33=$31;
      assert(8 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];
      var $34=$2;
      var $35=(($34+36)|0);
      var $36=HEAPF32[(($35)>>2)];
      var $37=(($5+84)|0);
      HEAPF32[(($37)>>2)]=$36;
      var $38=(($5+160)|0);
      HEAPF32[(($38)>>2)]=0;
      var $39=(($5+92)|0);
      HEAPF32[(($39)>>2)]=0;
      var $40=(($5+164)|0);
      HEAP32[(($40)>>2)]=0;
      var $41=(($5+88)|0);
      HEAPF32[(($41)>>2)]=0;
      return;
    case 9: 
      var $43$0 = ___cxa_find_matching_catch(-1, -1); $43$1 = tempRet0;
      var $44=$43$0;
      $3=$44;
      var $45=$43$1;
      $4=$45;
      var $46=$5;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 12; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $49=$3;
      var $50=$4;
      var $51$0=$49;
      var $51$1=0;
      var $52$0=$51$0;
      var $52$1=$50;
      ___resumeException($52$0)
    case 12: 
      var $54$0 = ___cxa_find_matching_catch(-1, -1,0); $54$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK11b2RopeJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  return 0;
}
function __ZNK11b2RopeJoint12GetMaxLengthEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+84)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK11b2RopeJoint13GetLimitStateEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+164)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $vpA=(__stackBase__)+(16);
      var $3=(__stackBase__)+(24);
      var $vpB=(__stackBase__)+(32);
      var $4=(__stackBase__)+(40);
      var $C;
      var $Cdot;
      var $5=(__stackBase__)+(48);
      var $impulse;
      var $oldImpulse;
      var $P=(__stackBase__)+(56);
      var $6=(__stackBase__)+(64);
      var $7=(__stackBase__)+(72);
      $1=$this;
      $2=$data;
      var $8=$1;
      var $9=(($8+96)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+((($10)*(12))&-1))|0);
      var $15=(($14)|0);
      var $16=$vA;
      var $17=$15;
      assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
      var $18=(($8+96)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+((($19)*(12))&-1))|0);
      var $24=(($23+8)|0);
      var $25=HEAPF32[(($24)>>2)];
      $wA=$25;
      var $26=(($8+100)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+((($27)*(12))&-1))|0);
      var $32=(($31)|0);
      var $33=$vB;
      var $34=$32;
      assert(8 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
      var $35=(($8+100)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+((($36)*(12))&-1))|0);
      var $41=(($40+8)|0);
      var $42=HEAPF32[(($41)>>2)];
      $wB=$42;
      var $43=$wA;
      var $44=(($8+112)|0);
      __Z7b2CrossfRK6b2Vec2($3, $43, $44);
      __ZplRK6b2Vec2S1_($vpA, $vA, $3);
      var $45=$wB;
      var $46=(($8+120)|0);
      __Z7b2CrossfRK6b2Vec2($4, $45, $46);
      __ZplRK6b2Vec2S1_($vpB, $vB, $4);
      var $47=(($8+88)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($8+84)|0);
      var $50=HEAPF32[(($49)>>2)];
      var $51=($48)-($50);
      $C=$51;
      var $52=(($8+104)|0);
      __ZmiRK6b2Vec2S1_($5, $vpB, $vpA);
      var $53=__Z5b2DotRK6b2Vec2S1_($52, $5);
      $Cdot=$53;
      var $54=$C;
      var $55=$54 < 0;
      if ($55) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $57=$2;
      var $58=(($57)|0);
      var $59=(($58+4)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=$C;
      var $62=($60)*($61);
      var $63=$Cdot;
      var $64=($63)+($62);
      $Cdot=$64;
      label = 3; break;
    case 3: 
      var $66=(($8+160)|0);
      var $67=HEAPF32[(($66)>>2)];
      var $68=(-$67);
      var $69=$Cdot;
      var $70=($68)*($69);
      $impulse=$70;
      var $71=(($8+92)|0);
      var $72=HEAPF32[(($71)>>2)];
      $oldImpulse=$72;
      var $73=(($8+92)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=$impulse;
      var $76=($74)+($75);
      var $77=__Z5b2MinIfET_S0_S0_(0, $76);
      var $78=(($8+92)|0);
      HEAPF32[(($78)>>2)]=$77;
      var $79=(($8+92)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=$oldImpulse;
      var $82=($80)-($81);
      $impulse=$82;
      var $83=$impulse;
      var $84=(($8+104)|0);
      __ZmlfRK6b2Vec2($P, $83, $84);
      var $85=(($8+144)|0);
      var $86=HEAPF32[(($85)>>2)];
      __ZmlfRK6b2Vec2($6, $86, $P);
      __ZN6b2Vec2mIERKS_($vA, $6);
      var $87=(($8+152)|0);
      var $88=HEAPF32[(($87)>>2)];
      var $89=(($8+112)|0);
      var $90=__Z7b2CrossRK6b2Vec2S1_($89, $P);
      var $91=($88)*($90);
      var $92=$wA;
      var $93=($92)-($91);
      $wA=$93;
      var $94=(($8+148)|0);
      var $95=HEAPF32[(($94)>>2)];
      __ZmlfRK6b2Vec2($7, $95, $P);
      __ZN6b2Vec2pLERKS_($vB, $7);
      var $96=(($8+156)|0);
      var $97=HEAPF32[(($96)>>2)];
      var $98=(($8+120)|0);
      var $99=__Z7b2CrossRK6b2Vec2S1_($98, $P);
      var $100=($97)*($99);
      var $101=$wB;
      var $102=($101)+($100);
      $wB=$102;
      var $103=(($8+96)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$2;
      var $106=(($105+28)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+((($104)*(12))&-1))|0);
      var $109=(($108)|0);
      var $110=$109;
      var $111=$vA;
      assert(8 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($111)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($111)+(4))>>2)];
      var $112=$wA;
      var $113=(($8+96)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+((($114)*(12))&-1))|0);
      var $119=(($118+8)|0);
      HEAPF32[(($119)>>2)]=$112;
      var $120=(($8+100)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$2;
      var $123=(($122+28)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+((($121)*(12))&-1))|0);
      var $126=(($125)|0);
      var $127=$126;
      var $128=$vB;
      assert(8 % 1 === 0);HEAP32[(($127)>>2)]=HEAP32[(($128)>>2)];HEAP32[((($127)+(4))>>2)]=HEAP32[((($128)+(4))>>2)];
      var $129=$wB;
      var $130=(($8+100)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$2;
      var $133=(($132+28)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+((($131)*(12))&-1))|0);
      var $136=(($135+8)|0);
      HEAPF32[(($136)>>2)]=$129;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $cA=__stackBase__;
  var $aA;
  var $cB=(__stackBase__)+(8);
  var $aB;
  var $qA=(__stackBase__)+(16);
  var $qB=(__stackBase__)+(24);
  var $rA=(__stackBase__)+(32);
  var $3=(__stackBase__)+(40);
  var $rB=(__stackBase__)+(48);
  var $4=(__stackBase__)+(56);
  var $u=(__stackBase__)+(64);
  var $5=(__stackBase__)+(72);
  var $6=(__stackBase__)+(80);
  var $length;
  var $C;
  var $impulse;
  var $P=(__stackBase__)+(88);
  var $7=(__stackBase__)+(96);
  var $8=(__stackBase__)+(104);
  $1=$this;
  $2=$data;
  var $9=$1;
  var $10=(($9+96)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$2;
  var $13=(($12+24)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14+((($11)*(12))&-1))|0);
  var $16=(($15)|0);
  var $17=$cA;
  var $18=$16;
  assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
  var $19=(($9+96)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=$2;
  var $22=(($21+24)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=(($23+((($20)*(12))&-1))|0);
  var $25=(($24+8)|0);
  var $26=HEAPF32[(($25)>>2)];
  $aA=$26;
  var $27=(($9+100)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+24)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+((($28)*(12))&-1))|0);
  var $33=(($32)|0);
  var $34=$cB;
  var $35=$33;
  assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
  var $36=(($9+100)|0);
  var $37=HEAP32[(($36)>>2)];
  var $38=$2;
  var $39=(($38+24)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=(($40+((($37)*(12))&-1))|0);
  var $42=(($41+8)|0);
  var $43=HEAPF32[(($42)>>2)];
  $aB=$43;
  var $44=$aA;
  __ZN5b2RotC1Ef($qA, $44);
  var $45=$aB;
  __ZN5b2RotC1Ef($qB, $45);
  var $46=(($9+68)|0);
  var $47=(($9+128)|0);
  __ZmiRK6b2Vec2S1_($3, $46, $47);
  __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
  var $48=(($9+76)|0);
  var $49=(($9+136)|0);
  __ZmiRK6b2Vec2S1_($4, $48, $49);
  __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
  __ZplRK6b2Vec2S1_($6, $cB, $rB);
  __ZmiRK6b2Vec2S1_($5, $6, $cA);
  __ZmiRK6b2Vec2S1_($u, $5, $rA);
  var $50=__ZN6b2Vec29NormalizeEv($u);
  $length=$50;
  var $51=$length;
  var $52=(($9+84)|0);
  var $53=HEAPF32[(($52)>>2)];
  var $54=($51)-($53);
  $C=$54;
  var $55=$C;
  var $56=__Z7b2ClampIfET_S0_S0_S0_($55, 0, 0.20000000298023224);
  $C=$56;
  var $57=(($9+160)|0);
  var $58=HEAPF32[(($57)>>2)];
  var $59=(-$58);
  var $60=$C;
  var $61=($59)*($60);
  $impulse=$61;
  var $62=$impulse;
  __ZmlfRK6b2Vec2($P, $62, $u);
  var $63=(($9+144)|0);
  var $64=HEAPF32[(($63)>>2)];
  __ZmlfRK6b2Vec2($7, $64, $P);
  __ZN6b2Vec2mIERKS_($cA, $7);
  var $65=(($9+152)|0);
  var $66=HEAPF32[(($65)>>2)];
  var $67=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
  var $68=($66)*($67);
  var $69=$aA;
  var $70=($69)-($68);
  $aA=$70;
  var $71=(($9+148)|0);
  var $72=HEAPF32[(($71)>>2)];
  __ZmlfRK6b2Vec2($8, $72, $P);
  __ZN6b2Vec2pLERKS_($cB, $8);
  var $73=(($9+156)|0);
  var $74=HEAPF32[(($73)>>2)];
  var $75=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
  var $76=($74)*($75);
  var $77=$aB;
  var $78=($77)+($76);
  $aB=$78;
  var $79=(($9+96)|0);
  var $80=HEAP32[(($79)>>2)];
  var $81=$2;
  var $82=(($81+24)|0);
  var $83=HEAP32[(($82)>>2)];
  var $84=(($83+((($80)*(12))&-1))|0);
  var $85=(($84)|0);
  var $86=$85;
  var $87=$cA;
  assert(8 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];
  var $88=$aA;
  var $89=(($9+96)|0);
  var $90=HEAP32[(($89)>>2)];
  var $91=$2;
  var $92=(($91+24)|0);
  var $93=HEAP32[(($92)>>2)];
  var $94=(($93+((($90)*(12))&-1))|0);
  var $95=(($94+8)|0);
  HEAPF32[(($95)>>2)]=$88;
  var $96=(($9+100)|0);
  var $97=HEAP32[(($96)>>2)];
  var $98=$2;
  var $99=(($98+24)|0);
  var $100=HEAP32[(($99)>>2)];
  var $101=(($100+((($97)*(12))&-1))|0);
  var $102=(($101)|0);
  var $103=$102;
  var $104=$cB;
  assert(8 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
  var $105=$aB;
  var $106=(($9+100)|0);
  var $107=HEAP32[(($106)>>2)];
  var $108=$2;
  var $109=(($108+24)|0);
  var $110=HEAP32[(($109)>>2)];
  var $111=(($110+((($107)*(12))&-1))|0);
  var $112=(($111+8)|0);
  HEAPF32[(($112)>>2)]=$105;
  var $113=$length;
  var $114=(($9+84)|0);
  var $115=HEAPF32[(($114)>>2)];
  var $116=($113)-($115);
  var $117=$116 < 0.004999999888241291;
  STACKTOP = __stackBase__;
  return $117;
}
function __ZNK11b2RopeJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+68)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK11b2RopeJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK11b2RopeJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+92)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  var $8=(($3+104)|0);
  __ZmlfRK6b2Vec2($agg_result, $7, $8);
  return;
}
function __ZN11b2RopeJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5250532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5256088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5253204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5250956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+68)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+68)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5249932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+76)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+76)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5249244)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+84)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((5248536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$38,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $39=$2;
  var $40=(($39+56)|0);
  var $41=HEAP32[(($40)>>2)];
  __Z5b2LogPKcz(((5247992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$41,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN11b2RopeJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2RopeJointD2Ev($2);
  return;
}
function __ZN11b2RopeJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN11b2RopeJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2RopeJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZN14b2WeldJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($this, $bA, $bB, $anchor) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  var $6=(__stackBase__)+(8);
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  var $7=$1;
  var $8=$2;
  var $9=$7;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=$3;
  var $12=$7;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=(($7+20)|0);
  var $15=$7;
  var $16=(($15+8)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $17, $18);
  var $19=$14;
  var $20=$5;
  assert(8 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];
  var $21=(($7+28)|0);
  var $22=$7;
  var $23=(($22+12)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $24, $25);
  var $26=$21;
  var $27=$6;
  assert(8 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
  var $28=$7;
  var $29=(($28+12)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=__ZNK6b2Body8GetAngleEv($30);
  var $32=$7;
  var $33=(($32+8)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=__ZNK6b2Body8GetAngleEv($34);
  var $36=($31)-($35);
  var $37=(($7+36)|0);
  HEAPF32[(($37)>>2)]=$36;
  STACKTOP = __stackBase__;
  return;
}
function __ZN11b2WeldJointC2EPK14b2WeldJointDef($this, $def) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$def;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=$7;
      __ZN7b2JointC2EPK10b2JointDef($6, $8);
      var $9=$5;
      HEAP32[(($9)>>2)]=((5265344)|0);
      var $10=(($5+80)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $12=(($5+88)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $14=(($5+104)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec3C1Ev($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $16=(($5+124)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $18=(($5+132)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $20=(($5+140)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $22=(($5+148)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $24=(($5+172)|0);
      (function() { try { __THREW__ = 0; return __ZN7b2Mat33C1Ev($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $26=(($5+80)|0);
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=$26;
      var $30=$28;
      assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
      var $31=(($5+88)|0);
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=$31;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAPF32[(($37)>>2)];
      var $39=(($5+96)|0);
      HEAPF32[(($39)>>2)]=$38;
      var $40=$2;
      var $41=(($40+40)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($5+68)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$2;
      var $45=(($44+44)|0);
      var $46=HEAPF32[(($45)>>2)];
      var $47=(($5+72)|0);
      HEAPF32[(($47)>>2)]=$46;
      var $48=(($5+104)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec37SetZeroEv($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
    case 10: 
      return;
    case 11: 
      var $51$0 = ___cxa_find_matching_catch(-1, -1); $51$1 = tempRet0;
      var $52=$51$0;
      $3=$52;
      var $53=$51$1;
      $4=$53;
      var $54=$5;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $57=$3;
      var $58=$4;
      var $59$0=$57;
      var $59$1=0;
      var $60$0=$59$0;
      var $60$1=$58;
      ___resumeException($60$0)
    case 14: 
      var $62$0 = ___cxa_find_matching_catch(-1, -1,0); $62$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 140)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(64);
      var $6=(__stackBase__)+(72);
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $K=(__stackBase__)+(80);
      var $invM;
      var $m;
      var $C;
      var $omega;
      var $d;
      var $k;
      var $h;
      var $P=(__stackBase__)+(116);
      var $7=(__stackBase__)+(124);
      var $8=(__stackBase__)+(132);
      $1=$this;
      $2=$data;
      var $9=$1;
      var $10=$9;
      var $11=(($10+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($9+116)|0);
      HEAP32[(($15)>>2)]=$14;
      var $16=$9;
      var $17=(($16+52)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($9+120)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=(($9+140)|0);
      var $23=$9;
      var $24=(($23+48)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+28)|0);
      var $27=(($26)|0);
      var $28=$22;
      var $29=$27;
      assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
      var $30=(($9+148)|0);
      var $31=$9;
      var $32=(($31+52)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+28)|0);
      var $35=(($34)|0);
      var $36=$30;
      var $37=$35;
      assert(8 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
      var $38=$9;
      var $39=(($38+48)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+120)|0);
      var $42=HEAPF32[(($41)>>2)];
      var $43=(($9+156)|0);
      HEAPF32[(($43)>>2)]=$42;
      var $44=$9;
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($9+160)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$9;
      var $51=(($50+48)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+128)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($9+164)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$9;
      var $57=(($56+52)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($9+168)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=(($9+116)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($63)*(12))&-1))|0);
      var $68=(($67)|0);
      var $69=$cA;
      var $70=$68;
      assert(8 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];
      var $71=(($9+116)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+((($72)*(12))&-1))|0);
      var $77=(($76+8)|0);
      var $78=HEAPF32[(($77)>>2)];
      $aA=$78;
      var $79=(($9+116)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+28)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+((($80)*(12))&-1))|0);
      var $85=(($84)|0);
      var $86=$vA;
      var $87=$85;
      assert(8 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];
      var $88=(($9+116)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$2;
      var $91=(($90+28)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+((($89)*(12))&-1))|0);
      var $94=(($93+8)|0);
      var $95=HEAPF32[(($94)>>2)];
      $wA=$95;
      var $96=(($9+120)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$2;
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+((($97)*(12))&-1))|0);
      var $102=(($101)|0);
      var $103=$cB;
      var $104=$102;
      assert(8 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
      var $105=(($9+120)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+((($106)*(12))&-1))|0);
      var $111=(($110+8)|0);
      var $112=HEAPF32[(($111)>>2)];
      $aB=$112;
      var $113=(($9+120)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+((($114)*(12))&-1))|0);
      var $119=(($118)|0);
      var $120=$vB;
      var $121=$119;
      assert(8 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($121)+(4))>>2)];
      var $122=(($9+120)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$2;
      var $125=(($124+28)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+((($123)*(12))&-1))|0);
      var $128=(($127+8)|0);
      var $129=HEAPF32[(($128)>>2)];
      $wB=$129;
      var $130=$aA;
      __ZN5b2RotC1Ef($qA, $130);
      var $131=$aB;
      __ZN5b2RotC1Ef($qB, $131);
      var $132=(($9+124)|0);
      var $133=(($9+80)|0);
      var $134=(($9+140)|0);
      __ZmiRK6b2Vec2S1_($4, $133, $134);
      __Z5b2MulRK5b2RotRK6b2Vec2($3, $qA, $4);
      var $135=$132;
      var $136=$3;
      assert(8 % 1 === 0);HEAP32[(($135)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($135)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];
      var $137=(($9+132)|0);
      var $138=(($9+88)|0);
      var $139=(($9+148)|0);
      __ZmiRK6b2Vec2S1_($6, $138, $139);
      __Z5b2MulRK5b2RotRK6b2Vec2($5, $qB, $6);
      var $140=$137;
      var $141=$5;
      assert(8 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];
      var $142=(($9+156)|0);
      var $143=HEAPF32[(($142)>>2)];
      $mA=$143;
      var $144=(($9+160)|0);
      var $145=HEAPF32[(($144)>>2)];
      $mB=$145;
      var $146=(($9+164)|0);
      var $147=HEAPF32[(($146)>>2)];
      $iA=$147;
      var $148=(($9+168)|0);
      var $149=HEAPF32[(($148)>>2)];
      $iB=$149;
      __ZN7b2Mat33C1Ev($K);
      var $150=$mA;
      var $151=$mB;
      var $152=($150)+($151);
      var $153=(($9+124)|0);
      var $154=(($153+4)|0);
      var $155=HEAPF32[(($154)>>2)];
      var $156=(($9+124)|0);
      var $157=(($156+4)|0);
      var $158=HEAPF32[(($157)>>2)];
      var $159=($155)*($158);
      var $160=$iA;
      var $161=($159)*($160);
      var $162=($152)+($161);
      var $163=(($9+132)|0);
      var $164=(($163+4)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=(($9+132)|0);
      var $167=(($166+4)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=($165)*($168);
      var $170=$iB;
      var $171=($169)*($170);
      var $172=($162)+($171);
      var $173=(($K)|0);
      var $174=(($173)|0);
      HEAPF32[(($174)>>2)]=$172;
      var $175=(($9+124)|0);
      var $176=(($175+4)|0);
      var $177=HEAPF32[(($176)>>2)];
      var $178=(-$177);
      var $179=(($9+124)|0);
      var $180=(($179)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=($178)*($181);
      var $183=$iA;
      var $184=($182)*($183);
      var $185=(($9+132)|0);
      var $186=(($185+4)|0);
      var $187=HEAPF32[(($186)>>2)];
      var $188=(($9+132)|0);
      var $189=(($188)|0);
      var $190=HEAPF32[(($189)>>2)];
      var $191=($187)*($190);
      var $192=$iB;
      var $193=($191)*($192);
      var $194=($184)-($193);
      var $195=(($K+12)|0);
      var $196=(($195)|0);
      HEAPF32[(($196)>>2)]=$194;
      var $197=(($9+124)|0);
      var $198=(($197+4)|0);
      var $199=HEAPF32[(($198)>>2)];
      var $200=(-$199);
      var $201=$iA;
      var $202=($200)*($201);
      var $203=(($9+132)|0);
      var $204=(($203+4)|0);
      var $205=HEAPF32[(($204)>>2)];
      var $206=$iB;
      var $207=($205)*($206);
      var $208=($202)-($207);
      var $209=(($K+24)|0);
      var $210=(($209)|0);
      HEAPF32[(($210)>>2)]=$208;
      var $211=(($K+12)|0);
      var $212=(($211)|0);
      var $213=HEAPF32[(($212)>>2)];
      var $214=(($K)|0);
      var $215=(($214+4)|0);
      HEAPF32[(($215)>>2)]=$213;
      var $216=$mA;
      var $217=$mB;
      var $218=($216)+($217);
      var $219=(($9+124)|0);
      var $220=(($219)|0);
      var $221=HEAPF32[(($220)>>2)];
      var $222=(($9+124)|0);
      var $223=(($222)|0);
      var $224=HEAPF32[(($223)>>2)];
      var $225=($221)*($224);
      var $226=$iA;
      var $227=($225)*($226);
      var $228=($218)+($227);
      var $229=(($9+132)|0);
      var $230=(($229)|0);
      var $231=HEAPF32[(($230)>>2)];
      var $232=(($9+132)|0);
      var $233=(($232)|0);
      var $234=HEAPF32[(($233)>>2)];
      var $235=($231)*($234);
      var $236=$iB;
      var $237=($235)*($236);
      var $238=($228)+($237);
      var $239=(($K+12)|0);
      var $240=(($239+4)|0);
      HEAPF32[(($240)>>2)]=$238;
      var $241=(($9+124)|0);
      var $242=(($241)|0);
      var $243=HEAPF32[(($242)>>2)];
      var $244=$iA;
      var $245=($243)*($244);
      var $246=(($9+132)|0);
      var $247=(($246)|0);
      var $248=HEAPF32[(($247)>>2)];
      var $249=$iB;
      var $250=($248)*($249);
      var $251=($245)+($250);
      var $252=(($K+24)|0);
      var $253=(($252+4)|0);
      HEAPF32[(($253)>>2)]=$251;
      var $254=(($K+24)|0);
      var $255=(($254)|0);
      var $256=HEAPF32[(($255)>>2)];
      var $257=(($K)|0);
      var $258=(($257+8)|0);
      HEAPF32[(($258)>>2)]=$256;
      var $259=(($K+24)|0);
      var $260=(($259+4)|0);
      var $261=HEAPF32[(($260)>>2)];
      var $262=(($K+12)|0);
      var $263=(($262+8)|0);
      HEAPF32[(($263)>>2)]=$261;
      var $264=$iA;
      var $265=$iB;
      var $266=($264)+($265);
      var $267=(($K+24)|0);
      var $268=(($267+8)|0);
      HEAPF32[(($268)>>2)]=$266;
      var $269=(($9+68)|0);
      var $270=HEAPF32[(($269)>>2)];
      var $271=$270 > 0;
      if ($271) { label = 2; break; } else { label = 12; break; }
    case 2: 
      var $273=(($9+172)|0);
      __ZNK7b2Mat3312GetInverse22EPS_($K, $273);
      var $274=$iA;
      var $275=$iB;
      var $276=($274)+($275);
      $invM=$276;
      var $277=$invM;
      var $278=$277 > 0;
      if ($278) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $280=$invM;
      var $281=(1)/($280);
      var $284 = $281;label = 5; break;
    case 4: 
      var $284 = 0;label = 5; break;
    case 5: 
      var $284;
      $m=$284;
      var $285=$aB;
      var $286=$aA;
      var $287=($285)-($286);
      var $288=(($9+96)|0);
      var $289=HEAPF32[(($288)>>2)];
      var $290=($287)-($289);
      $C=$290;
      var $291=(($9+68)|0);
      var $292=HEAPF32[(($291)>>2)];
      var $293=($292)*(6.2831854820251465);
      $omega=$293;
      var $294=$m;
      var $295=($294)*(2);
      var $296=(($9+72)|0);
      var $297=HEAPF32[(($296)>>2)];
      var $298=($295)*($297);
      var $299=$omega;
      var $300=($298)*($299);
      $d=$300;
      var $301=$m;
      var $302=$omega;
      var $303=($301)*($302);
      var $304=$omega;
      var $305=($303)*($304);
      $k=$305;
      var $306=$2;
      var $307=(($306)|0);
      var $308=(($307)|0);
      var $309=HEAPF32[(($308)>>2)];
      $h=$309;
      var $310=$h;
      var $311=$d;
      var $312=$h;
      var $313=$k;
      var $314=($312)*($313);
      var $315=($311)+($314);
      var $316=($310)*($315);
      var $317=(($9+100)|0);
      HEAPF32[(($317)>>2)]=$316;
      var $318=(($9+100)|0);
      var $319=HEAPF32[(($318)>>2)];
      var $320=$319 != 0;
      if ($320) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $322=(($9+100)|0);
      var $323=HEAPF32[(($322)>>2)];
      var $324=(1)/($323);
      var $327 = $324;label = 8; break;
    case 7: 
      var $327 = 0;label = 8; break;
    case 8: 
      var $327;
      var $328=(($9+100)|0);
      HEAPF32[(($328)>>2)]=$327;
      var $329=$C;
      var $330=$h;
      var $331=($329)*($330);
      var $332=$k;
      var $333=($331)*($332);
      var $334=(($9+100)|0);
      var $335=HEAPF32[(($334)>>2)];
      var $336=($333)*($335);
      var $337=(($9+76)|0);
      HEAPF32[(($337)>>2)]=$336;
      var $338=(($9+100)|0);
      var $339=HEAPF32[(($338)>>2)];
      var $340=$invM;
      var $341=($340)+($339);
      $invM=$341;
      var $342=$invM;
      var $343=$342 != 0;
      if ($343) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $345=$invM;
      var $346=(1)/($345);
      var $349 = $346;label = 11; break;
    case 10: 
      var $349 = 0;label = 11; break;
    case 11: 
      var $349;
      var $350=(($9+172)|0);
      var $351=(($350+24)|0);
      var $352=(($351+8)|0);
      HEAPF32[(($352)>>2)]=$349;
      label = 13; break;
    case 12: 
      var $354=(($9+172)|0);
      __ZNK7b2Mat3315GetSymInverse33EPS_($K, $354);
      var $355=(($9+100)|0);
      HEAPF32[(($355)>>2)]=0;
      var $356=(($9+76)|0);
      HEAPF32[(($356)>>2)]=0;
      label = 13; break;
    case 13: 
      var $358=$2;
      var $359=(($358)|0);
      var $360=(($359+20)|0);
      var $361=HEAP8[($360)];
      var $362=(($361) & 1);
      if ($362) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $364=(($9+104)|0);
      var $365=$2;
      var $366=(($365)|0);
      var $367=(($366+8)|0);
      var $368=HEAPF32[(($367)>>2)];
      __ZN6b2Vec3mLEf($364, $368);
      var $369=(($9+104)|0);
      var $370=(($369)|0);
      var $371=HEAPF32[(($370)>>2)];
      var $372=(($9+104)|0);
      var $373=(($372+4)|0);
      var $374=HEAPF32[(($373)>>2)];
      __ZN6b2Vec2C1Eff($P, $371, $374);
      var $375=$mA;
      __ZmlfRK6b2Vec2($7, $375, $P);
      __ZN6b2Vec2mIERKS_($vA, $7);
      var $376=$iA;
      var $377=(($9+124)|0);
      var $378=__Z7b2CrossRK6b2Vec2S1_($377, $P);
      var $379=(($9+104)|0);
      var $380=(($379+8)|0);
      var $381=HEAPF32[(($380)>>2)];
      var $382=($378)+($381);
      var $383=($376)*($382);
      var $384=$wA;
      var $385=($384)-($383);
      $wA=$385;
      var $386=$mB;
      __ZmlfRK6b2Vec2($8, $386, $P);
      __ZN6b2Vec2pLERKS_($vB, $8);
      var $387=$iB;
      var $388=(($9+132)|0);
      var $389=__Z7b2CrossRK6b2Vec2S1_($388, $P);
      var $390=(($9+104)|0);
      var $391=(($390+8)|0);
      var $392=HEAPF32[(($391)>>2)];
      var $393=($389)+($392);
      var $394=($387)*($393);
      var $395=$wB;
      var $396=($395)+($394);
      $wB=$396;
      label = 16; break;
    case 15: 
      var $398=(($9+104)|0);
      __ZN6b2Vec37SetZeroEv($398);
      label = 16; break;
    case 16: 
      var $400=(($9+116)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=$2;
      var $403=(($402+28)|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=(($404+((($401)*(12))&-1))|0);
      var $406=(($405)|0);
      var $407=$406;
      var $408=$vA;
      assert(8 % 1 === 0);HEAP32[(($407)>>2)]=HEAP32[(($408)>>2)];HEAP32[((($407)+(4))>>2)]=HEAP32[((($408)+(4))>>2)];
      var $409=$wA;
      var $410=(($9+116)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=$2;
      var $413=(($412+28)|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=(($414+((($411)*(12))&-1))|0);
      var $416=(($415+8)|0);
      HEAPF32[(($416)>>2)]=$409;
      var $417=(($9+120)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=$2;
      var $420=(($419+28)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=(($421+((($418)*(12))&-1))|0);
      var $423=(($422)|0);
      var $424=$423;
      var $425=$vB;
      assert(8 % 1 === 0);HEAP32[(($424)>>2)]=HEAP32[(($425)>>2)];HEAP32[((($424)+(4))>>2)]=HEAP32[((($425)+(4))>>2)];
      var $426=$wB;
      var $427=(($9+120)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=$2;
      var $430=(($429+28)|0);
      var $431=HEAP32[(($430)>>2)];
      var $432=(($431+((($428)*(12))&-1))|0);
      var $433=(($432+8)|0);
      HEAPF32[(($433)>>2)]=$426;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 196)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $vA=__stackBase__;
      var $wA;
      var $vB=(__stackBase__)+(8);
      var $wB;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $Cdot2;
      var $impulse2;
      var $Cdot1=(__stackBase__)+(16);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(32);
      var $5=(__stackBase__)+(40);
      var $6=(__stackBase__)+(48);
      var $impulse1=(__stackBase__)+(56);
      var $7=(__stackBase__)+(64);
      var $P=(__stackBase__)+(72);
      var $8=(__stackBase__)+(80);
      var $9=(__stackBase__)+(88);
      var $Cdot11=(__stackBase__)+(96);
      var $10=(__stackBase__)+(104);
      var $11=(__stackBase__)+(112);
      var $12=(__stackBase__)+(120);
      var $13=(__stackBase__)+(128);
      var $Cdot22;
      var $Cdot=(__stackBase__)+(136);
      var $impulse=(__stackBase__)+(148);
      var $14=(__stackBase__)+(160);
      var $P3=(__stackBase__)+(172);
      var $15=(__stackBase__)+(180);
      var $16=(__stackBase__)+(188);
      $1=$this;
      $2=$data;
      var $17=$1;
      var $18=(($17+116)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+((($19)*(12))&-1))|0);
      var $24=(($23)|0);
      var $25=$vA;
      var $26=$24;
      assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      var $27=(($17+116)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+((($28)*(12))&-1))|0);
      var $33=(($32+8)|0);
      var $34=HEAPF32[(($33)>>2)];
      $wA=$34;
      var $35=(($17+120)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+((($36)*(12))&-1))|0);
      var $41=(($40)|0);
      var $42=$vB;
      var $43=$41;
      assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
      var $44=(($17+120)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$2;
      var $47=(($46+28)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+((($45)*(12))&-1))|0);
      var $50=(($49+8)|0);
      var $51=HEAPF32[(($50)>>2)];
      $wB=$51;
      var $52=(($17+156)|0);
      var $53=HEAPF32[(($52)>>2)];
      $mA=$53;
      var $54=(($17+160)|0);
      var $55=HEAPF32[(($54)>>2)];
      $mB=$55;
      var $56=(($17+164)|0);
      var $57=HEAPF32[(($56)>>2)];
      $iA=$57;
      var $58=(($17+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $iB=$59;
      var $60=(($17+68)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=$61 > 0;
      if ($62) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $64=$wB;
      var $65=$wA;
      var $66=($64)-($65);
      $Cdot2=$66;
      var $67=(($17+172)|0);
      var $68=(($67+24)|0);
      var $69=(($68+8)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=(-$70);
      var $72=$Cdot2;
      var $73=(($17+76)|0);
      var $74=HEAPF32[(($73)>>2)];
      var $75=($72)+($74);
      var $76=(($17+100)|0);
      var $77=HEAPF32[(($76)>>2)];
      var $78=(($17+104)|0);
      var $79=(($78+8)|0);
      var $80=HEAPF32[(($79)>>2)];
      var $81=($77)*($80);
      var $82=($75)+($81);
      var $83=($71)*($82);
      $impulse2=$83;
      var $84=$impulse2;
      var $85=(($17+104)|0);
      var $86=(($85+8)|0);
      var $87=HEAPF32[(($86)>>2)];
      var $88=($87)+($84);
      HEAPF32[(($86)>>2)]=$88;
      var $89=$iA;
      var $90=$impulse2;
      var $91=($89)*($90);
      var $92=$wA;
      var $93=($92)-($91);
      $wA=$93;
      var $94=$iB;
      var $95=$impulse2;
      var $96=($94)*($95);
      var $97=$wB;
      var $98=($97)+($96);
      $wB=$98;
      var $99=$wB;
      var $100=(($17+132)|0);
      __Z7b2CrossfRK6b2Vec2($5, $99, $100);
      __ZplRK6b2Vec2S1_($4, $vB, $5);
      __ZmiRK6b2Vec2S1_($3, $4, $vA);
      var $101=$wA;
      var $102=(($17+124)|0);
      __Z7b2CrossfRK6b2Vec2($6, $101, $102);
      __ZmiRK6b2Vec2S1_($Cdot1, $3, $6);
      var $103=(($17+172)|0);
      __Z7b2Mul22RK7b2Mat33RK6b2Vec2($7, $103, $Cdot1);
      __ZNK6b2Vec2ngEv($impulse1, $7);
      var $104=(($impulse1)|0);
      var $105=HEAPF32[(($104)>>2)];
      var $106=(($17+104)|0);
      var $107=(($106)|0);
      var $108=HEAPF32[(($107)>>2)];
      var $109=($108)+($105);
      HEAPF32[(($107)>>2)]=$109;
      var $110=(($impulse1+4)|0);
      var $111=HEAPF32[(($110)>>2)];
      var $112=(($17+104)|0);
      var $113=(($112+4)|0);
      var $114=HEAPF32[(($113)>>2)];
      var $115=($114)+($111);
      HEAPF32[(($113)>>2)]=$115;
      var $116=$P;
      var $117=$impulse1;
      assert(8 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];
      var $118=$mA;
      __ZmlfRK6b2Vec2($8, $118, $P);
      __ZN6b2Vec2mIERKS_($vA, $8);
      var $119=$iA;
      var $120=(($17+124)|0);
      var $121=__Z7b2CrossRK6b2Vec2S1_($120, $P);
      var $122=($119)*($121);
      var $123=$wA;
      var $124=($123)-($122);
      $wA=$124;
      var $125=$mB;
      __ZmlfRK6b2Vec2($9, $125, $P);
      __ZN6b2Vec2pLERKS_($vB, $9);
      var $126=$iB;
      var $127=(($17+132)|0);
      var $128=__Z7b2CrossRK6b2Vec2S1_($127, $P);
      var $129=($126)*($128);
      var $130=$wB;
      var $131=($130)+($129);
      $wB=$131;
      label = 4; break;
    case 3: 
      var $133=$wB;
      var $134=(($17+132)|0);
      __Z7b2CrossfRK6b2Vec2($12, $133, $134);
      __ZplRK6b2Vec2S1_($11, $vB, $12);
      __ZmiRK6b2Vec2S1_($10, $11, $vA);
      var $135=$wA;
      var $136=(($17+124)|0);
      __Z7b2CrossfRK6b2Vec2($13, $135, $136);
      __ZmiRK6b2Vec2S1_($Cdot11, $10, $13);
      var $137=$wB;
      var $138=$wA;
      var $139=($137)-($138);
      $Cdot22=$139;
      var $140=(($Cdot11)|0);
      var $141=HEAPF32[(($140)>>2)];
      var $142=(($Cdot11+4)|0);
      var $143=HEAPF32[(($142)>>2)];
      var $144=$Cdot22;
      __ZN6b2Vec3C1Efff($Cdot, $141, $143, $144);
      var $145=(($17+172)|0);
      __Z5b2MulRK7b2Mat33RK6b2Vec3($14, $145, $Cdot);
      __ZNK6b2Vec3ngEv($impulse, $14);
      var $146=(($17+104)|0);
      __ZN6b2Vec3pLERKS_($146, $impulse);
      var $147=(($impulse)|0);
      var $148=HEAPF32[(($147)>>2)];
      var $149=(($impulse+4)|0);
      var $150=HEAPF32[(($149)>>2)];
      __ZN6b2Vec2C1Eff($P3, $148, $150);
      var $151=$mA;
      __ZmlfRK6b2Vec2($15, $151, $P3);
      __ZN6b2Vec2mIERKS_($vA, $15);
      var $152=$iA;
      var $153=(($17+124)|0);
      var $154=__Z7b2CrossRK6b2Vec2S1_($153, $P3);
      var $155=(($impulse+8)|0);
      var $156=HEAPF32[(($155)>>2)];
      var $157=($154)+($156);
      var $158=($152)*($157);
      var $159=$wA;
      var $160=($159)-($158);
      $wA=$160;
      var $161=$mB;
      __ZmlfRK6b2Vec2($16, $161, $P3);
      __ZN6b2Vec2pLERKS_($vB, $16);
      var $162=$iB;
      var $163=(($17+132)|0);
      var $164=__Z7b2CrossRK6b2Vec2S1_($163, $P3);
      var $165=(($impulse+8)|0);
      var $166=HEAPF32[(($165)>>2)];
      var $167=($164)+($166);
      var $168=($162)*($167);
      var $169=$wB;
      var $170=($169)+($168);
      $wB=$170;
      label = 4; break;
    case 4: 
      var $172=(($17+116)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=$2;
      var $175=(($174+28)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+((($173)*(12))&-1))|0);
      var $178=(($177)|0);
      var $179=$178;
      var $180=$vA;
      assert(8 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];
      var $181=$wA;
      var $182=(($17+116)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$2;
      var $185=(($184+28)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+((($183)*(12))&-1))|0);
      var $188=(($187+8)|0);
      HEAPF32[(($188)>>2)]=$181;
      var $189=(($17+120)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$2;
      var $192=(($191+28)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+((($190)*(12))&-1))|0);
      var $195=(($194)|0);
      var $196=$195;
      var $197=$vB;
      assert(8 % 1 === 0);HEAP32[(($196)>>2)]=HEAP32[(($197)>>2)];HEAP32[((($196)+(4))>>2)]=HEAP32[((($197)+(4))>>2)];
      var $198=$wB;
      var $199=(($17+120)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=$2;
      var $202=(($201+28)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($203+((($200)*(12))&-1))|0);
      var $205=(($204+8)|0);
      HEAPF32[(($205)>>2)]=$198;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Z5b2MulRK7b2Mat33RK6b2Vec3($agg_result, $A, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(12);
  var $5=(__stackBase__)+(24);
  var $6=(__stackBase__)+(36);
  $1=$A;
  $2=$v;
  var $7=$2;
  var $8=(($7)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=$1;
  var $11=(($10)|0);
  __ZmlfRK6b2Vec3($4, $9, $11);
  var $12=$2;
  var $13=(($12+4)|0);
  var $14=HEAPF32[(($13)>>2)];
  var $15=$1;
  var $16=(($15+12)|0);
  __ZmlfRK6b2Vec3($5, $14, $16);
  __ZplRK6b2Vec3S1_($3, $4, $5);
  var $17=$2;
  var $18=(($17+8)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=$1;
  var $21=(($20+24)|0);
  __ZmlfRK6b2Vec3($6, $19, $21);
  __ZplRK6b2Vec3S1_($agg_result, $3, $6);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK11b2WeldJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+104)|0);
  var $6=(($5+8)|0);
  var $7=HEAPF32[(($6)>>2)];
  var $8=($4)*($7);
  return $8;
}
function __ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 240)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=(__stackBase__)+(8);
      var $aB;
      var $qA=(__stackBase__)+(16);
      var $qB=(__stackBase__)+(24);
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $rA=(__stackBase__)+(32);
      var $3=(__stackBase__)+(40);
      var $rB=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $positionError;
      var $angularError;
      var $K=(__stackBase__)+(64);
      var $C1=(__stackBase__)+(100);
      var $5=(__stackBase__)+(108);
      var $6=(__stackBase__)+(116);
      var $P=(__stackBase__)+(124);
      var $7=(__stackBase__)+(132);
      var $8=(__stackBase__)+(140);
      var $9=(__stackBase__)+(148);
      var $C11=(__stackBase__)+(156);
      var $10=(__stackBase__)+(164);
      var $11=(__stackBase__)+(172);
      var $C2;
      var $C=(__stackBase__)+(180);
      var $impulse=(__stackBase__)+(192);
      var $12=(__stackBase__)+(204);
      var $P2=(__stackBase__)+(216);
      var $13=(__stackBase__)+(224);
      var $14=(__stackBase__)+(232);
      $1=$this;
      $2=$data;
      var $15=$1;
      var $16=(($15+116)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$2;
      var $19=(($18+24)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+((($17)*(12))&-1))|0);
      var $22=(($21)|0);
      var $23=$cA;
      var $24=$22;
      assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
      var $25=(($15+116)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+((($26)*(12))&-1))|0);
      var $31=(($30+8)|0);
      var $32=HEAPF32[(($31)>>2)];
      $aA=$32;
      var $33=(($15+120)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+((($34)*(12))&-1))|0);
      var $39=(($38)|0);
      var $40=$cB;
      var $41=$39;
      assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
      var $42=(($15+120)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$2;
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+((($43)*(12))&-1))|0);
      var $48=(($47+8)|0);
      var $49=HEAPF32[(($48)>>2)];
      $aB=$49;
      var $50=$aA;
      __ZN5b2RotC1Ef($qA, $50);
      var $51=$aB;
      __ZN5b2RotC1Ef($qB, $51);
      var $52=(($15+156)|0);
      var $53=HEAPF32[(($52)>>2)];
      $mA=$53;
      var $54=(($15+160)|0);
      var $55=HEAPF32[(($54)>>2)];
      $mB=$55;
      var $56=(($15+164)|0);
      var $57=HEAPF32[(($56)>>2)];
      $iA=$57;
      var $58=(($15+168)|0);
      var $59=HEAPF32[(($58)>>2)];
      $iB=$59;
      var $60=(($15+80)|0);
      var $61=(($15+140)|0);
      __ZmiRK6b2Vec2S1_($3, $60, $61);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $62=(($15+88)|0);
      var $63=(($15+148)|0);
      __ZmiRK6b2Vec2S1_($4, $62, $63);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZN7b2Mat33C1Ev($K);
      var $64=$mA;
      var $65=$mB;
      var $66=($64)+($65);
      var $67=(($rA+4)|0);
      var $68=HEAPF32[(($67)>>2)];
      var $69=(($rA+4)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=($68)*($70);
      var $72=$iA;
      var $73=($71)*($72);
      var $74=($66)+($73);
      var $75=(($rB+4)|0);
      var $76=HEAPF32[(($75)>>2)];
      var $77=(($rB+4)|0);
      var $78=HEAPF32[(($77)>>2)];
      var $79=($76)*($78);
      var $80=$iB;
      var $81=($79)*($80);
      var $82=($74)+($81);
      var $83=(($K)|0);
      var $84=(($83)|0);
      HEAPF32[(($84)>>2)]=$82;
      var $85=(($rA+4)|0);
      var $86=HEAPF32[(($85)>>2)];
      var $87=(-$86);
      var $88=(($rA)|0);
      var $89=HEAPF32[(($88)>>2)];
      var $90=($87)*($89);
      var $91=$iA;
      var $92=($90)*($91);
      var $93=(($rB+4)|0);
      var $94=HEAPF32[(($93)>>2)];
      var $95=(($rB)|0);
      var $96=HEAPF32[(($95)>>2)];
      var $97=($94)*($96);
      var $98=$iB;
      var $99=($97)*($98);
      var $100=($92)-($99);
      var $101=(($K+12)|0);
      var $102=(($101)|0);
      HEAPF32[(($102)>>2)]=$100;
      var $103=(($rA+4)|0);
      var $104=HEAPF32[(($103)>>2)];
      var $105=(-$104);
      var $106=$iA;
      var $107=($105)*($106);
      var $108=(($rB+4)|0);
      var $109=HEAPF32[(($108)>>2)];
      var $110=$iB;
      var $111=($109)*($110);
      var $112=($107)-($111);
      var $113=(($K+24)|0);
      var $114=(($113)|0);
      HEAPF32[(($114)>>2)]=$112;
      var $115=(($K+12)|0);
      var $116=(($115)|0);
      var $117=HEAPF32[(($116)>>2)];
      var $118=(($K)|0);
      var $119=(($118+4)|0);
      HEAPF32[(($119)>>2)]=$117;
      var $120=$mA;
      var $121=$mB;
      var $122=($120)+($121);
      var $123=(($rA)|0);
      var $124=HEAPF32[(($123)>>2)];
      var $125=(($rA)|0);
      var $126=HEAPF32[(($125)>>2)];
      var $127=($124)*($126);
      var $128=$iA;
      var $129=($127)*($128);
      var $130=($122)+($129);
      var $131=(($rB)|0);
      var $132=HEAPF32[(($131)>>2)];
      var $133=(($rB)|0);
      var $134=HEAPF32[(($133)>>2)];
      var $135=($132)*($134);
      var $136=$iB;
      var $137=($135)*($136);
      var $138=($130)+($137);
      var $139=(($K+12)|0);
      var $140=(($139+4)|0);
      HEAPF32[(($140)>>2)]=$138;
      var $141=(($rA)|0);
      var $142=HEAPF32[(($141)>>2)];
      var $143=$iA;
      var $144=($142)*($143);
      var $145=(($rB)|0);
      var $146=HEAPF32[(($145)>>2)];
      var $147=$iB;
      var $148=($146)*($147);
      var $149=($144)+($148);
      var $150=(($K+24)|0);
      var $151=(($150+4)|0);
      HEAPF32[(($151)>>2)]=$149;
      var $152=(($K+24)|0);
      var $153=(($152)|0);
      var $154=HEAPF32[(($153)>>2)];
      var $155=(($K)|0);
      var $156=(($155+8)|0);
      HEAPF32[(($156)>>2)]=$154;
      var $157=(($K+24)|0);
      var $158=(($157+4)|0);
      var $159=HEAPF32[(($158)>>2)];
      var $160=(($K+12)|0);
      var $161=(($160+8)|0);
      HEAPF32[(($161)>>2)]=$159;
      var $162=$iA;
      var $163=$iB;
      var $164=($162)+($163);
      var $165=(($K+24)|0);
      var $166=(($165+8)|0);
      HEAPF32[(($166)>>2)]=$164;
      var $167=(($15+68)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=$168 > 0;
      if ($169) { label = 2; break; } else { label = 3; break; }
    case 2: 
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($C1, $5, $rA);
      var $171=__ZNK6b2Vec26LengthEv($C1);
      $positionError=$171;
      $angularError=0;
      __ZNK7b2Mat337Solve22ERK6b2Vec2($7, $K, $C1);
      __ZNK6b2Vec2ngEv($P, $7);
      var $172=$mA;
      __ZmlfRK6b2Vec2($8, $172, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $173=$iA;
      var $174=__Z7b2CrossRK6b2Vec2S1_($rA, $P);
      var $175=($173)*($174);
      var $176=$aA;
      var $177=($176)-($175);
      $aA=$177;
      var $178=$mB;
      __ZmlfRK6b2Vec2($9, $178, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $179=$iB;
      var $180=__Z7b2CrossRK6b2Vec2S1_($rB, $P);
      var $181=($179)*($180);
      var $182=$aB;
      var $183=($182)+($181);
      $aB=$183;
      label = 4; break;
    case 3: 
      __ZplRK6b2Vec2S1_($11, $cB, $rB);
      __ZmiRK6b2Vec2S1_($10, $11, $cA);
      __ZmiRK6b2Vec2S1_($C11, $10, $rA);
      var $185=$aB;
      var $186=$aA;
      var $187=($185)-($186);
      var $188=(($15+96)|0);
      var $189=HEAPF32[(($188)>>2)];
      var $190=($187)-($189);
      $C2=$190;
      var $191=__ZNK6b2Vec26LengthEv($C11);
      $positionError=$191;
      var $192=$C2;
      var $193=__Z5b2AbsIfET_S0_($192);
      $angularError=$193;
      var $194=(($C11)|0);
      var $195=HEAPF32[(($194)>>2)];
      var $196=(($C11+4)|0);
      var $197=HEAPF32[(($196)>>2)];
      var $198=$C2;
      __ZN6b2Vec3C1Efff($C, $195, $197, $198);
      __ZNK7b2Mat337Solve33ERK6b2Vec3($12, $K, $C);
      __ZNK6b2Vec3ngEv($impulse, $12);
      var $199=(($impulse)|0);
      var $200=HEAPF32[(($199)>>2)];
      var $201=(($impulse+4)|0);
      var $202=HEAPF32[(($201)>>2)];
      __ZN6b2Vec2C1Eff($P2, $200, $202);
      var $203=$mA;
      __ZmlfRK6b2Vec2($13, $203, $P2);
      __ZN6b2Vec2mIERKS_($cA, $13);
      var $204=$iA;
      var $205=__Z7b2CrossRK6b2Vec2S1_($rA, $P2);
      var $206=(($impulse+8)|0);
      var $207=HEAPF32[(($206)>>2)];
      var $208=($205)+($207);
      var $209=($204)*($208);
      var $210=$aA;
      var $211=($210)-($209);
      $aA=$211;
      var $212=$mB;
      __ZmlfRK6b2Vec2($14, $212, $P2);
      __ZN6b2Vec2pLERKS_($cB, $14);
      var $213=$iB;
      var $214=__Z7b2CrossRK6b2Vec2S1_($rB, $P2);
      var $215=(($impulse+8)|0);
      var $216=HEAPF32[(($215)>>2)];
      var $217=($214)+($216);
      var $218=($213)*($217);
      var $219=$aB;
      var $220=($219)+($218);
      $aB=$220;
      label = 4; break;
    case 4: 
      var $222=(($15+116)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=$2;
      var $225=(($224+24)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=(($226+((($223)*(12))&-1))|0);
      var $228=(($227)|0);
      var $229=$228;
      var $230=$cA;
      assert(8 % 1 === 0);HEAP32[(($229)>>2)]=HEAP32[(($230)>>2)];HEAP32[((($229)+(4))>>2)]=HEAP32[((($230)+(4))>>2)];
      var $231=$aA;
      var $232=(($15+116)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=$2;
      var $235=(($234+24)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236+((($233)*(12))&-1))|0);
      var $238=(($237+8)|0);
      HEAPF32[(($238)>>2)]=$231;
      var $239=(($15+120)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=$2;
      var $242=(($241+24)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243+((($240)*(12))&-1))|0);
      var $245=(($244)|0);
      var $246=$245;
      var $247=$cB;
      assert(8 % 1 === 0);HEAP32[(($246)>>2)]=HEAP32[(($247)>>2)];HEAP32[((($246)+(4))>>2)]=HEAP32[((($247)+(4))>>2)];
      var $248=$aB;
      var $249=(($15+120)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=$2;
      var $252=(($251+24)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+((($250)*(12))&-1))|0);
      var $255=(($254+8)|0);
      HEAPF32[(($255)>>2)]=$248;
      var $256=$positionError;
      var $257=$256 <= 0.004999999888241291;
      if ($257) { label = 5; break; } else { var $262 = 0;label = 6; break; }
    case 5: 
      var $259=$angularError;
      var $260=$259 <= 0.03490658849477768;
      var $262 = $260;label = 6; break;
    case 6: 
      var $262;
      STACKTOP = __stackBase__;
      return $262;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK11b2WeldJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+80)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK11b2WeldJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+88)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK11b2WeldJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $P=__stackBase__;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=(($3+104)|0);
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($3+104)|0);
  var $8=(($7+4)|0);
  var $9=HEAPF32[(($8)>>2)];
  __ZN6b2Vec2C1Eff($P, $6, $9);
  var $10=$2;
  __ZmlfRK6b2Vec2($agg_result, $10, $P);
  STACKTOP = __stackBase__;
  return;
}
function __ZN11b2WeldJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5250476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5256012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5253144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5250920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+80)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+80)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5249888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+88)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+88)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5249200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+96)|0);
  var $37=HEAPF32[(($36)>>2)];
  var $38=$37;
  __Z5b2LogPKcz(((5248504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$38,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $39=(($2+68)|0);
  var $40=HEAPF32[(($39)>>2)];
  var $41=$40;
  __Z5b2LogPKcz(((5247960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$41,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $42=(($2+72)|0);
  var $43=HEAPF32[(($42)>>2)];
  var $44=$43;
  __Z5b2LogPKcz(((5247528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$44,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $45=$2;
  var $46=(($45+56)|0);
  var $47=HEAP32[(($46)>>2)];
  __Z5b2LogPKcz(((5247120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$47,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN11b2WeldJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN11b2WeldJointD2Ev($2);
  return;
}
function __ZN11b2WeldJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN11b2WeldJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2WeldJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZplRK6b2Vec3S1_($agg_result, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=($5)+($8);
  var $10=$1;
  var $11=(($10+4)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=$2;
  var $14=(($13+4)|0);
  var $15=HEAPF32[(($14)>>2)];
  var $16=($12)+($15);
  var $17=$1;
  var $18=(($17+8)|0);
  var $19=HEAPF32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+8)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=($19)+($22);
  __ZN6b2Vec3C1Efff($agg_result, $9, $16, $23);
  return;
}
function __ZmlfRK6b2Vec3($agg_result, $s, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$s;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($3)*($6);
  var $8=$1;
  var $9=$2;
  var $10=(($9+4)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=($8)*($11);
  var $13=$1;
  var $14=$2;
  var $15=(($14+8)|0);
  var $16=HEAPF32[(($15)>>2)];
  var $17=($13)*($16);
  __ZN6b2Vec3C1Efff($agg_result, $7, $12, $17);
  return;
}
function __ZN15b2WheelJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($this, $bA, $bB, $anchor, $axis) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6=__stackBase__;
  var $7=(__stackBase__)+(8);
  var $8=(__stackBase__)+(16);
  $1=$this;
  $2=$bA;
  $3=$bB;
  $4=$anchor;
  $5=$axis;
  var $9=$1;
  var $10=$2;
  var $11=$9;
  var $12=(($11+8)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$3;
  var $14=$9;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=(($9+20)|0);
  var $17=$9;
  var $18=(($17+8)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($6, $19, $20);
  var $21=$16;
  var $22=$6;
  assert(8 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
  var $23=(($9+28)|0);
  var $24=$9;
  var $25=(($24+12)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$4;
  __ZNK6b2Body13GetLocalPointERK6b2Vec2($7, $26, $27);
  var $28=$23;
  var $29=$7;
  assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
  var $30=(($9+36)|0);
  var $31=$9;
  var $32=(($31+8)|0);
  var $33=HEAP32[(($32)>>2)];
  var $34=$5;
  __ZNK6b2Body14GetLocalVectorERK6b2Vec2($8, $33, $34);
  var $35=$30;
  var $36=$8;
  assert(8 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function __ZN12b2WheelJointC2EPK15b2WheelJointDef($this, $def) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$this;
      $2=$def;
      var $6=$1;
      var $7=$6;
      var $8=$2;
      var $9=$8;
      __ZN7b2JointC2EPK10b2JointDef($7, $9);
      var $10=$6;
      HEAP32[(($10)>>2)]=((5265196)|0);
      var $11=(($6+76)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 13; break; }
    case 2: 
      var $13=(($6+84)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $15=(($6+92)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $17=(($6+100)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $19=(($6+140)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $21=(($6+148)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $23=(($6+172)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $25=(($6+180)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $27=(($6+76)|0);
      var $28=$2;
      var $29=(($28+20)|0);
      var $30=$27;
      var $31=$29;
      assert(8 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];
      var $32=(($6+84)|0);
      var $33=$2;
      var $34=(($33+28)|0);
      var $35=$32;
      var $36=$34;
      assert(8 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
      var $37=(($6+92)|0);
      var $38=$2;
      var $39=(($38+36)|0);
      var $40=$37;
      var $41=$39;
      assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
      var $42=(($6+100)|0);
      var $43=(($6+92)|0);
      (function() { try { __THREW__ = 0; return __Z7b2CrossfRK6b2Vec2($5, 1, $43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $45=$42;
      var $46=$5;
      assert(8 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];
      var $47=(($6+204)|0);
      HEAPF32[(($47)>>2)]=0;
      var $48=(($6+108)|0);
      HEAPF32[(($48)>>2)]=0;
      var $49=(($6+208)|0);
      HEAPF32[(($49)>>2)]=0;
      var $50=(($6+112)|0);
      HEAPF32[(($50)>>2)]=0;
      var $51=(($6+212)|0);
      HEAPF32[(($51)>>2)]=0;
      var $52=(($6+116)|0);
      HEAPF32[(($52)>>2)]=0;
      var $53=$2;
      var $54=(($53+48)|0);
      var $55=HEAPF32[(($54)>>2)];
      var $56=(($6+120)|0);
      HEAPF32[(($56)>>2)]=$55;
      var $57=$2;
      var $58=(($57+52)|0);
      var $59=HEAPF32[(($58)>>2)];
      var $60=(($6+124)|0);
      HEAPF32[(($60)>>2)]=$59;
      var $61=$2;
      var $62=(($61+44)|0);
      var $63=HEAP8[($62)];
      var $64=(($63) & 1);
      var $65=(($6+128)|0);
      var $66=(($64)&(1));
      HEAP8[($65)]=$66;
      var $67=$2;
      var $68=(($67+56)|0);
      var $69=HEAPF32[(($68)>>2)];
      var $70=(($6+68)|0);
      HEAPF32[(($70)>>2)]=$69;
      var $71=$2;
      var $72=(($71+60)|0);
      var $73=HEAPF32[(($72)>>2)];
      var $74=(($6+72)|0);
      HEAPF32[(($74)>>2)]=$73;
      var $75=(($6+216)|0);
      HEAPF32[(($75)>>2)]=0;
      var $76=(($6+220)|0);
      HEAPF32[(($76)>>2)]=0;
      var $77=(($6+172)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $79=(($6+180)|0);
      (function() { try { __THREW__ = 0; return __ZN6b2Vec27SetZeroEv($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
    case 12: 
      STACKTOP = __stackBase__;
      return;
    case 13: 
      var $82$0 = ___cxa_find_matching_catch(-1, -1); $82$1 = tempRet0;
      var $83=$82$0;
      $3=$83;
      var $84=$82$1;
      $4=$84;
      var $85=$6;
      (function() { try { __THREW__ = 0; return __ZN7b2JointD2Ev($85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 16; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $88=$3;
      var $89=$4;
      var $90$0=$88;
      var $90$1=0;
      var $91$0=$90$0;
      var $91$1=$89;
      ___resumeException($91$0)
    case 16: 
      var $93$0 = ___cxa_find_matching_catch(-1, -1,0); $93$1 = tempRet0;
      __ZSt9terminatev();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $mA;
      var $mB;
      var $iA;
      var $iB;
      var $cA=__stackBase__;
      var $aA;
      var $vA=(__stackBase__)+(8);
      var $wA;
      var $cB=(__stackBase__)+(16);
      var $aB;
      var $vB=(__stackBase__)+(24);
      var $wB;
      var $qA=(__stackBase__)+(32);
      var $qB=(__stackBase__)+(40);
      var $rA=(__stackBase__)+(48);
      var $3=(__stackBase__)+(56);
      var $rB=(__stackBase__)+(64);
      var $4=(__stackBase__)+(72);
      var $d=(__stackBase__)+(80);
      var $5=(__stackBase__)+(88);
      var $6=(__stackBase__)+(96);
      var $7=(__stackBase__)+(104);
      var $8=(__stackBase__)+(112);
      var $9=(__stackBase__)+(120);
      var $10=(__stackBase__)+(128);
      var $invMass;
      var $C;
      var $omega;
      var $d1;
      var $k;
      var $h;
      var $P=(__stackBase__)+(136);
      var $11=(__stackBase__)+(144);
      var $12=(__stackBase__)+(152);
      var $LA;
      var $LB;
      var $13=(__stackBase__)+(160);
      var $14=(__stackBase__)+(168);
      $1=$this;
      $2=$data;
      var $15=$1;
      var $16=$15;
      var $17=(($16+48)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($15+132)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=$15;
      var $23=(($22+52)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($15+136)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($15+140)|0);
      var $29=$15;
      var $30=(($29+48)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+28)|0);
      var $33=(($32)|0);
      var $34=$28;
      var $35=$33;
      assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];
      var $36=(($15+148)|0);
      var $37=$15;
      var $38=(($37+52)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+28)|0);
      var $41=(($40)|0);
      var $42=$36;
      var $43=$41;
      assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
      var $44=$15;
      var $45=(($44+48)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+120)|0);
      var $48=HEAPF32[(($47)>>2)];
      var $49=(($15+156)|0);
      HEAPF32[(($49)>>2)]=$48;
      var $50=$15;
      var $51=(($50+52)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+120)|0);
      var $54=HEAPF32[(($53)>>2)];
      var $55=(($15+160)|0);
      HEAPF32[(($55)>>2)]=$54;
      var $56=$15;
      var $57=(($56+48)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+128)|0);
      var $60=HEAPF32[(($59)>>2)];
      var $61=(($15+164)|0);
      HEAPF32[(($61)>>2)]=$60;
      var $62=$15;
      var $63=(($62+52)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+128)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=(($15+168)|0);
      HEAPF32[(($67)>>2)]=$66;
      var $68=(($15+156)|0);
      var $69=HEAPF32[(($68)>>2)];
      $mA=$69;
      var $70=(($15+160)|0);
      var $71=HEAPF32[(($70)>>2)];
      $mB=$71;
      var $72=(($15+164)|0);
      var $73=HEAPF32[(($72)>>2)];
      $iA=$73;
      var $74=(($15+168)|0);
      var $75=HEAPF32[(($74)>>2)];
      $iB=$75;
      var $76=(($15+132)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$2;
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+((($77)*(12))&-1))|0);
      var $82=(($81)|0);
      var $83=$cA;
      var $84=$82;
      assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];
      var $85=(($15+132)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+((($86)*(12))&-1))|0);
      var $91=(($90+8)|0);
      var $92=HEAPF32[(($91)>>2)];
      $aA=$92;
      var $93=(($15+132)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$2;
      var $96=(($95+28)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+((($94)*(12))&-1))|0);
      var $99=(($98)|0);
      var $100=$vA;
      var $101=$99;
      assert(8 % 1 === 0);HEAP32[(($100)>>2)]=HEAP32[(($101)>>2)];HEAP32[((($100)+(4))>>2)]=HEAP32[((($101)+(4))>>2)];
      var $102=(($15+132)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+28)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+((($103)*(12))&-1))|0);
      var $108=(($107+8)|0);
      var $109=HEAPF32[(($108)>>2)];
      $wA=$109;
      var $110=(($15+136)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$2;
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+((($111)*(12))&-1))|0);
      var $116=(($115)|0);
      var $117=$cB;
      var $118=$116;
      assert(8 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];
      var $119=(($15+136)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$2;
      var $122=(($121+24)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+((($120)*(12))&-1))|0);
      var $125=(($124+8)|0);
      var $126=HEAPF32[(($125)>>2)];
      $aB=$126;
      var $127=(($15+136)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=(($129+28)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+((($128)*(12))&-1))|0);
      var $133=(($132)|0);
      var $134=$vB;
      var $135=$133;
      assert(8 % 1 === 0);HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[((($134)+(4))>>2)]=HEAP32[((($135)+(4))>>2)];
      var $136=(($15+136)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$2;
      var $139=(($138+28)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+((($137)*(12))&-1))|0);
      var $142=(($141+8)|0);
      var $143=HEAPF32[(($142)>>2)];
      $wB=$143;
      var $144=$aA;
      __ZN5b2RotC1Ef($qA, $144);
      var $145=$aB;
      __ZN5b2RotC1Ef($qB, $145);
      var $146=(($15+76)|0);
      var $147=(($15+140)|0);
      __ZmiRK6b2Vec2S1_($3, $146, $147);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $148=(($15+84)|0);
      var $149=(($15+148)|0);
      __ZmiRK6b2Vec2S1_($4, $148, $149);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZplRK6b2Vec2S1_($6, $cB, $rB);
      __ZmiRK6b2Vec2S1_($5, $6, $cA);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $150=(($15+180)|0);
      var $151=(($15+100)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($7, $qA, $151);
      var $152=$150;
      var $153=$7;
      assert(8 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];
      __ZplRK6b2Vec2S1_($8, $d, $rA);
      var $154=(($15+180)|0);
      var $155=__Z7b2CrossRK6b2Vec2S1_($8, $154);
      var $156=(($15+196)|0);
      HEAPF32[(($156)>>2)]=$155;
      var $157=(($15+180)|0);
      var $158=__Z7b2CrossRK6b2Vec2S1_($rB, $157);
      var $159=(($15+200)|0);
      HEAPF32[(($159)>>2)]=$158;
      var $160=$mA;
      var $161=$mB;
      var $162=($160)+($161);
      var $163=$iA;
      var $164=(($15+196)|0);
      var $165=HEAPF32[(($164)>>2)];
      var $166=($163)*($165);
      var $167=(($15+196)|0);
      var $168=HEAPF32[(($167)>>2)];
      var $169=($166)*($168);
      var $170=($162)+($169);
      var $171=$iB;
      var $172=(($15+200)|0);
      var $173=HEAPF32[(($172)>>2)];
      var $174=($171)*($173);
      var $175=(($15+200)|0);
      var $176=HEAPF32[(($175)>>2)];
      var $177=($174)*($176);
      var $178=($170)+($177);
      var $179=(($15+204)|0);
      HEAPF32[(($179)>>2)]=$178;
      var $180=(($15+204)|0);
      var $181=HEAPF32[(($180)>>2)];
      var $182=$181 > 0;
      if ($182) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $184=(($15+204)|0);
      var $185=HEAPF32[(($184)>>2)];
      var $186=(1)/($185);
      var $187=(($15+204)|0);
      HEAPF32[(($187)>>2)]=$186;
      label = 3; break;
    case 3: 
      var $189=(($15+212)|0);
      HEAPF32[(($189)>>2)]=0;
      var $190=(($15+216)|0);
      HEAPF32[(($190)>>2)]=0;
      var $191=(($15+220)|0);
      HEAPF32[(($191)>>2)]=0;
      var $192=(($15+68)|0);
      var $193=HEAPF32[(($192)>>2)];
      var $194=$193 > 0;
      if ($194) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $196=(($15+172)|0);
      var $197=(($15+92)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($9, $qA, $197);
      var $198=$196;
      var $199=$9;
      assert(8 % 1 === 0);HEAP32[(($198)>>2)]=HEAP32[(($199)>>2)];HEAP32[((($198)+(4))>>2)]=HEAP32[((($199)+(4))>>2)];
      __ZplRK6b2Vec2S1_($10, $d, $rA);
      var $200=(($15+172)|0);
      var $201=__Z7b2CrossRK6b2Vec2S1_($10, $200);
      var $202=(($15+188)|0);
      HEAPF32[(($202)>>2)]=$201;
      var $203=(($15+172)|0);
      var $204=__Z7b2CrossRK6b2Vec2S1_($rB, $203);
      var $205=(($15+192)|0);
      HEAPF32[(($205)>>2)]=$204;
      var $206=$mA;
      var $207=$mB;
      var $208=($206)+($207);
      var $209=$iA;
      var $210=(($15+188)|0);
      var $211=HEAPF32[(($210)>>2)];
      var $212=($209)*($211);
      var $213=(($15+188)|0);
      var $214=HEAPF32[(($213)>>2)];
      var $215=($212)*($214);
      var $216=($208)+($215);
      var $217=$iB;
      var $218=(($15+192)|0);
      var $219=HEAPF32[(($218)>>2)];
      var $220=($217)*($219);
      var $221=(($15+192)|0);
      var $222=HEAPF32[(($221)>>2)];
      var $223=($220)*($222);
      var $224=($216)+($223);
      $invMass=$224;
      var $225=$invMass;
      var $226=$225 > 0;
      if ($226) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $228=$invMass;
      var $229=(1)/($228);
      var $230=(($15+212)|0);
      HEAPF32[(($230)>>2)]=$229;
      var $231=(($15+172)|0);
      var $232=__Z5b2DotRK6b2Vec2S1_($d, $231);
      $C=$232;
      var $233=(($15+68)|0);
      var $234=HEAPF32[(($233)>>2)];
      var $235=($234)*(6.2831854820251465);
      $omega=$235;
      var $236=(($15+212)|0);
      var $237=HEAPF32[(($236)>>2)];
      var $238=($237)*(2);
      var $239=(($15+72)|0);
      var $240=HEAPF32[(($239)>>2)];
      var $241=($238)*($240);
      var $242=$omega;
      var $243=($241)*($242);
      $d1=$243;
      var $244=(($15+212)|0);
      var $245=HEAPF32[(($244)>>2)];
      var $246=$omega;
      var $247=($245)*($246);
      var $248=$omega;
      var $249=($247)*($248);
      $k=$249;
      var $250=$2;
      var $251=(($250)|0);
      var $252=(($251)|0);
      var $253=HEAPF32[(($252)>>2)];
      $h=$253;
      var $254=$h;
      var $255=$d1;
      var $256=$h;
      var $257=$k;
      var $258=($256)*($257);
      var $259=($255)+($258);
      var $260=($254)*($259);
      var $261=(($15+220)|0);
      HEAPF32[(($261)>>2)]=$260;
      var $262=(($15+220)|0);
      var $263=HEAPF32[(($262)>>2)];
      var $264=$263 > 0;
      if ($264) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $266=(($15+220)|0);
      var $267=HEAPF32[(($266)>>2)];
      var $268=(1)/($267);
      var $269=(($15+220)|0);
      HEAPF32[(($269)>>2)]=$268;
      label = 7; break;
    case 7: 
      var $271=$C;
      var $272=$h;
      var $273=($271)*($272);
      var $274=$k;
      var $275=($273)*($274);
      var $276=(($15+220)|0);
      var $277=HEAPF32[(($276)>>2)];
      var $278=($275)*($277);
      var $279=(($15+216)|0);
      HEAPF32[(($279)>>2)]=$278;
      var $280=$invMass;
      var $281=(($15+220)|0);
      var $282=HEAPF32[(($281)>>2)];
      var $283=($280)+($282);
      var $284=(($15+212)|0);
      HEAPF32[(($284)>>2)]=$283;
      var $285=(($15+212)|0);
      var $286=HEAPF32[(($285)>>2)];
      var $287=$286 > 0;
      if ($287) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $289=(($15+212)|0);
      var $290=HEAPF32[(($289)>>2)];
      var $291=(1)/($290);
      var $292=(($15+212)|0);
      HEAPF32[(($292)>>2)]=$291;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 12; break;
    case 11: 
      var $296=(($15+116)|0);
      HEAPF32[(($296)>>2)]=0;
      label = 12; break;
    case 12: 
      var $298=(($15+128)|0);
      var $299=HEAP8[($298)];
      var $300=(($299) & 1);
      if ($300) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $302=$iA;
      var $303=$iB;
      var $304=($302)+($303);
      var $305=(($15+208)|0);
      HEAPF32[(($305)>>2)]=$304;
      var $306=(($15+208)|0);
      var $307=HEAPF32[(($306)>>2)];
      var $308=$307 > 0;
      if ($308) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $310=(($15+208)|0);
      var $311=HEAPF32[(($310)>>2)];
      var $312=(1)/($311);
      var $313=(($15+208)|0);
      HEAPF32[(($313)>>2)]=$312;
      label = 15; break;
    case 15: 
      label = 17; break;
    case 16: 
      var $316=(($15+208)|0);
      HEAPF32[(($316)>>2)]=0;
      var $317=(($15+112)|0);
      HEAPF32[(($317)>>2)]=0;
      label = 17; break;
    case 17: 
      var $319=$2;
      var $320=(($319)|0);
      var $321=(($320+20)|0);
      var $322=HEAP8[($321)];
      var $323=(($322) & 1);
      if ($323) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $325=$2;
      var $326=(($325)|0);
      var $327=(($326+8)|0);
      var $328=HEAPF32[(($327)>>2)];
      var $329=(($15+108)|0);
      var $330=HEAPF32[(($329)>>2)];
      var $331=($330)*($328);
      HEAPF32[(($329)>>2)]=$331;
      var $332=$2;
      var $333=(($332)|0);
      var $334=(($333+8)|0);
      var $335=HEAPF32[(($334)>>2)];
      var $336=(($15+116)|0);
      var $337=HEAPF32[(($336)>>2)];
      var $338=($337)*($335);
      HEAPF32[(($336)>>2)]=$338;
      var $339=$2;
      var $340=(($339)|0);
      var $341=(($340+8)|0);
      var $342=HEAPF32[(($341)>>2)];
      var $343=(($15+112)|0);
      var $344=HEAPF32[(($343)>>2)];
      var $345=($344)*($342);
      HEAPF32[(($343)>>2)]=$345;
      var $346=(($15+108)|0);
      var $347=HEAPF32[(($346)>>2)];
      var $348=(($15+180)|0);
      __ZmlfRK6b2Vec2($11, $347, $348);
      var $349=(($15+116)|0);
      var $350=HEAPF32[(($349)>>2)];
      var $351=(($15+172)|0);
      __ZmlfRK6b2Vec2($12, $350, $351);
      __ZplRK6b2Vec2S1_($P, $11, $12);
      var $352=(($15+108)|0);
      var $353=HEAPF32[(($352)>>2)];
      var $354=(($15+196)|0);
      var $355=HEAPF32[(($354)>>2)];
      var $356=($353)*($355);
      var $357=(($15+116)|0);
      var $358=HEAPF32[(($357)>>2)];
      var $359=(($15+188)|0);
      var $360=HEAPF32[(($359)>>2)];
      var $361=($358)*($360);
      var $362=($356)+($361);
      var $363=(($15+112)|0);
      var $364=HEAPF32[(($363)>>2)];
      var $365=($362)+($364);
      $LA=$365;
      var $366=(($15+108)|0);
      var $367=HEAPF32[(($366)>>2)];
      var $368=(($15+200)|0);
      var $369=HEAPF32[(($368)>>2)];
      var $370=($367)*($369);
      var $371=(($15+116)|0);
      var $372=HEAPF32[(($371)>>2)];
      var $373=(($15+192)|0);
      var $374=HEAPF32[(($373)>>2)];
      var $375=($372)*($374);
      var $376=($370)+($375);
      var $377=(($15+112)|0);
      var $378=HEAPF32[(($377)>>2)];
      var $379=($376)+($378);
      $LB=$379;
      var $380=(($15+156)|0);
      var $381=HEAPF32[(($380)>>2)];
      __ZmlfRK6b2Vec2($13, $381, $P);
      __ZN6b2Vec2mIERKS_($vA, $13);
      var $382=(($15+164)|0);
      var $383=HEAPF32[(($382)>>2)];
      var $384=$LA;
      var $385=($383)*($384);
      var $386=$wA;
      var $387=($386)-($385);
      $wA=$387;
      var $388=(($15+160)|0);
      var $389=HEAPF32[(($388)>>2)];
      __ZmlfRK6b2Vec2($14, $389, $P);
      __ZN6b2Vec2pLERKS_($vB, $14);
      var $390=(($15+168)|0);
      var $391=HEAPF32[(($390)>>2)];
      var $392=$LB;
      var $393=($391)*($392);
      var $394=$wB;
      var $395=($394)+($393);
      $wB=$395;
      label = 20; break;
    case 19: 
      var $397=(($15+108)|0);
      HEAPF32[(($397)>>2)]=0;
      var $398=(($15+116)|0);
      HEAPF32[(($398)>>2)]=0;
      var $399=(($15+112)|0);
      HEAPF32[(($399)>>2)]=0;
      label = 20; break;
    case 20: 
      var $401=(($15+132)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$2;
      var $404=(($403+28)|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=(($405+((($402)*(12))&-1))|0);
      var $407=(($406)|0);
      var $408=$407;
      var $409=$vA;
      assert(8 % 1 === 0);HEAP32[(($408)>>2)]=HEAP32[(($409)>>2)];HEAP32[((($408)+(4))>>2)]=HEAP32[((($409)+(4))>>2)];
      var $410=$wA;
      var $411=(($15+132)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$2;
      var $414=(($413+28)|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=(($415+((($412)*(12))&-1))|0);
      var $417=(($416+8)|0);
      HEAPF32[(($417)>>2)]=$410;
      var $418=(($15+136)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=$2;
      var $421=(($420+28)|0);
      var $422=HEAP32[(($421)>>2)];
      var $423=(($422+((($419)*(12))&-1))|0);
      var $424=(($423)|0);
      var $425=$424;
      var $426=$vB;
      assert(8 % 1 === 0);HEAP32[(($425)>>2)]=HEAP32[(($426)>>2)];HEAP32[((($425)+(4))>>2)]=HEAP32[((($426)+(4))>>2)];
      var $427=$wB;
      var $428=(($15+136)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=$2;
      var $431=(($430+28)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($432+((($429)*(12))&-1))|0);
      var $434=(($433+8)|0);
      HEAPF32[(($434)>>2)]=$427;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $mA;
  var $mB;
  var $iA;
  var $iB;
  var $vA=__stackBase__;
  var $wA;
  var $vB=(__stackBase__)+(8);
  var $wB;
  var $Cdot;
  var $3=(__stackBase__)+(16);
  var $impulse;
  var $P=(__stackBase__)+(24);
  var $LA;
  var $LB;
  var $4=(__stackBase__)+(32);
  var $5=(__stackBase__)+(40);
  var $Cdot1;
  var $impulse2;
  var $oldImpulse;
  var $maxImpulse;
  var $Cdot3;
  var $6=(__stackBase__)+(48);
  var $impulse4;
  var $P5=(__stackBase__)+(56);
  var $LA6;
  var $LB7;
  var $7=(__stackBase__)+(64);
  var $8=(__stackBase__)+(72);
  $1=$this;
  $2=$data;
  var $9=$1;
  var $10=(($9+156)|0);
  var $11=HEAPF32[(($10)>>2)];
  $mA=$11;
  var $12=(($9+160)|0);
  var $13=HEAPF32[(($12)>>2)];
  $mB=$13;
  var $14=(($9+164)|0);
  var $15=HEAPF32[(($14)>>2)];
  $iA=$15;
  var $16=(($9+168)|0);
  var $17=HEAPF32[(($16)>>2)];
  $iB=$17;
  var $18=(($9+132)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=$2;
  var $21=(($20+28)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=(($22+((($19)*(12))&-1))|0);
  var $24=(($23)|0);
  var $25=$vA;
  var $26=$24;
  assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
  var $27=(($9+132)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=$2;
  var $30=(($29+28)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+((($28)*(12))&-1))|0);
  var $33=(($32+8)|0);
  var $34=HEAPF32[(($33)>>2)];
  $wA=$34;
  var $35=(($9+136)|0);
  var $36=HEAP32[(($35)>>2)];
  var $37=$2;
  var $38=(($37+28)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=(($39+((($36)*(12))&-1))|0);
  var $41=(($40)|0);
  var $42=$vB;
  var $43=$41;
  assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
  var $44=(($9+136)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$2;
  var $47=(($46+28)|0);
  var $48=HEAP32[(($47)>>2)];
  var $49=(($48+((($45)*(12))&-1))|0);
  var $50=(($49+8)|0);
  var $51=HEAPF32[(($50)>>2)];
  $wB=$51;
  var $52=(($9+172)|0);
  __ZmiRK6b2Vec2S1_($3, $vB, $vA);
  var $53=__Z5b2DotRK6b2Vec2S1_($52, $3);
  var $54=(($9+192)|0);
  var $55=HEAPF32[(($54)>>2)];
  var $56=$wB;
  var $57=($55)*($56);
  var $58=($53)+($57);
  var $59=(($9+188)|0);
  var $60=HEAPF32[(($59)>>2)];
  var $61=$wA;
  var $62=($60)*($61);
  var $63=($58)-($62);
  $Cdot=$63;
  var $64=(($9+212)|0);
  var $65=HEAPF32[(($64)>>2)];
  var $66=(-$65);
  var $67=$Cdot;
  var $68=(($9+216)|0);
  var $69=HEAPF32[(($68)>>2)];
  var $70=($67)+($69);
  var $71=(($9+220)|0);
  var $72=HEAPF32[(($71)>>2)];
  var $73=(($9+116)|0);
  var $74=HEAPF32[(($73)>>2)];
  var $75=($72)*($74);
  var $76=($70)+($75);
  var $77=($66)*($76);
  $impulse=$77;
  var $78=$impulse;
  var $79=(($9+116)|0);
  var $80=HEAPF32[(($79)>>2)];
  var $81=($80)+($78);
  HEAPF32[(($79)>>2)]=$81;
  var $82=$impulse;
  var $83=(($9+172)|0);
  __ZmlfRK6b2Vec2($P, $82, $83);
  var $84=$impulse;
  var $85=(($9+188)|0);
  var $86=HEAPF32[(($85)>>2)];
  var $87=($84)*($86);
  $LA=$87;
  var $88=$impulse;
  var $89=(($9+192)|0);
  var $90=HEAPF32[(($89)>>2)];
  var $91=($88)*($90);
  $LB=$91;
  var $92=$mA;
  __ZmlfRK6b2Vec2($4, $92, $P);
  __ZN6b2Vec2mIERKS_($vA, $4);
  var $93=$iA;
  var $94=$LA;
  var $95=($93)*($94);
  var $96=$wA;
  var $97=($96)-($95);
  $wA=$97;
  var $98=$mB;
  __ZmlfRK6b2Vec2($5, $98, $P);
  __ZN6b2Vec2pLERKS_($vB, $5);
  var $99=$iB;
  var $100=$LB;
  var $101=($99)*($100);
  var $102=$wB;
  var $103=($102)+($101);
  $wB=$103;
  var $104=$wB;
  var $105=$wA;
  var $106=($104)-($105);
  var $107=(($9+124)|0);
  var $108=HEAPF32[(($107)>>2)];
  var $109=($106)-($108);
  $Cdot1=$109;
  var $110=(($9+208)|0);
  var $111=HEAPF32[(($110)>>2)];
  var $112=(-$111);
  var $113=$Cdot1;
  var $114=($112)*($113);
  $impulse2=$114;
  var $115=(($9+112)|0);
  var $116=HEAPF32[(($115)>>2)];
  $oldImpulse=$116;
  var $117=$2;
  var $118=(($117)|0);
  var $119=(($118)|0);
  var $120=HEAPF32[(($119)>>2)];
  var $121=(($9+120)|0);
  var $122=HEAPF32[(($121)>>2)];
  var $123=($120)*($122);
  $maxImpulse=$123;
  var $124=(($9+112)|0);
  var $125=HEAPF32[(($124)>>2)];
  var $126=$impulse2;
  var $127=($125)+($126);
  var $128=$maxImpulse;
  var $129=(-$128);
  var $130=$maxImpulse;
  var $131=__Z7b2ClampIfET_S0_S0_S0_($127, $129, $130);
  var $132=(($9+112)|0);
  HEAPF32[(($132)>>2)]=$131;
  var $133=(($9+112)|0);
  var $134=HEAPF32[(($133)>>2)];
  var $135=$oldImpulse;
  var $136=($134)-($135);
  $impulse2=$136;
  var $137=$iA;
  var $138=$impulse2;
  var $139=($137)*($138);
  var $140=$wA;
  var $141=($140)-($139);
  $wA=$141;
  var $142=$iB;
  var $143=$impulse2;
  var $144=($142)*($143);
  var $145=$wB;
  var $146=($145)+($144);
  $wB=$146;
  var $147=(($9+180)|0);
  __ZmiRK6b2Vec2S1_($6, $vB, $vA);
  var $148=__Z5b2DotRK6b2Vec2S1_($147, $6);
  var $149=(($9+200)|0);
  var $150=HEAPF32[(($149)>>2)];
  var $151=$wB;
  var $152=($150)*($151);
  var $153=($148)+($152);
  var $154=(($9+196)|0);
  var $155=HEAPF32[(($154)>>2)];
  var $156=$wA;
  var $157=($155)*($156);
  var $158=($153)-($157);
  $Cdot3=$158;
  var $159=(($9+204)|0);
  var $160=HEAPF32[(($159)>>2)];
  var $161=(-$160);
  var $162=$Cdot3;
  var $163=($161)*($162);
  $impulse4=$163;
  var $164=$impulse4;
  var $165=(($9+108)|0);
  var $166=HEAPF32[(($165)>>2)];
  var $167=($166)+($164);
  HEAPF32[(($165)>>2)]=$167;
  var $168=$impulse4;
  var $169=(($9+180)|0);
  __ZmlfRK6b2Vec2($P5, $168, $169);
  var $170=$impulse4;
  var $171=(($9+196)|0);
  var $172=HEAPF32[(($171)>>2)];
  var $173=($170)*($172);
  $LA6=$173;
  var $174=$impulse4;
  var $175=(($9+200)|0);
  var $176=HEAPF32[(($175)>>2)];
  var $177=($174)*($176);
  $LB7=$177;
  var $178=$mA;
  __ZmlfRK6b2Vec2($7, $178, $P5);
  __ZN6b2Vec2mIERKS_($vA, $7);
  var $179=$iA;
  var $180=$LA6;
  var $181=($179)*($180);
  var $182=$wA;
  var $183=($182)-($181);
  $wA=$183;
  var $184=$mB;
  __ZmlfRK6b2Vec2($8, $184, $P5);
  __ZN6b2Vec2pLERKS_($vB, $8);
  var $185=$iB;
  var $186=$LB7;
  var $187=($185)*($186);
  var $188=$wB;
  var $189=($188)+($187);
  $wB=$189;
  var $190=(($9+132)|0);
  var $191=HEAP32[(($190)>>2)];
  var $192=$2;
  var $193=(($192+28)|0);
  var $194=HEAP32[(($193)>>2)];
  var $195=(($194+((($191)*(12))&-1))|0);
  var $196=(($195)|0);
  var $197=$196;
  var $198=$vA;
  assert(8 % 1 === 0);HEAP32[(($197)>>2)]=HEAP32[(($198)>>2)];HEAP32[((($197)+(4))>>2)]=HEAP32[((($198)+(4))>>2)];
  var $199=$wA;
  var $200=(($9+132)|0);
  var $201=HEAP32[(($200)>>2)];
  var $202=$2;
  var $203=(($202+28)|0);
  var $204=HEAP32[(($203)>>2)];
  var $205=(($204+((($201)*(12))&-1))|0);
  var $206=(($205+8)|0);
  HEAPF32[(($206)>>2)]=$199;
  var $207=(($9+136)|0);
  var $208=HEAP32[(($207)>>2)];
  var $209=$2;
  var $210=(($209+28)|0);
  var $211=HEAP32[(($210)>>2)];
  var $212=(($211+((($208)*(12))&-1))|0);
  var $213=(($212)|0);
  var $214=$213;
  var $215=$vB;
  assert(8 % 1 === 0);HEAP32[(($214)>>2)]=HEAP32[(($215)>>2)];HEAP32[((($214)+(4))>>2)]=HEAP32[((($215)+(4))>>2)];
  var $216=$wB;
  var $217=(($9+136)|0);
  var $218=HEAP32[(($217)>>2)];
  var $219=$2;
  var $220=(($219+28)|0);
  var $221=HEAP32[(($220)>>2)];
  var $222=(($221+((($218)*(12))&-1))|0);
  var $223=(($222+8)|0);
  HEAPF32[(($223)>>2)]=$216;
  STACKTOP = __stackBase__;
  return;
}
function __ZNK12b2WheelJoint17GetReactionTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+112)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  return $7;
}
function __ZNK12b2WheelJoint13GetJointSpeedEv($this) {
  var label = 0;
  var $1;
  var $wA;
  var $wB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+72)|0);
  var $7=HEAPF32[(($6)>>2)];
  $wA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+72)|0);
  var $12=HEAPF32[(($11)>>2)];
  $wB=$12;
  var $13=$wB;
  var $14=$wA;
  var $15=($13)-($14);
  return $15;
}
function __ZNK12b2WheelJoint14IsMotorEnabledEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+128)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZNK12b2WheelJoint14GetMotorTorqueEf($this, $inv_dt) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$inv_dt;
  var $3=$1;
  var $4=$2;
  var $5=(($3+112)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  return $7;
}
function _emscripten_bind_b2ContactManager__get_m_contactFilter_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ContactManager__get_m_contactCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ContactManager__set_m_contactFilter_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+68)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactManager__set_m_allocator_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+76)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactManager__set_m_contactCount_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+64)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactManager__set_m_contactList_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactManager__get_m_contactListener_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ContactManager__set_m_contactListener_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+72)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactManager__get_m_broadPhase_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  return $3;
}
function _emscripten_bind_b2ContactManager__get_m_contactList_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ContactManager__get_m_allocator_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN15b2DistanceJoint12SetFrequencyEf($this, $hz) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$hz;
  var $3=$1;
  var $4=$2;
  var $5=(($3+68)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK7b2Joint11GetUserDataEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN7b2Joint11SetUserDataEPv($this, $data) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  var $5=(($3+64)|0);
  HEAP32[(($5)>>2)]=$4;
  return;
}
function __ZNK15b2DistanceJoint15GetLocalAnchorAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+80)|0);
  return $3;
}
function __ZNK15b2DistanceJoint15GetLocalAnchorBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+88)|0);
  return $3;
}
function __ZNK15b2DistanceJoint12GetFrequencyEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cA=__stackBase__;
      var $aA;
      var $cB=(__stackBase__)+(8);
      var $aB;
      var $qA=(__stackBase__)+(16);
      var $qB=(__stackBase__)+(24);
      var $rA=(__stackBase__)+(32);
      var $3=(__stackBase__)+(40);
      var $rB=(__stackBase__)+(48);
      var $4=(__stackBase__)+(56);
      var $d=(__stackBase__)+(64);
      var $5=(__stackBase__)+(72);
      var $6=(__stackBase__)+(80);
      var $ay=(__stackBase__)+(88);
      var $sAy;
      var $7=(__stackBase__)+(96);
      var $sBy;
      var $C;
      var $k;
      var $impulse;
      var $P=(__stackBase__)+(104);
      var $LA;
      var $LB;
      var $8=(__stackBase__)+(112);
      var $9=(__stackBase__)+(120);
      $1=$this;
      $2=$data;
      var $10=$1;
      var $11=(($10+132)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+((($12)*(12))&-1))|0);
      var $17=(($16)|0);
      var $18=$cA;
      var $19=$17;
      assert(8 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
      var $20=(($10+132)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+24)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+((($21)*(12))&-1))|0);
      var $26=(($25+8)|0);
      var $27=HEAPF32[(($26)>>2)];
      $aA=$27;
      var $28=(($10+136)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+((($29)*(12))&-1))|0);
      var $34=(($33)|0);
      var $35=$cB;
      var $36=$34;
      assert(8 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
      var $37=(($10+136)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+((($38)*(12))&-1))|0);
      var $43=(($42+8)|0);
      var $44=HEAPF32[(($43)>>2)];
      $aB=$44;
      var $45=$aA;
      __ZN5b2RotC1Ef($qA, $45);
      var $46=$aB;
      __ZN5b2RotC1Ef($qB, $46);
      var $47=(($10+76)|0);
      var $48=(($10+140)|0);
      __ZmiRK6b2Vec2S1_($3, $47, $48);
      __Z5b2MulRK5b2RotRK6b2Vec2($rA, $qA, $3);
      var $49=(($10+84)|0);
      var $50=(($10+148)|0);
      __ZmiRK6b2Vec2S1_($4, $49, $50);
      __Z5b2MulRK5b2RotRK6b2Vec2($rB, $qB, $4);
      __ZmiRK6b2Vec2S1_($6, $cB, $cA);
      __ZplRK6b2Vec2S1_($5, $6, $rB);
      __ZmiRK6b2Vec2S1_($d, $5, $rA);
      var $51=(($10+100)|0);
      __Z5b2MulRK5b2RotRK6b2Vec2($ay, $qA, $51);
      __ZplRK6b2Vec2S1_($7, $d, $rA);
      var $52=__Z7b2CrossRK6b2Vec2S1_($7, $ay);
      $sAy=$52;
      var $53=__Z7b2CrossRK6b2Vec2S1_($rB, $ay);
      $sBy=$53;
      var $54=__Z5b2DotRK6b2Vec2S1_($d, $ay);
      $C=$54;
      var $55=(($10+156)|0);
      var $56=HEAPF32[(($55)>>2)];
      var $57=(($10+160)|0);
      var $58=HEAPF32[(($57)>>2)];
      var $59=($56)+($58);
      var $60=(($10+164)|0);
      var $61=HEAPF32[(($60)>>2)];
      var $62=(($10+196)|0);
      var $63=HEAPF32[(($62)>>2)];
      var $64=($61)*($63);
      var $65=(($10+196)|0);
      var $66=HEAPF32[(($65)>>2)];
      var $67=($64)*($66);
      var $68=($59)+($67);
      var $69=(($10+168)|0);
      var $70=HEAPF32[(($69)>>2)];
      var $71=(($10+200)|0);
      var $72=HEAPF32[(($71)>>2)];
      var $73=($70)*($72);
      var $74=(($10+200)|0);
      var $75=HEAPF32[(($74)>>2)];
      var $76=($73)*($75);
      var $77=($68)+($76);
      $k=$77;
      var $78=$k;
      var $79=$78 != 0;
      if ($79) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $81=$C;
      var $82=(-$81);
      var $83=$k;
      var $84=($82)/($83);
      $impulse=$84;
      label = 4; break;
    case 3: 
      $impulse=0;
      label = 4; break;
    case 4: 
      var $87=$impulse;
      __ZmlfRK6b2Vec2($P, $87, $ay);
      var $88=$impulse;
      var $89=$sAy;
      var $90=($88)*($89);
      $LA=$90;
      var $91=$impulse;
      var $92=$sBy;
      var $93=($91)*($92);
      $LB=$93;
      var $94=(($10+156)|0);
      var $95=HEAPF32[(($94)>>2)];
      __ZmlfRK6b2Vec2($8, $95, $P);
      __ZN6b2Vec2mIERKS_($cA, $8);
      var $96=(($10+164)|0);
      var $97=HEAPF32[(($96)>>2)];
      var $98=$LA;
      var $99=($97)*($98);
      var $100=$aA;
      var $101=($100)-($99);
      $aA=$101;
      var $102=(($10+160)|0);
      var $103=HEAPF32[(($102)>>2)];
      __ZmlfRK6b2Vec2($9, $103, $P);
      __ZN6b2Vec2pLERKS_($cB, $9);
      var $104=(($10+168)|0);
      var $105=HEAPF32[(($104)>>2)];
      var $106=$LB;
      var $107=($105)*($106);
      var $108=$aB;
      var $109=($108)+($107);
      $aB=$109;
      var $110=(($10+132)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$2;
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+((($111)*(12))&-1))|0);
      var $116=(($115)|0);
      var $117=$116;
      var $118=$cA;
      assert(8 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];
      var $119=$aA;
      var $120=(($10+132)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$2;
      var $123=(($122+24)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+((($121)*(12))&-1))|0);
      var $126=(($125+8)|0);
      HEAPF32[(($126)>>2)]=$119;
      var $127=(($10+136)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=(($129+24)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+((($128)*(12))&-1))|0);
      var $133=(($132)|0);
      var $134=$133;
      var $135=$cB;
      assert(8 % 1 === 0);HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[((($134)+(4))>>2)]=HEAP32[((($135)+(4))>>2)];
      var $136=$aB;
      var $137=(($10+136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$2;
      var $140=(($139+24)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+((($138)*(12))&-1))|0);
      var $143=(($142+8)|0);
      HEAPF32[(($143)>>2)]=$136;
      var $144=$C;
      var $145=__Z5b2AbsIfET_S0_($144);
      var $146=$145 <= 0.004999999888241291;
      STACKTOP = __stackBase__;
      return $146;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK12b2WheelJoint10GetAnchorAEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK12b2WheelJoint10GetAnchorBEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($2+84)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($agg_result, $5, $6);
  return;
}
function __ZNK12b2WheelJoint16GetReactionForceEf($agg_result, $this, $inv_dt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(8);
  var $5=(__stackBase__)+(16);
  $1=$this;
  $2=$inv_dt;
  var $6=$1;
  var $7=$2;
  var $8=(($6+108)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=(($6+180)|0);
  __ZmlfRK6b2Vec2($4, $9, $10);
  var $11=(($6+116)|0);
  var $12=HEAPF32[(($11)>>2)];
  var $13=(($6+172)|0);
  __ZmlfRK6b2Vec2($5, $12, $13);
  __ZplRK6b2Vec2S1_($3, $4, $5);
  __ZmlfRK6b2Vec2($agg_result, $7, $3);
  STACKTOP = __stackBase__;
  return;
}
function __ZNK12b2WheelJoint19GetJointTranslationEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $bA;
  var $bB;
  var $pA=__stackBase__;
  var $pB=(__stackBase__)+(8);
  var $d=(__stackBase__)+(16);
  var $axis=(__stackBase__)+(24);
  var $translation;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  $bA=$5;
  var $6=$2;
  var $7=(($6+52)|0);
  var $8=HEAP32[(($7)>>2)];
  $bB=$8;
  var $9=$bA;
  var $10=(($2+76)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pA, $9, $10);
  var $11=$bB;
  var $12=(($2+84)|0);
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($pB, $11, $12);
  __ZmiRK6b2Vec2S1_($d, $pB, $pA);
  var $13=$bA;
  var $14=(($2+92)|0);
  __ZNK6b2Body14GetWorldVectorERK6b2Vec2($axis, $13, $14);
  var $15=__Z5b2DotRK6b2Vec2S1_($d, $axis);
  $translation=$15;
  var $16=$translation;
  STACKTOP = __stackBase__;
  return $16;
}
function __ZN12b2WheelJoint11EnableMotorEb($this, $flag) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+48)|0);
  var $7=HEAP32[(($6)>>2)];
  __ZN6b2Body8SetAwakeEb($7, 1);
  var $8=$4;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  __ZN6b2Body8SetAwakeEb($10, 1);
  var $11=$2;
  var $12=(($11) & 1);
  var $13=(($4+128)|0);
  var $14=(($12)&(1));
  HEAP8[($13)]=$14;
  return;
}
function __ZN12b2WheelJoint13SetMotorSpeedEf($this, $speed) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$speed;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+124)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function __ZN12b2WheelJoint17SetMaxMotorTorqueEf($this, $torque) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$torque;
  var $3=$1;
  var $4=$3;
  var $5=(($4+48)|0);
  var $6=HEAP32[(($5)>>2)];
  __ZN6b2Body8SetAwakeEb($6, 1);
  var $7=$3;
  var $8=(($7+52)|0);
  var $9=HEAP32[(($8)>>2)];
  __ZN6b2Body8SetAwakeEb($9, 1);
  var $10=$2;
  var $11=(($3+120)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function __ZN12b2WheelJoint4DumpEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $indexA;
  var $indexB;
  $1=$this;
  var $2=$1;
  var $3=$2;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  $indexA=$7;
  var $8=$2;
  var $9=(($8+52)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  $indexB=$12;
  __Z5b2LogPKcz(((5250412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $13=$indexA;
  __Z5b2LogPKcz(((5255960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$indexB;
  __Z5b2LogPKcz(((5253060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
  var $15=$2;
  var $16=(($15+61)|0);
  var $17=HEAP8[($16)];
  var $18=(($17) & 1);
  var $19=(($18)&(1));
  __Z5b2LogPKcz(((5250884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
  var $20=(($2+76)|0);
  var $21=(($20)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$22;
  var $24=(($2+76)|0);
  var $25=(($24+4)|0);
  var $26=HEAPF32[(($25)>>2)];
  var $27=$26;
  __Z5b2LogPKcz(((5249844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$27,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $28=(($2+84)|0);
  var $29=(($28)|0);
  var $30=HEAPF32[(($29)>>2)];
  var $31=$30;
  var $32=(($2+84)|0);
  var $33=(($32+4)|0);
  var $34=HEAPF32[(($33)>>2)];
  var $35=$34;
  __Z5b2LogPKcz(((5249132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$31,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$35,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $36=(($2+92)|0);
  var $37=(($36)|0);
  var $38=HEAPF32[(($37)>>2)];
  var $39=$38;
  var $40=(($2+92)|0);
  var $41=(($40+4)|0);
  var $42=HEAPF32[(($41)>>2)];
  var $43=$42;
  __Z5b2LogPKcz(((5248464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$39,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),(HEAPF64[(tempDoublePtr)>>3]=$43,HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(8))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $44=(($2+128)|0);
  var $45=HEAP8[($44)];
  var $46=(($45) & 1);
  var $47=(($46)&(1));
  __Z5b2LogPKcz(((5247928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$47,tempInt));
  var $48=(($2+124)|0);
  var $49=HEAPF32[(($48)>>2)];
  var $50=$49;
  __Z5b2LogPKcz(((5247500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$50,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $51=(($2+120)|0);
  var $52=HEAPF32[(($51)>>2)];
  var $53=$52;
  __Z5b2LogPKcz(((5247088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$53,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $54=(($2+68)|0);
  var $55=HEAPF32[(($54)>>2)];
  var $56=$55;
  __Z5b2LogPKcz(((5257760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $57=(($2+72)|0);
  var $58=HEAPF32[(($57)>>2)];
  var $59=$58;
  __Z5b2LogPKcz(((5257352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$59,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
  var $60=$2;
  var $61=(($60+56)|0);
  var $62=HEAP32[(($61)>>2)];
  __Z5b2LogPKcz(((5256744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$62,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __ZN12b2WheelJointD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN12b2WheelJointD2Ev($2);
  return;
}
function __ZN12b2WheelJointD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN12b2WheelJointD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN12b2WheelJointD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN7b2JointD2Ev($3);
  return;
}
function __ZNK6b2Vec24SkewEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2)|0);
  var $7=HEAPF32[(($6)>>2)];
  __ZN6b2Vec2C1Eff($agg_result, $5, $7);
  return;
}
function _emscripten_bind_b2ContactManager__b2ContactManager_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(80);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManagerC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2ContactManager__AddPair_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN16b2ContactManager7AddPairEPvS0_($4, $5, $6);
  return;
}
function _emscripten_bind_b2ContactManager__Collide_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN16b2ContactManager7CollideEv($2);
  return;
}
function _emscripten_bind_b2ContactManager__FindNewContacts_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN16b2ContactManager15FindNewContactsEv($2);
  return;
}
function _emscripten_bind_b2ContactManager____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|(0))==0;
      if ($5) { label = 4; break; } else { label = 2; break; }
    case 2: 
      (function() { try { __THREW__ = 0; return __ZN16b2ContactManagerD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      label = 4; break;
    case 4: 
      return;
    case 5: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $2=$12;
      var $13=$11$1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      label = 6; break;
    case 6: 
      var $16=$2;
      var $17=$3;
      var $18$0=$16;
      var $18$1=0;
      var $19$0=$18$0;
      var $19$1=$17;
      ___resumeException($19$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2ContactManager__Destroy_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2ContactManager7DestroyEP9b2Contact($3, $4);
  return;
}
function _emscripten_bind_b2ContactManager__set_m_broadPhase_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(60 % 1 === 0);_memcpy($6, $7, 60);
  return;
}
function _emscripten_bind_b2DistanceJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2DistanceJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2DistanceJoint__SetFrequency_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2DistanceJoint12SetFrequencyEf($3, $4);
  return;
}
function _emscripten_bind_b2DistanceJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2DistanceJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2DistanceJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267696)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267696);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243276) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243276)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243280)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243276;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267704)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267704);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243268)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243272)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243268;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2DistanceJoint__GetLocalAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2DistanceJoint15GetLocalAnchorAEv($2);
  return $3;
}
function _emscripten_bind_b2DistanceJoint__GetLocalAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2DistanceJoint15GetLocalAnchorBEv($2);
  return $3;
}
function _emscripten_bind_b2DistanceJoint__GetFrequency_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2DistanceJoint12GetFrequencyEv($2);
  return $3;
}
function __ZNK15b2DistanceJoint9GetLengthEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+104)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK15b2DistanceJoint15GetDampingRatioEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK7b2Joint19GetCollideConnectedEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+61)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZN15b2DistanceJoint15SetDampingRatioEf($this, $ratio) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$ratio;
  var $3=$1;
  var $4=$2;
  var $5=(($3+72)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZN15b2DistanceJoint9SetLengthEf($this, $length) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$length;
  var $3=$1;
  var $4=$2;
  var $5=(($3+104)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK9b2Fixture14GetRestitutionEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN9b2Fixture11SetFrictionEf($this, $friction) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$friction;
  var $3=$1;
  var $4=$2;
  var $5=(($3+16)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZN9b2Fixture14SetRestitutionEf($this, $restitution) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$restitution;
  var $3=$1;
  var $4=$2;
  var $5=(($3+20)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK9b2Fixture11GetFrictionEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK9b2Fixture11GetUserDataEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN9b2Fixture10SetDensityEf($this, $density) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$density;
  var $3=$1;
  var $4=$2;
  var $5=(($3)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK9b2Fixture7GetAABBEi($this, $childIndex) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$childIndex;
  var $3=$1;
  var $4=$2;
  var $5=(($3+24)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+((($4)*(28))&-1))|0);
  var $8=(($7)|0);
  return $8;
}
function __ZN9b2Fixture11SetUserDataEPv($this, $data) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  var $5=(($3+40)|0);
  HEAP32[(($5)>>2)]=$4;
  return;
}
function __ZNK9b2Fixture10GetDensityEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2DistanceJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267576)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267576);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243180)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243184)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243180;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceJoint__GetLength_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2DistanceJoint9GetLengthEv($2);
  return $3;
}
function _emscripten_bind_b2DistanceJoint__GetDampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2DistanceJoint15GetDampingRatioEv($2);
  return $3;
}
function _emscripten_bind_b2DistanceJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2DistanceJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2DistanceJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2DistanceJoint__b2DistanceJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(176);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2DistanceJointC2EPK18b2DistanceJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceJoint__SetDampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2DistanceJoint15SetDampingRatioEf($3, $4);
  return;
}
function _emscripten_bind_b2DistanceJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2DistanceJoint__SetLength_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2DistanceJoint9SetLengthEf($3, $4);
  return;
}
function _emscripten_bind_b2DistanceJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2Fixture__GetRestitution_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture14GetRestitutionEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__SetFilterData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture13SetFilterDataERK8b2Filter($3, $4);
  return;
}
function _emscripten_bind_b2Fixture__SetFriction_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture11SetFrictionEf($3, $4);
  return;
}
function _emscripten_bind_b2Fixture__b2Fixture_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(44);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN9b2FixtureC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Fixture__GetShape_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Fixture8GetShapeEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__SetRestitution_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture14SetRestitutionEf($3, $4);
  return;
}
function _emscripten_bind_b2Fixture__GetBody_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Fixture7GetBodyEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Fixture7GetNextEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__GetFriction_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture11GetFrictionEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture11GetUserDataEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__SetDensity_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture10SetDensityEf($3, $4);
  return;
}
function _emscripten_bind_b2Fixture__GetMassData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZNK9b2Fixture11GetMassDataEP10b2MassData($3, $4);
  return;
}
function _emscripten_bind_b2Fixture__SetSensor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN9b2Fixture9SetSensorEb($4, $6);
  return;
}
function _emscripten_bind_b2Fixture__GetAABB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK9b2Fixture7GetAABBEi($3, $4);
  return $5;
}
function _emscripten_bind_b2Fixture__TestPoint_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK9b2Fixture9TestPointERK6b2Vec2($3, $4);
  return $5;
}
function __ZNK9b2Fixture9TestPointERK6b2Vec2($this, $p) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$p;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+16)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($3+8)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=__ZNK6b2Body12GetTransformEv($11);
  var $13=$2;
  var $14=FUNCTION_TABLE[$9]($5, $12, $13);
  return $14;
}
function _emscripten_bind_b2Fixture__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture11SetUserDataEPv($3, $4);
  return;
}
function _emscripten_bind_b2Fixture____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Fixture__RayCast_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=__ZNK9b2Fixture7RayCastEP15b2RayCastOutputRK14b2RayCastInputi($5, $6, $7, $8);
  return $9;
}
function _emscripten_bind_b2Fixture__Refilter_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN9b2Fixture8RefilterEv($2);
  return;
}
function _emscripten_bind_b2Fixture__Dump_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Fixture4DumpEi($3, $4);
  return;
}
function _emscripten_bind_b2Fixture__GetFilterData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture13GetFilterDataEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__IsSensor_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture8IsSensorEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture7GetTypeEv($2);
  return $3;
}
function _emscripten_bind_b2Fixture__GetDensity_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Fixture10GetDensityEv($2);
  return $3;
}
function _emscripten_bind_b2MouseJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2MouseJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2MouseJoint__SetFrequency_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2MouseJoint12SetFrequencyEf($3, $4);
  return;
}
function _emscripten_bind_b2MouseJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2MouseJoint__SetMaxForce_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2MouseJoint11SetMaxForceEf($3, $4);
  return;
}
function _emscripten_bind_b2MouseJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2MouseJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267760)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267760);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243092) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243092)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243096)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243092;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2MouseJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267768)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267768);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243004) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243004)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243008)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243004;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2MouseJoint__b2MouseJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(168);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN12b2MouseJointC2EPK15b2MouseJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2MouseJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2MouseJoint__GetMaxForce_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2MouseJoint11GetMaxForceEv($2);
  return $3;
}
function _emscripten_bind_b2MouseJoint__GetTarget_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2MouseJoint9GetTargetEv($2);
  return $3;
}
function _emscripten_bind_b2MouseJoint__GetFrequency_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2MouseJoint12GetFrequencyEv($2);
  return $3;
}
function _emscripten_bind_b2MouseJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267616)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267616);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242912) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5242912)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5242916)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242912;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2MouseJoint__GetDampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2MouseJoint15GetDampingRatioEv($2);
  return $3;
}
function _emscripten_bind_b2MouseJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2MouseJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2MouseJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2MouseJoint__SetTarget_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2MouseJoint9SetTargetERK6b2Vec2($3, $4);
  return;
}
function _emscripten_bind_b2MouseJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2MouseJoint__SetDampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2MouseJoint15SetDampingRatioEf($3, $4);
  return;
}
function _emscripten_bind_b2MouseJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2MouseJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2World14SetSubSteppingEb($this, $flag) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=(($4+102994)|0);
  var $8=(($6)&(1));
  HEAP8[($7)]=$8;
  return;
}
function __ZNK7b2World10GetProfileEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102996)|0);
  return $3;
}
function __ZNK7b2World14GetSubSteppingEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102994)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZNK7b2World17GetContactManagerEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  return $3;
}
function __ZN7b2World20SetContinuousPhysicsEb($this, $flag) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=(($4+102993)|0);
  var $8=(($6)&(1));
  HEAP8[($7)]=$8;
  return;
}
function __ZNK7b2World12GetBodyCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102960)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK7b2World18GetAutoClearForcesEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102868)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 & 4;
  var $6=(($5)|(0))==4;
  return $6;
}
function __ZNK7b2World20GetContinuousPhysicsEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102993)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZN7b2World12GetJointListEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102956)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN7b2World11GetBodyListEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102952)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK7b2World13GetJointCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102964)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK7b2World15GetWarmStartingEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102992)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function __ZNK7b2World16GetAllowSleepingEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102976)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2PulleyJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267720)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267720);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5242904)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5242908)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242904;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PulleyJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint__GetGroundAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267592)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267592);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK13b2PulleyJoint16GetGroundAnchorBEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242896)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242900)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242896;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PulleyJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2PulleyJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2PulleyJoint__GetGroundAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267600)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267600);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK13b2PulleyJoint16GetGroundAnchorAEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242888)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242892)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242888;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PulleyJoint__GetLengthB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2PulleyJoint10GetLengthBEv($2);
  return $3;
}
function _emscripten_bind_b2PulleyJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint__GetLengthA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2PulleyJoint10GetLengthAEv($2);
  return $3;
}
function _emscripten_bind_b2PulleyJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2PulleyJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267712)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267712);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5242880)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5242884)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242880;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PulleyJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267584)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267584);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243260)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243264)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243260;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PulleyJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint__b2PulleyJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(196);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN13b2PulleyJointC2EPK16b2PulleyJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PulleyJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2PulleyJoint__GetRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2PulleyJoint8GetRatioEv($2);
  return $3;
}
function _emscripten_bind_b2BroadPhase__GetTreeQuality_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase14GetTreeQualityEv($2);
  return $3;
}
function _emscripten_bind_b2BroadPhase__GetFatAABB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK12b2BroadPhase10GetFatAABBEi($3, $4);
  return $5;
}
function _emscripten_bind_b2BroadPhase__GetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK12b2BroadPhase11GetUserDataEi($3, $4);
  return $5;
}
function _emscripten_bind_b2BroadPhase____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|(0))==0;
      if ($5) { label = 4; break; } else { label = 2; break; }
    case 2: 
      (function() { try { __THREW__ = 0; return __ZN12b2BroadPhaseD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      label = 4; break;
    case 4: 
      return;
    case 5: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $2=$12;
      var $13=$11$1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      label = 6; break;
    case 6: 
      var $16=$2;
      var $17=$3;
      var $18$0=$16;
      var $18$1=0;
      var $19$0=$18$0;
      var $19$1=$17;
      ___resumeException($19$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2BroadPhase__GetTreeHeight_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase13GetTreeHeightEv($2);
  return $3;
}
function _emscripten_bind_b2BroadPhase__b2BroadPhase_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(60);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN12b2BroadPhaseC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2BroadPhase__GetProxyCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase13GetProxyCountEv($2);
  return $3;
}
function _emscripten_bind_b2BroadPhase__GetTreeBalance_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2BroadPhase14GetTreeBalanceEv($2);
  return $3;
}
function _emscripten_bind_b2BroadPhase__TestOverlap_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZNK12b2BroadPhase11TestOverlapEii($4, $5, $6);
  return $7;
}
function _emscripten_bind_b2BroadPhase__TouchProxy_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase10TouchProxyEi($3, $4);
  return;
}
function _emscripten_bind_b2BroadPhase__CreateProxy_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($4, $5, $6);
  return $7;
}
function _emscripten_bind_b2BroadPhase__MoveProxy_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($5, $6, $7, $8);
  return;
}
function _emscripten_bind_b2BroadPhase__DestroyProxy_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2BroadPhase12DestroyProxyEi($3, $4);
  return;
}
function _emscripten_bind_b2World__QueryAABB_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB($4, $5, $6);
  return;
}
function _emscripten_bind_b2World__SetSubStepping_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World14SetSubSteppingEb($4, $6);
  return;
}
function _emscripten_bind_b2World__GetTreeQuality_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World14GetTreeQualityEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetTreeHeight_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World13GetTreeHeightEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetProfile_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World10GetProfileEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetTreeBalance_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World14GetTreeBalanceEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetSubStepping_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World14GetSubSteppingEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetContactManager_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World17GetContactManagerEv($2);
  return $3;
}
function _emscripten_bind_b2World__SetContactListener_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World18SetContactListenerEP17b2ContactListener($3, $4);
  return;
}
function _emscripten_bind_b2World__DrawDebugData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2World13DrawDebugDataEv($2);
  return;
}
function _emscripten_bind_b2World__SetContinuousPhysics_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World20SetContinuousPhysicsEb($4, $6);
  return;
}
function _emscripten_bind_b2World__SetGravity_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World10SetGravityERK6b2Vec2($3, $4);
  return;
}
function __ZN7b2World10SetGravityERK6b2Vec2($this, $gravity) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$gravity;
  var $3=$1;
  var $4=(($3+102968)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2World__GetBodyCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World12GetBodyCountEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetAutoClearForces_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World18GetAutoClearForcesEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetContinuousPhysics_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World20GetContinuousPhysicsEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetJointList_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2World12GetJointListEv($2);
  return $3;
}
function _emscripten_bind_b2World__CreateBody_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN7b2World10CreateBodyEPK9b2BodyDef($3, $4);
  return $5;
}
function _emscripten_bind_b2World__GetBodyList_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2World11GetBodyListEv($2);
  return $3;
}
function _emscripten_bind_b2World__SetDestructionListener_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World22SetDestructionListenerEP21b2DestructionListener($3, $4);
  return;
}
function _emscripten_bind_b2World__DestroyJoint_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World12DestroyJointEP7b2Joint($3, $4);
  return;
}
function _emscripten_bind_b2World__b2World_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(103028);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN7b2WorldC2ERK6b2Vec2($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2World__GetJointCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World13GetJointCountEv($2);
  return $3;
}
function _emscripten_bind_b2World__Step_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN7b2World4StepEfii($5, $6, $7, $8);
  return;
}
function _emscripten_bind_b2World__ClearForces_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2World11ClearForcesEv($2);
  return;
}
function _emscripten_bind_b2World__GetWarmStarting_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World15GetWarmStartingEv($2);
  return $3;
}
function _emscripten_bind_b2World__SetAllowSleeping_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World16SetAllowSleepingEb($4, $6);
  return;
}
function _emscripten_bind_b2World__DestroyBody_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World11DestroyBodyEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2World__GetAllowSleeping_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World16GetAllowSleepingEv($2);
  return $3;
}
function _emscripten_bind_b2World__CreateJoint_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN7b2World11CreateJointEPK10b2JointDef($3, $4);
  return $5;
}
function _emscripten_bind_b2World__GetProxyCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World13GetProxyCountEv($2);
  return $3;
}
function _emscripten_bind_b2World__RayCast_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZNK7b2World7RayCastEP17b2RayCastCallbackRK6b2Vec2S4_($5, $6, $7, $8);
  return;
}
function __ZNK13b2CircleShape14GetVertexCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return 1;
}
function __ZNK13b2CircleShape10GetSupportERK6b2Vec2($this, $d) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$d;
  var $3=$1;
  var $4=$2;
  return 0;
}
function __ZN7b2World14GetContactListEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3+60)|0);
  var $5=HEAP32[(($4)>>2)];
  return $5;
}
function __ZN7b2World18SetAutoClearForcesEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=(($4+102868)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 | 4;
      HEAP32[(($8)>>2)]=$10;
      label = 4; break;
    case 3: 
      var $12=(($4+102868)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & -5;
      HEAP32[(($12)>>2)]=$14;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK7b2World15GetContactCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102872)|0);
  var $4=(($3+64)|0);
  var $5=HEAP32[(($4)>>2)];
  return $5;
}
function __ZN7b2World15SetWarmStartingEb($this, $flag) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($flag)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=(($4+102992)|0);
  var $8=(($6)&(1));
  HEAP8[($7)]=$8;
  return;
}
function __ZNK16b2PrismaticJoint13GetLocalAxisAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+84)|0);
  return $3;
}
function __ZNK16b2PrismaticJoint15GetLocalAnchorAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  return $3;
}
function __ZNK16b2PrismaticJoint15GetLocalAnchorBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  return $3;
}
function __ZNK16b2PrismaticJoint13GetMotorSpeedEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+132)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK16b2PrismaticJoint16GetMaxMotorForceEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+128)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK16b2PrismaticJoint17GetReferenceAngleEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+100)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2CircleShape__set_m_radius_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  return;
}
function _emscripten_bind_b2CircleShape__get_m_radius_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  return $5;
}
function __ZNK13b2CircleShape9GetVertexEi($this, $index) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$index;
  var $3=$1;
  var $4=(($3+12)|0);
  return $4;
}
function __ZNK13b2CircleShape16GetSupportVertexERK6b2Vec2($this, $d) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$d;
  var $3=$1;
  var $4=$2;
  var $5=(($3+12)|0);
  return $5;
}
function _emscripten_bind_b2CircleShape__get_m_p_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  return $3;
}
function _emscripten_bind_b2World__IsLocked_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World8IsLockedEv($2);
  return $3;
}
function _emscripten_bind_b2World__GetContactList_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2World14GetContactListEv($2);
  return $3;
}
function _emscripten_bind_b2World__SetDebugDraw_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World12SetDebugDrawEP6b2Draw($3, $4);
  return;
}
function _emscripten_bind_b2World____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|(0))==0;
      if ($5) { label = 4; break; } else { label = 2; break; }
    case 2: 
      (function() { try { __THREW__ = 0; return __ZN7b2WorldD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      label = 4; break;
    case 4: 
      return;
    case 5: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $2=$12;
      var $13=$11$1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      label = 6; break;
    case 6: 
      var $16=$2;
      var $17=$3;
      var $18$0=$16;
      var $18$1=0;
      var $19$0=$18$0;
      var $19$1=$17;
      ___resumeException($19$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2World__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2World4DumpEv($2);
  return;
}
function _emscripten_bind_b2World__SetAutoClearForces_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World18SetAutoClearForcesEb($4, $6);
  return;
}
function _emscripten_bind_b2World__GetGravity_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267856)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267856);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK7b2World10GetGravityEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5243252)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5243256)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243252;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK7b2World10GetGravityEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+102968)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];
  return;
}
function _emscripten_bind_b2World__GetContactCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2World15GetContactCountEv($2);
  return $3;
}
function _emscripten_bind_b2World__SetWarmStarting_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN7b2World15SetWarmStartingEb($4, $6);
  return;
}
function _emscripten_bind_b2World__SetContactFilter_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2World16SetContactFilterEP15b2ContactFilter($3, $4);
  return;
}
function _emscripten_bind_b2PrismaticJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2PrismaticJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2PrismaticJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2PrismaticJoint__GetLocalAxisA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint13GetLocalAxisAEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__GetLowerLimit_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint13GetLowerLimitEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267656)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267656);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243244) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243244)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243248)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243244;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PrismaticJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2PrismaticJoint__b2PrismaticJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(256);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN16b2PrismaticJointC2EPK19b2PrismaticJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PrismaticJoint__GetLocalAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint15GetLocalAnchorAEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__SetMotorSpeed_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2PrismaticJoint13SetMotorSpeedEf($3, $4);
  return;
}
function _emscripten_bind_b2PrismaticJoint__GetLocalAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint15GetLocalAnchorBEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__GetMotorSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint13GetMotorSpeedEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__SetMaxMotorForce_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2PrismaticJoint16SetMaxMotorForceEf($3, $4);
  return;
}
function _emscripten_bind_b2PrismaticJoint__EnableLimit_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN16b2PrismaticJoint11EnableLimitEb($4, $6);
  return;
}
function _emscripten_bind_b2PrismaticJoint__IsMotorEnabled_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint14IsMotorEnabledEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2PrismaticJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267552)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267552);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243236)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243240)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243236;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PrismaticJoint__GetMaxMotorForce_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint16GetMaxMotorForceEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2PrismaticJoint__GetJointSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint13GetJointSpeedEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__EnableMotor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN16b2PrismaticJoint11EnableMotorEb($4, $6);
  return;
}
function _emscripten_bind_b2PrismaticJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PrismaticJoint__GetReferenceAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint17GetReferenceAngleEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2PrismaticJoint__GetMotorForce_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK16b2PrismaticJoint13GetMotorForceEf($3, $4);
  return $5;
}
function _emscripten_bind_b2PrismaticJoint__GetJointTranslation_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint19GetJointTranslationEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2PrismaticJoint__IsLimitEnabled_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint14IsLimitEnabledEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2PrismaticJoint__SetLimits_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN16b2PrismaticJoint9SetLimitsEff($4, $5, $6);
  return;
}
function _emscripten_bind_b2PrismaticJoint__GetUpperLimit_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2PrismaticJoint13GetUpperLimitEv($2);
  return $3;
}
function _emscripten_bind_b2PrismaticJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2PrismaticJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267648)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267648);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243228)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243232)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243228;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2CircleShape____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2CircleShape__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2CircleShape__ComputeMass_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  return;
}
function _emscripten_bind_b2CircleShape__GetVertex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2CircleShape9GetVertexEi($3, $4);
  return $5;
}
function _emscripten_bind_b2CircleShape__Clone_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2CircleShape__GetSupportVertex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2CircleShape16GetSupportVertexERK6b2Vec2($3, $4);
  return $5;
}
function _emscripten_bind_b2CircleShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  return $15;
}
function _emscripten_bind_b2CircleShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2CircleShape__GetVertexCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2CircleShape14GetVertexCountEv($2);
  return $3;
}
function _emscripten_bind_b2CircleShape__GetChildCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  return $7;
}
function _emscripten_bind_b2CircleShape__TestPoint_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  return $11;
}
function _emscripten_bind_b2CircleShape__b2CircleShape_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(20);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN13b2CircleShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2CircleShape__GetSupport_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2CircleShape10GetSupportERK6b2Vec2($3, $4);
  return $5;
}
function _emscripten_bind_b2CircleShape__set_m_p_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2WheelJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function __ZNK12b2WheelJoint13GetLocalAxisAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+92)|0);
  return $3;
}
function __ZN12b2WheelJoint21SetSpringDampingRatioEf($this, $ratio) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$ratio;
  var $3=$1;
  var $4=$2;
  var $5=(($3+72)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK12b2WheelJoint20GetSpringFrequencyHzEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK12b2WheelJoint15GetLocalAnchorAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  return $3;
}
function __ZNK12b2WheelJoint15GetLocalAnchorBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+84)|0);
  return $3;
}
function __ZNK12b2WheelJoint13GetMotorSpeedEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+124)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK12b2WheelJoint17GetMaxMotorTorqueEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+120)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK12b2WheelJoint21GetSpringDampingRatioEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN12b2WheelJoint20SetSpringFrequencyHzEf($this, $hz) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$hz;
  var $3=$1;
  var $4=$2;
  var $5=(($3+68)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZN11b2GearJoint9GetJoint1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2WheelJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2WheelJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2WheelJoint__GetLocalAxisA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint13GetLocalAxisAEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__SetSpringDampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2WheelJoint21SetSpringDampingRatioEf($3, $4);
  return;
}
function _emscripten_bind_b2WheelJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267744)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267744);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243220)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243224)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243220;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WheelJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267752)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267752);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243212)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243216)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243212;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WheelJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2WheelJoint__GetSpringFrequencyHz_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint20GetSpringFrequencyHzEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__GetLocalAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint15GetLocalAnchorAEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__SetMotorSpeed_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2WheelJoint13SetMotorSpeedEf($3, $4);
  return;
}
function _emscripten_bind_b2WheelJoint__GetLocalAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint15GetLocalAnchorBEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__GetMotorSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint13GetMotorSpeedEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__GetMotorTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK12b2WheelJoint14GetMotorTorqueEf($3, $4);
  return $5;
}
function _emscripten_bind_b2WheelJoint__GetMaxMotorTorque_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint17GetMaxMotorTorqueEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__b2WheelJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(224);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN12b2WheelJointC2EPK15b2WheelJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WheelJoint__IsMotorEnabled_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint14IsMotorEnabledEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2WheelJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267608)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267608);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243204) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243204)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243208)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243204;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WheelJoint__GetSpringDampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint21GetSpringDampingRatioEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__SetMaxMotorTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2WheelJoint17SetMaxMotorTorqueEf($3, $4);
  return;
}
function _emscripten_bind_b2WheelJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2WheelJoint__GetJointSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint13GetJointSpeedEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__EnableMotor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN12b2WheelJoint11EnableMotorEb($4, $6);
  return;
}
function _emscripten_bind_b2WheelJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WheelJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2WheelJoint__GetJointTranslation_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK12b2WheelJoint19GetJointTranslationEv($2);
  return $3;
}
function _emscripten_bind_b2WheelJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2WheelJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2WheelJoint__SetSpringFrequencyHz_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2WheelJoint20SetSpringFrequencyHzEf($3, $4);
  return;
}
function _emscripten_bind_b2WheelJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2Draw____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Draw__AppendFlags_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Draw11AppendFlagsEj($3, $4);
  return;
}
function _emscripten_bind_b2Draw__DrawTransform_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+28)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  return;
}
function _emscripten_bind_b2Draw__ClearFlags_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Draw10ClearFlagsEj($3, $4);
  return;
}
function _emscripten_bind_b2Draw__DrawPolygon_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+8)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2Draw__DrawSolidCircle_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  return;
}
function _emscripten_bind_b2Draw__DrawSolidPolygon_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+12)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2Draw__DrawCircle_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+16)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2Draw__SetFlags_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Draw8SetFlagsEj($3, $4);
  return;
}
function _emscripten_bind_b2Draw__DrawSegment_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2Draw__b2Draw_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(8);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN6b2DrawC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Draw__GetFlags_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Draw8GetFlagsEv($2);
  return $3;
}
function _emscripten_bind_b2Joint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2Joint7GetNextEv($2);
  return $3;
}
function _emscripten_bind_b2Joint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2Joint8GetBodyAEv($2);
  return $3;
}
function _emscripten_bind_b2Joint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN7b2Joint8GetBodyBEv($2);
  return $3;
}
function _emscripten_bind_b2Joint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2Joint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267872)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267872);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243196) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243196)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243200)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243196;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Joint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint11GetUserDataEv($2);
  return $3;
}
function _emscripten_bind_b2Joint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint7GetTypeEv($2);
  return $3;
}
function _emscripten_bind_b2Joint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN7b2Joint11SetUserDataEPv($3, $4);
  return;
}
function _emscripten_bind_b2Joint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint19GetCollideConnectedEv($2);
  return $3;
}
function _emscripten_bind_b2Joint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2Joint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267864)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267864);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243188)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243192)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243188;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Joint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267728)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267728);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243172)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243176)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243172;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Joint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Joint8IsActiveEv($2);
  return $3;
}
function _emscripten_bind_b2GearJoint__GetJoint1_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN11b2GearJoint9GetJoint1Ev($2);
  return $3;
}
function _emscripten_bind_b2GearJoint__b2GearJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(276);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN11b2GearJointC2EPK14b2GearJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2GearJoint9GetJoint2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN11b2WeldJoint12SetFrequencyEf($this, $hz) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$hz;
  var $3=$1;
  var $4=$2;
  var $5=(($3+68)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK11b2WeldJoint15GetLocalAnchorAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+80)|0);
  return $3;
}
function __ZNK11b2WeldJoint15GetLocalAnchorBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+88)|0);
  return $3;
}
function __ZNK11b2WeldJoint12GetFrequencyEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK11b2WeldJoint15GetDampingRatioEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK11b2WeldJoint17GetReferenceAngleEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+96)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN11b2WeldJoint15SetDampingRatioEf($this, $ratio) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$ratio;
  var $3=$1;
  var $4=$2;
  var $5=(($3+72)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function _emscripten_bind_b2GearJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267816)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267816);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243164) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243164)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243168)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243164;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2GearJoint__GetJoint2_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN11b2GearJoint9GetJoint2Ev($2);
  return $3;
}
function _emscripten_bind_b2GearJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2GearJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2GearJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2GearJoint__SetRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN11b2GearJoint8SetRatioEf($3, $4);
  return;
}
function _emscripten_bind_b2GearJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2GearJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2GearJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2GearJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2GearJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2GearJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267808)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267808);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243156)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243160)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243156;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2GearJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267640)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267640);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243148)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243152)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243148;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2GearJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2GearJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2GearJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2GearJoint__GetRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2GearJoint8GetRatioEv($2);
  return $3;
}
function _emscripten_bind_b2RayCastCallback__ReportFixture_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  return $15;
}
function _emscripten_bind_b2RayCastCallback__b2RayCastCallback_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(4);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN17b2RayCastCallbackC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN17b2RayCastCallbackC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN17b2RayCastCallbackC2Ev($2);
  return;
}
function _emscripten_bind_b2RayCastCallback____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DynamicTree____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|(0))==0;
      if ($5) { label = 4; break; } else { label = 2; break; }
    case 2: 
      (function() { try { __THREW__ = 0; return __ZN13b2DynamicTreeD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      label = 4; break;
    case 4: 
      return;
    case 5: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $2=$12;
      var $13=$11$1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      label = 6; break;
    case 6: 
      var $16=$2;
      var $17=$3;
      var $18$0=$16;
      var $18$1=0;
      var $19$0=$18$0;
      var $19$1=$17;
      ___resumeException($19$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DynamicTree__b2DynamicTree_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(28);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN13b2DynamicTreeC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DynamicTree__GetFatAABB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2DynamicTree10GetFatAABBEi($3, $4);
  return $5;
}
function _emscripten_bind_b2DynamicTree__GetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK13b2DynamicTree11GetUserDataEi($3, $4);
  return $5;
}
function _emscripten_bind_b2DynamicTree__GetMaxBalance_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2DynamicTree13GetMaxBalanceEv($2);
  return $3;
}
function _emscripten_bind_b2DynamicTree__GetHeight_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2DynamicTree9GetHeightEv($2);
  return $3;
}
function _emscripten_bind_b2DynamicTree__GetAreaRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK13b2DynamicTree12GetAreaRatioEv($2);
  return $3;
}
function _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN13b2DynamicTree15RebuildBottomUpEv($2);
  return;
}
function _emscripten_bind_b2DynamicTree__CreateProxy_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($4, $5, $6);
  return $7;
}
function _emscripten_bind_b2DynamicTree__MoveProxy_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($5, $6, $7, $8);
  return $9;
}
function _emscripten_bind_b2DynamicTree__Validate_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZNK13b2DynamicTree8ValidateEv($2);
  return;
}
function _emscripten_bind_b2DynamicTree__DestroyProxy_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN13b2DynamicTree12DestroyProxyEi($3, $4);
  return;
}
function _emscripten_bind_b2WeldJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2WeldJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2WeldJoint__SetFrequency_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN11b2WeldJoint12SetFrequencyEf($3, $4);
  return;
}
function _emscripten_bind_b2WeldJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2WeldJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2WeldJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267776)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267776);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243140) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243140)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243144)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243140;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WeldJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267784)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267784);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243132)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243136)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243132;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WeldJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2WeldJoint__GetLocalAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2WeldJoint15GetLocalAnchorAEv($2);
  return $3;
}
function _emscripten_bind_b2WeldJoint__GetLocalAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2WeldJoint15GetLocalAnchorBEv($2);
  return $3;
}
function _emscripten_bind_b2WeldJoint__GetFrequency_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2WeldJoint12GetFrequencyEv($2);
  return $3;
}
function _emscripten_bind_b2WeldJoint__b2WeldJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(208);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN11b2WeldJointC2EPK14b2WeldJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WeldJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267624)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267624);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243124)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243128)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243124;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WeldJoint__GetDampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2WeldJoint15GetDampingRatioEv($2);
  return $3;
}
function _emscripten_bind_b2WeldJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2WeldJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WeldJoint__GetReferenceAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2WeldJoint17GetReferenceAngleEv($2);
  return $3;
}
function _emscripten_bind_b2WeldJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2WeldJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2WeldJoint__SetDampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN11b2WeldJoint15SetDampingRatioEf($3, $4);
  return;
}
function _emscripten_bind_b2WeldJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2WeldJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetLowerLimit_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint13GetLowerLimitEv($2);
  return $3;
}
function __ZNK15b2RevoluteJoint15GetLocalAnchorAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  return $3;
}
function __ZNK15b2RevoluteJoint15GetLocalAnchorBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  return $3;
}
function __ZNK15b2RevoluteJoint13GetMotorSpeedEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+108)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK15b2RevoluteJoint17GetReferenceAngleEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+116)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK15b2RevoluteJoint17GetMaxMotorTorqueEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+104)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ChainShape__set_m_radius_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ChainShape__get_m_radius_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  return $5;
}
function _emscripten_bind_b2ChainShape__get_m_vertices_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ChainShape__get_m_count_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ChainShape__set_m_vertices_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ChainShape__set_m_count_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+16)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2RevoluteJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267672)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267672);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243116)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243120)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243116;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RevoluteJoint__b2RevoluteJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(228);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2RevoluteJointC2EPK18b2RevoluteJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RevoluteJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetLocalAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint15GetLocalAnchorAEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__SetMotorSpeed_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2RevoluteJoint13SetMotorSpeedEf($3, $4);
  return;
}
function _emscripten_bind_b2RevoluteJoint__GetLocalAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint15GetLocalAnchorBEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__GetJointAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint13GetJointAngleEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__GetMotorSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint13GetMotorSpeedEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__GetMotorTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK15b2RevoluteJoint14GetMotorTorqueEf($3, $4);
  return $5;
}
function _emscripten_bind_b2RevoluteJoint__IsLimitEnabled_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint14IsLimitEnabledEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__EnableLimit_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN15b2RevoluteJoint11EnableLimitEb($4, $6);
  return;
}
function _emscripten_bind_b2RevoluteJoint__IsMotorEnabled_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint14IsMotorEnabledEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2RevoluteJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267560)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267560);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243108)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243112)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243108;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RevoluteJoint__SetMaxMotorTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2RevoluteJoint17SetMaxMotorTorqueEf($3, $4);
  return;
}
function _emscripten_bind_b2RevoluteJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetJointSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint13GetJointSpeedEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__EnableMotor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN15b2RevoluteJoint11EnableMotorEb($4, $6);
  return;
}
function _emscripten_bind_b2RevoluteJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RevoluteJoint__GetReferenceAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint17GetReferenceAngleEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2RevoluteJoint__SetLimits_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN15b2RevoluteJoint9SetLimitsEff($4, $5, $6);
  return;
}
function _emscripten_bind_b2RevoluteJoint__GetMaxMotorTorque_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint17GetMaxMotorTorqueEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2RevoluteJoint__GetUpperLimit_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2RevoluteJoint13GetUpperLimitEv($2);
  return $3;
}
function _emscripten_bind_b2RevoluteJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2RevoluteJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267664)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267664);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243100)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243104)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243100;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Timer__b2Timer_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(1);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN7b2TimerC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Timer__Reset_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN7b2Timer5ResetEv($2);
  return;
}
function _emscripten_bind_b2Timer____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Timer__GetMilliseconds_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Timer15GetMillisecondsEv($2);
  return $3;
}
function _emscripten_bind_b2ContactListener____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2ContactListener__b2ContactListener_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(4);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN17b2ContactListenerC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2ContactListener__EndContact_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  return;
}
function _emscripten_bind_b2ContactListener__BeginContact_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  return;
}
function _emscripten_bind_b2ContactListener__PreSolve_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  return;
}
function _emscripten_bind_b2ContactListener__PostSolve_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+20)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  return;
}
function _emscripten_bind_b2ChainShape____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2ChainShape__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2ChainShape__CreateChain_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN12b2ChainShape11CreateChainEPK6b2Vec2i($4, $5, $6);
  return;
}
function _emscripten_bind_b2ChainShape__ComputeMass_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  return;
}
function _emscripten_bind_b2ChainShape__Clone_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2ChainShape__GetChildEdge_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($4, $5, $6);
  return;
}
function _emscripten_bind_b2ChainShape__b2ChainShape_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(40);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN12b2ChainShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2ChainShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2ChainShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  return $15;
}
function _emscripten_bind_b2ChainShape__GetChildCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  return $7;
}
function _emscripten_bind_b2ChainShape__TestPoint_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  return $11;
}
function _emscripten_bind_b2ChainShape__SetPrevVertex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2ChainShape13SetPrevVertexERK6b2Vec2($3, $4);
  return;
}
function _emscripten_bind_b2ChainShape__CreateLoop_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN12b2ChainShape10CreateLoopEPK6b2Vec2i($4, $5, $6);
  return;
}
function _emscripten_bind_b2ChainShape__SetNextVertex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN12b2ChainShape13SetNextVertexERK6b2Vec2($3, $4);
  return;
}
function _emscripten_bind_b2QueryCallback__ReportFixture_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2QueryCallback____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2QueryCallback__b2QueryCallback_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(4);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN15b2QueryCallbackC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2QueryCallbackC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2QueryCallbackC2Ev($2);
  return;
}
function _emscripten_bind_b2BlockAllocator____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|(0))==0;
      if ($5) { label = 4; break; } else { label = 2; break; }
    case 2: 
      (function() { try { __THREW__ = 0; return __ZN16b2BlockAllocatorD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      label = 4; break;
    case 4: 
      return;
    case 5: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $2=$12;
      var $13=$11$1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      label = 6; break;
    case 6: 
      var $16=$2;
      var $17=$3;
      var $18$0=$16;
      var $18$1=0;
      var $19$0=$18$0;
      var $19$1=$17;
      ___resumeException($19$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2BlockAllocator__Clear_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN16b2BlockAllocator5ClearEv($2);
  return;
}
function __ZNK11b2RopeJoint15GetLocalAnchorAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  return $3;
}
function __ZN11b2RopeJoint12SetMaxLengthEf($this, $length) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$length;
  var $3=$1;
  var $4=$2;
  var $5=(($3+84)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZNK11b2RopeJoint15GetLocalAnchorBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  return $3;
}
function _emscripten_bind_b2PolygonShape__set_m_radius_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PolygonShape__get_m_radius_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  return $5;
}
function __ZNK14b2PolygonShape9GetVertexEi($this, $index) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$index;
  var $3=$1;
  var $4=$2;
  var $5=(($3+20)|0);
  var $6=(($5+($4<<3))|0);
  return $6;
}
function _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+148)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function __ZNK14b2PolygonShape14GetVertexCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+148)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+148)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PolygonShape__get_m_centroid_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  return $3;
}
function _emscripten_bind_b2EdgeShape__set_m_radius_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=$4;
  var $6=(($5+8)|0);
  HEAPF32[(($6)>>2)]=$3;
  return;
}
function _emscripten_bind_b2EdgeShape__get_m_radius_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAPF32[(($4)>>2)];
  return $5;
}
function __ZNK9b2Contact14GetRestitutionEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+140)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BlockAllocator__Free_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN16b2BlockAllocator4FreeEPvi($4, $5, $6);
  return;
}
function _emscripten_bind_b2BlockAllocator__Allocate_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN16b2BlockAllocator8AllocateEi($3, $4);
  return $5;
}
function _emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(68);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN16b2BlockAllocatorC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2RopeJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267800)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267800);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243084) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243084)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243088)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243084;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2RopeJoint__GetMaxLength_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2RopeJoint12GetMaxLengthEv($2);
  return $3;
}
function _emscripten_bind_b2RopeJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2RopeJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2RopeJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2RopeJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2RopeJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2RopeJoint__GetLocalAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2RopeJoint15GetLocalAnchorAEv($2);
  return $3;
}
function _emscripten_bind_b2RopeJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2RopeJoint__SetMaxLength_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN11b2RopeJoint12SetMaxLengthEf($3, $4);
  return;
}
function _emscripten_bind_b2RopeJoint__GetLocalAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2RopeJoint15GetLocalAnchorBEv($2);
  return $3;
}
function _emscripten_bind_b2RopeJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2RopeJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267792)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267792);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243076) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5243076)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243080)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243076;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267632)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267632);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243068) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5243068)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5243072)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243068;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJoint__b2RopeJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(168);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN11b2RopeJointC2EPK14b2RopeJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJoint__GetLimitState_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK11b2RopeJoint13GetLimitStateEv($2);
  return $3;
}
function _emscripten_bind_b2RopeJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2PolygonShape____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PolygonShape__Set_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN14b2PolygonShape3SetEPK6b2Vec2i($4, $5, $6);
  return;
}
function _emscripten_bind_b2PolygonShape__ComputeMass_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  return;
}
function _emscripten_bind_b2PolygonShape__Clone_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2PolygonShape__GetVertex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK14b2PolygonShape9GetVertexEi($3, $4);
  return $5;
}
function _emscripten_bind_b2PolygonShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  return $15;
}
function _emscripten_bind_b2PolygonShape__SetAsBox_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN14b2PolygonShape8SetAsBoxEff($4, $5, $6);
  return;
}
function _emscripten_bind_b2PolygonShape__SetAsBox_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($6, $7, $8, $9, $10);
  return;
}
function _emscripten_bind_b2PolygonShape__set_m_centroid_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PolygonShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2PolygonShape__GetVertexCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK14b2PolygonShape14GetVertexCountEv($2);
  return $3;
}
function _emscripten_bind_b2PolygonShape__GetChildCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  return $7;
}
function _emscripten_bind_b2PolygonShape__TestPoint_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  return $11;
}
function _emscripten_bind_b2PolygonShape__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2PolygonShape__b2PolygonShape_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(152);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN14b2PolygonShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2EdgeShape____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2EdgeShape__Set_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN11b2EdgeShape3SetERK6b2Vec2S2_($4, $5, $6);
  return;
}
function _emscripten_bind_b2EdgeShape__ComputeMass_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  return;
}
function _emscripten_bind_b2EdgeShape__Clone_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2EdgeShape__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Shape7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2EdgeShape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  return $15;
}
function _emscripten_bind_b2EdgeShape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2EdgeShape__GetChildCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  return $7;
}
function _emscripten_bind_b2EdgeShape__TestPoint_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  return $11;
}
function _emscripten_bind_b2EdgeShape__b2EdgeShape_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(48);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN11b2EdgeShapeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Contact__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact7GetNextEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__SetEnabled_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN9b2Contact10SetEnabledEb($4, $6);
  return;
}
function _emscripten_bind_b2Contact__GetWorldManifold_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZNK9b2Contact16GetWorldManifoldEP15b2WorldManifold($3, $4);
  return;
}
function __ZNK9b2Contact16GetWorldManifoldEP15b2WorldManifold($this, $worldManifold) {
  var label = 0;
  var $1;
  var $2;
  var $bodyA;
  var $bodyB;
  var $shapeA;
  var $shapeB;
  $1=$this;
  $2=$worldManifold;
  var $3=$1;
  var $4=(($3+48)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=__ZN9b2Fixture7GetBodyEv($5);
  $bodyA=$6;
  var $7=(($3+52)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=__ZN9b2Fixture7GetBodyEv($8);
  $bodyB=$9;
  var $10=(($3+48)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=__ZN9b2Fixture8GetShapeEv($11);
  $shapeA=$12;
  var $13=(($3+52)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=__ZN9b2Fixture8GetShapeEv($14);
  $shapeB=$15;
  var $16=$2;
  var $17=(($3+64)|0);
  var $18=$bodyA;
  var $19=__ZNK6b2Body12GetTransformEv($18);
  var $20=$shapeA;
  var $21=(($20+8)|0);
  var $22=HEAPF32[(($21)>>2)];
  var $23=$bodyB;
  var $24=__ZNK6b2Body12GetTransformEv($23);
  var $25=$shapeB;
  var $26=(($25+8)|0);
  var $27=HEAPF32[(($26)>>2)];
  __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($16, $17, $19, $22, $24, $27);
  return;
}
function _emscripten_bind_b2Contact__GetRestitution_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact14GetRestitutionEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__ResetFriction_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN9b2Contact13ResetFrictionEv($2);
  return;
}
function __ZNK9b2Contact11GetFrictionEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+136)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN9b2Contact11SetFrictionEf($this, $friction) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$friction;
  var $3=$1;
  var $4=$2;
  var $5=(($3+136)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZN9b2Contact14SetRestitutionEf($this, $restitution) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$restitution;
  var $3=$1;
  var $4=$2;
  var $5=(($3+140)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function _emscripten_bind_b2Shape__get_m_radius_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Shape__set_m_radius_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZNK6b2Body11GetUserDataEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+148)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK6b2Body17IsSleepingAllowedEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP16[(($3)>>1)];
  var $5=(($4)&(65535));
  var $6=$5 & 4;
  var $7=(($6)|(0))==4;
  return $7;
}
function __ZN6b2Body17SetAngularDampingEf($this, $angularDamping) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$angularDamping;
  var $3=$1;
  var $4=$2;
  var $5=(($3+136)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZN6b2Body15SetGravityScaleEf($this, $scale) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$scale;
  var $3=$1;
  var $4=$2;
  var $5=(($3+140)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZN6b2Body11SetUserDataEPv($this, $data) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=$2;
  var $5=(($3+148)|0);
  HEAP32[(($5)>>2)]=$4;
  return;
}
function __ZNK6b2Body18GetAngularVelocityEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+72)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN6b2Body12GetJointListEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+108)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN9b2Contact13ResetFrictionEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($2+52)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+16)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=__Z13b2MixFrictionff($6, $10);
  var $12=(($2+136)|0);
  HEAPF32[(($12)>>2)]=$11;
  return;
}
function _emscripten_bind_b2Contact__GetFriction_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact11GetFrictionEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__IsTouching_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact10IsTouchingEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__IsEnabled_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact9IsEnabledEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__GetFixtureB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact11GetFixtureBEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__SetFriction_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Contact11SetFrictionEf($3, $4);
  return;
}
function _emscripten_bind_b2Contact__GetFixtureA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact11GetFixtureAEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__GetChildIndexA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact14GetChildIndexAEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__GetChildIndexB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK9b2Contact14GetChildIndexBEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__Evaluate_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2Contact__SetRestitution_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN9b2Contact14SetRestitutionEf($3, $4);
  return;
}
function _emscripten_bind_b2Contact__GetManifold_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN9b2Contact11GetManifoldEv($2);
  return $3;
}
function _emscripten_bind_b2Contact__ResetRestitution_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN9b2Contact16ResetRestitutionEv($2);
  return;
}
function __ZN9b2Contact16ResetRestitutionEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+20)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($2+52)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAPF32[(($9)>>2)];
  var $11=__Z16b2MixRestitutionff($6, $10);
  var $12=(($2+140)|0);
  HEAPF32[(($12)>>2)]=$11;
  return;
}
function _emscripten_bind_b2Shape__ComputeMass_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+28)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  FUNCTION_TABLE[$8]($4, $9, $10);
  return;
}
function _emscripten_bind_b2Shape__Clone_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2Shape__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK7b2Shape7GetTypeEv($2);
  return $3;
}
function _emscripten_bind_b2Shape__RayCast_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=$5;
  var $15=FUNCTION_TABLE[$10]($6, $11, $12, $13, $14);
  return $15;
}
function _emscripten_bind_b2Shape__ComputeAABB_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=$4;
  FUNCTION_TABLE[$9]($5, $10, $11, $12);
  return;
}
function _emscripten_bind_b2Shape__GetChildCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=FUNCTION_TABLE[$6]($2);
  return $7;
}
function _emscripten_bind_b2Shape__TestPoint_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=$3;
  var $11=FUNCTION_TABLE[$8]($4, $9, $10);
  return $11;
}
function _emscripten_bind_b2Body__GetAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body8GetAngleEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body11GetUserDataEv($2);
  return $3;
}
function _emscripten_bind_b2Body__IsSleepingAllowed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body17IsSleepingAllowedEv($2);
  return $3;
}
function _emscripten_bind_b2Body__SetAngularDamping_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body17SetAngularDampingEf($3, $4);
  return;
}
function _emscripten_bind_b2Body__SetActive_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body9SetActiveEb($4, $6);
  return;
}
function _emscripten_bind_b2Body__SetGravityScale_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body15SetGravityScaleEf($3, $4);
  return;
}
function _emscripten_bind_b2Body__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body11SetUserDataEPv($3, $4);
  return;
}
function _emscripten_bind_b2Body__GetAngularVelocity_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body18GetAngularVelocityEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetFixtureList_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body14GetFixtureListEv($2);
  return $3;
}
function _emscripten_bind_b2Body__ApplyForce_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Body10ApplyForceERK6b2Vec2S2_($4, $5, $6);
  return;
}
function __ZN6b2Body10ApplyForceERK6b2Vec2S2_($this, $force, $point) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$this;
      $2=$force;
      $3=$point;
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=2;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $11=__ZNK6b2Body7IsAwakeEv($5);
      var $12=(($11)&(1));
      var $13=(($12)|(0))==0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($5, 1);
      label = 5; break;
    case 5: 
      var $16=(($5+76)|0);
      var $17=$2;
      __ZN6b2Vec2pLERKS_($16, $17);
      var $18=$3;
      var $19=(($5+28)|0);
      var $20=(($19+16)|0);
      __ZmiRK6b2Vec2S1_($4, $18, $20);
      var $21=$2;
      var $22=__Z7b2CrossRK6b2Vec2S1_($4, $21);
      var $23=(($5+84)|0);
      var $24=HEAPF32[(($23)>>2)];
      var $25=($24)+($22);
      HEAPF32[(($23)>>2)]=$25;
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__GetLocalPoint_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267848)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267848);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243060) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body13GetLocalPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0);HEAP32[((5243060)>>2)]=HEAP32[(($16)>>2)];HEAP32[((5243064)>>2)]=HEAP32[((($16)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243060;
    case 6: 
      var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
      var $19=$18$0;
      $3=$19;
      var $20=$18$1;
      $4=$20;
      label = 7; break;
    case 7: 
      var $22=$3;
      var $23=$4;
      var $24$0=$22;
      var $24$1=0;
      var $25$0=$24$0;
      var $25$1=$23;
      ___resumeException($25$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__SetLinearVelocity_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body17SetLinearVelocityERK6b2Vec2($3, $4);
  return;
}
function __ZN6b2Body17SetLinearVelocityERK6b2Vec2($this, $v) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$v;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $9=$2;
      var $10=$2;
      var $11=__Z5b2DotRK6b2Vec2S1_($9, $10);
      var $12=$11 > 0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      label = 5; break;
    case 5: 
      var $15=(($3+64)|0);
      var $16=$2;
      var $17=$15;
      var $18=$16;
      assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__GetJointList_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body12GetJointListEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetLinearVelocity_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267736)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267736);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243052) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Body17GetLinearVelocityEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5243052)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5243056)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243052;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Body17GetLinearVelocityEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=$agg_result;
  var $5=$3;
  assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];
  return;
}
function _emscripten_bind_b2Body__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body7GetNextEv($2);
  return $3;
}
function _emscripten_bind_b2Body__SetSleepingAllowed_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body18SetSleepingAllowedEb($4, $6);
  return;
}
function __ZN6b2Body18SetSleepingAllowedEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAP16[(($8)>>1)];
      var $10=(($9)&(65535));
      var $11=$10 | 4;
      var $12=(($11) & 65535);
      HEAP16[(($8)>>1)]=$12;
      label = 4; break;
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAP16[(($14)>>1)];
      var $16=(($15)&(65535));
      var $17=$16 & -5;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      __ZN6b2Body8SetAwakeEb($4, 1);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__SetTransform_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Body12SetTransformERK6b2Vec2f($4, $5, $6);
  return;
}
function _emscripten_bind_b2Body__GetMass_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body7GetMassEv($2);
  return $3;
}
function _emscripten_bind_b2Body__SetAngularVelocity_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body18SetAngularVelocityEf($3, $4);
  return;
}
function __ZN6b2Body18SetAngularVelocityEf($this, $w) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$w;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $9=$2;
      var $10=$2;
      var $11=($9)*($10);
      var $12=$11 > 0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      label = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($3+72)|0);
      HEAPF32[(($16)>>2)]=$15;
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__GetMassData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZNK6b2Body11GetMassDataEP10b2MassData($3, $4);
  return;
}
function __ZNK6b2Body11GetMassDataEP10b2MassData($this, $data) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$data;
  var $3=$1;
  var $4=(($3+116)|0);
  var $5=HEAPF32[(($4)>>2)];
  var $6=$2;
  var $7=(($6)|0);
  HEAPF32[(($7)>>2)]=$5;
  var $8=(($3+124)|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=(($3+116)|0);
  var $11=HEAPF32[(($10)>>2)];
  var $12=(($3+28)|0);
  var $13=(($12)|0);
  var $14=(($3+28)|0);
  var $15=(($14)|0);
  var $16=__Z5b2DotRK6b2Vec2S1_($13, $15);
  var $17=($11)*($16);
  var $18=($9)+($17);
  var $19=$2;
  var $20=(($19+12)|0);
  HEAPF32[(($20)>>2)]=$18;
  var $21=$2;
  var $22=(($21+4)|0);
  var $23=(($3+28)|0);
  var $24=(($23)|0);
  var $25=$22;
  var $26=$24;
  assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
  return;
}
function _emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267536)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267536);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243044) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body31GetLinearVelocityFromWorldPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0);HEAP32[((5243044)>>2)]=HEAP32[(($16)>>2)];HEAP32[((5243048)>>2)]=HEAP32[((($16)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243044;
    case 6: 
      var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
      var $19=$18$0;
      $3=$19;
      var $20=$18$1;
      $4=$20;
      label = 7; break;
    case 7: 
      var $22=$3;
      var $23=$4;
      var $24$0=$22;
      var $24$1=0;
      var $25$0=$24$0;
      var $25$1=$23;
      ___resumeException($25$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Body31GetLinearVelocityFromWorldPointERK6b2Vec2($agg_result, $this, $worldPoint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(8);
  $1=$this;
  $2=$worldPoint;
  var $5=$1;
  var $6=(($5+64)|0);
  var $7=(($5+72)|0);
  var $8=HEAPF32[(($7)>>2)];
  var $9=$2;
  var $10=(($5+28)|0);
  var $11=(($10+16)|0);
  __ZmiRK6b2Vec2S1_($4, $9, $11);
  __Z7b2CrossfRK6b2Vec2($3, $8, $4);
  __ZplRK6b2Vec2S1_($agg_result, $6, $3);
  STACKTOP = __stackBase__;
  return;
}
function _emscripten_bind_b2Body__ResetMassData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Body13ResetMassDataEv($2);
  return;
}
function _emscripten_bind_b2Body__ApplyForceToCenter_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body18ApplyForceToCenterERK6b2Vec2($3, $4);
  return;
}
function __ZN6b2Body18ApplyForceToCenterERK6b2Vec2($this, $force) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$force;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=2;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $9=__ZNK6b2Body7IsAwakeEv($3);
      var $10=(($9)&(1));
      var $11=(($10)|(0))==0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      label = 5; break;
    case 5: 
      var $14=(($3+76)|0);
      var $15=$2;
      __ZN6b2Vec2pLERKS_($14, $15);
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__ApplyTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body11ApplyTorqueEf($3, $4);
  return;
}
function __ZN6b2Body11ApplyTorqueEf($this, $torque) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$torque;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=2;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $9=__ZNK6b2Body7IsAwakeEv($3);
      var $10=(($9)&(1));
      var $11=(($10)|(0))==0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      label = 5; break;
    case 5: 
      var $14=$2;
      var $15=(($3+84)|0);
      var $16=HEAPF32[(($15)>>2)];
      var $17=($16)+($14);
      HEAPF32[(($15)>>2)]=$17;
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__IsAwake_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body7IsAwakeEv($2);
  return $3;
}
function _emscripten_bind_b2Body__SetType_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body7SetTypeE10b2BodyType($3, $4);
  return;
}
function __ZNK6b2Body17GetAngularDampingEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+136)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK6b2Body15IsFixedRotationEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP16[(($3)>>1)];
  var $5=(($4)&(65535));
  var $6=$5 & 16;
  var $7=(($6)|(0))==16;
  return $7;
}
function __ZNK6b2Body14GetLocalCenterEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=(($3)|0);
  return $4;
}
function __ZNK6b2Body16GetLinearDampingEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+132)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN6b2Body16SetLinearDampingEf($this, $linearDamping) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$linearDamping;
  var $3=$1;
  var $4=$2;
  var $5=(($3+132)|0);
  HEAPF32[(($5)>>2)]=$4;
  return;
}
function __ZN6b2Body9SetBulletEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAP16[(($8)>>1)];
      var $10=(($9)&(65535));
      var $11=$10 | 8;
      var $12=(($11) & 65535);
      HEAP16[(($8)>>1)]=$12;
      label = 4; break;
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAP16[(($14)>>1)];
      var $16=(($15)&(65535));
      var $17=$16 & -9;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Body15GetGravityScaleEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+140)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZNK6b2Body11GetPositionEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=(($3)|0);
  return $4;
}
function __ZNK15b2FrictionJoint15GetLocalAnchorAEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+68)|0);
  return $3;
}
function __ZNK15b2FrictionJoint15GetLocalAnchorBEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+76)|0);
  return $3;
}
function _emscripten_bind_b2Body__CreateFixture_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN6b2Body13CreateFixtureEPK12b2FixtureDef($3, $4);
  return $5;
}
function _emscripten_bind_b2Body__CreateFixture_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZN6b2Body13CreateFixtureEPK7b2Shapef($4, $5, $6);
  return $7;
}
function _emscripten_bind_b2Body__SetMassData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body11SetMassDataEPK10b2MassData($3, $4);
  return;
}
function _emscripten_bind_b2Body__GetTransform_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body12GetTransformEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetWorldCenter_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body14GetWorldCenterEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetAngularDamping_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body17GetAngularDampingEv($2);
  return $3;
}
function _emscripten_bind_b2Body__ApplyLinearImpulse_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Body18ApplyLinearImpulseERK6b2Vec2S2_($4, $5, $6);
  return;
}
function __ZN6b2Body18ApplyLinearImpulseERK6b2Vec2S2_($this, $impulse, $point) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $5=(__stackBase__)+(8);
      $1=$this;
      $2=$impulse;
      $3=$point;
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=2;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $12=__ZNK6b2Body7IsAwakeEv($6);
      var $13=(($12)&(1));
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($6, 1);
      label = 5; break;
    case 5: 
      var $17=(($6+64)|0);
      var $18=(($6+120)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=$2;
      __ZmlfRK6b2Vec2($4, $19, $20);
      __ZN6b2Vec2pLERKS_($17, $4);
      var $21=(($6+128)|0);
      var $22=HEAPF32[(($21)>>2)];
      var $23=$3;
      var $24=(($6+28)|0);
      var $25=(($24+16)|0);
      __ZmiRK6b2Vec2S1_($5, $23, $25);
      var $26=$2;
      var $27=__Z7b2CrossRK6b2Vec2S1_($5, $26);
      var $28=($22)*($27);
      var $29=(($6+72)|0);
      var $30=HEAPF32[(($29)>>2)];
      var $31=($30)+($28);
      HEAPF32[(($29)>>2)]=$31;
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__IsFixedRotation_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body15IsFixedRotationEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetLocalCenter_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body14GetLocalCenterEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetWorldVector_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267824)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267824);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243036) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body14GetWorldVectorERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0);HEAP32[((5243036)>>2)]=HEAP32[(($16)>>2)];HEAP32[((5243040)>>2)]=HEAP32[((($16)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243036;
    case 6: 
      var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
      var $19=$18$0;
      $3=$19;
      var $20=$18$1;
      $4=$20;
      label = 7; break;
    case 7: 
      var $22=$3;
      var $23=$4;
      var $24$0=$22;
      var $24$1=0;
      var $25$0=$24$0;
      var $25$1=$23;
      ___resumeException($25$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267544)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267544);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243028) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body31GetLinearVelocityFromLocalPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0);HEAP32[((5243028)>>2)]=HEAP32[(($16)>>2)];HEAP32[((5243032)>>2)]=HEAP32[((($16)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243028;
    case 6: 
      var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
      var $19=$18$0;
      $3=$19;
      var $20=$18$1;
      $4=$20;
      label = 7; break;
    case 7: 
      var $22=$3;
      var $23=$4;
      var $24$0=$22;
      var $24$1=0;
      var $25$0=$24$0;
      var $25$1=$23;
      ___resumeException($25$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK6b2Body31GetLinearVelocityFromLocalPointERK6b2Vec2($agg_result, $this, $localPoint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  $1=$this;
  $2=$localPoint;
  var $4=$1;
  var $5=$2;
  __ZNK6b2Body13GetWorldPointERK6b2Vec2($3, $4, $5);
  __ZNK6b2Body31GetLinearVelocityFromWorldPointERK6b2Vec2($agg_result, $4, $3);
  STACKTOP = __stackBase__;
  return;
}
function _emscripten_bind_b2Body__GetContactList_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body14GetContactListEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetWorldPoint_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267840)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267840);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243020) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body13GetWorldPointERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0);HEAP32[((5243020)>>2)]=HEAP32[(($16)>>2)];HEAP32[((5243024)>>2)]=HEAP32[((($16)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243020;
    case 6: 
      var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
      var $19=$18$0;
      $3=$19;
      var $20=$18$1;
      $4=$20;
      label = 7; break;
    case 7: 
      var $22=$3;
      var $23=$4;
      var $24$0=$22;
      var $24$1=0;
      var $25$0=$24$0;
      var $25$1=$23;
      ___resumeException($25$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__SetAwake_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body8SetAwakeEb($4, $6);
  return;
}
function _emscripten_bind_b2Body__GetLinearDamping_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body16GetLinearDampingEv($2);
  return $3;
}
function _emscripten_bind_b2Body__IsBullet_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body8IsBulletEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetWorld_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Body8GetWorldEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetLocalVector_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267832)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267832);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5243012) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$2;
      __ZNK6b2Body14GetLocalVectorERK6b2Vec2($5, $14, $15);
      var $16=$5;
      assert(8 % 1 === 0);HEAP32[((5243012)>>2)]=HEAP32[(($16)>>2)];HEAP32[((5243016)>>2)]=HEAP32[((($16)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5243012;
    case 6: 
      var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
      var $19=$18$0;
      $3=$19;
      var $20=$18$1;
      $4=$20;
      label = 7; break;
    case 7: 
      var $22=$3;
      var $23=$4;
      var $24$0=$22;
      var $24$1=0;
      var $25$0=$24$0;
      var $25$1=$23;
      ___resumeException($25$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__SetLinearDamping_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body16SetLinearDampingEf($3, $4);
  return;
}
function _emscripten_bind_b2Body__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Body4DumpEv($2);
  return;
}
function _emscripten_bind_b2Body__SetBullet_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body9SetBulletEb($4, $6);
  return;
}
function _emscripten_bind_b2Body__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body7GetTypeEv($2);
  return $3;
}
function _emscripten_bind_b2Body__GetGravityScale_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body15GetGravityScaleEv($2);
  return $3;
}
function _emscripten_bind_b2Body__DestroyFixture_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body14DestroyFixtureEP9b2Fixture($3, $4);
  return;
}
function _emscripten_bind_b2Body__GetInertia_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body10GetInertiaEv($2);
  return $3;
}
function __ZNK6b2Body10GetInertiaEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+124)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(($2+116)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($2+28)|0);
  var $8=(($7)|0);
  var $9=(($2+28)|0);
  var $10=(($9)|0);
  var $11=__Z5b2DotRK6b2Vec2S1_($8, $10);
  var $12=($6)*($11);
  var $13=($4)+($12);
  return $13;
}
function _emscripten_bind_b2Body__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body8IsActiveEv($2);
  return $3;
}
function _emscripten_bind_b2Body__SetFixedRotation_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN6b2Body16SetFixedRotationEb($4, $6);
  return;
}
function __ZN6b2Body16SetFixedRotationEb($this, $flag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      var $3=(($flag)&(1));
      $2=$3;
      var $4=$1;
      var $5=$2;
      var $6=(($5) & 1);
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=(($4+4)|0);
      var $9=HEAP16[(($8)>>1)];
      var $10=(($9)&(65535));
      var $11=$10 | 16;
      var $12=(($11) & 65535);
      HEAP16[(($8)>>1)]=$12;
      label = 4; break;
    case 3: 
      var $14=(($4+4)|0);
      var $15=HEAP16[(($14)>>1)];
      var $16=(($15)&(65535));
      var $17=$16 & -17;
      var $18=(($17) & 65535);
      HEAP16[(($14)>>1)]=$18;
      label = 4; break;
    case 4: 
      __ZN6b2Body13ResetMassDataEv($4);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__ApplyAngularImpulse_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Body19ApplyAngularImpulseEf($3, $4);
  return;
}
function __ZN6b2Body19ApplyAngularImpulseEf($this, $impulse) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$this;
      $2=$impulse;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=2;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $9=__ZNK6b2Body7IsAwakeEv($3);
      var $10=(($9)&(1));
      var $11=(($10)|(0))==0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      __ZN6b2Body8SetAwakeEb($3, 1);
      label = 5; break;
    case 5: 
      var $14=(($3+128)|0);
      var $15=HEAPF32[(($14)>>2)];
      var $16=$2;
      var $17=($15)*($16);
      var $18=(($3+72)|0);
      var $19=HEAPF32[(($18)>>2)];
      var $20=($19)+($17);
      HEAPF32[(($18)>>2)]=$20;
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Body__GetPosition_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Body11GetPositionEv($2);
  return $3;
}
function _emscripten_bind_b2FrictionJoint__SetMaxTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2FrictionJoint12SetMaxTorqueEf($3, $4);
  return;
}
function _emscripten_bind_b2FrictionJoint__GetMaxForce_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2FrictionJoint11GetMaxForceEv($2);
  return $3;
}
function _emscripten_bind_b2FrictionJoint__GetAnchorA_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267688)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267688);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242996) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5242996)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5243000)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242996;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FrictionJoint__GetReactionTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+12)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  var $9=FUNCTION_TABLE[$7]($3, $8);
  return $9;
}
function _emscripten_bind_b2FrictionJoint__Dump_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+16)|0);
  var $6=HEAP32[(($5)>>2)];
  FUNCTION_TABLE[$6]($2);
  return;
}
function _emscripten_bind_b2FrictionJoint____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FrictionJoint__GetCollideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint19GetCollideConnectedEv($3);
  return $4;
}
function _emscripten_bind_b2FrictionJoint__GetUserData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint11GetUserDataEv($3);
  return $4;
}
function _emscripten_bind_b2FrictionJoint__GetType_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint7GetTypeEv($3);
  return $4;
}
function _emscripten_bind_b2FrictionJoint__SetMaxForce_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2FrictionJoint11SetMaxForceEf($3, $4);
  return;
}
function _emscripten_bind_b2FrictionJoint__GetBodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyBEv($3);
  return $4;
}
function _emscripten_bind_b2FrictionJoint__GetLocalAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2FrictionJoint15GetLocalAnchorAEv($2);
  return $3;
}
function _emscripten_bind_b2FrictionJoint__b2FrictionJoint_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(180);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2FrictionJointC2EPK18b2FrictionJointDef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FrictionJoint__GetLocalAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2FrictionJoint15GetLocalAnchorBEv($2);
  return $3;
}
function _emscripten_bind_b2FrictionJoint__SetUserData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  __ZN7b2Joint11SetUserDataEPv($4, $5);
  return;
}
function _emscripten_bind_b2FrictionJoint__GetAnchorB_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267680)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267680);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242988) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      FUNCTION_TABLE[$17]($4, $13);
      var $18=$4;
      assert(8 % 1 === 0);HEAP32[((5242988)>>2)]=HEAP32[(($18)>>2)];HEAP32[((5242992)>>2)]=HEAP32[((($18)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242988;
    case 6: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 7; break;
    case 7: 
      var $24=$2;
      var $25=$3;
      var $26$0=$24;
      var $26$1=0;
      var $27$0=$26$0;
      var $27$1=$25;
      ___resumeException($27$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FrictionJoint__GetReactionForce_p1($self, $arg0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $1=$self;
      $2=$arg0;
      var $6=HEAP8[(5267568)];
      var $7=(($6 << 24) >> 24)==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=___cxa_guard_acquire(5267568);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242980) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      FUNCTION_TABLE[$18]($5, $14, $19);
      var $20=$5;
      assert(8 % 1 === 0);HEAP32[((5242980)>>2)]=HEAP32[(($20)>>2)];HEAP32[((5242984)>>2)]=HEAP32[((($20)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242980;
    case 6: 
      var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
      var $23=$22$0;
      $3=$23;
      var $24=$22$1;
      $4=$24;
      label = 7; break;
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28$0=$26;
      var $28$1=0;
      var $29$0=$28$0;
      var $29$1=$27;
      ___resumeException($29$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FrictionJoint__GetBodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint8GetBodyAEv($3);
  return $4;
}
function _emscripten_bind_b2Filter__set_maskBits_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+2)|0);
  HEAP16[(($5)>>1)]=$3;
  return;
}
function _emscripten_bind_b2Filter__set_categoryBits_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP16[(($5)>>1)]=$3;
  return;
}
function _emscripten_bind_b2Filter__get_groupIndex_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP16[(($3)>>1)];
  return $4;
}
function _emscripten_bind_b2Filter__set_groupIndex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP16[(($5)>>1)]=$3;
  return;
}
function _emscripten_bind_b2Filter__get_maskBits_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+2)|0);
  var $4=HEAP16[(($3)>>1)];
  return $4;
}
function _emscripten_bind_b2Filter__get_categoryBits_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP16[(($3)>>1)];
  return $4;
}
function __ZN18b2FrictionJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN18b2FrictionJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN18b2FrictionJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN18b2FrictionJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2FrictionJointDef__get_maxForce_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2FrictionJointDef__set_maxForce_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function __ZN18b2FrictionJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+40)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN18b2FrictionJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__get_linearDamping_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__get_awake_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+37)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2BodyDef__get_type_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__get_allowSleep_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2BodyDef__get_bullet_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+39)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2BodyDef__get_userData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__set_angularDamping_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+32)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2BodyDef__set_fixedRotation_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+38)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2BodyDef__set_allowSleep_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+36)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2BodyDef__get_gravityScale_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__set_angularVelocity_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+24)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2BodyDef__set_userData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2BodyDef__get_position_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  return $3;
}
function _emscripten_bind_b2BodyDef__set_type_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2BodyDef__set_gravityScale_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+48)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2BodyDef__get_angularDamping_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+32)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__set_bullet_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+39)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2BodyDef__set_active_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+40)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2BodyDef__set_angle_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2BodyDef__get_angle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__get_angularVelocity_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2BodyDef__get_linearVelocity_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  return $3;
}
function _emscripten_bind_b2BodyDef__get_active_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2BodyDef__set_linearDamping_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+28)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2BodyDef__get_fixedRotation_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+38)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2BodyDef__set_awake_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+37)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2Vec2__set_x_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FrictionJoint__GetNext_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZN7b2Joint7GetNextEv($3);
  return $4;
}
function _emscripten_bind_b2FrictionJoint__GetMaxTorque_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2FrictionJoint12GetMaxTorqueEv($2);
  return $3;
}
function _emscripten_bind_b2FrictionJoint__IsActive_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=__ZNK7b2Joint8IsActiveEv($3);
  return $4;
}
function _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK16b2StackAllocator16GetMaxAllocationEv($2);
  return $3;
}
function _emscripten_bind_b2StackAllocator____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$self;
      var $4=$1;
      var $5=(($4)|(0))==0;
      if ($5) { label = 4; break; } else { label = 2; break; }
    case 2: 
      (function() { try { __THREW__ = 0; return __ZN16b2StackAllocatorD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $8=$4;
      __ZdlPv($8);
      label = 4; break;
    case 4: 
      return;
    case 5: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $2=$12;
      var $13=$11$1;
      $3=$13;
      var $14=$4;
      __ZdlPv($14);
      label = 6; break;
    case 6: 
      var $16=$2;
      var $17=$3;
      var $18$0=$16;
      var $18$1=0;
      var $19$0=$18$0;
      var $19$1=$17;
      ___resumeException($19$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2StackAllocator__b2StackAllocator_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(102800);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN16b2StackAllocatorC2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2StackAllocator__Allocate_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN16b2StackAllocator8AllocateEi($3, $4);
  return $5;
}
function _emscripten_bind_b2StackAllocator__Free_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2StackAllocator4FreeEPv($3, $4);
  return;
}
function _emscripten_bind_b2DestructionListener____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      FUNCTION_TABLE[$8]($2);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DestructionListener__SayGoodbye_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+8)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  FUNCTION_TABLE[$7]($3, $8);
  return;
}
function _emscripten_bind_b2DestructionListener__b2DestructionListener_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(4);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN21b2DestructionListenerC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN21b2DestructionListenerC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN21b2DestructionListenerC2Ev($2);
  return;
}
function _emscripten_bind_b2Filter____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Filter__b2Filter_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(6);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN8b2FilterC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2FrictionJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN18b2FrictionJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2FrictionJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN18b2FrictionJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2FrictionJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN18b2FrictionJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2FrictionJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN18b2FrictionJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2FrictionJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(44);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN18b2FrictionJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN18b2FrictionJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN18b2FrictionJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2FrictionJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN18b2FrictionJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2FrictionJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN18b2FrictionJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2FrictionJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN18b2FrictionJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($5, $6, $7, $8);
  return;
}
function _emscripten_bind_b2BodyDef__set_position_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2BodyDef__set_linearVelocity_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+16)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2BodyDef__b2BodyDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(52);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN9b2BodyDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN9b2BodyDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN9b2BodyDefC2Ev($2);
  return;
}
function _emscripten_bind_b2BodyDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec2__Normalize_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZN6b2Vec29NormalizeEv($2);
  return $3;
}
function _emscripten_bind_b2Vec2__b2Vec2_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(8);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec2__b2Vec2_p2($arg0, $arg1) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$arg0;
      $2=$arg1;
      var $5=__Znwj(8);
      var $6=$5;
      var $7=$1;
      var $8=$2;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Eff($6, $7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $6;
    case 3: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $3=$12;
      var $13=$11$1;
      $4=$13;
      __ZdlPv($5);
      label = 4; break;
    case 4: 
      var $15=$3;
      var $16=$4;
      var $17$0=$15;
      var $17$1=0;
      var $18$0=$17$0;
      var $18$1=$16;
      ___resumeException($18$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec2__Set_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2Vec23SetEff($4, $5, $6);
  return;
}
function _emscripten_bind_b2Vec2__get_x_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Vec2__get_y_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Vec2__set_y_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2Vec3__set_z_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2Vec3__get_z_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2DistanceProxy__get_m_radius_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2DistanceProxy__set_m_radius_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+24)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2DistanceProxy__get_m_vertices_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2DistanceProxy__get_m_count_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZNK15b2DistanceProxy14GetVertexCountEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2DistanceProxy__set_m_vertices_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+16)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2DistanceProxy__set_m_count_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+20)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FixtureDef__get_isSensor_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2FixtureDef__set_userData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FixtureDef__set_shape_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FixtureDef__get_density_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2FixtureDef__get_shape_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2FixtureDef__set_density_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+16)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FixtureDef__set_restitution_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FixtureDef__get_restitution_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2FixtureDef__set_isSensor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+20)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2FixtureDef__get_filter_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+22)|0);
  return $3;
}
function _emscripten_bind_b2FixtureDef__get_friction_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2FixtureDef__set_friction_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2FixtureDef__get_userData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Manifold__get_localPoint_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  return $3;
}
function _emscripten_bind_b2Manifold__set_type_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2Manifold__get_pointCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Manifold__get_type_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Manifold__set_pointCount_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2Manifold__get_localNormal_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  return $3;
}
function _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+48)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+68)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  return $3;
}
function _emscripten_bind_b2Vec2__IsValid_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Vec27IsValidEv($2);
  return $3;
}
function _emscripten_bind_b2Vec2__Skew_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267928)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267928);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242972) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Vec24SkewEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242972)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242976)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242972;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec2__LengthSquared_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Vec213LengthSquaredEv($2);
  return $3;
}
function _emscripten_bind_b2Vec2__op_add_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec2pLERKS_($3, $4);
  return;
}
function _emscripten_bind_b2Vec2__SetZero_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Vec27SetZeroEv($2);
  return;
}
function _emscripten_bind_b2Vec2__Length_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2Vec26LengthEv($2);
  return $3;
}
function _emscripten_bind_b2Vec2____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec2__op_mul_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec2mLEf($3, $4);
  return;
}
function _emscripten_bind_b2Vec2__op_sub_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267920)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267920);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242964) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Vec2ngEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242964)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242968)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242964;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec3____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec3__Set_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN6b2Vec33SetEfff($5, $6, $7, $8);
  return;
}
function _emscripten_bind_b2Vec3__op_add_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec3pLERKS_($3, $4);
  return;
}
function _emscripten_bind_b2Vec3__SetZero_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN6b2Vec37SetZeroEv($2);
  return;
}
function _emscripten_bind_b2Vec3__b2Vec3_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(12);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec3C1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec3__b2Vec3_p3($arg0, $arg1, $arg2) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$arg0;
      $2=$arg1;
      $3=$arg2;
      var $6=__Znwj(12);
      var $7=$6;
      var $8=$1;
      var $9=$2;
      var $10=$3;
      (function() { try { __THREW__ = 0; return __ZN6b2Vec3C1Efff($7, $8, $9, $10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $7;
    case 3: 
      var $13$0 = ___cxa_find_matching_catch(-1, -1); $13$1 = tempRet0;
      var $14=$13$0;
      $4=$14;
      var $15=$13$1;
      $5=$15;
      __ZdlPv($6);
      label = 4; break;
    case 4: 
      var $17=$4;
      var $18=$5;
      var $19$0=$17;
      var $19$1=0;
      var $20$0=$19$0;
      var $20$1=$18;
      ___resumeException($20$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Vec3__op_mul_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2Vec3mLEf($3, $4);
  return;
}
function _emscripten_bind_b2Vec3__op_sub_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267912)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267912);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec3C1Ev(5242952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2Vec3ngEv($4, $13);
      var $14=$4;
      assert(12 % 1 === 0);HEAP32[((5242952)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242956)>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((5242960)>>2)]=HEAP32[((($14)+(8))>>2)];
      STACKTOP = __stackBase__;
      return 5242952;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceProxy__Set_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($4, $5, $6);
  return;
}
function _emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(28);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN15b2DistanceProxyC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceProxy____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceProxy__GetSupportVertex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK15b2DistanceProxy16GetSupportVertexERK6b2Vec2($3, $4);
  return $5;
}
function __ZNK15b2DistanceProxy16GetSupportVertexERK6b2Vec2($this, $d) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $bestIndex;
      var $bestValue;
      var $i;
      var $value;
      $1=$this;
      $2=$d;
      var $3=$1;
      $bestIndex=0;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=$2;
      var $8=__Z5b2DotRK6b2Vec2S1_($6, $7);
      $bestValue=$8;
      $i=1;
      label = 2; break;
    case 2: 
      var $10=$i;
      var $11=(($3+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($10)|(0)) < (($12)|(0));
      if ($13) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $15=$i;
      var $16=(($3+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($15<<3))|0);
      var $19=$2;
      var $20=__Z5b2DotRK6b2Vec2S1_($18, $19);
      $value=$20;
      var $21=$value;
      var $22=$bestValue;
      var $23=$21 > $22;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$i;
      $bestIndex=$25;
      var $26=$value;
      $bestValue=$26;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      label = 2; break;
    case 7: 
      var $32=$bestIndex;
      var $33=(($3+16)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+($32<<3))|0);
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceProxy__GetVertexCount_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK15b2DistanceProxy14GetVertexCountEv($2);
  return $3;
}
function _emscripten_bind_b2DistanceProxy__GetVertex_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK15b2DistanceProxy9GetVertexEi($3, $4);
  return $5;
}
function _emscripten_bind_b2DistanceProxy__GetSupport_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($3, $4);
  return $5;
}
function _emscripten_bind_b2FixtureDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FixtureDef__b2FixtureDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(28);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN12b2FixtureDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2FixtureDef__set_filter_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+22)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(6 % 1 === 0);HEAP16[(($6)>>1)]=HEAP16[(($7)>>1)];HEAP16[((($6)+(2))>>1)]=HEAP16[((($7)+(2))>>1)];HEAP16[((($6)+(4))>>1)]=HEAP16[((($7)+(4))>>1)];
  return;
}
function _emscripten_bind_b2Manifold____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Manifold__b2Manifold_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(64);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN10b2ManifoldC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Manifold__set_localPoint_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+48)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2Manifold__set_localNormal_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+40)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PrismaticJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN19b2PrismaticJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function __ZN19b2PrismaticJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN19b2PrismaticJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+52)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function __ZN19b2PrismaticJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function __ZN19b2PrismaticJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN19b2PrismaticJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+64)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+60)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function __ZN19b2PrismaticJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Rot__set_c_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN5b2Rot11SetIdentityEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAPF32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAPF32[(($4)>>2)]=1;
  return;
}
function _emscripten_bind_b2Rot__get_c_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+48)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+52)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2WheelJointDef__get_localAxisA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  return $3;
}
function __ZN15b2WheelJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN15b2WheelJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2WheelJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2WheelJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function __ZN15b2WheelJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function _emscripten_bind_b2WheelJointDef__get_enableMotor_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN15b2WheelJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN15b2WheelJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2WheelJointDef__set_enableMotor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+44)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function __ZN15b2WheelJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2PrismaticJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN19b2PrismaticJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(72);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN19b2PrismaticJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN19b2PrismaticJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN19b2PrismaticJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2PrismaticJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN19b2PrismaticJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($6, $7, $8, $9, $10);
  return;
}
function _emscripten_bind_b2PrismaticJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PrismaticJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN19b2PrismaticJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2PrismaticJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN19b2PrismaticJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2PrismaticJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN19b2PrismaticJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2PrismaticJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN19b2PrismaticJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2Rot____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Rot__Set_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN5b2Rot3SetEf($3, $4);
  return;
}
function _emscripten_bind_b2Rot__GetAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK5b2Rot8GetAngleEv($2);
  return $3;
}
function __ZNK5b2Rot8GetAngleEv($this) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $3=$this;
  var $4=$3;
  var $5=(($4)|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=(($4+4)|0);
  var $8=HEAPF32[(($7)>>2)];
  $1=$6;
  $2=$8;
  var $9=$1;
  var $10=$2;
  var $11=Math.atan2($9, $10);
  return $11;
}
function _emscripten_bind_b2Rot__GetYAxis_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267896)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267896);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK5b2Rot8GetYAxisEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242944)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242948)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242944;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK5b2Rot8GetYAxisEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(-$4);
  var $6=(($2+4)|0);
  var $7=HEAPF32[(($6)>>2)];
  __ZN6b2Vec2C1Eff($agg_result, $5, $7);
  return;
}
function _emscripten_bind_b2Rot__GetXAxis_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267904)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267904);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK5b2Rot8GetXAxisEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242936)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242940)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242936;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK5b2Rot8GetXAxisEv($agg_result, $this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  var $5=(($2)|0);
  var $6=HEAPF32[(($5)>>2)];
  __ZN6b2Vec2C1Eff($agg_result, $4, $6);
  return;
}
function _emscripten_bind_b2Rot__SetIdentity_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN5b2Rot11SetIdentityEv($2);
  return;
}
function _emscripten_bind_b2Rot__b2Rot_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(8);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN5b2RotC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Rot__b2Rot_p1($arg0) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$arg0;
      var $4=__Znwj(8);
      var $5=$4;
      var $6=$1;
      (function() { try { __THREW__ = 0; return __ZN5b2RotC1Ef($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $5;
    case 3: 
      var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
      var $10=$9$0;
      $2=$10;
      var $11=$9$1;
      $3=$11;
      __ZdlPv($4);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2WheelJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2WheelJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2WheelJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2WheelJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2WheelJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN15b2WheelJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($6, $7, $8, $9, $10);
  return;
}
function _emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(64);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN15b2WheelJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2WheelJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2WheelJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2WheelJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WheelJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN15b2WheelJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2WheelJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN15b2WheelJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2WheelJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN15b2WheelJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2WheelJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN15b2WheelJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2WheelJointDef__set_localAxisA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+48)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+40)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN18b2RevoluteJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN18b2RevoluteJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function __ZN18b2RevoluteJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function __ZN18b2RevoluteJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN18b2RevoluteJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+52)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function __ZN18b2RevoluteJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_ratio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+60)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function _emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function __ZN16b2PulleyJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN16b2PulleyJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2PulleyJointDef__get_ratio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  return $3;
}
function _emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  return $3;
}
function __ZN16b2PulleyJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function _emscripten_bind_b2PulleyJointDef__set_lengthB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_lengthA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+52)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN16b2PulleyJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN16b2PulleyJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2PulleyJointDef__get_lengthB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2PulleyJointDef__get_lengthA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN16b2PulleyJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2JointDef__get_bodyA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2JointDef__set_userData_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2JointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2JointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2JointDef__get_bodyB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2JointDef__set_type_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2JointDef__get_collideConnected_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+16)|0);
  var $4=HEAP8[($3)];
  var $5=(($4) & 1);
  return $5;
}
function _emscripten_bind_b2JointDef__get_type_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2JointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$2;
  var $5=(($4) & 1);
  var $6=$1;
  var $7=(($6+16)|0);
  var $8=(($5)&(1));
  HEAP8[($7)]=$8;
  return;
}
function _emscripten_bind_b2JointDef__get_userData_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Transform__get_p_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  return $3;
}
function _emscripten_bind_b2Transform__get_q_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  return $3;
}
function _emscripten_bind_b2RevoluteJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN18b2RevoluteJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2RevoluteJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN18b2RevoluteJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(64);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN18b2RevoluteJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN18b2RevoluteJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN18b2RevoluteJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2RevoluteJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN18b2RevoluteJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($5, $6, $7, $8);
  return;
}
function _emscripten_bind_b2RevoluteJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RevoluteJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN18b2RevoluteJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2RevoluteJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN18b2RevoluteJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2RevoluteJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN18b2RevoluteJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2RevoluteJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN18b2RevoluteJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+36)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2PulleyJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2PulleyJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN16b2PulleyJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2PulleyJointDef__Initialize_p7($self, $arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  var $8;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  $6=$arg4;
  $7=$arg5;
  $8=$arg6;
  var $9=$1;
  var $10=$2;
  var $11=$3;
  var $12=$4;
  var $13=$5;
  var $14=$6;
  var $15=$7;
  var $16=$8;
  __ZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_f($9, $10, $11, $12, $13, $14, $15, $16);
  return;
}
function _emscripten_bind_b2PulleyJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2PulleyJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN16b2PulleyJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2PulleyJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN16b2PulleyJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2PulleyJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN16b2PulleyJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2PulleyJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN16b2PulleyJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(64);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN16b2PulleyJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN16b2PulleyJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN16b2PulleyJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2JointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2JointDef__b2JointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(20);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN10b2JointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN10b2JointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN10b2JointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2Transform____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Transform__Set_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN11b2Transform3SetERK6b2Vec2f($4, $5, $6);
  return;
}
function __ZN11b2Transform3SetERK6b2Vec2f($this, $position, $angle) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$position;
  $3=$angle;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$5;
  var $8=$6;
  assert(8 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];
  var $9=(($4+8)|0);
  var $10=$3;
  __ZN5b2Rot3SetEf($9, $10);
  return;
}
function _emscripten_bind_b2Transform__set_p_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2Transform__set_q_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2Transform__b2Transform_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(16);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN11b2TransformC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Transform__b2Transform_p2($arg0, $arg1) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$arg0;
      $2=$arg1;
      var $5=__Znwj(16);
      var $6=$5;
      var $7=$1;
      var $8=$2;
      (function() { try { __THREW__ = 0; return __ZN11b2TransformC1ERK6b2Vec2RK5b2Rot($6, $7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $6;
    case 3: 
      var $11$0 = ___cxa_find_matching_catch(-1, -1); $11$1 = tempRet0;
      var $12=$11$0;
      $3=$12;
      var $13=$11$1;
      $4=$13;
      __ZdlPv($5);
      label = 4; break;
    case 4: 
      var $15=$3;
      var $16=$4;
      var $17$0=$15;
      var $17$1=0;
      var $18$0=$17$0;
      var $18$1=$16;
      ___resumeException($18$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN11b2TransformC1ERK6b2Vec2RK5b2Rot($this, $position, $rotation) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$position;
  $3=$rotation;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN11b2TransformC2ERK6b2Vec2RK5b2Rot($4, $5, $6);
  return;
}
function __ZN7b2Color3SetEfff($this, $ri, $gi, $bi) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$this;
  $2=$ri;
  $3=$gi;
  $4=$bi;
  var $5=$1;
  var $6=$2;
  var $7=(($5)|0);
  HEAPF32[(($7)>>2)]=$6;
  var $8=$3;
  var $9=(($5+4)|0);
  HEAPF32[(($9)>>2)]=$8;
  var $10=$4;
  var $11=(($5+8)|0);
  HEAPF32[(($11)>>2)]=$10;
  return;
}
function _emscripten_bind_b2Color__set_r_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2Color__get_r_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Color__set_b_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2Color__get_g_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Color__get_b_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2Color__set_g_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2AABB__get_upperBound_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  return $3;
}
function _emscripten_bind_b2AABB__get_lowerBound_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  return $3;
}
function __ZN14b2WeldJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN14b2WeldJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN14b2WeldJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN14b2WeldJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2WeldJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2WeldJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function __ZN14b2WeldJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN14b2WeldJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+40)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN15b2MouseJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN15b2MouseJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN15b2MouseJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN15b2MouseJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2MouseJointDef__get_maxForce_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2MouseJointDef__set_maxForce_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+28)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+32)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2MouseJointDef__get_target_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2Transform__SetIdentity_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  __ZN11b2Transform11SetIdentityEv($2);
  return;
}
function __ZN11b2Transform11SetIdentityEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  __ZN6b2Vec27SetZeroEv($3);
  var $4=(($2+8)|0);
  __ZN5b2Rot11SetIdentityEv($4);
  return;
}
function _emscripten_bind_b2Color____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2Color__Set_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN7b2Color3SetEfff($5, $6, $7, $8);
  return;
}
function _emscripten_bind_b2Color__b2Color_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(12);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN7b2ColorC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN7b2ColorC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN7b2ColorC2Ev($2);
  return;
}
function _emscripten_bind_b2Color__b2Color_p3($arg0, $arg1, $arg2) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$arg0;
      $2=$arg1;
      $3=$arg2;
      var $6=__Znwj(12);
      var $7=$6;
      var $8=$1;
      var $9=$2;
      var $10=$3;
      (function() { try { __THREW__ = 0; return __ZN7b2ColorC1Efff($7, $8, $9, $10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $7;
    case 3: 
      var $13$0 = ___cxa_find_matching_catch(-1, -1); $13$1 = tempRet0;
      var $14=$13$0;
      $4=$14;
      var $15=$13$1;
      $5=$15;
      __ZdlPv($6);
      label = 4; break;
    case 4: 
      var $17=$4;
      var $18=$5;
      var $19$0=$17;
      var $19$1=0;
      var $20$0=$19$0;
      var $20$1=$18;
      ___resumeException($20$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2AABB____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2AABB__b2AABB_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(16);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN6b2AABBC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2AABB__set_upperBound_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2AABB__IsValid_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2AABB7IsValidEv($2);
  return $3;
}
function __ZNK6b2AABB7IsValidEv($this) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $d=__stackBase__;
      var $valid;
      $1=$this;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=(($2)|0);
      __ZmiRK6b2Vec2S1_($d, $3, $4);
      var $5=(($d)|0);
      var $6=HEAPF32[(($5)>>2)];
      var $7=$6 >= 0;
      if ($7) { label = 2; break; } else { var $13 = 0;label = 3; break; }
    case 2: 
      var $9=(($d+4)|0);
      var $10=HEAPF32[(($9)>>2)];
      var $11=$10 >= 0;
      var $13 = $11;label = 3; break;
    case 3: 
      var $13;
      var $14=(($13)&(1));
      $valid=$14;
      var $15=$valid;
      var $16=(($15) & 1);
      if ($16) { label = 4; break; } else { var $24 = 0;label = 6; break; }
    case 4: 
      var $18=(($2)|0);
      var $19=__ZNK6b2Vec27IsValidEv($18);
      if ($19) { label = 5; break; } else { var $24 = 0;label = 6; break; }
    case 5: 
      var $21=(($2+8)|0);
      var $22=__ZNK6b2Vec27IsValidEv($21);
      var $24 = $22;label = 6; break;
    case 6: 
      var $24;
      var $25=(($24)&(1));
      $valid=$25;
      var $26=$valid;
      var $27=(($26) & 1);
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2AABB__Contains_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZNK6b2AABB8ContainsERKS_($3, $4);
  return $5;
}
function _emscripten_bind_b2AABB__GetExtents_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267880)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267880);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2AABB10GetExtentsEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242928)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242932)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242928;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2AABB__GetCenter_p0($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $1=$self;
      var $5=HEAP8[(5267888)];
      var $6=(($5 << 24) >> 24)==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=___cxa_guard_acquire(5267888);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      (function() { try { __THREW__ = 0; return __ZN6b2Vec2C1Ev(5242920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      __ZNK6b2AABB9GetCenterEv($4, $13);
      var $14=$4;
      assert(8 % 1 === 0);HEAP32[((5242920)>>2)]=HEAP32[(($14)>>2)];HEAP32[((5242924)>>2)]=HEAP32[((($14)+(4))>>2)];
      STACKTOP = __stackBase__;
      return 5242920;
    case 6: 
      var $16$0 = ___cxa_find_matching_catch(-1, -1); $16$1 = tempRet0;
      var $17=$16$0;
      $2=$17;
      var $18=$16$1;
      $3=$18;
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$3;
      var $22$0=$20;
      var $22$1=0;
      var $23$0=$22$0;
      var $23$1=$21;
      ___resumeException($23$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2AABB__GetPerimeter_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=__ZNK6b2AABB12GetPerimeterEv($2);
  return $3;
}
function _emscripten_bind_b2AABB__Combine_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN6b2AABB7CombineERKS_($3, $4);
  return;
}
function __ZN6b2AABB7CombineERKS_($this, $aabb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(8);
  $1=$this;
  $2=$aabb;
  var $5=$1;
  var $6=(($5)|0);
  var $7=(($5)|0);
  var $8=$2;
  var $9=(($8)|0);
  __Z5b2MinRK6b2Vec2S1_($3, $7, $9);
  var $10=$6;
  var $11=$3;
  assert(8 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
  var $12=(($5+8)|0);
  var $13=(($5+8)|0);
  var $14=$2;
  var $15=(($14+8)|0);
  __Z5b2MaxRK6b2Vec2S1_($4, $13, $15);
  var $16=$12;
  var $17=$4;
  assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _emscripten_bind_b2AABB__Combine_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  __ZN6b2AABB7CombineERKS_S1_($4, $5, $6);
  return;
}
function _emscripten_bind_b2AABB__RayCast_p2($self, $arg0, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=__ZNK6b2AABB7RayCastEP15b2RayCastOutputRK14b2RayCastInput($4, $5, $6);
  return $7;
}
function _emscripten_bind_b2AABB__set_lowerBound_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2WeldJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN14b2WeldJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2WeldJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN14b2WeldJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2WeldJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN14b2WeldJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2WeldJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN14b2WeldJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2WeldJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2WeldJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN14b2WeldJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2WeldJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN14b2WeldJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2WeldJointDef__Initialize_p3($self, $arg0, $arg1, $arg2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  __ZN14b2WeldJointDef10InitializeEP6b2BodyS1_RK6b2Vec2($5, $6, $7, $8);
  return;
}
function _emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(48);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN14b2WeldJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2WeldJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2WeldJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2MouseJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN15b2MouseJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2MouseJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN15b2MouseJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2MouseJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2MouseJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2MouseJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN15b2MouseJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(40);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN15b2MouseJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2MouseJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2MouseJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2MouseJointDef__set_target_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2MouseJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN15b2MouseJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function __ZN15b2MouseJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function __ZN15b2MouseJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+32)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN18b2DistanceJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN18b2DistanceJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+44)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN18b2DistanceJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN18b2DistanceJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2DistanceJointDef__get_length_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+40)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function __ZN18b2DistanceJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+44)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function __ZN18b2DistanceJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2DistanceJointDef__set_length_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+40)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN14b2GearJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN14b2GearJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function _emscripten_bind_b2GearJointDef__get_joint1_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN14b2GearJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN14b2GearJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2GearJointDef__set_joint2_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+24)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2GearJointDef__set_ratio_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+28)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function __ZN14b2GearJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function _emscripten_bind_b2GearJointDef__get_joint2_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN14b2GearJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2GearJointDef__get_ratio_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2GearJointDef__set_joint1_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+20)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactEdge__set_contact_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+4)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactEdge__get_prev_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ContactEdge__get_other_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ContactEdge__set_prev_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactEdge__get_next_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+12)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2ContactEdge__set_other_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactEdge__set_next_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+12)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2ContactEdge__get_contact_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function __ZN14b2RopeJointDef9get_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN14b2RopeJointDef9get_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  return $6;
}
function __ZN14b2RopeJointDef9set_bodyAEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function __ZN14b2RopeJointDef9set_bodyBEP6b2Body($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$b;
  var $3=$1;
  var $4=$2;
  var $5=$3;
  var $6=(($5+12)|0);
  HEAP32[(($6)>>2)]=$4;
  return;
}
function _emscripten_bind_b2RopeJointDef__get_localAnchorA_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  return $3;
}
function _emscripten_bind_b2RopeJointDef__get_maxLength_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+36)|0);
  var $4=HEAPF32[(($3)>>2)];
  return $4;
}
function _emscripten_bind_b2RopeJointDef__get_localAnchorB_p0($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+28)|0);
  return $3;
}
function __ZN14b2RopeJointDef20get_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$4;
  var $6=(($5+16)|0);
  var $7=HEAP8[($6)];
  var $8=(($7) & 1);
  return $8;
}
function __ZN14b2RopeJointDef20set_collideConnectedEb($this, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  var $3=(($b)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=$4;
  var $8=(($7+16)|0);
  var $9=(($6)&(1));
  HEAP8[($8)]=$9;
  return;
}
function _emscripten_bind_b2RopeJointDef__set_maxLength_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$2;
  var $4=$1;
  var $5=(($4+36)|0);
  HEAPF32[(($5)>>2)]=$3;
  return;
}
function _emscripten_bind_b2MouseJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2MouseJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN15b2MouseJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2DistanceJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN18b2DistanceJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2DistanceJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN18b2DistanceJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2DistanceJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN18b2DistanceJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2DistanceJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN18b2DistanceJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2DistanceJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN18b2DistanceJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(48);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN18b2DistanceJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN18b2DistanceJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN18b2DistanceJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2DistanceJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2DistanceJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN18b2DistanceJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2DistanceJointDef__Initialize_p4($self, $arg0, $arg1, $arg2, $arg3) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$self;
  $2=$arg0;
  $3=$arg1;
  $4=$arg2;
  $5=$arg3;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  __ZN18b2DistanceJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_($6, $7, $8, $9, $10);
  return;
}
function _emscripten_bind_b2GearJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2GearJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN14b2GearJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2GearJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN14b2GearJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2GearJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN14b2GearJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2GearJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN14b2GearJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2GearJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN14b2GearJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2GearJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN14b2GearJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2GearJointDef__b2GearJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(32);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN14b2GearJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2GearJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2GearJointDefC2Ev($2);
  return;
}
function _emscripten_bind_b2ContactEdge____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2ContactEdge__b2ContactEdge_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(16);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN13b2ContactEdgeC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2RopeJointDef__get_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN14b2RopeJointDef9get_bodyAEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2RopeJointDef__get_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  var $5=__ZN14b2RopeJointDef9get_bodyBEP6b2Body($3, $4);
  return $5;
}
function _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=(($3+28)|0);
  var $5=$2;
  var $6=$4;
  var $7=$5;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  return;
}
function _emscripten_bind_b2RopeJointDef__set_bodyA_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN14b2RopeJointDef9set_bodyAEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2RopeJointDef__set_bodyB_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$arg0;
  var $3=$1;
  var $4=$2;
  __ZN14b2RopeJointDef9set_bodyBEP6b2Body($3, $4);
  return;
}
function _emscripten_bind_b2RopeJointDef____destroy___p0($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=$2;
      __ZdlPv($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _emscripten_bind_b2RopeJointDef__get_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  var $7=__ZN14b2RopeJointDef20get_collideConnectedEb($4, $6);
  return $7;
}
function _emscripten_bind_b2RopeJointDef__set_collideConnected_p1($self, $arg0) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  var $3=(($arg0)&(1));
  $2=$3;
  var $4=$1;
  var $5=$2;
  var $6=(($5) & 1);
  __ZN14b2RopeJointDef20set_collideConnectedEb($4, $6);
  return;
}
function _emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__Znwj(40);
      var $4=$3;
      (function() { try { __THREW__ = 0; return __ZN14b2RopeJointDefC1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      return $4;
    case 3: 
      var $7$0 = ___cxa_find_matching_catch(-1, -1); $7$1 = tempRet0;
      var $8=$7$0;
      $1=$8;
      var $9=$7$1;
      $2=$9;
      __ZdlPv($3);
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13$0=$11;
      var $13$1=0;
      var $14$0=$13$0;
      var $14$1=$12;
      ___resumeException($14$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2RopeJointDefC1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN14b2RopeJointDefC2Ev($2);
  return;
}
function __ZN7b2ColorC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN21b2DestructionListener10SayGoodbyeEP7b2Joint($this, $joint) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$joint;
  var $3=$1;
  return;
}
function __ZN21b2DestructionListener10SayGoodbyeEP9b2Fixture($this, $fixture) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$fixture;
  var $3=$1;
  return;
}
function __ZN21b2DestructionListenerD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN15b2QueryCallback13ReportFixtureEP9b2Fixture($this, $fixture) {
  var label = 0;
  var $1;
  var $2;
  $1=$this;
  $2=$fixture;
  var $3=$1;
  return 0;
}
function __ZN15b2QueryCallbackD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN17b2RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f($this, $fixture, $point, $normal, $fraction) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$this;
  $2=$fixture;
  $3=$point;
  $4=$normal;
  $5=$fraction;
  var $6=$1;
  return 0;
}
function __ZN17b2RayCastCallbackD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZNSt9type_infoD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x, $y, $0) {
  var label = 0;
  var $2;
  var $3;
  var $4;
  $2=$x;
  $3=$y;
  var $5=(($0)&(1));
  $4=$5;
  var $6=$2;
  var $7=$3;
  var $8=(($6)|(0))==(($7)|(0));
  return $8;
}
function __ZN21b2DestructionListenerC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((5264664)|0);
  return;
}
function __ZN15b2QueryCallbackC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((5264880)|0);
  return;
}
function __ZN17b2RayCastCallbackC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  HEAP32[(($3)>>2)]=((5264692)|0);
  return;
}
function __ZN10b2JointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=(($2+4)|0);
  HEAP32[(($4)>>2)]=0;
  var $5=(($2+8)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+12)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+16)|0);
  HEAP8[($7)]=0;
  return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+16)|0);
      HEAP32[(($13)>>2)]=$11;
      var $14=$4;
      var $15=$2;
      var $16=(($15+24)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$2;
      var $18=(($17+36)|0);
      HEAP32[(($18)>>2)]=1;
      label = 9; break;
    case 3: 
      var $20=$2;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$3;
      var $24=(($22)|(0))==(($23)|(0));
      if ($24) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $26=$2;
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==2;
      if ($29) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $31=$4;
      var $32=$2;
      var $33=(($32+24)|0);
      HEAP32[(($33)>>2)]=$31;
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)+(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$2;
      var $41=(($40+24)|0);
      HEAP32[(($41)>>2)]=2;
      var $42=$2;
      var $43=(($42+54)|0);
      HEAP8[($43)]=1;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZN14b2RopeJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=10;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, -1, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 1, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  return;
}
function __ZN14b2GearJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=$2;
  var $5=(($4)|0);
  HEAP32[(($5)>>2)]=6;
  var $6=(($2+20)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=(($2+24)|0);
  HEAP32[(($7)>>2)]=0;
  var $8=(($2+28)|0);
  HEAPF32[(($8)>>2)]=1;
  return;
}
function __ZN18b2DistanceJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=3;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 0, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=1;
  var $11=(($2+40)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+44)|0);
  HEAPF32[(($12)>>2)]=0;
  return;
}
function __ZN15b2MouseJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=$2;
  var $6=(($5)|0);
  HEAP32[(($6)>>2)]=5;
  var $7=(($2+20)|0);
  __ZN6b2Vec23SetEff($7, 0, 0);
  var $8=(($2+28)|0);
  HEAPF32[(($8)>>2)]=0;
  var $9=(($2+32)|0);
  HEAPF32[(($9)>>2)]=5;
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0.699999988079071;
  return;
}
function __ZN14b2WeldJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=8;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 0, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+40)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+44)|0);
  HEAPF32[(($12)>>2)]=0;
  return;
}
function __ZN11b2TransformC2ERK6b2Vec2RK5b2Rot($this, $position, $rotation) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$this;
  $2=$position;
  $3=$rotation;
  var $4=$1;
  var $5=(($4)|0);
  var $6=$2;
  var $7=$5;
  var $8=$6;
  assert(8 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];
  var $9=(($4+8)|0);
  var $10=$3;
  var $11=$9;
  var $12=$10;
  assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
  return;
}
function __ZN16b2PulleyJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+36)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=(($2+44)|0);
  __ZN6b2Vec2C1Ev($7);
  var $8=$2;
  var $9=(($8)|0);
  HEAP32[(($9)>>2)]=4;
  var $10=(($2+20)|0);
  __ZN6b2Vec23SetEff($10, -1, 1);
  var $11=(($2+28)|0);
  __ZN6b2Vec23SetEff($11, 1, 1);
  var $12=(($2+36)|0);
  __ZN6b2Vec23SetEff($12, -1, 0);
  var $13=(($2+44)|0);
  __ZN6b2Vec23SetEff($13, 1, 0);
  var $14=(($2+52)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+56)|0);
  HEAPF32[(($15)>>2)]=0;
  var $16=(($2+60)|0);
  HEAPF32[(($16)>>2)]=1;
  var $17=$2;
  var $18=(($17+16)|0);
  HEAP8[($18)]=1;
  return;
}
function __ZN18b2RevoluteJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=1;
  var $8=(($2+20)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+28)|0);
  __ZN6b2Vec23SetEff($9, 0, 0);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+44)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+48)|0);
  HEAPF32[(($12)>>2)]=0;
  var $13=(($2+60)|0);
  HEAPF32[(($13)>>2)]=0;
  var $14=(($2+56)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+40)|0);
  HEAP8[($15)]=0;
  var $16=(($2+52)|0);
  HEAP8[($16)]=0;
  return;
}
function __ZN15b2WheelJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+36)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=$2;
  var $8=(($7)|0);
  HEAP32[(($8)>>2)]=7;
  var $9=(($2+20)|0);
  __ZN6b2Vec27SetZeroEv($9);
  var $10=(($2+28)|0);
  __ZN6b2Vec27SetZeroEv($10);
  var $11=(($2+36)|0);
  __ZN6b2Vec23SetEff($11, 1, 0);
  var $12=(($2+44)|0);
  HEAP8[($12)]=0;
  var $13=(($2+48)|0);
  HEAPF32[(($13)>>2)]=0;
  var $14=(($2+52)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+56)|0);
  HEAPF32[(($15)>>2)]=2;
  var $16=(($2+60)|0);
  HEAPF32[(($16)>>2)]=0.699999988079071;
  return;
}
function __ZN19b2PrismaticJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=(($2+36)|0);
  __ZN6b2Vec2C1Ev($6);
  var $7=$2;
  var $8=(($7)|0);
  HEAP32[(($8)>>2)]=2;
  var $9=(($2+20)|0);
  __ZN6b2Vec27SetZeroEv($9);
  var $10=(($2+28)|0);
  __ZN6b2Vec27SetZeroEv($10);
  var $11=(($2+36)|0);
  __ZN6b2Vec23SetEff($11, 1, 0);
  var $12=(($2+44)|0);
  HEAPF32[(($12)>>2)]=0;
  var $13=(($2+48)|0);
  HEAP8[($13)]=0;
  var $14=(($2+52)|0);
  HEAPF32[(($14)>>2)]=0;
  var $15=(($2+56)|0);
  HEAPF32[(($15)>>2)]=0;
  var $16=(($2+60)|0);
  HEAP8[($16)]=0;
  var $17=(($2+64)|0);
  HEAPF32[(($17)>>2)]=0;
  var $18=(($2+68)|0);
  HEAPF32[(($18)>>2)]=0;
  return;
}
function __ZN9b2BodyDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=(($2+4)|0);
  __ZN6b2Vec2C1Ev($3);
  var $4=(($2+16)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+44)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=(($2+4)|0);
  __ZN6b2Vec23SetEff($6, 0, 0);
  var $7=(($2+12)|0);
  HEAPF32[(($7)>>2)]=0;
  var $8=(($2+16)|0);
  __ZN6b2Vec23SetEff($8, 0, 0);
  var $9=(($2+24)|0);
  HEAPF32[(($9)>>2)]=0;
  var $10=(($2+28)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+32)|0);
  HEAPF32[(($11)>>2)]=0;
  var $12=(($2+36)|0);
  HEAP8[($12)]=1;
  var $13=(($2+37)|0);
  HEAP8[($13)]=1;
  var $14=(($2+38)|0);
  HEAP8[($14)]=0;
  var $15=(($2+39)|0);
  HEAP8[($15)]=0;
  var $16=(($2)|0);
  HEAP32[(($16)>>2)]=0;
  var $17=(($2+40)|0);
  HEAP8[($17)]=1;
  var $18=(($2+48)|0);
  HEAPF32[(($18)>>2)]=1;
  return;
}
function __ZN18b2FrictionJointDefC2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZN10b2JointDefC2Ev($3);
  var $4=(($2+20)|0);
  __ZN6b2Vec2C1Ev($4);
  var $5=(($2+28)|0);
  __ZN6b2Vec2C1Ev($5);
  var $6=$2;
  var $7=(($6)|0);
  HEAP32[(($7)>>2)]=9;
  var $8=(($2+20)|0);
  __ZN6b2Vec27SetZeroEv($8);
  var $9=(($2+28)|0);
  __ZN6b2Vec27SetZeroEv($9);
  var $10=(($2+36)|0);
  HEAPF32[(($10)>>2)]=0;
  var $11=(($2+40)|0);
  HEAPF32[(($11)>>2)]=0;
  return;
}
function __ZN21b2DestructionListenerD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN21b2DestructionListenerD2Ev($2);
  return;
}
function __ZN21b2DestructionListenerD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN21b2DestructionListenerD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN15b2QueryCallbackD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN15b2QueryCallbackD2Ev($2);
  return;
}
function __ZN15b2QueryCallbackD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN15b2QueryCallbackD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN17b2RayCastCallbackD1Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN17b2RayCastCallbackD2Ev($2);
  return;
}
function __ZN17b2RayCastCallbackD0Ev($this) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$this;
      var $4=$1;
      (function() { try { __THREW__ = 0; return __ZN17b2RayCastCallbackD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$4;
      __ZdlPv($6);
      return;
    case 3: 
      var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
      var $9=$8$0;
      $2=$9;
      var $10=$8$1;
      $3=$10;
      var $11=$4;
      __ZdlPv($11);
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15$0=$13;
      var $15$1=0;
      var $16$0=$15$0;
      var $16$1=$14;
      ___resumeException($16$0)
    default: assert(0, "bad label: " + label);
  }
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  __ZNSt9type_infoD2Ev($3);
  return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN10__cxxabiv116__shim_type_infoD2Ev($2);
  var $3=$2;
  __ZdlPv($3);
  return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZN10__cxxabiv116__shim_type_infoD2Ev($2);
  var $3=$2;
  __ZdlPv($3);
  return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $thrown_class_type;
      var $info=__stackBase__;
      $2=$this;
      $3=$thrown_type;
      $4=$adjustedPtr;
      var $5=$2;
      var $6=$5;
      var $7=$3;
      var $8=$7;
      var $9=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $8, 0);
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 11; break;
    case 3: 
      var $12=$3;
      var $13=(($12)|(0))==0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $15=$12;
      var $16=___dynamic_cast($15, 5266296, 5266284, -1);
      var $17=$16;
      var $20 = $17;label = 6; break;
    case 5: 
      var $20 = 0;label = 6; break;
    case 6: 
      var $20;
      $thrown_class_type=$20;
      var $21=$thrown_class_type;
      var $22=(($21)|(0))==0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 11; break;
    case 8: 
      var $25=$info;
      _memset($25, 0, 56);
      var $26=(($info)|0);
      var $27=$thrown_class_type;
      HEAP32[(($26)>>2)]=$27;
      var $28=(($info+8)|0);
      HEAP32[(($28)>>2)]=$5;
      var $29=(($info+12)|0);
      HEAP32[(($29)>>2)]=-1;
      var $30=(($info+48)|0);
      HEAP32[(($30)>>2)]=1;
      var $31=$thrown_class_type;
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$4;
      var $37=HEAP32[(($36)>>2)];
      FUNCTION_TABLE[$35]($31, $info, $37, 1);
      var $38=(($info+24)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))==1;
      if ($40) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $42=(($info+16)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$4;
      HEAP32[(($44)>>2)]=$43;
      $1=1;
      label = 11; break;
    case 10: 
      $1=0;
      label = 11; break;
    case 11: 
      var $47=$1;
      STACKTOP = __stackBase__;
      return $47;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $10, 0);
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$2;
      var $14=$3;
      var $15=$4;
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($5, $13, $14, $15);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$adjustedPtr;
      $4=$path_below;
      var $5=$1;
      var $6=$5;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $10, 0);
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$5;
      var $14=$2;
      var $15=$3;
      var $16=$4;
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($13, $14, $15, $16);
      label = 4; break;
    case 3: 
      var $18=(($5+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=$3;
      var $26=$4;
      FUNCTION_TABLE[$23]($19, $24, $25, $26);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $6=$1;
      var $7=$2;
      var $8=(($7+53)|0);
      HEAP8[($8)]=1;
      var $9=$4;
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)|(0))==(($12)|(0));
      if ($13) { label = 2; break; } else { label = 17; break; }
    case 2: 
      var $15=$2;
      var $16=(($15+52)|0);
      HEAP8[($16)]=1;
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))==0;
      if ($20) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $22=$3;
      var $23=$2;
      var $24=(($23+16)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$5;
      var $26=$2;
      var $27=(($26+24)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=(($28+36)|0);
      HEAP32[(($29)>>2)]=1;
      var $30=$2;
      var $31=(($30+48)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))==1;
      if ($33) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))==1;
      if ($38) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $40=$2;
      var $41=(($40+54)|0);
      HEAP8[($41)]=1;
      label = 6; break;
    case 6: 
      label = 16; break;
    case 7: 
      var $44=$2;
      var $45=(($44+16)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$3;
      var $48=(($46)|(0))==(($47)|(0));
      if ($48) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $50=$2;
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|(0))==2;
      if ($53) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $55=$5;
      var $56=$2;
      var $57=(($56+24)|0);
      HEAP32[(($57)>>2)]=$55;
      label = 10; break;
    case 10: 
      var $59=$2;
      var $60=(($59+48)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0))==1;
      if ($62) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))==1;
      if ($67) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $69=$2;
      var $70=(($69+54)|0);
      HEAP8[($70)]=1;
      label = 13; break;
    case 13: 
      label = 15; break;
    case 14: 
      var $73=$2;
      var $74=(($73+36)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)+(1))|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=$2;
      var $78=(($77+54)|0);
      HEAP8[($78)]=1;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $5=$1;
      var $6=$3;
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|(0))==(($9)|(0));
      if ($10) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $12=$2;
      var $13=(($12+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=1;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$4;
      var $18=$2;
      var $19=(($18+28)|0);
      HEAP32[(($19)>>2)]=$17;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vtable;
      var $offset_to_derived;
      var $dynamic_ptr;
      var $dynamic_type;
      var $dst_ptr;
      var $info=__stackBase__;
      $1=$static_ptr;
      $2=$static_type;
      $3=$dst_type;
      $4=$src2dst_offset;
      var $5=$1;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      $vtable=$7;
      var $8=$vtable;
      var $9=((($8)-(8))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $offset_to_derived=$11;
      var $12=$1;
      var $13=$offset_to_derived;
      var $14=(($12+$13)|0);
      $dynamic_ptr=$14;
      var $15=$vtable;
      var $16=((($15)-(4))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      $dynamic_type=$18;
      $dst_ptr=0;
      var $19=(($info)|0);
      var $20=$3;
      HEAP32[(($19)>>2)]=$20;
      var $21=(($info+4)|0);
      var $22=$1;
      HEAP32[(($21)>>2)]=$22;
      var $23=(($info+8)|0);
      var $24=$2;
      HEAP32[(($23)>>2)]=$24;
      var $25=(($info+12)|0);
      var $26=$4;
      HEAP32[(($25)>>2)]=$26;
      var $27=(($info+16)|0);
      HEAP32[(($27)>>2)]=0;
      var $28=(($info+20)|0);
      HEAP32[(($28)>>2)]=0;
      var $29=(($info+24)|0);
      HEAP32[(($29)>>2)]=0;
      var $30=(($info+28)|0);
      HEAP32[(($30)>>2)]=0;
      var $31=(($info+32)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=(($info+36)|0);
      HEAP32[(($32)>>2)]=0;
      var $33=(($info+40)|0);
      HEAP32[(($33)>>2)]=0;
      var $34=(($info+44)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=(($info+48)|0);
      HEAP32[(($35)>>2)]=0;
      var $36=(($info+52)|0);
      HEAP8[($36)]=0;
      var $37=(($info+53)|0);
      HEAP8[($37)]=0;
      var $38=(($info+54)|0);
      HEAP8[($38)]=0;
      var $39=$dynamic_type;
      var $40=$39;
      var $41=$3;
      var $42=$41;
      var $43=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($40, $42, 0);
      if ($43) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $45=(($info+48)|0);
      HEAP32[(($45)>>2)]=1;
      var $46=$dynamic_type;
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+20)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$dynamic_ptr;
      var $52=$dynamic_ptr;
      FUNCTION_TABLE[$50]($46, $info, $51, $52, 1, 0);
      var $53=(($info+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54)|(0))==1;
      if ($55) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $57=$dynamic_ptr;
      $dst_ptr=$57;
      label = 4; break;
    case 4: 
      label = 18; break;
    case 5: 
      var $60=$dynamic_type;
      var $61=$60;
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$dynamic_ptr;
      FUNCTION_TABLE[$64]($60, $info, $65, 1, 0);
      var $66=(($info+36)|0);
      var $67=HEAP32[(($66)>>2)];
      if ((($67)|(0))==0) {
        label = 6; break;
      }
      else if ((($67)|(0))==1) {
        label = 11; break;
      }
      else {
      label = 17; break;
      }
    case 6: 
      var $69=(($info+40)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|(0))==1;
      if ($71) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $73=(($info+28)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0))==1;
      if ($75) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $77=(($info+32)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|(0))==1;
      if ($79) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $81=(($info+20)|0);
      var $82=HEAP32[(($81)>>2)];
      $dst_ptr=$82;
      label = 10; break;
    case 10: 
      label = 17; break;
    case 11: 
      var $85=(($info+24)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86)|(0))==1;
      if ($87) { label = 15; break; } else { label = 12; break; }
    case 12: 
      var $89=(($info+40)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90)|(0))==0;
      if ($91) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $93=(($info+28)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|(0))==1;
      if ($95) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $97=(($info+32)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98)|(0))==1;
      if ($99) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $101=(($info+16)|0);
      var $102=HEAP32[(($101)>>2)];
      $dst_ptr=$102;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $106=$dst_ptr;
      STACKTOP = __stackBase__;
      return $106;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $is_dst_type_derived_from_static_type;
      var $does_dst_type_point_to_our_static_type;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $6=(($use_strcmp)&(1));
      $5=$6;
      var $7=$1;
      var $8=$7;
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=$5;
      var $14=(($13) & 1);
      var $15=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8, $12, $14);
      if ($15) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $17=$7;
      var $18=$2;
      var $19=$3;
      var $20=$4;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($17, $18, $19, $20);
      label = 27; break;
    case 3: 
      var $22=$7;
      var $23=$2;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=$5;
      var $28=(($27) & 1);
      var $29=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22, $26, $28);
      if ($29) { label = 4; break; } else { label = 25; break; }
    case 4: 
      var $31=$3;
      var $32=$2;
      var $33=(($32+16)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($31)|(0))==(($34)|(0));
      if ($35) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $37=$3;
      var $38=$2;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($37)|(0))==(($40)|(0));
      if ($41) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $43=$4;
      var $44=(($43)|(0))==1;
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$2;
      var $47=(($46+32)|0);
      HEAP32[(($47)>>2)]=1;
      label = 8; break;
    case 8: 
      label = 24; break;
    case 9: 
      var $50=$4;
      var $51=$2;
      var $52=(($51+32)|0);
      HEAP32[(($52)>>2)]=$50;
      var $53=$2;
      var $54=(($53+44)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|(0))!=4;
      if ($56) { label = 10; break; } else { label = 23; break; }
    case 10: 
      $is_dst_type_derived_from_static_type=0;
      $does_dst_type_point_to_our_static_type=0;
      var $58=$2;
      var $59=(($58+52)|0);
      HEAP8[($59)]=0;
      var $60=$2;
      var $61=(($60+53)|0);
      HEAP8[($61)]=0;
      var $62=(($7+8)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$63;
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+20)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$2;
      var $69=$3;
      var $70=$3;
      var $71=$5;
      var $72=(($71) & 1);
      FUNCTION_TABLE[$67]($63, $68, $69, $70, 1, $72);
      var $73=$2;
      var $74=(($73+53)|0);
      var $75=HEAP8[($74)];
      var $76=(($75) & 1);
      if ($76) { label = 11; break; } else { label = 14; break; }
    case 11: 
      $is_dst_type_derived_from_static_type=1;
      var $78=$2;
      var $79=(($78+52)|0);
      var $80=HEAP8[($79)];
      var $81=(($80) & 1);
      if ($81) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $does_dst_type_point_to_our_static_type=1;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $85=$does_dst_type_point_to_our_static_type;
      var $86=(($85) & 1);
      if ($86) { label = 19; break; } else { label = 15; break; }
    case 15: 
      var $88=$3;
      var $89=$2;
      var $90=(($89+20)|0);
      HEAP32[(($90)>>2)]=$88;
      var $91=$2;
      var $92=(($91+40)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)+(1))|0);
      HEAP32[(($92)>>2)]=$94;
      var $95=$2;
      var $96=(($95+36)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97)|(0))==1;
      if ($98) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $100=$2;
      var $101=(($100+24)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102)|(0))==2;
      if ($103) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $105=$2;
      var $106=(($105+54)|0);
      HEAP8[($106)]=1;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $109=$is_dst_type_derived_from_static_type;
      var $110=(($109) & 1);
      if ($110) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $112=$2;
      var $113=(($112+44)|0);
      HEAP32[(($113)>>2)]=3;
      label = 22; break;
    case 21: 
      var $115=$2;
      var $116=(($115+44)|0);
      HEAP32[(($116)>>2)]=4;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 26; break;
    case 25: 
      var $121=(($7+8)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$122;
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$2;
      var $128=$3;
      var $129=$4;
      var $130=$5;
      var $131=(($130) & 1);
      FUNCTION_TABLE[$126]($122, $127, $128, $129, $131);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$this;
      $2=$info;
      $3=$current_ptr;
      $4=$path_below;
      var $6=(($use_strcmp)&(1));
      $5=$6;
      var $7=$1;
      var $8=$7;
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=$5;
      var $14=(($13) & 1);
      var $15=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8, $12, $14);
      if ($15) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $17=$2;
      var $18=$3;
      var $19=$4;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($7, $17, $18, $19);
      label = 15; break;
    case 3: 
      var $21=$7;
      var $22=$2;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=$5;
      var $27=(($26) & 1);
      var $28=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($21, $25, $27);
      if ($28) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($30)|(0))==(($33)|(0));
      if ($34) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $36=$3;
      var $37=$2;
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($36)|(0))==(($39)|(0));
      if ($40) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $42=$4;
      var $43=(($42)|(0))==1;
      if ($43) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $45=$2;
      var $46=(($45+32)|0);
      HEAP32[(($46)>>2)]=1;
      label = 8; break;
    case 8: 
      label = 13; break;
    case 9: 
      var $49=$4;
      var $50=$2;
      var $51=(($50+32)|0);
      HEAP32[(($51)>>2)]=$49;
      var $52=$3;
      var $53=$2;
      var $54=(($53+20)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=$2;
      var $56=(($55+40)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)+(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=$2;
      var $60=(($59+36)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0))==1;
      if ($62) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $64=$2;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))==2;
      if ($67) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $69=$2;
      var $70=(($69+54)|0);
      HEAP8[($70)]=1;
      label = 12; break;
    case 12: 
      var $72=$2;
      var $73=(($72+44)|0);
      HEAP32[(($73)>>2)]=4;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $7=(($use_strcmp)&(1));
      $6=$7;
      var $8=$1;
      var $9=$8;
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=$6;
      var $15=(($14) & 1);
      var $16=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($9, $13, $15);
      if ($16) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $18=$8;
      var $19=$2;
      var $20=$3;
      var $21=$4;
      var $22=$5;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($18, $19, $20, $21, $22);
      label = 4; break;
    case 3: 
      var $24=(($8+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=$3;
      var $32=$4;
      var $33=$5;
      var $34=$6;
      var $35=(($34) & 1);
      FUNCTION_TABLE[$29]($25, $30, $31, $32, $33, $35);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      $1=$this;
      $2=$info;
      $3=$dst_ptr;
      $4=$current_ptr;
      $5=$path_below;
      var $7=(($use_strcmp)&(1));
      $6=$7;
      var $8=$1;
      var $9=$8;
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=$6;
      var $15=(($14) & 1);
      var $16=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($9, $13, $15);
      if ($16) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $18=$2;
      var $19=$3;
      var $20=$4;
      var $21=$5;
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($8, $18, $19, $20, $21);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _malloc($bytes) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1;
      var $3=(($2)>>>(0)) <= 244;
      if ($3) { label = 2; break; } else { label = 41; break; }
    case 2: 
      var $5=$1;
      var $6=(($5)>>>(0)) < 11;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14 = 16;label = 5; break;
    case 4: 
      var $9=$1;
      var $10=((($9)+(4))|0);
      var $11=((($10)+(7))|0);
      var $12=$11 & -8;
      var $14 = $12;label = 5; break;
    case 5: 
      var $14;
      $nb=$14;
      var $15=$nb;
      var $16=$15 >>> 3;
      $idx=$16;
      var $17=HEAP32[((((5258108)|0))>>2)];
      var $18=$idx;
      var $19=$17 >>> (($18)>>>(0));
      $smallbits=$19;
      var $20=$smallbits;
      var $21=$20 & 3;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $24=$smallbits;
      var $25=$24 ^ -1;
      var $26=$25 & 1;
      var $27=$idx;
      var $28=((($27)+($26))|0);
      $idx=$28;
      var $29=$idx;
      var $30=$29 << 1;
      var $31=((((5258148)|0)+($30<<2))|0);
      var $32=$31;
      var $33=$32;
      $b=$33;
      var $34=$b;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      $p=$36;
      var $37=$p;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      $F=$39;
      var $40=$b;
      var $41=$F;
      var $42=(($40)|(0))==(($41)|(0));
      if ($42) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $44=$idx;
      var $45=1 << $44;
      var $46=$45 ^ -1;
      var $47=HEAP32[((((5258108)|0))>>2)];
      var $48=$47 & $46;
      HEAP32[((((5258108)|0))>>2)]=$48;
      label = 14; break;
    case 8: 
      var $50=$F;
      var $51=$50;
      var $52=HEAP32[((((5258124)|0))>>2)];
      var $53=(($51)>>>(0)) >= (($52)>>>(0));
      if ($53) { label = 9; break; } else { var $61 = 0;label = 10; break; }
    case 9: 
      var $55=$F;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$p;
      var $59=(($57)|(0))==(($58)|(0));
      var $61 = $59;label = 10; break;
    case 10: 
      var $61;
      var $62=(($61)&(1));
      var $63=($62);
      var $64=(($63)|(0))!=0;
      if ($64) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $66=$b;
      var $67=$F;
      var $68=(($67+12)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$F;
      var $70=$b;
      var $71=(($70+8)|0);
      HEAP32[(($71)>>2)]=$69;
      label = 13; break;
    case 12: 
      _abort();
      throw "Reached an unreachable!"
    case 13: 
      label = 14; break;
    case 14: 
      var $75=$idx;
      var $76=$75 << 3;
      var $77=$76 | 1;
      var $78=$77 | 2;
      var $79=$p;
      var $80=(($79+4)|0);
      HEAP32[(($80)>>2)]=$78;
      var $81=$p;
      var $82=$81;
      var $83=$idx;
      var $84=$83 << 3;
      var $85=(($82+$84)|0);
      var $86=$85;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 | 1;
      HEAP32[(($87)>>2)]=$89;
      var $90=$p;
      var $91=$90;
      var $92=(($91+8)|0);
      $mem=$92;
      label = 57; break;
    case 15: 
      var $94=$nb;
      var $95=HEAP32[((((5258116)|0))>>2)];
      var $96=(($94)>>>(0)) > (($95)>>>(0));
      if ($96) { label = 16; break; } else { label = 39; break; }
    case 16: 
      var $98=$smallbits;
      var $99=(($98)|(0))!=0;
      if ($99) { label = 17; break; } else { label = 34; break; }
    case 17: 
      var $101=$smallbits;
      var $102=$idx;
      var $103=$101 << $102;
      var $104=$idx;
      var $105=1 << $104;
      var $106=$105 << 1;
      var $107=$idx;
      var $108=1 << $107;
      var $109=$108 << 1;
      var $110=(((-$109))|0);
      var $111=$106 | $110;
      var $112=$103 & $111;
      $leftbits=$112;
      var $113=$leftbits;
      var $114=$leftbits;
      var $115=(((-$114))|0);
      var $116=$113 & $115;
      $leastbit=$116;
      var $117=$leastbit;
      var $118=((($117)-(1))|0);
      $Y=$118;
      var $119=$Y;
      var $120=$119 >>> 12;
      var $121=$120 & 16;
      $K=$121;
      var $122=$K;
      $N=$122;
      var $123=$K;
      var $124=$Y;
      var $125=$124 >>> (($123)>>>(0));
      $Y=$125;
      var $126=$Y;
      var $127=$126 >>> 5;
      var $128=$127 & 8;
      $K=$128;
      var $129=$N;
      var $130=((($129)+($128))|0);
      $N=$130;
      var $131=$K;
      var $132=$Y;
      var $133=$132 >>> (($131)>>>(0));
      $Y=$133;
      var $134=$Y;
      var $135=$134 >>> 2;
      var $136=$135 & 4;
      $K=$136;
      var $137=$N;
      var $138=((($137)+($136))|0);
      $N=$138;
      var $139=$K;
      var $140=$Y;
      var $141=$140 >>> (($139)>>>(0));
      $Y=$141;
      var $142=$Y;
      var $143=$142 >>> 1;
      var $144=$143 & 2;
      $K=$144;
      var $145=$N;
      var $146=((($145)+($144))|0);
      $N=$146;
      var $147=$K;
      var $148=$Y;
      var $149=$148 >>> (($147)>>>(0));
      $Y=$149;
      var $150=$Y;
      var $151=$150 >>> 1;
      var $152=$151 & 1;
      $K=$152;
      var $153=$N;
      var $154=((($153)+($152))|0);
      $N=$154;
      var $155=$K;
      var $156=$Y;
      var $157=$156 >>> (($155)>>>(0));
      $Y=$157;
      var $158=$N;
      var $159=$Y;
      var $160=((($158)+($159))|0);
      $i=$160;
      var $161=$i;
      var $162=$161 << 1;
      var $163=((((5258148)|0)+($162<<2))|0);
      var $164=$163;
      var $165=$164;
      $b1=$165;
      var $166=$b1;
      var $167=(($166+8)|0);
      var $168=HEAP32[(($167)>>2)];
      $p2=$168;
      var $169=$p2;
      var $170=(($169+8)|0);
      var $171=HEAP32[(($170)>>2)];
      $F3=$171;
      var $172=$b1;
      var $173=$F3;
      var $174=(($172)|(0))==(($173)|(0));
      if ($174) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $176=$i;
      var $177=1 << $176;
      var $178=$177 ^ -1;
      var $179=HEAP32[((((5258108)|0))>>2)];
      var $180=$179 & $178;
      HEAP32[((((5258108)|0))>>2)]=$180;
      label = 25; break;
    case 19: 
      var $182=$F3;
      var $183=$182;
      var $184=HEAP32[((((5258124)|0))>>2)];
      var $185=(($183)>>>(0)) >= (($184)>>>(0));
      if ($185) { label = 20; break; } else { var $193 = 0;label = 21; break; }
    case 20: 
      var $187=$F3;
      var $188=(($187+12)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$p2;
      var $191=(($189)|(0))==(($190)|(0));
      var $193 = $191;label = 21; break;
    case 21: 
      var $193;
      var $194=(($193)&(1));
      var $195=($194);
      var $196=(($195)|(0))!=0;
      if ($196) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $198=$b1;
      var $199=$F3;
      var $200=(($199+12)|0);
      HEAP32[(($200)>>2)]=$198;
      var $201=$F3;
      var $202=$b1;
      var $203=(($202+8)|0);
      HEAP32[(($203)>>2)]=$201;
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!"
    case 24: 
      label = 25; break;
    case 25: 
      var $207=$i;
      var $208=$207 << 3;
      var $209=$nb;
      var $210=((($208)-($209))|0);
      $rsize=$210;
      var $211=$nb;
      var $212=$211 | 1;
      var $213=$212 | 2;
      var $214=$p2;
      var $215=(($214+4)|0);
      HEAP32[(($215)>>2)]=$213;
      var $216=$p2;
      var $217=$216;
      var $218=$nb;
      var $219=(($217+$218)|0);
      var $220=$219;
      $r=$220;
      var $221=$rsize;
      var $222=$221 | 1;
      var $223=$r;
      var $224=(($223+4)|0);
      HEAP32[(($224)>>2)]=$222;
      var $225=$rsize;
      var $226=$r;
      var $227=$226;
      var $228=$rsize;
      var $229=(($227+$228)|0);
      var $230=$229;
      var $231=(($230)|0);
      HEAP32[(($231)>>2)]=$225;
      var $232=HEAP32[((((5258116)|0))>>2)];
      $DVS=$232;
      var $233=$DVS;
      var $234=(($233)|(0))!=0;
      if ($234) { label = 26; break; } else { label = 33; break; }
    case 26: 
      var $236=HEAP32[((((5258128)|0))>>2)];
      $DV=$236;
      var $237=$DVS;
      var $238=$237 >>> 3;
      $I=$238;
      var $239=$I;
      var $240=$239 << 1;
      var $241=((((5258148)|0)+($240<<2))|0);
      var $242=$241;
      var $243=$242;
      $B=$243;
      var $244=$B;
      $F4=$244;
      var $245=HEAP32[((((5258108)|0))>>2)];
      var $246=$I;
      var $247=1 << $246;
      var $248=$245 & $247;
      var $249=(($248)|(0))!=0;
      if ($249) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $251=$I;
      var $252=1 << $251;
      var $253=HEAP32[((((5258108)|0))>>2)];
      var $254=$253 | $252;
      HEAP32[((((5258108)|0))>>2)]=$254;
      label = 32; break;
    case 28: 
      var $256=$B;
      var $257=(($256+8)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=$258;
      var $260=HEAP32[((((5258124)|0))>>2)];
      var $261=(($259)>>>(0)) >= (($260)>>>(0));
      var $262=(($261)&(1));
      var $263=($262);
      var $264=(($263)|(0))!=0;
      if ($264) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $266=$B;
      var $267=(($266+8)|0);
      var $268=HEAP32[(($267)>>2)];
      $F4=$268;
      label = 31; break;
    case 30: 
      _abort();
      throw "Reached an unreachable!"
    case 31: 
      label = 32; break;
    case 32: 
      var $272=$DV;
      var $273=$B;
      var $274=(($273+8)|0);
      HEAP32[(($274)>>2)]=$272;
      var $275=$DV;
      var $276=$F4;
      var $277=(($276+12)|0);
      HEAP32[(($277)>>2)]=$275;
      var $278=$F4;
      var $279=$DV;
      var $280=(($279+8)|0);
      HEAP32[(($280)>>2)]=$278;
      var $281=$B;
      var $282=$DV;
      var $283=(($282+12)|0);
      HEAP32[(($283)>>2)]=$281;
      label = 33; break;
    case 33: 
      var $285=$rsize;
      HEAP32[((((5258116)|0))>>2)]=$285;
      var $286=$r;
      HEAP32[((((5258128)|0))>>2)]=$286;
      var $287=$p2;
      var $288=$287;
      var $289=(($288+8)|0);
      $mem=$289;
      label = 57; break;
    case 34: 
      var $291=HEAP32[((((5258112)|0))>>2)];
      var $292=(($291)|(0))!=0;
      if ($292) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $294=$nb;
      var $295=_tmalloc_small(5258108, $294);
      $mem=$295;
      var $296=(($295)|(0))!=0;
      if ($296) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 57; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 48; break;
    case 41: 
      var $303=$1;
      var $304=(($303)>>>(0)) >= 4294967232;
      if ($304) { label = 42; break; } else { label = 43; break; }
    case 42: 
      $nb=-1;
      label = 47; break;
    case 43: 
      var $307=$1;
      var $308=((($307)+(4))|0);
      var $309=((($308)+(7))|0);
      var $310=$309 & -8;
      $nb=$310;
      var $311=HEAP32[((((5258112)|0))>>2)];
      var $312=(($311)|(0))!=0;
      if ($312) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $314=$nb;
      var $315=_tmalloc_large(5258108, $314);
      $mem=$315;
      var $316=(($315)|(0))!=0;
      if ($316) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 57; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $321=$nb;
      var $322=HEAP32[((((5258116)|0))>>2)];
      var $323=(($321)>>>(0)) <= (($322)>>>(0));
      if ($323) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $325=HEAP32[((((5258116)|0))>>2)];
      var $326=$nb;
      var $327=((($325)-($326))|0);
      $rsize5=$327;
      var $328=HEAP32[((((5258128)|0))>>2)];
      $p6=$328;
      var $329=$rsize5;
      var $330=(($329)>>>(0)) >= 16;
      if ($330) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $332=$p6;
      var $333=$332;
      var $334=$nb;
      var $335=(($333+$334)|0);
      var $336=$335;
      HEAP32[((((5258128)|0))>>2)]=$336;
      $r7=$336;
      var $337=$rsize5;
      HEAP32[((((5258116)|0))>>2)]=$337;
      var $338=$rsize5;
      var $339=$338 | 1;
      var $340=$r7;
      var $341=(($340+4)|0);
      HEAP32[(($341)>>2)]=$339;
      var $342=$rsize5;
      var $343=$r7;
      var $344=$343;
      var $345=$rsize5;
      var $346=(($344+$345)|0);
      var $347=$346;
      var $348=(($347)|0);
      HEAP32[(($348)>>2)]=$342;
      var $349=$nb;
      var $350=$349 | 1;
      var $351=$350 | 2;
      var $352=$p6;
      var $353=(($352+4)|0);
      HEAP32[(($353)>>2)]=$351;
      label = 52; break;
    case 51: 
      var $355=HEAP32[((((5258116)|0))>>2)];
      $dvs=$355;
      HEAP32[((((5258116)|0))>>2)]=0;
      HEAP32[((((5258128)|0))>>2)]=0;
      var $356=$dvs;
      var $357=$356 | 1;
      var $358=$357 | 2;
      var $359=$p6;
      var $360=(($359+4)|0);
      HEAP32[(($360)>>2)]=$358;
      var $361=$p6;
      var $362=$361;
      var $363=$dvs;
      var $364=(($362+$363)|0);
      var $365=$364;
      var $366=(($365+4)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=$367 | 1;
      HEAP32[(($366)>>2)]=$368;
      label = 52; break;
    case 52: 
      var $370=$p6;
      var $371=$370;
      var $372=(($371+8)|0);
      $mem=$372;
      label = 57; break;
    case 53: 
      var $374=$nb;
      var $375=HEAP32[((((5258120)|0))>>2)];
      var $376=(($374)>>>(0)) < (($375)>>>(0));
      if ($376) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $378=$nb;
      var $379=HEAP32[((((5258120)|0))>>2)];
      var $380=((($379)-($378))|0);
      HEAP32[((((5258120)|0))>>2)]=$380;
      $rsize8=$380;
      var $381=HEAP32[((((5258132)|0))>>2)];
      $p9=$381;
      var $382=$p9;
      var $383=$382;
      var $384=$nb;
      var $385=(($383+$384)|0);
      var $386=$385;
      HEAP32[((((5258132)|0))>>2)]=$386;
      $r10=$386;
      var $387=$rsize8;
      var $388=$387 | 1;
      var $389=$r10;
      var $390=(($389+4)|0);
      HEAP32[(($390)>>2)]=$388;
      var $391=$nb;
      var $392=$391 | 1;
      var $393=$392 | 2;
      var $394=$p9;
      var $395=(($394+4)|0);
      HEAP32[(($395)>>2)]=$393;
      var $396=$p9;
      var $397=$396;
      var $398=(($397+8)|0);
      $mem=$398;
      label = 57; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $401=$nb;
      var $402=_sys_alloc(5258108, $401);
      $mem=$402;
      label = 57; break;
    case 57: 
      var $404=$mem;
      return $404;
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_small($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(((-$8))|0);
      var $10=$5 & $9;
      $leastbit=$10;
      var $11=$leastbit;
      var $12=((($11)-(1))|0);
      $Y=$12;
      var $13=$Y;
      var $14=$13 >>> 12;
      var $15=$14 & 16;
      $K=$15;
      var $16=$K;
      $N=$16;
      var $17=$K;
      var $18=$Y;
      var $19=$18 >>> (($17)>>>(0));
      $Y=$19;
      var $20=$Y;
      var $21=$20 >>> 5;
      var $22=$21 & 8;
      $K=$22;
      var $23=$N;
      var $24=((($23)+($22))|0);
      $N=$24;
      var $25=$K;
      var $26=$Y;
      var $27=$26 >>> (($25)>>>(0));
      $Y=$27;
      var $28=$Y;
      var $29=$28 >>> 2;
      var $30=$29 & 4;
      $K=$30;
      var $31=$N;
      var $32=((($31)+($30))|0);
      $N=$32;
      var $33=$K;
      var $34=$Y;
      var $35=$34 >>> (($33)>>>(0));
      $Y=$35;
      var $36=$Y;
      var $37=$36 >>> 1;
      var $38=$37 & 2;
      $K=$38;
      var $39=$N;
      var $40=((($39)+($38))|0);
      $N=$40;
      var $41=$K;
      var $42=$Y;
      var $43=$42 >>> (($41)>>>(0));
      $Y=$43;
      var $44=$Y;
      var $45=$44 >>> 1;
      var $46=$45 & 1;
      $K=$46;
      var $47=$N;
      var $48=((($47)+($46))|0);
      $N=$48;
      var $49=$K;
      var $50=$Y;
      var $51=$50 >>> (($49)>>>(0));
      $Y=$51;
      var $52=$N;
      var $53=$Y;
      var $54=((($52)+($53))|0);
      $i=$54;
      var $55=$i;
      var $56=$1;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      $v=$59;
      var $60=$t;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & -8;
      var $64=$2;
      var $65=((($63)-($64))|0);
      $rsize=$65;
      label = 2; break;
    case 2: 
      var $67=$t;
      var $68=(($67+16)|0);
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|(0))!=0;
      if ($71) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $73=$t;
      var $74=(($73+16)|0);
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $83 = $76;label = 5; break;
    case 4: 
      var $78=$t;
      var $79=(($78+16)|0);
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $83 = $81;label = 5; break;
    case 5: 
      var $83;
      $t=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $86=$t;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & -8;
      var $90=$2;
      var $91=((($89)-($90))|0);
      $trem=$91;
      var $92=$trem;
      var $93=$rsize;
      var $94=(($92)>>>(0)) < (($93)>>>(0));
      if ($94) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $96=$trem;
      $rsize=$96;
      var $97=$t;
      $v=$97;
      label = 8; break;
    case 8: 
      label = 2; break;
    case 9: 
      var $100=$v;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>(0)) >= (($104)>>>(0));
      var $106=(($105)&(1));
      var $107=($106);
      var $108=(($107)|(0))!=0;
      if ($108) { label = 10; break; } else { label = 72; break; }
    case 10: 
      var $110=$v;
      var $111=$110;
      var $112=$2;
      var $113=(($111+$112)|0);
      var $114=$113;
      $r=$114;
      var $115=$v;
      var $116=$115;
      var $117=$r;
      var $118=$117;
      var $119=(($116)>>>(0)) < (($118)>>>(0));
      var $120=(($119)&(1));
      var $121=($120);
      var $122=(($121)|(0))!=0;
      if ($122) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $124=$v;
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      $XP=$126;
      var $127=$v;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$v;
      var $131=(($129)|(0))!=(($130)|(0));
      if ($131) { label = 12; break; } else { label = 19; break; }
    case 12: 
      var $133=$v;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      $F=$135;
      var $136=$v;
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      $R=$138;
      var $139=$F;
      var $140=$139;
      var $141=$1;
      var $142=(($141+16)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($140)>>>(0)) >= (($143)>>>(0));
      if ($144) { label = 13; break; } else { var $158 = 0;label = 15; break; }
    case 13: 
      var $146=$F;
      var $147=(($146+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$v;
      var $150=(($148)|(0))==(($149)|(0));
      if ($150) { label = 14; break; } else { var $158 = 0;label = 15; break; }
    case 14: 
      var $152=$R;
      var $153=(($152+8)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=$v;
      var $156=(($154)|(0))==(($155)|(0));
      var $158 = $156;label = 15; break;
    case 15: 
      var $158;
      var $159=(($158)&(1));
      var $160=($159);
      var $161=(($160)|(0))!=0;
      if ($161) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $163=$R;
      var $164=$F;
      var $165=(($164+12)|0);
      HEAP32[(($165)>>2)]=$163;
      var $166=$F;
      var $167=$R;
      var $168=(($167+8)|0);
      HEAP32[(($168)>>2)]=$166;
      label = 18; break;
    case 17: 
      _abort();
      throw "Reached an unreachable!"
    case 18: 
      label = 31; break;
    case 19: 
      var $172=$v;
      var $173=(($172+16)|0);
      var $174=(($173+4)|0);
      $RP=$174;
      var $175=HEAP32[(($174)>>2)];
      $R=$175;
      var $176=(($175)|(0))!=0;
      if ($176) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $178=$v;
      var $179=(($178+16)|0);
      var $180=(($179)|0);
      $RP=$180;
      var $181=HEAP32[(($180)>>2)];
      $R=$181;
      var $182=(($181)|(0))!=0;
      if ($182) { label = 21; break; } else { label = 30; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $185=$R;
      var $186=(($185+16)|0);
      var $187=(($186+4)|0);
      $CP=$187;
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|(0))!=0;
      if ($189) { var $197 = 1;label = 24; break; } else { label = 23; break; }
    case 23: 
      var $191=$R;
      var $192=(($191+16)|0);
      var $193=(($192)|0);
      $CP=$193;
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194)|(0))!=0;
      var $197 = $195;label = 24; break;
    case 24: 
      var $197;
      if ($197) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $199=$CP;
      $RP=$199;
      var $200=HEAP32[(($199)>>2)];
      $R=$200;
      label = 22; break;
    case 26: 
      var $202=$RP;
      var $203=$202;
      var $204=$1;
      var $205=(($204+16)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($203)>>>(0)) >= (($206)>>>(0));
      var $208=(($207)&(1));
      var $209=($208);
      var $210=(($209)|(0))!=0;
      if ($210) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $212=$RP;
      HEAP32[(($212)>>2)]=0;
      label = 29; break;
    case 28: 
      _abort();
      throw "Reached an unreachable!"
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $217=$XP;
      var $218=(($217)|(0))!=0;
      if ($218) { label = 32; break; } else { label = 59; break; }
    case 32: 
      var $220=$v;
      var $221=(($220+28)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$1;
      var $224=(($223+304)|0);
      var $225=(($224+($222<<2))|0);
      $H=$225;
      var $226=$v;
      var $227=$H;
      var $228=HEAP32[(($227)>>2)];
      var $229=(($226)|(0))==(($228)|(0));
      if ($229) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $231=$R;
      var $232=$H;
      HEAP32[(($232)>>2)]=$231;
      var $233=(($231)|(0))==0;
      if ($233) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $235=$v;
      var $236=(($235+28)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=1 << $237;
      var $239=$238 ^ -1;
      var $240=$1;
      var $241=(($240+4)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$242 & $239;
      HEAP32[(($241)>>2)]=$243;
      label = 35; break;
    case 35: 
      label = 43; break;
    case 36: 
      var $246=$XP;
      var $247=$246;
      var $248=$1;
      var $249=(($248+16)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=(($247)>>>(0)) >= (($250)>>>(0));
      var $252=(($251)&(1));
      var $253=($252);
      var $254=(($253)|(0))!=0;
      if ($254) { label = 37; break; } else { label = 41; break; }
    case 37: 
      var $256=$XP;
      var $257=(($256+16)|0);
      var $258=(($257)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$v;
      var $261=(($259)|(0))==(($260)|(0));
      if ($261) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $263=$R;
      var $264=$XP;
      var $265=(($264+16)|0);
      var $266=(($265)|0);
      HEAP32[(($266)>>2)]=$263;
      label = 40; break;
    case 39: 
      var $268=$R;
      var $269=$XP;
      var $270=(($269+16)|0);
      var $271=(($270+4)|0);
      HEAP32[(($271)>>2)]=$268;
      label = 40; break;
    case 40: 
      label = 42; break;
    case 41: 
      _abort();
      throw "Reached an unreachable!"
    case 42: 
      label = 43; break;
    case 43: 
      var $276=$R;
      var $277=(($276)|(0))!=0;
      if ($277) { label = 44; break; } else { label = 58; break; }
    case 44: 
      var $279=$R;
      var $280=$279;
      var $281=$1;
      var $282=(($281+16)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=(($280)>>>(0)) >= (($283)>>>(0));
      var $285=(($284)&(1));
      var $286=($285);
      var $287=(($286)|(0))!=0;
      if ($287) { label = 45; break; } else { label = 56; break; }
    case 45: 
      var $289=$XP;
      var $290=$R;
      var $291=(($290+24)|0);
      HEAP32[(($291)>>2)]=$289;
      var $292=$v;
      var $293=(($292+16)|0);
      var $294=(($293)|0);
      var $295=HEAP32[(($294)>>2)];
      $C0=$295;
      var $296=(($295)|(0))!=0;
      if ($296) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $298=$C0;
      var $299=$298;
      var $300=$1;
      var $301=(($300+16)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($299)>>>(0)) >= (($302)>>>(0));
      var $304=(($303)&(1));
      var $305=($304);
      var $306=(($305)|(0))!=0;
      if ($306) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $308=$C0;
      var $309=$R;
      var $310=(($309+16)|0);
      var $311=(($310)|0);
      HEAP32[(($311)>>2)]=$308;
      var $312=$R;
      var $313=$C0;
      var $314=(($313+24)|0);
      HEAP32[(($314)>>2)]=$312;
      label = 49; break;
    case 48: 
      _abort();
      throw "Reached an unreachable!"
    case 49: 
      label = 50; break;
    case 50: 
      var $318=$v;
      var $319=(($318+16)|0);
      var $320=(($319+4)|0);
      var $321=HEAP32[(($320)>>2)];
      $C1=$321;
      var $322=(($321)|(0))!=0;
      if ($322) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $324=$C1;
      var $325=$324;
      var $326=$1;
      var $327=(($326+16)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=(($325)>>>(0)) >= (($328)>>>(0));
      var $330=(($329)&(1));
      var $331=($330);
      var $332=(($331)|(0))!=0;
      if ($332) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $334=$C1;
      var $335=$R;
      var $336=(($335+16)|0);
      var $337=(($336+4)|0);
      HEAP32[(($337)>>2)]=$334;
      var $338=$R;
      var $339=$C1;
      var $340=(($339+24)|0);
      HEAP32[(($340)>>2)]=$338;
      label = 54; break;
    case 53: 
      _abort();
      throw "Reached an unreachable!"
    case 54: 
      label = 55; break;
    case 55: 
      label = 57; break;
    case 56: 
      _abort();
      throw "Reached an unreachable!"
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $348=$rsize;
      var $349=(($348)>>>(0)) < 16;
      if ($349) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $351=$rsize;
      var $352=$2;
      var $353=((($351)+($352))|0);
      var $354=$353 | 1;
      var $355=$354 | 2;
      var $356=$v;
      var $357=(($356+4)|0);
      HEAP32[(($357)>>2)]=$355;
      var $358=$v;
      var $359=$358;
      var $360=$rsize;
      var $361=$2;
      var $362=((($360)+($361))|0);
      var $363=(($359+$362)|0);
      var $364=$363;
      var $365=(($364+4)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=$366 | 1;
      HEAP32[(($365)>>2)]=$367;
      label = 70; break;
    case 61: 
      var $369=$2;
      var $370=$369 | 1;
      var $371=$370 | 2;
      var $372=$v;
      var $373=(($372+4)|0);
      HEAP32[(($373)>>2)]=$371;
      var $374=$rsize;
      var $375=$374 | 1;
      var $376=$r;
      var $377=(($376+4)|0);
      HEAP32[(($377)>>2)]=$375;
      var $378=$rsize;
      var $379=$r;
      var $380=$379;
      var $381=$rsize;
      var $382=(($380+$381)|0);
      var $383=$382;
      var $384=(($383)|0);
      HEAP32[(($384)>>2)]=$378;
      var $385=$1;
      var $386=(($385+8)|0);
      var $387=HEAP32[(($386)>>2)];
      $DVS=$387;
      var $388=$DVS;
      var $389=(($388)|(0))!=0;
      if ($389) { label = 62; break; } else { label = 69; break; }
    case 62: 
      var $391=$1;
      var $392=(($391+20)|0);
      var $393=HEAP32[(($392)>>2)];
      $DV=$393;
      var $394=$DVS;
      var $395=$394 >>> 3;
      $I=$395;
      var $396=$I;
      var $397=$396 << 1;
      var $398=$1;
      var $399=(($398+40)|0);
      var $400=(($399+($397<<2))|0);
      var $401=$400;
      var $402=$401;
      $B=$402;
      var $403=$B;
      $F1=$403;
      var $404=$1;
      var $405=(($404)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=$I;
      var $408=1 << $407;
      var $409=$406 & $408;
      var $410=(($409)|(0))!=0;
      if ($410) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $412=$I;
      var $413=1 << $412;
      var $414=$1;
      var $415=(($414)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=$416 | $413;
      HEAP32[(($415)>>2)]=$417;
      label = 68; break;
    case 64: 
      var $419=$B;
      var $420=(($419+8)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=$421;
      var $423=$1;
      var $424=(($423+16)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=(($422)>>>(0)) >= (($425)>>>(0));
      var $427=(($426)&(1));
      var $428=($427);
      var $429=(($428)|(0))!=0;
      if ($429) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $431=$B;
      var $432=(($431+8)|0);
      var $433=HEAP32[(($432)>>2)];
      $F1=$433;
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      var $437=$DV;
      var $438=$B;
      var $439=(($438+8)|0);
      HEAP32[(($439)>>2)]=$437;
      var $440=$DV;
      var $441=$F1;
      var $442=(($441+12)|0);
      HEAP32[(($442)>>2)]=$440;
      var $443=$F1;
      var $444=$DV;
      var $445=(($444+8)|0);
      HEAP32[(($445)>>2)]=$443;
      var $446=$B;
      var $447=$DV;
      var $448=(($447+12)|0);
      HEAP32[(($448)>>2)]=$446;
      label = 69; break;
    case 69: 
      var $450=$rsize;
      var $451=$1;
      var $452=(($451+8)|0);
      HEAP32[(($452)>>2)]=$450;
      var $453=$r;
      var $454=$1;
      var $455=(($454+20)|0);
      HEAP32[(($455)>>2)]=$453;
      label = 70; break;
    case 70: 
      var $457=$v;
      var $458=$457;
      var $459=(($458+8)|0);
      return $459;
    case 71: 
      label = 72; break;
    case 72: 
      _abort();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_large($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0;
      var $4=$3;
      var $5=(((-$4))|0);
      $rsize=$5;
      var $6=$3;
      var $7=$6 >>> 8;
      $X=$7;
      var $8=$X;
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $idx=0;
      label = 7; break;
    case 3: 
      var $12=$X;
      var $13=(($12)>>>(0)) > 65535;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $idx=31;
      label = 6; break;
    case 5: 
      var $16=$X;
      $Y=$16;
      var $17=$Y;
      var $18=((($17)-(256))|0);
      var $19=$18 >>> 16;
      var $20=$19 & 8;
      $N=$20;
      var $21=$N;
      var $22=$Y;
      var $23=$22 << $21;
      $Y=$23;
      var $24=((($23)-(4096))|0);
      var $25=$24 >>> 16;
      var $26=$25 & 4;
      $K=$26;
      var $27=$K;
      var $28=$N;
      var $29=((($28)+($27))|0);
      $N=$29;
      var $30=$K;
      var $31=$Y;
      var $32=$31 << $30;
      $Y=$32;
      var $33=((($32)-(16384))|0);
      var $34=$33 >>> 16;
      var $35=$34 & 2;
      $K=$35;
      var $36=$N;
      var $37=((($36)+($35))|0);
      $N=$37;
      var $38=$N;
      var $39=(((14)-($38))|0);
      var $40=$K;
      var $41=$Y;
      var $42=$41 << $40;
      $Y=$42;
      var $43=$42 >>> 15;
      var $44=((($39)+($43))|0);
      $K=$44;
      var $45=$K;
      var $46=$45 << 1;
      var $47=$3;
      var $48=$K;
      var $49=((($48)+(7))|0);
      var $50=$47 >>> (($49)>>>(0));
      var $51=$50 & 1;
      var $52=((($46)+($51))|0);
      $idx=$52;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $55=$idx;
      var $56=$2;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 8; break; } else { label = 23; break; }
    case 8: 
      var $62=$3;
      var $63=$idx;
      var $64=(($63)|(0))==31;
      if ($64) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $73 = 0;label = 11; break;
    case 10: 
      var $67=$idx;
      var $68=$67 >>> 1;
      var $69=((($68)+(8))|0);
      var $70=((($69)-(2))|0);
      var $71=(((31)-($70))|0);
      var $73 = $71;label = 11; break;
    case 11: 
      var $73;
      var $74=$62 << $73;
      $sizebits=$74;
      $rst=0;
      label = 12; break;
    case 12: 
      var $76=$t;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & -8;
      var $80=$3;
      var $81=((($79)-($80))|0);
      $trem=$81;
      var $82=$trem;
      var $83=$rsize;
      var $84=(($82)>>>(0)) < (($83)>>>(0));
      if ($84) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $86=$t;
      $v=$86;
      var $87=$trem;
      $rsize=$87;
      var $88=(($87)|(0))==0;
      if ($88) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 22; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $92=$t;
      var $93=(($92+16)|0);
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      $rt=$95;
      var $96=$sizebits;
      var $97=$96 >>> 31;
      var $98=$97 & 1;
      var $99=$t;
      var $100=(($99+16)|0);
      var $101=(($100+($98<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      $t=$102;
      var $103=$rt;
      var $104=(($103)|(0))!=0;
      if ($104) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $106=$rt;
      var $107=$t;
      var $108=(($106)|(0))!=(($107)|(0));
      if ($108) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $110=$rt;
      $rst=$110;
      label = 19; break;
    case 19: 
      var $112=$t;
      var $113=(($112)|(0))==0;
      if ($113) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $115=$rst;
      $t=$115;
      label = 22; break;
    case 21: 
      var $117=$sizebits;
      var $118=$117 << 1;
      $sizebits=$118;
      label = 12; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $121=$t;
      var $122=(($121)|(0))==0;
      if ($122) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $124=$v;
      var $125=(($124)|(0))==0;
      if ($125) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $127=$idx;
      var $128=1 << $127;
      var $129=$128 << 1;
      var $130=$idx;
      var $131=1 << $130;
      var $132=$131 << 1;
      var $133=(((-$132))|0);
      var $134=$129 | $133;
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$134 & $137;
      $leftbits=$138;
      var $139=$leftbits;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $142=$leftbits;
      var $143=$leftbits;
      var $144=(((-$143))|0);
      var $145=$142 & $144;
      $leastbit=$145;
      var $146=$leastbit;
      var $147=((($146)-(1))|0);
      $Y1=$147;
      var $148=$Y1;
      var $149=$148 >>> 12;
      var $150=$149 & 16;
      $K2=$150;
      var $151=$K2;
      $N3=$151;
      var $152=$K2;
      var $153=$Y1;
      var $154=$153 >>> (($152)>>>(0));
      $Y1=$154;
      var $155=$Y1;
      var $156=$155 >>> 5;
      var $157=$156 & 8;
      $K2=$157;
      var $158=$N3;
      var $159=((($158)+($157))|0);
      $N3=$159;
      var $160=$K2;
      var $161=$Y1;
      var $162=$161 >>> (($160)>>>(0));
      $Y1=$162;
      var $163=$Y1;
      var $164=$163 >>> 2;
      var $165=$164 & 4;
      $K2=$165;
      var $166=$N3;
      var $167=((($166)+($165))|0);
      $N3=$167;
      var $168=$K2;
      var $169=$Y1;
      var $170=$169 >>> (($168)>>>(0));
      $Y1=$170;
      var $171=$Y1;
      var $172=$171 >>> 1;
      var $173=$172 & 2;
      $K2=$173;
      var $174=$N3;
      var $175=((($174)+($173))|0);
      $N3=$175;
      var $176=$K2;
      var $177=$Y1;
      var $178=$177 >>> (($176)>>>(0));
      $Y1=$178;
      var $179=$Y1;
      var $180=$179 >>> 1;
      var $181=$180 & 1;
      $K2=$181;
      var $182=$N3;
      var $183=((($182)+($181))|0);
      $N3=$183;
      var $184=$K2;
      var $185=$Y1;
      var $186=$185 >>> (($184)>>>(0));
      $Y1=$186;
      var $187=$N3;
      var $188=$Y1;
      var $189=((($187)+($188))|0);
      $i=$189;
      var $190=$i;
      var $191=$2;
      var $192=(($191+304)|0);
      var $193=(($192+($190<<2))|0);
      var $194=HEAP32[(($193)>>2)];
      $t=$194;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $198=$t;
      var $199=(($198)|(0))!=0;
      if ($199) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $201=$t;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & -8;
      var $205=$3;
      var $206=((($204)-($205))|0);
      $trem4=$206;
      var $207=$trem4;
      var $208=$rsize;
      var $209=(($207)>>>(0)) < (($208)>>>(0));
      if ($209) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $211=$trem4;
      $rsize=$211;
      var $212=$t;
      $v=$212;
      label = 32; break;
    case 32: 
      var $214=$t;
      var $215=(($214+16)|0);
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217)|(0))!=0;
      if ($218) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $220=$t;
      var $221=(($220+16)|0);
      var $222=(($221)|0);
      var $223=HEAP32[(($222)>>2)];
      var $230 = $223;label = 35; break;
    case 34: 
      var $225=$t;
      var $226=(($225+16)|0);
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $230 = $228;label = 35; break;
    case 35: 
      var $230;
      $t=$230;
      label = 29; break;
    case 36: 
      var $232=$v;
      var $233=(($232)|(0))!=0;
      if ($233) { label = 37; break; } else { label = 129; break; }
    case 37: 
      var $235=$rsize;
      var $236=$2;
      var $237=(($236+8)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$3;
      var $240=((($238)-($239))|0);
      var $241=(($235)>>>(0)) < (($240)>>>(0));
      if ($241) { label = 38; break; } else { label = 129; break; }
    case 38: 
      var $243=$v;
      var $244=$243;
      var $245=$2;
      var $246=(($245+16)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($244)>>>(0)) >= (($247)>>>(0));
      var $249=(($248)&(1));
      var $250=($249);
      var $251=(($250)|(0))!=0;
      if ($251) { label = 39; break; } else { label = 128; break; }
    case 39: 
      var $253=$v;
      var $254=$253;
      var $255=$3;
      var $256=(($254+$255)|0);
      var $257=$256;
      $r=$257;
      var $258=$v;
      var $259=$258;
      var $260=$r;
      var $261=$260;
      var $262=(($259)>>>(0)) < (($261)>>>(0));
      var $263=(($262)&(1));
      var $264=($263);
      var $265=(($264)|(0))!=0;
      if ($265) { label = 40; break; } else { label = 127; break; }
    case 40: 
      var $267=$v;
      var $268=(($267+24)|0);
      var $269=HEAP32[(($268)>>2)];
      $XP=$269;
      var $270=$v;
      var $271=(($270+12)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$v;
      var $274=(($272)|(0))!=(($273)|(0));
      if ($274) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $276=$v;
      var $277=(($276+8)|0);
      var $278=HEAP32[(($277)>>2)];
      $F=$278;
      var $279=$v;
      var $280=(($279+12)|0);
      var $281=HEAP32[(($280)>>2)];
      $R=$281;
      var $282=$F;
      var $283=$282;
      var $284=$2;
      var $285=(($284+16)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=(($283)>>>(0)) >= (($286)>>>(0));
      if ($287) { label = 42; break; } else { var $301 = 0;label = 44; break; }
    case 42: 
      var $289=$F;
      var $290=(($289+12)|0);
      var $291=HEAP32[(($290)>>2)];
      var $292=$v;
      var $293=(($291)|(0))==(($292)|(0));
      if ($293) { label = 43; break; } else { var $301 = 0;label = 44; break; }
    case 43: 
      var $295=$R;
      var $296=(($295+8)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$v;
      var $299=(($297)|(0))==(($298)|(0));
      var $301 = $299;label = 44; break;
    case 44: 
      var $301;
      var $302=(($301)&(1));
      var $303=($302);
      var $304=(($303)|(0))!=0;
      if ($304) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $306=$R;
      var $307=$F;
      var $308=(($307+12)|0);
      HEAP32[(($308)>>2)]=$306;
      var $309=$F;
      var $310=$R;
      var $311=(($310+8)|0);
      HEAP32[(($311)>>2)]=$309;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!"
    case 47: 
      label = 60; break;
    case 48: 
      var $315=$v;
      var $316=(($315+16)|0);
      var $317=(($316+4)|0);
      $RP=$317;
      var $318=HEAP32[(($317)>>2)];
      $R=$318;
      var $319=(($318)|(0))!=0;
      if ($319) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $321=$v;
      var $322=(($321+16)|0);
      var $323=(($322)|0);
      $RP=$323;
      var $324=HEAP32[(($323)>>2)];
      $R=$324;
      var $325=(($324)|(0))!=0;
      if ($325) { label = 50; break; } else { label = 59; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $328=$R;
      var $329=(($328+16)|0);
      var $330=(($329+4)|0);
      $CP=$330;
      var $331=HEAP32[(($330)>>2)];
      var $332=(($331)|(0))!=0;
      if ($332) { var $340 = 1;label = 53; break; } else { label = 52; break; }
    case 52: 
      var $334=$R;
      var $335=(($334+16)|0);
      var $336=(($335)|0);
      $CP=$336;
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337)|(0))!=0;
      var $340 = $338;label = 53; break;
    case 53: 
      var $340;
      if ($340) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $342=$CP;
      $RP=$342;
      var $343=HEAP32[(($342)>>2)];
      $R=$343;
      label = 51; break;
    case 55: 
      var $345=$RP;
      var $346=$345;
      var $347=$2;
      var $348=(($347+16)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($346)>>>(0)) >= (($349)>>>(0));
      var $351=(($350)&(1));
      var $352=($351);
      var $353=(($352)|(0))!=0;
      if ($353) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $355=$RP;
      HEAP32[(($355)>>2)]=0;
      label = 58; break;
    case 57: 
      _abort();
      throw "Reached an unreachable!"
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $360=$XP;
      var $361=(($360)|(0))!=0;
      if ($361) { label = 61; break; } else { label = 88; break; }
    case 61: 
      var $363=$v;
      var $364=(($363+28)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$2;
      var $367=(($366+304)|0);
      var $368=(($367+($365<<2))|0);
      $H=$368;
      var $369=$v;
      var $370=$H;
      var $371=HEAP32[(($370)>>2)];
      var $372=(($369)|(0))==(($371)|(0));
      if ($372) { label = 62; break; } else { label = 65; break; }
    case 62: 
      var $374=$R;
      var $375=$H;
      HEAP32[(($375)>>2)]=$374;
      var $376=(($374)|(0))==0;
      if ($376) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $378=$v;
      var $379=(($378+28)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=1 << $380;
      var $382=$381 ^ -1;
      var $383=$2;
      var $384=(($383+4)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$385 & $382;
      HEAP32[(($384)>>2)]=$386;
      label = 64; break;
    case 64: 
      label = 72; break;
    case 65: 
      var $389=$XP;
      var $390=$389;
      var $391=$2;
      var $392=(($391+16)|0);
      var $393=HEAP32[(($392)>>2)];
      var $394=(($390)>>>(0)) >= (($393)>>>(0));
      var $395=(($394)&(1));
      var $396=($395);
      var $397=(($396)|(0))!=0;
      if ($397) { label = 66; break; } else { label = 70; break; }
    case 66: 
      var $399=$XP;
      var $400=(($399+16)|0);
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$v;
      var $404=(($402)|(0))==(($403)|(0));
      if ($404) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $406=$R;
      var $407=$XP;
      var $408=(($407+16)|0);
      var $409=(($408)|0);
      HEAP32[(($409)>>2)]=$406;
      label = 69; break;
    case 68: 
      var $411=$R;
      var $412=$XP;
      var $413=(($412+16)|0);
      var $414=(($413+4)|0);
      HEAP32[(($414)>>2)]=$411;
      label = 69; break;
    case 69: 
      label = 71; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!"
    case 71: 
      label = 72; break;
    case 72: 
      var $419=$R;
      var $420=(($419)|(0))!=0;
      if ($420) { label = 73; break; } else { label = 87; break; }
    case 73: 
      var $422=$R;
      var $423=$422;
      var $424=$2;
      var $425=(($424+16)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=(($423)>>>(0)) >= (($426)>>>(0));
      var $428=(($427)&(1));
      var $429=($428);
      var $430=(($429)|(0))!=0;
      if ($430) { label = 74; break; } else { label = 85; break; }
    case 74: 
      var $432=$XP;
      var $433=$R;
      var $434=(($433+24)|0);
      HEAP32[(($434)>>2)]=$432;
      var $435=$v;
      var $436=(($435+16)|0);
      var $437=(($436)|0);
      var $438=HEAP32[(($437)>>2)];
      $C0=$438;
      var $439=(($438)|(0))!=0;
      if ($439) { label = 75; break; } else { label = 79; break; }
    case 75: 
      var $441=$C0;
      var $442=$441;
      var $443=$2;
      var $444=(($443+16)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=(($442)>>>(0)) >= (($445)>>>(0));
      var $447=(($446)&(1));
      var $448=($447);
      var $449=(($448)|(0))!=0;
      if ($449) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $451=$C0;
      var $452=$R;
      var $453=(($452+16)|0);
      var $454=(($453)|0);
      HEAP32[(($454)>>2)]=$451;
      var $455=$R;
      var $456=$C0;
      var $457=(($456+24)|0);
      HEAP32[(($457)>>2)]=$455;
      label = 78; break;
    case 77: 
      _abort();
      throw "Reached an unreachable!"
    case 78: 
      label = 79; break;
    case 79: 
      var $461=$v;
      var $462=(($461+16)|0);
      var $463=(($462+4)|0);
      var $464=HEAP32[(($463)>>2)];
      $C1=$464;
      var $465=(($464)|(0))!=0;
      if ($465) { label = 80; break; } else { label = 84; break; }
    case 80: 
      var $467=$C1;
      var $468=$467;
      var $469=$2;
      var $470=(($469+16)|0);
      var $471=HEAP32[(($470)>>2)];
      var $472=(($468)>>>(0)) >= (($471)>>>(0));
      var $473=(($472)&(1));
      var $474=($473);
      var $475=(($474)|(0))!=0;
      if ($475) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $477=$C1;
      var $478=$R;
      var $479=(($478+16)|0);
      var $480=(($479+4)|0);
      HEAP32[(($480)>>2)]=$477;
      var $481=$R;
      var $482=$C1;
      var $483=(($482+24)|0);
      HEAP32[(($483)>>2)]=$481;
      label = 83; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!"
    case 83: 
      label = 84; break;
    case 84: 
      label = 86; break;
    case 85: 
      _abort();
      throw "Reached an unreachable!"
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $491=$rsize;
      var $492=(($491)>>>(0)) < 16;
      if ($492) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $494=$rsize;
      var $495=$3;
      var $496=((($494)+($495))|0);
      var $497=$496 | 1;
      var $498=$497 | 2;
      var $499=$v;
      var $500=(($499+4)|0);
      HEAP32[(($500)>>2)]=$498;
      var $501=$v;
      var $502=$501;
      var $503=$rsize;
      var $504=$3;
      var $505=((($503)+($504))|0);
      var $506=(($502+$505)|0);
      var $507=$506;
      var $508=(($507+4)|0);
      var $509=HEAP32[(($508)>>2)];
      var $510=$509 | 1;
      HEAP32[(($508)>>2)]=$510;
      label = 126; break;
    case 90: 
      var $512=$3;
      var $513=$512 | 1;
      var $514=$513 | 2;
      var $515=$v;
      var $516=(($515+4)|0);
      HEAP32[(($516)>>2)]=$514;
      var $517=$rsize;
      var $518=$517 | 1;
      var $519=$r;
      var $520=(($519+4)|0);
      HEAP32[(($520)>>2)]=$518;
      var $521=$rsize;
      var $522=$r;
      var $523=$522;
      var $524=$rsize;
      var $525=(($523+$524)|0);
      var $526=$525;
      var $527=(($526)|0);
      HEAP32[(($527)>>2)]=$521;
      var $528=$rsize;
      var $529=$528 >>> 3;
      var $530=(($529)>>>(0)) < 32;
      if ($530) { label = 91; break; } else { label = 98; break; }
    case 91: 
      var $532=$rsize;
      var $533=$532 >>> 3;
      $I=$533;
      var $534=$I;
      var $535=$534 << 1;
      var $536=$2;
      var $537=(($536+40)|0);
      var $538=(($537+($535<<2))|0);
      var $539=$538;
      var $540=$539;
      $B=$540;
      var $541=$B;
      $F5=$541;
      var $542=$2;
      var $543=(($542)|0);
      var $544=HEAP32[(($543)>>2)];
      var $545=$I;
      var $546=1 << $545;
      var $547=$544 & $546;
      var $548=(($547)|(0))!=0;
      if ($548) { label = 93; break; } else { label = 92; break; }
    case 92: 
      var $550=$I;
      var $551=1 << $550;
      var $552=$2;
      var $553=(($552)|0);
      var $554=HEAP32[(($553)>>2)];
      var $555=$554 | $551;
      HEAP32[(($553)>>2)]=$555;
      label = 97; break;
    case 93: 
      var $557=$B;
      var $558=(($557+8)|0);
      var $559=HEAP32[(($558)>>2)];
      var $560=$559;
      var $561=$2;
      var $562=(($561+16)|0);
      var $563=HEAP32[(($562)>>2)];
      var $564=(($560)>>>(0)) >= (($563)>>>(0));
      var $565=(($564)&(1));
      var $566=($565);
      var $567=(($566)|(0))!=0;
      if ($567) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $569=$B;
      var $570=(($569+8)|0);
      var $571=HEAP32[(($570)>>2)];
      $F5=$571;
      label = 96; break;
    case 95: 
      _abort();
      throw "Reached an unreachable!"
    case 96: 
      label = 97; break;
    case 97: 
      var $575=$r;
      var $576=$B;
      var $577=(($576+8)|0);
      HEAP32[(($577)>>2)]=$575;
      var $578=$r;
      var $579=$F5;
      var $580=(($579+12)|0);
      HEAP32[(($580)>>2)]=$578;
      var $581=$F5;
      var $582=$r;
      var $583=(($582+8)|0);
      HEAP32[(($583)>>2)]=$581;
      var $584=$B;
      var $585=$r;
      var $586=(($585+12)|0);
      HEAP32[(($586)>>2)]=$584;
      label = 125; break;
    case 98: 
      var $588=$r;
      var $589=$588;
      $TP=$589;
      var $590=$rsize;
      var $591=$590 >>> 8;
      $X8=$591;
      var $592=$X8;
      var $593=(($592)|(0))==0;
      if ($593) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I7=0;
      label = 104; break;
    case 100: 
      var $596=$X8;
      var $597=(($596)>>>(0)) > 65535;
      if ($597) { label = 101; break; } else { label = 102; break; }
    case 101: 
      $I7=31;
      label = 103; break;
    case 102: 
      var $600=$X8;
      $Y9=$600;
      var $601=$Y9;
      var $602=((($601)-(256))|0);
      var $603=$602 >>> 16;
      var $604=$603 & 8;
      $N10=$604;
      var $605=$N10;
      var $606=$Y9;
      var $607=$606 << $605;
      $Y9=$607;
      var $608=((($607)-(4096))|0);
      var $609=$608 >>> 16;
      var $610=$609 & 4;
      $K11=$610;
      var $611=$K11;
      var $612=$N10;
      var $613=((($612)+($611))|0);
      $N10=$613;
      var $614=$K11;
      var $615=$Y9;
      var $616=$615 << $614;
      $Y9=$616;
      var $617=((($616)-(16384))|0);
      var $618=$617 >>> 16;
      var $619=$618 & 2;
      $K11=$619;
      var $620=$N10;
      var $621=((($620)+($619))|0);
      $N10=$621;
      var $622=$N10;
      var $623=(((14)-($622))|0);
      var $624=$K11;
      var $625=$Y9;
      var $626=$625 << $624;
      $Y9=$626;
      var $627=$626 >>> 15;
      var $628=((($623)+($627))|0);
      $K11=$628;
      var $629=$K11;
      var $630=$629 << 1;
      var $631=$rsize;
      var $632=$K11;
      var $633=((($632)+(7))|0);
      var $634=$631 >>> (($633)>>>(0));
      var $635=$634 & 1;
      var $636=((($630)+($635))|0);
      $I7=$636;
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $639=$I7;
      var $640=$2;
      var $641=(($640+304)|0);
      var $642=(($641+($639<<2))|0);
      $H6=$642;
      var $643=$I7;
      var $644=$TP;
      var $645=(($644+28)|0);
      HEAP32[(($645)>>2)]=$643;
      var $646=$TP;
      var $647=(($646+16)|0);
      var $648=(($647+4)|0);
      HEAP32[(($648)>>2)]=0;
      var $649=$TP;
      var $650=(($649+16)|0);
      var $651=(($650)|0);
      HEAP32[(($651)>>2)]=0;
      var $652=$2;
      var $653=(($652+4)|0);
      var $654=HEAP32[(($653)>>2)];
      var $655=$I7;
      var $656=1 << $655;
      var $657=$654 & $656;
      var $658=(($657)|(0))!=0;
      if ($658) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $660=$I7;
      var $661=1 << $660;
      var $662=$2;
      var $663=(($662+4)|0);
      var $664=HEAP32[(($663)>>2)];
      var $665=$664 | $661;
      HEAP32[(($663)>>2)]=$665;
      var $666=$TP;
      var $667=$H6;
      HEAP32[(($667)>>2)]=$666;
      var $668=$H6;
      var $669=$668;
      var $670=$TP;
      var $671=(($670+24)|0);
      HEAP32[(($671)>>2)]=$669;
      var $672=$TP;
      var $673=$TP;
      var $674=(($673+12)|0);
      HEAP32[(($674)>>2)]=$672;
      var $675=$TP;
      var $676=(($675+8)|0);
      HEAP32[(($676)>>2)]=$672;
      label = 124; break;
    case 106: 
      var $678=$H6;
      var $679=HEAP32[(($678)>>2)];
      $T=$679;
      var $680=$rsize;
      var $681=$I7;
      var $682=(($681)|(0))==31;
      if ($682) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $691 = 0;label = 109; break;
    case 108: 
      var $685=$I7;
      var $686=$685 >>> 1;
      var $687=((($686)+(8))|0);
      var $688=((($687)-(2))|0);
      var $689=(((31)-($688))|0);
      var $691 = $689;label = 109; break;
    case 109: 
      var $691;
      var $692=$680 << $691;
      $K12=$692;
      label = 110; break;
    case 110: 
      var $694=$T;
      var $695=(($694+4)|0);
      var $696=HEAP32[(($695)>>2)];
      var $697=$696 & -8;
      var $698=$rsize;
      var $699=(($697)|(0))!=(($698)|(0));
      if ($699) { label = 111; break; } else { label = 117; break; }
    case 111: 
      var $701=$K12;
      var $702=$701 >>> 31;
      var $703=$702 & 1;
      var $704=$T;
      var $705=(($704+16)|0);
      var $706=(($705+($703<<2))|0);
      $C=$706;
      var $707=$K12;
      var $708=$707 << 1;
      $K12=$708;
      var $709=$C;
      var $710=HEAP32[(($709)>>2)];
      var $711=(($710)|(0))!=0;
      if ($711) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $713=$C;
      var $714=HEAP32[(($713)>>2)];
      $T=$714;
      label = 116; break;
    case 113: 
      var $716=$C;
      var $717=$716;
      var $718=$2;
      var $719=(($718+16)|0);
      var $720=HEAP32[(($719)>>2)];
      var $721=(($717)>>>(0)) >= (($720)>>>(0));
      var $722=(($721)&(1));
      var $723=($722);
      var $724=(($723)|(0))!=0;
      if ($724) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $726=$TP;
      var $727=$C;
      HEAP32[(($727)>>2)]=$726;
      var $728=$T;
      var $729=$TP;
      var $730=(($729+24)|0);
      HEAP32[(($730)>>2)]=$728;
      var $731=$TP;
      var $732=$TP;
      var $733=(($732+12)|0);
      HEAP32[(($733)>>2)]=$731;
      var $734=$TP;
      var $735=(($734+8)|0);
      HEAP32[(($735)>>2)]=$731;
      label = 123; break;
    case 115: 
      _abort();
      throw "Reached an unreachable!"
    case 116: 
      label = 122; break;
    case 117: 
      var $739=$T;
      var $740=(($739+8)|0);
      var $741=HEAP32[(($740)>>2)];
      $F13=$741;
      var $742=$T;
      var $743=$742;
      var $744=$2;
      var $745=(($744+16)|0);
      var $746=HEAP32[(($745)>>2)];
      var $747=(($743)>>>(0)) >= (($746)>>>(0));
      if ($747) { label = 118; break; } else { var $756 = 0;label = 119; break; }
    case 118: 
      var $749=$F13;
      var $750=$749;
      var $751=$2;
      var $752=(($751+16)|0);
      var $753=HEAP32[(($752)>>2)];
      var $754=(($750)>>>(0)) >= (($753)>>>(0));
      var $756 = $754;label = 119; break;
    case 119: 
      var $756;
      var $757=(($756)&(1));
      var $758=($757);
      var $759=(($758)|(0))!=0;
      if ($759) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $761=$TP;
      var $762=$F13;
      var $763=(($762+12)|0);
      HEAP32[(($763)>>2)]=$761;
      var $764=$T;
      var $765=(($764+8)|0);
      HEAP32[(($765)>>2)]=$761;
      var $766=$F13;
      var $767=$TP;
      var $768=(($767+8)|0);
      HEAP32[(($768)>>2)]=$766;
      var $769=$T;
      var $770=$TP;
      var $771=(($770+12)|0);
      HEAP32[(($771)>>2)]=$769;
      var $772=$TP;
      var $773=(($772+24)|0);
      HEAP32[(($773)>>2)]=0;
      label = 123; break;
    case 121: 
      _abort();
      throw "Reached an unreachable!"
    case 122: 
      label = 110; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      var $780=$v;
      var $781=$780;
      var $782=(($781+8)|0);
      $1=$782;
      label = 130; break;
    case 127: 
      label = 128; break;
    case 128: 
      _abort();
      throw "Reached an unreachable!"
    case 129: 
      $1=0;
      label = 130; break;
    case 130: 
      var $787=$1;
      return $787;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_alloc($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $asize;
      var $mem;
      var $fp;
      var $br;
      var $ssize;
      var $ss;
      var $base;
      var $fp1;
      var $esize;
      var $end;
      var $br2;
      var $end3;
      var $ssize4;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $4=HEAP32[((((5243284)|0))>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { var $10 = 1;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $7=_init_mparams();
      var $8=(($7)|(0))!=0;
      var $10 = $8;label = 3; break;
    case 3: 
      var $10;
      var $11=(($10)&(1));
      var $12=$2;
      var $13=(($12+444)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 0;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $18=$3;
      var $19=HEAP32[((((5243296)|0))>>2)];
      var $20=(($18)>>>(0)) >= (($19)>>>(0));
      if ($20) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $27=$2;
      var $28=$3;
      var $29=_mmap_alloc($27, $28);
      $mem=$29;
      var $30=$mem;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$mem;
      $1=$33;
      label = 103; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $36=$3;
      var $37=((($36)+(48))|0);
      var $38=HEAP32[((((5243292)|0))>>2)];
      var $39=((($38)-(1))|0);
      var $40=((($37)+($39))|0);
      var $41=HEAP32[((((5243292)|0))>>2)];
      var $42=((($41)-(1))|0);
      var $43=$42 ^ -1;
      var $44=$40 & $43;
      $asize=$44;
      var $45=$asize;
      var $46=$3;
      var $47=(($45)>>>(0)) <= (($46)>>>(0));
      if ($47) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 103; break;
    case 11: 
      var $50=$2;
      var $51=(($50+440)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|(0))!=0;
      if ($53) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $55=$2;
      var $56=(($55+432)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$asize;
      var $59=((($57)+($58))|0);
      $fp=$59;
      var $60=$fp;
      var $61=$2;
      var $62=(($61+432)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($60)>>>(0)) <= (($63)>>>(0));
      if ($64) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $66=$fp;
      var $67=$2;
      var $68=(($67+440)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($66)>>>(0)) > (($69)>>>(0));
      if ($70) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 103; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $74=$2;
      var $75=(($74+444)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 & 4;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 53; break; } else { label = 17; break; }
    case 17: 
      $br=-1;
      var $80=$asize;
      $ssize=$80;
      var $81=$2;
      var $82=(($81+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|(0))==0;
      if ($84) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $94 = 0;label = 20; break;
    case 19: 
      var $87=$2;
      var $88=$2;
      var $89=(($88+24)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$90;
      var $92=_segment_holding($87, $91);
      var $94 = $92;label = 20; break;
    case 20: 
      var $94;
      $ss=$94;
      var $95=$ss;
      var $96=(($95)|(0))==0;
      if ($96) { label = 21; break; } else { label = 33; break; }
    case 21: 
      var $98=_sbrk(0);
      $base=$98;
      var $99=$base;
      var $100=(($99)|(0))!=-1;
      if ($100) { label = 22; break; } else { label = 32; break; }
    case 22: 
      var $102=$base;
      var $103=$102;
      var $104=HEAP32[((((5243288)|0))>>2)];
      var $105=((($104)-(1))|0);
      var $106=$103 & $105;
      var $107=(($106)|(0))==0;
      if ($107) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $109=$base;
      var $110=$109;
      var $111=HEAP32[((((5243288)|0))>>2)];
      var $112=((($111)-(1))|0);
      var $113=((($110)+($112))|0);
      var $114=HEAP32[((((5243288)|0))>>2)];
      var $115=((($114)-(1))|0);
      var $116=$115 ^ -1;
      var $117=$113 & $116;
      var $118=$base;
      var $119=$118;
      var $120=((($117)-($119))|0);
      var $121=$ssize;
      var $122=((($121)+($120))|0);
      $ssize=$122;
      label = 24; break;
    case 24: 
      var $124=$2;
      var $125=(($124+432)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$ssize;
      var $128=((($126)+($127))|0);
      $fp1=$128;
      var $129=$ssize;
      var $130=$3;
      var $131=(($129)>>>(0)) > (($130)>>>(0));
      if ($131) { label = 25; break; } else { label = 31; break; }
    case 25: 
      var $133=$ssize;
      var $134=(($133)>>>(0)) < 2147483647;
      if ($134) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $136=$2;
      var $137=(($136+440)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138)|(0))==0;
      if ($139) { label = 29; break; } else { label = 27; break; }
    case 27: 
      var $141=$fp1;
      var $142=$2;
      var $143=(($142+432)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($141)>>>(0)) > (($144)>>>(0));
      if ($145) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $147=$fp1;
      var $148=$2;
      var $149=(($148+440)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($147)>>>(0)) <= (($150)>>>(0));
      if ($151) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $153=$ssize;
      var $154=_sbrk($153);
      $br=$154;
      var $155=$base;
      var $156=(($154)|(0))==(($155)|(0));
      if ($156) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $158=$base;
      $tbase=$158;
      var $159=$ssize;
      $tsize=$159;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 37; break;
    case 33: 
      var $163=$3;
      var $164=$2;
      var $165=(($164+12)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($163)-($166))|0);
      var $168=((($167)+(48))|0);
      var $169=HEAP32[((((5243292)|0))>>2)];
      var $170=((($169)-(1))|0);
      var $171=((($168)+($170))|0);
      var $172=HEAP32[((((5243292)|0))>>2)];
      var $173=((($172)-(1))|0);
      var $174=$173 ^ -1;
      var $175=$171 & $174;
      $ssize=$175;
      var $176=$ssize;
      var $177=(($176)>>>(0)) < 2147483647;
      if ($177) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $179=$ssize;
      var $180=_sbrk($179);
      $br=$180;
      var $181=$ss;
      var $182=(($181)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$ss;
      var $185=(($184+4)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($183+$186)|0);
      var $188=(($180)|(0))==(($187)|(0));
      if ($188) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $190=$br;
      $tbase=$190;
      var $191=$ssize;
      $tsize=$191;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $194=$tbase;
      var $195=(($194)|(0))==-1;
      if ($195) { label = 38; break; } else { label = 52; break; }
    case 38: 
      var $197=$br;
      var $198=(($197)|(0))!=-1;
      if ($198) { label = 39; break; } else { label = 48; break; }
    case 39: 
      var $200=$ssize;
      var $201=(($200)>>>(0)) < 2147483647;
      if ($201) { label = 40; break; } else { label = 47; break; }
    case 40: 
      var $203=$ssize;
      var $204=$3;
      var $205=((($204)+(48))|0);
      var $206=(($203)>>>(0)) < (($205)>>>(0));
      if ($206) { label = 41; break; } else { label = 47; break; }
    case 41: 
      var $208=$3;
      var $209=((($208)+(48))|0);
      var $210=$ssize;
      var $211=((($209)-($210))|0);
      var $212=HEAP32[((((5243292)|0))>>2)];
      var $213=((($212)-(1))|0);
      var $214=((($211)+($213))|0);
      var $215=HEAP32[((((5243292)|0))>>2)];
      var $216=((($215)-(1))|0);
      var $217=$216 ^ -1;
      var $218=$214 & $217;
      $esize=$218;
      var $219=$esize;
      var $220=(($219)>>>(0)) < 2147483647;
      if ($220) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $222=$esize;
      var $223=_sbrk($222);
      $end=$223;
      var $224=$end;
      var $225=(($224)|(0))!=-1;
      if ($225) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $227=$esize;
      var $228=$ssize;
      var $229=((($228)+($227))|0);
      $ssize=$229;
      label = 45; break;
    case 44: 
      var $231=$ssize;
      var $232=(((-$231))|0);
      var $233=_sbrk($232);
      $br=-1;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $238=$br;
      var $239=(($238)|(0))!=-1;
      if ($239) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $241=$br;
      $tbase=$241;
      var $242=$ssize;
      $tsize=$242;
      label = 51; break;
    case 50: 
      var $244=$2;
      var $245=(($244+444)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=$246 | 4;
      HEAP32[(($245)>>2)]=$247;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $251=$tbase;
      var $252=(($251)|(0))==-1;
      if ($252) { label = 54; break; } else { label = 63; break; }
    case 54: 
      var $254=$asize;
      var $255=(($254)>>>(0)) < 2147483647;
      if ($255) { label = 55; break; } else { label = 62; break; }
    case 55: 
      $br2=-1;
      $end3=-1;
      var $257=$asize;
      var $258=_sbrk($257);
      $br2=$258;
      var $259=_sbrk(0);
      $end3=$259;
      var $260=$br2;
      var $261=(($260)|(0))!=-1;
      if ($261) { label = 56; break; } else { label = 61; break; }
    case 56: 
      var $263=$end3;
      var $264=(($263)|(0))!=-1;
      if ($264) { label = 57; break; } else { label = 61; break; }
    case 57: 
      var $266=$br2;
      var $267=$end3;
      var $268=(($266)>>>(0)) < (($267)>>>(0));
      if ($268) { label = 58; break; } else { label = 61; break; }
    case 58: 
      var $270=$end3;
      var $271=$br2;
      var $272=$270;
      var $273=$271;
      var $274=((($272)-($273))|0);
      $ssize4=$274;
      var $275=$ssize4;
      var $276=$3;
      var $277=((($276)+(40))|0);
      var $278=(($275)>>>(0)) > (($277)>>>(0));
      if ($278) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $280=$br2;
      $tbase=$280;
      var $281=$ssize4;
      $tsize=$281;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $286=$tbase;
      var $287=(($286)|(0))!=-1;
      if ($287) { label = 64; break; } else { label = 102; break; }
    case 64: 
      var $289=$tsize;
      var $290=$2;
      var $291=(($290+432)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=((($292)+($289))|0);
      HEAP32[(($291)>>2)]=$293;
      var $294=$2;
      var $295=(($294+436)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($293)>>>(0)) > (($296)>>>(0));
      if ($297) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $299=$2;
      var $300=(($299+432)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=$2;
      var $303=(($302+436)|0);
      HEAP32[(($303)>>2)]=$301;
      label = 66; break;
    case 66: 
      var $305=$2;
      var $306=(($305+24)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($307)|(0))!=0;
      if ($308) { label = 74; break; } else { label = 67; break; }
    case 67: 
      var $310=$2;
      var $311=(($310+16)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312)|(0))==0;
      if ($313) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $315=$tbase;
      var $316=$2;
      var $317=(($316+16)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=(($315)>>>(0)) < (($318)>>>(0));
      if ($319) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $321=$tbase;
      var $322=$2;
      var $323=(($322+16)|0);
      HEAP32[(($323)>>2)]=$321;
      label = 70; break;
    case 70: 
      var $325=$tbase;
      var $326=$2;
      var $327=(($326+448)|0);
      var $328=(($327)|0);
      HEAP32[(($328)>>2)]=$325;
      var $329=$tsize;
      var $330=$2;
      var $331=(($330+448)|0);
      var $332=(($331+4)|0);
      HEAP32[(($332)>>2)]=$329;
      var $333=$mmap_flag;
      var $334=$2;
      var $335=(($334+448)|0);
      var $336=(($335+12)|0);
      HEAP32[(($336)>>2)]=$333;
      var $337=HEAP32[((((5243284)|0))>>2)];
      var $338=$2;
      var $339=(($338+36)|0);
      HEAP32[(($339)>>2)]=$337;
      var $340=$2;
      var $341=(($340+32)|0);
      HEAP32[(($341)>>2)]=-1;
      var $342=$2;
      _init_bins($342);
      var $343=$2;
      var $344=(($343)|(0))==5258108;
      if ($344) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $346=$2;
      var $347=$tbase;
      var $348=$347;
      var $349=$tsize;
      var $350=((($349)-(40))|0);
      _init_top($346, $348, $350);
      label = 73; break;
    case 72: 
      var $352=$2;
      var $353=$352;
      var $354=((($353)-(8))|0);
      var $355=$354;
      var $356=$355;
      var $357=$2;
      var $358=$357;
      var $359=((($358)-(8))|0);
      var $360=$359;
      var $361=(($360+4)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=$362 & -8;
      var $364=(($356+$363)|0);
      var $365=$364;
      $mn=$365;
      var $366=$2;
      var $367=$mn;
      var $368=$tbase;
      var $369=$tsize;
      var $370=(($368+$369)|0);
      var $371=$mn;
      var $372=$371;
      var $373=$370;
      var $374=$372;
      var $375=((($373)-($374))|0);
      var $376=((($375)-(40))|0);
      _init_top($366, $367, $376);
      label = 73; break;
    case 73: 
      label = 99; break;
    case 74: 
      var $379=$2;
      var $380=(($379+448)|0);
      $sp=$380;
      label = 75; break;
    case 75: 
      var $382=$sp;
      var $383=(($382)|(0))!=0;
      if ($383) { label = 76; break; } else { var $395 = 0;label = 77; break; }
    case 76: 
      var $385=$tbase;
      var $386=$sp;
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=$sp;
      var $390=(($389+4)|0);
      var $391=HEAP32[(($390)>>2)];
      var $392=(($388+$391)|0);
      var $393=(($385)|(0))!=(($392)|(0));
      var $395 = $393;label = 77; break;
    case 77: 
      var $395;
      if ($395) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $397=$sp;
      var $398=(($397+8)|0);
      var $399=HEAP32[(($398)>>2)];
      $sp=$399;
      label = 75; break;
    case 79: 
      var $401=$sp;
      var $402=(($401)|(0))!=0;
      if ($402) { label = 80; break; } else { label = 85; break; }
    case 80: 
      var $404=$sp;
      var $405=(($404+12)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=$406 & 8;
      var $408=(($407)|(0))!=0;
      if ($408) { label = 85; break; } else { label = 81; break; }
    case 81: 
      var $410=$sp;
      var $411=(($410+12)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$412 & 0;
      var $414=$mmap_flag;
      var $415=(($413)|(0))==(($414)|(0));
      if ($415) { label = 82; break; } else { label = 85; break; }
    case 82: 
      var $417=$2;
      var $418=(($417+24)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=$419;
      var $421=$sp;
      var $422=(($421)|0);
      var $423=HEAP32[(($422)>>2)];
      var $424=(($420)>>>(0)) >= (($423)>>>(0));
      if ($424) { label = 83; break; } else { label = 85; break; }
    case 83: 
      var $426=$2;
      var $427=(($426+24)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=$428;
      var $430=$sp;
      var $431=(($430)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=$sp;
      var $434=(($433+4)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=(($432+$435)|0);
      var $437=(($429)>>>(0)) < (($436)>>>(0));
      if ($437) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $439=$tsize;
      var $440=$sp;
      var $441=(($440+4)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=((($442)+($439))|0);
      HEAP32[(($441)>>2)]=$443;
      var $444=$2;
      var $445=$2;
      var $446=(($445+24)|0);
      var $447=HEAP32[(($446)>>2)];
      var $448=$2;
      var $449=(($448+12)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$tsize;
      var $452=((($450)+($451))|0);
      _init_top($444, $447, $452);
      label = 98; break;
    case 85: 
      var $454=$tbase;
      var $455=$2;
      var $456=(($455+16)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($454)>>>(0)) < (($457)>>>(0));
      if ($458) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $460=$tbase;
      var $461=$2;
      var $462=(($461+16)|0);
      HEAP32[(($462)>>2)]=$460;
      label = 87; break;
    case 87: 
      var $464=$2;
      var $465=(($464+448)|0);
      $sp=$465;
      label = 88; break;
    case 88: 
      var $467=$sp;
      var $468=(($467)|(0))!=0;
      if ($468) { label = 89; break; } else { var $478 = 0;label = 90; break; }
    case 89: 
      var $470=$sp;
      var $471=(($470)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=$tbase;
      var $474=$tsize;
      var $475=(($473+$474)|0);
      var $476=(($472)|(0))!=(($475)|(0));
      var $478 = $476;label = 90; break;
    case 90: 
      var $478;
      if ($478) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $480=$sp;
      var $481=(($480+8)|0);
      var $482=HEAP32[(($481)>>2)];
      $sp=$482;
      label = 88; break;
    case 92: 
      var $484=$sp;
      var $485=(($484)|(0))!=0;
      if ($485) { label = 93; break; } else { label = 96; break; }
    case 93: 
      var $487=$sp;
      var $488=(($487+12)|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=$489 & 8;
      var $491=(($490)|(0))!=0;
      if ($491) { label = 96; break; } else { label = 94; break; }
    case 94: 
      var $493=$sp;
      var $494=(($493+12)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$495 & 0;
      var $497=$mmap_flag;
      var $498=(($496)|(0))==(($497)|(0));
      if ($498) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $500=$sp;
      var $501=(($500)|0);
      var $502=HEAP32[(($501)>>2)];
      $oldbase=$502;
      var $503=$tbase;
      var $504=$sp;
      var $505=(($504)|0);
      HEAP32[(($505)>>2)]=$503;
      var $506=$tsize;
      var $507=$sp;
      var $508=(($507+4)|0);
      var $509=HEAP32[(($508)>>2)];
      var $510=((($509)+($506))|0);
      HEAP32[(($508)>>2)]=$510;
      var $511=$2;
      var $512=$tbase;
      var $513=$oldbase;
      var $514=$3;
      var $515=_prepend_alloc($511, $512, $513, $514);
      $1=$515;
      label = 103; break;
    case 96: 
      var $517=$2;
      var $518=$tbase;
      var $519=$tsize;
      var $520=$mmap_flag;
      _add_segment($517, $518, $519, $520);
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $524=$3;
      var $525=$2;
      var $526=(($525+12)|0);
      var $527=HEAP32[(($526)>>2)];
      var $528=(($524)>>>(0)) < (($527)>>>(0));
      if ($528) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $530=$3;
      var $531=$2;
      var $532=(($531+12)|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=((($533)-($530))|0);
      HEAP32[(($532)>>2)]=$534;
      $rsize=$534;
      var $535=$2;
      var $536=(($535+24)|0);
      var $537=HEAP32[(($536)>>2)];
      $p=$537;
      var $538=$p;
      var $539=$538;
      var $540=$3;
      var $541=(($539+$540)|0);
      var $542=$541;
      var $543=$2;
      var $544=(($543+24)|0);
      HEAP32[(($544)>>2)]=$542;
      $r=$542;
      var $545=$rsize;
      var $546=$545 | 1;
      var $547=$r;
      var $548=(($547+4)|0);
      HEAP32[(($548)>>2)]=$546;
      var $549=$3;
      var $550=$549 | 1;
      var $551=$550 | 2;
      var $552=$p;
      var $553=(($552+4)|0);
      HEAP32[(($553)>>2)]=$551;
      var $554=$p;
      var $555=$554;
      var $556=(($555+8)|0);
      $1=$556;
      label = 103; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $559=___errno_location();
      HEAP32[(($559)>>2)]=12;
      $1=0;
      label = 103; break;
    case 103: 
      var $561=$1;
      return $561;
    default: assert(0, "bad label: " + label);
  }
}
function _free($mem) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 214; break; }
    case 2: 
      var $5=$1;
      var $6=((($5)-(8))|0);
      var $7=$6;
      $p=$7;
      var $8=$p;
      var $9=$8;
      var $10=HEAP32[((((5258124)|0))>>2)];
      var $11=(($9)>>>(0)) >= (($10)>>>(0));
      if ($11) { label = 3; break; } else { var $19 = 0;label = 4; break; }
    case 3: 
      var $13=$p;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 3;
      var $17=(($16)|(0))!=1;
      var $19 = $17;label = 4; break;
    case 4: 
      var $19;
      var $20=(($19)&(1));
      var $21=($20);
      var $22=(($21)|(0))!=0;
      if ($22) { label = 5; break; } else { label = 211; break; }
    case 5: 
      var $24=$p;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & -8;
      $psize=$27;
      var $28=$p;
      var $29=$28;
      var $30=$psize;
      var $31=(($29+$30)|0);
      var $32=$31;
      $next=$32;
      var $33=$p;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 86; break; } else { label = 6; break; }
    case 6: 
      var $39=$p;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      $prevsize=$41;
      var $42=$p;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & 3;
      var $46=(($45)|(0))==0;
      if ($46) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $48=$prevsize;
      var $49=((($48)+(16))|0);
      var $50=$psize;
      var $51=((($50)+($49))|0);
      $psize=$51;
      label = 213; break;
    case 8: 
      var $53=$p;
      var $54=$53;
      var $55=$prevsize;
      var $56=(((-$55))|0);
      var $57=(($54+$56)|0);
      var $58=$57;
      $prev=$58;
      var $59=$prevsize;
      var $60=$psize;
      var $61=((($60)+($59))|0);
      $psize=$61;
      var $62=$prev;
      $p=$62;
      var $63=$prev;
      var $64=$63;
      var $65=HEAP32[((((5258124)|0))>>2)];
      var $66=(($64)>>>(0)) >= (($65)>>>(0));
      var $67=(($66)&(1));
      var $68=($67);
      var $69=(($68)|(0))!=0;
      if ($69) { label = 9; break; } else { label = 83; break; }
    case 9: 
      var $71=$p;
      var $72=HEAP32[((((5258128)|0))>>2)];
      var $73=(($71)|(0))!=(($72)|(0));
      if ($73) { label = 10; break; } else { label = 79; break; }
    case 10: 
      var $75=$prevsize;
      var $76=$75 >>> 3;
      var $77=(($76)>>>(0)) < 32;
      if ($77) { label = 11; break; } else { label = 29; break; }
    case 11: 
      var $79=$p;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      $F=$81;
      var $82=$p;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      $B=$84;
      var $85=$prevsize;
      var $86=$85 >>> 3;
      $I=$86;
      var $87=$F;
      var $88=$I;
      var $89=$88 << 1;
      var $90=((((5258148)|0)+($89<<2))|0);
      var $91=$90;
      var $92=$91;
      var $93=(($87)|(0))==(($92)|(0));
      if ($93) { var $108 = 1;label = 15; break; } else { label = 12; break; }
    case 12: 
      var $95=$F;
      var $96=$95;
      var $97=HEAP32[((((5258124)|0))>>2)];
      var $98=(($96)>>>(0)) >= (($97)>>>(0));
      if ($98) { label = 13; break; } else { var $106 = 0;label = 14; break; }
    case 13: 
      var $100=$F;
      var $101=(($100+12)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$p;
      var $104=(($102)|(0))==(($103)|(0));
      var $106 = $104;label = 14; break;
    case 14: 
      var $106;
      var $108 = $106;label = 15; break;
    case 15: 
      var $108;
      var $109=(($108)&(1));
      var $110=($109);
      var $111=(($110)|(0))!=0;
      if ($111) { label = 16; break; } else { label = 27; break; }
    case 16: 
      var $113=$B;
      var $114=$F;
      var $115=(($113)|(0))==(($114)|(0));
      if ($115) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $117=$I;
      var $118=1 << $117;
      var $119=$118 ^ -1;
      var $120=HEAP32[((((5258108)|0))>>2)];
      var $121=$120 & $119;
      HEAP32[((((5258108)|0))>>2)]=$121;
      label = 26; break;
    case 18: 
      var $123=$B;
      var $124=$I;
      var $125=$124 << 1;
      var $126=((((5258148)|0)+($125<<2))|0);
      var $127=$126;
      var $128=$127;
      var $129=(($123)|(0))==(($128)|(0));
      if ($129) { var $144 = 1;label = 22; break; } else { label = 19; break; }
    case 19: 
      var $131=$B;
      var $132=$131;
      var $133=HEAP32[((((5258124)|0))>>2)];
      var $134=(($132)>>>(0)) >= (($133)>>>(0));
      if ($134) { label = 20; break; } else { var $142 = 0;label = 21; break; }
    case 20: 
      var $136=$B;
      var $137=(($136+8)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$p;
      var $140=(($138)|(0))==(($139)|(0));
      var $142 = $140;label = 21; break;
    case 21: 
      var $142;
      var $144 = $142;label = 22; break;
    case 22: 
      var $144;
      var $145=(($144)&(1));
      var $146=($145);
      var $147=(($146)|(0))!=0;
      if ($147) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $149=$B;
      var $150=$F;
      var $151=(($150+12)|0);
      HEAP32[(($151)>>2)]=$149;
      var $152=$F;
      var $153=$B;
      var $154=(($153+8)|0);
      HEAP32[(($154)>>2)]=$152;
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!"
    case 25: 
      label = 26; break;
    case 26: 
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 78; break;
    case 29: 
      var $161=$p;
      var $162=$161;
      $TP=$162;
      var $163=$TP;
      var $164=(($163+24)|0);
      var $165=HEAP32[(($164)>>2)];
      $XP=$165;
      var $166=$TP;
      var $167=(($166+12)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=$TP;
      var $170=(($168)|(0))!=(($169)|(0));
      if ($170) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $172=$TP;
      var $173=(($172+8)|0);
      var $174=HEAP32[(($173)>>2)];
      $F1=$174;
      var $175=$TP;
      var $176=(($175+12)|0);
      var $177=HEAP32[(($176)>>2)];
      $R=$177;
      var $178=$F1;
      var $179=$178;
      var $180=HEAP32[((((5258124)|0))>>2)];
      var $181=(($179)>>>(0)) >= (($180)>>>(0));
      if ($181) { label = 31; break; } else { var $195 = 0;label = 33; break; }
    case 31: 
      var $183=$F1;
      var $184=(($183+12)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=$TP;
      var $187=(($185)|(0))==(($186)|(0));
      if ($187) { label = 32; break; } else { var $195 = 0;label = 33; break; }
    case 32: 
      var $189=$R;
      var $190=(($189+8)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$TP;
      var $193=(($191)|(0))==(($192)|(0));
      var $195 = $193;label = 33; break;
    case 33: 
      var $195;
      var $196=(($195)&(1));
      var $197=($196);
      var $198=(($197)|(0))!=0;
      if ($198) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $200=$R;
      var $201=$F1;
      var $202=(($201+12)|0);
      HEAP32[(($202)>>2)]=$200;
      var $203=$F1;
      var $204=$R;
      var $205=(($204+8)|0);
      HEAP32[(($205)>>2)]=$203;
      label = 36; break;
    case 35: 
      _abort();
      throw "Reached an unreachable!"
    case 36: 
      label = 49; break;
    case 37: 
      var $209=$TP;
      var $210=(($209+16)|0);
      var $211=(($210+4)|0);
      $RP=$211;
      var $212=HEAP32[(($211)>>2)];
      $R=$212;
      var $213=(($212)|(0))!=0;
      if ($213) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $215=$TP;
      var $216=(($215+16)|0);
      var $217=(($216)|0);
      $RP=$217;
      var $218=HEAP32[(($217)>>2)];
      $R=$218;
      var $219=(($218)|(0))!=0;
      if ($219) { label = 39; break; } else { label = 48; break; }
    case 39: 
      label = 40; break;
    case 40: 
      var $222=$R;
      var $223=(($222+16)|0);
      var $224=(($223+4)|0);
      $CP=$224;
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225)|(0))!=0;
      if ($226) { var $234 = 1;label = 42; break; } else { label = 41; break; }
    case 41: 
      var $228=$R;
      var $229=(($228+16)|0);
      var $230=(($229)|0);
      $CP=$230;
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231)|(0))!=0;
      var $234 = $232;label = 42; break;
    case 42: 
      var $234;
      if ($234) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $236=$CP;
      $RP=$236;
      var $237=HEAP32[(($236)>>2)];
      $R=$237;
      label = 40; break;
    case 44: 
      var $239=$RP;
      var $240=$239;
      var $241=HEAP32[((((5258124)|0))>>2)];
      var $242=(($240)>>>(0)) >= (($241)>>>(0));
      var $243=(($242)&(1));
      var $244=($243);
      var $245=(($244)|(0))!=0;
      if ($245) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $247=$RP;
      HEAP32[(($247)>>2)]=0;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!"
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $252=$XP;
      var $253=(($252)|(0))!=0;
      if ($253) { label = 50; break; } else { label = 77; break; }
    case 50: 
      var $255=$TP;
      var $256=(($255+28)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=((((5258412)|0)+($257<<2))|0);
      $H=$258;
      var $259=$TP;
      var $260=$H;
      var $261=HEAP32[(($260)>>2)];
      var $262=(($259)|(0))==(($261)|(0));
      if ($262) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $264=$R;
      var $265=$H;
      HEAP32[(($265)>>2)]=$264;
      var $266=(($264)|(0))==0;
      if ($266) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $268=$TP;
      var $269=(($268+28)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=1 << $270;
      var $272=$271 ^ -1;
      var $273=HEAP32[((((5258112)|0))>>2)];
      var $274=$273 & $272;
      HEAP32[((((5258112)|0))>>2)]=$274;
      label = 53; break;
    case 53: 
      label = 61; break;
    case 54: 
      var $277=$XP;
      var $278=$277;
      var $279=HEAP32[((((5258124)|0))>>2)];
      var $280=(($278)>>>(0)) >= (($279)>>>(0));
      var $281=(($280)&(1));
      var $282=($281);
      var $283=(($282)|(0))!=0;
      if ($283) { label = 55; break; } else { label = 59; break; }
    case 55: 
      var $285=$XP;
      var $286=(($285+16)|0);
      var $287=(($286)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$TP;
      var $290=(($288)|(0))==(($289)|(0));
      if ($290) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $292=$R;
      var $293=$XP;
      var $294=(($293+16)|0);
      var $295=(($294)|0);
      HEAP32[(($295)>>2)]=$292;
      label = 58; break;
    case 57: 
      var $297=$R;
      var $298=$XP;
      var $299=(($298+16)|0);
      var $300=(($299+4)|0);
      HEAP32[(($300)>>2)]=$297;
      label = 58; break;
    case 58: 
      label = 60; break;
    case 59: 
      _abort();
      throw "Reached an unreachable!"
    case 60: 
      label = 61; break;
    case 61: 
      var $305=$R;
      var $306=(($305)|(0))!=0;
      if ($306) { label = 62; break; } else { label = 76; break; }
    case 62: 
      var $308=$R;
      var $309=$308;
      var $310=HEAP32[((((5258124)|0))>>2)];
      var $311=(($309)>>>(0)) >= (($310)>>>(0));
      var $312=(($311)&(1));
      var $313=($312);
      var $314=(($313)|(0))!=0;
      if ($314) { label = 63; break; } else { label = 74; break; }
    case 63: 
      var $316=$XP;
      var $317=$R;
      var $318=(($317+24)|0);
      HEAP32[(($318)>>2)]=$316;
      var $319=$TP;
      var $320=(($319+16)|0);
      var $321=(($320)|0);
      var $322=HEAP32[(($321)>>2)];
      $C0=$322;
      var $323=(($322)|(0))!=0;
      if ($323) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $325=$C0;
      var $326=$325;
      var $327=HEAP32[((((5258124)|0))>>2)];
      var $328=(($326)>>>(0)) >= (($327)>>>(0));
      var $329=(($328)&(1));
      var $330=($329);
      var $331=(($330)|(0))!=0;
      if ($331) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $333=$C0;
      var $334=$R;
      var $335=(($334+16)|0);
      var $336=(($335)|0);
      HEAP32[(($336)>>2)]=$333;
      var $337=$R;
      var $338=$C0;
      var $339=(($338+24)|0);
      HEAP32[(($339)>>2)]=$337;
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      var $343=$TP;
      var $344=(($343+16)|0);
      var $345=(($344+4)|0);
      var $346=HEAP32[(($345)>>2)];
      $C1=$346;
      var $347=(($346)|(0))!=0;
      if ($347) { label = 69; break; } else { label = 73; break; }
    case 69: 
      var $349=$C1;
      var $350=$349;
      var $351=HEAP32[((((5258124)|0))>>2)];
      var $352=(($350)>>>(0)) >= (($351)>>>(0));
      var $353=(($352)&(1));
      var $354=($353);
      var $355=(($354)|(0))!=0;
      if ($355) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $357=$C1;
      var $358=$R;
      var $359=(($358+16)|0);
      var $360=(($359+4)|0);
      HEAP32[(($360)>>2)]=$357;
      var $361=$R;
      var $362=$C1;
      var $363=(($362+24)|0);
      HEAP32[(($363)>>2)]=$361;
      label = 72; break;
    case 71: 
      _abort();
      throw "Reached an unreachable!"
    case 72: 
      label = 73; break;
    case 73: 
      label = 75; break;
    case 74: 
      _abort();
      throw "Reached an unreachable!"
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 82; break;
    case 79: 
      var $373=$next;
      var $374=(($373+4)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=$375 & 3;
      var $377=(($376)|(0))==3;
      if ($377) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $379=$psize;
      HEAP32[((((5258116)|0))>>2)]=$379;
      var $380=$next;
      var $381=(($380+4)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=$382 & -2;
      HEAP32[(($381)>>2)]=$383;
      var $384=$psize;
      var $385=$384 | 1;
      var $386=$p;
      var $387=(($386+4)|0);
      HEAP32[(($387)>>2)]=$385;
      var $388=$psize;
      var $389=$p;
      var $390=$389;
      var $391=$psize;
      var $392=(($390+$391)|0);
      var $393=$392;
      var $394=(($393)|0);
      HEAP32[(($394)>>2)]=$388;
      label = 213; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      label = 212; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $401=$p;
      var $402=$401;
      var $403=$next;
      var $404=$403;
      var $405=(($402)>>>(0)) < (($404)>>>(0));
      if ($405) { label = 87; break; } else { var $413 = 0;label = 88; break; }
    case 87: 
      var $407=$next;
      var $408=(($407+4)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=$409 & 1;
      var $411=(($410)|(0))!=0;
      var $413 = $411;label = 88; break;
    case 88: 
      var $413;
      var $414=(($413)&(1));
      var $415=($414);
      var $416=(($415)|(0))!=0;
      if ($416) { label = 89; break; } else { label = 210; break; }
    case 89: 
      var $418=$next;
      var $419=(($418+4)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=$420 & 2;
      var $422=(($421)|(0))!=0;
      if ($422) { label = 171; break; } else { label = 90; break; }
    case 90: 
      var $424=$next;
      var $425=HEAP32[((((5258132)|0))>>2)];
      var $426=(($424)|(0))==(($425)|(0));
      if ($426) { label = 91; break; } else { label = 96; break; }
    case 91: 
      var $428=$psize;
      var $429=HEAP32[((((5258120)|0))>>2)];
      var $430=((($429)+($428))|0);
      HEAP32[((((5258120)|0))>>2)]=$430;
      $tsize=$430;
      var $431=$p;
      HEAP32[((((5258132)|0))>>2)]=$431;
      var $432=$tsize;
      var $433=$432 | 1;
      var $434=$p;
      var $435=(($434+4)|0);
      HEAP32[(($435)>>2)]=$433;
      var $436=$p;
      var $437=HEAP32[((((5258128)|0))>>2)];
      var $438=(($436)|(0))==(($437)|(0));
      if ($438) { label = 92; break; } else { label = 93; break; }
    case 92: 
      HEAP32[((((5258128)|0))>>2)]=0;
      HEAP32[((((5258116)|0))>>2)]=0;
      label = 93; break;
    case 93: 
      var $441=$tsize;
      var $442=HEAP32[((((5258136)|0))>>2)];
      var $443=(($441)>>>(0)) > (($442)>>>(0));
      if ($443) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $445=_sys_trim(5258108, 0);
      label = 95; break;
    case 95: 
      label = 213; break;
    case 96: 
      var $448=$next;
      var $449=HEAP32[((((5258128)|0))>>2)];
      var $450=(($448)|(0))==(($449)|(0));
      if ($450) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $452=$psize;
      var $453=HEAP32[((((5258116)|0))>>2)];
      var $454=((($453)+($452))|0);
      HEAP32[((((5258116)|0))>>2)]=$454;
      $dsize=$454;
      var $455=$p;
      HEAP32[((((5258128)|0))>>2)]=$455;
      var $456=$dsize;
      var $457=$456 | 1;
      var $458=$p;
      var $459=(($458+4)|0);
      HEAP32[(($459)>>2)]=$457;
      var $460=$dsize;
      var $461=$p;
      var $462=$461;
      var $463=$dsize;
      var $464=(($462+$463)|0);
      var $465=$464;
      var $466=(($465)|0);
      HEAP32[(($466)>>2)]=$460;
      label = 213; break;
    case 98: 
      var $468=$next;
      var $469=(($468+4)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=$470 & -8;
      $nsize=$471;
      var $472=$nsize;
      var $473=$psize;
      var $474=((($473)+($472))|0);
      $psize=$474;
      var $475=$nsize;
      var $476=$475 >>> 3;
      var $477=(($476)>>>(0)) < 32;
      if ($477) { label = 99; break; } else { label = 117; break; }
    case 99: 
      var $479=$next;
      var $480=(($479+8)|0);
      var $481=HEAP32[(($480)>>2)];
      $F2=$481;
      var $482=$next;
      var $483=(($482+12)|0);
      var $484=HEAP32[(($483)>>2)];
      $B3=$484;
      var $485=$nsize;
      var $486=$485 >>> 3;
      $I4=$486;
      var $487=$F2;
      var $488=$I4;
      var $489=$488 << 1;
      var $490=((((5258148)|0)+($489<<2))|0);
      var $491=$490;
      var $492=$491;
      var $493=(($487)|(0))==(($492)|(0));
      if ($493) { var $508 = 1;label = 103; break; } else { label = 100; break; }
    case 100: 
      var $495=$F2;
      var $496=$495;
      var $497=HEAP32[((((5258124)|0))>>2)];
      var $498=(($496)>>>(0)) >= (($497)>>>(0));
      if ($498) { label = 101; break; } else { var $506 = 0;label = 102; break; }
    case 101: 
      var $500=$F2;
      var $501=(($500+12)|0);
      var $502=HEAP32[(($501)>>2)];
      var $503=$next;
      var $504=(($502)|(0))==(($503)|(0));
      var $506 = $504;label = 102; break;
    case 102: 
      var $506;
      var $508 = $506;label = 103; break;
    case 103: 
      var $508;
      var $509=(($508)&(1));
      var $510=($509);
      var $511=(($510)|(0))!=0;
      if ($511) { label = 104; break; } else { label = 115; break; }
    case 104: 
      var $513=$B3;
      var $514=$F2;
      var $515=(($513)|(0))==(($514)|(0));
      if ($515) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $517=$I4;
      var $518=1 << $517;
      var $519=$518 ^ -1;
      var $520=HEAP32[((((5258108)|0))>>2)];
      var $521=$520 & $519;
      HEAP32[((((5258108)|0))>>2)]=$521;
      label = 114; break;
    case 106: 
      var $523=$B3;
      var $524=$I4;
      var $525=$524 << 1;
      var $526=((((5258148)|0)+($525<<2))|0);
      var $527=$526;
      var $528=$527;
      var $529=(($523)|(0))==(($528)|(0));
      if ($529) { var $544 = 1;label = 110; break; } else { label = 107; break; }
    case 107: 
      var $531=$B3;
      var $532=$531;
      var $533=HEAP32[((((5258124)|0))>>2)];
      var $534=(($532)>>>(0)) >= (($533)>>>(0));
      if ($534) { label = 108; break; } else { var $542 = 0;label = 109; break; }
    case 108: 
      var $536=$B3;
      var $537=(($536+8)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=$next;
      var $540=(($538)|(0))==(($539)|(0));
      var $542 = $540;label = 109; break;
    case 109: 
      var $542;
      var $544 = $542;label = 110; break;
    case 110: 
      var $544;
      var $545=(($544)&(1));
      var $546=($545);
      var $547=(($546)|(0))!=0;
      if ($547) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $549=$B3;
      var $550=$F2;
      var $551=(($550+12)|0);
      HEAP32[(($551)>>2)]=$549;
      var $552=$F2;
      var $553=$B3;
      var $554=(($553+8)|0);
      HEAP32[(($554)>>2)]=$552;
      label = 113; break;
    case 112: 
      _abort();
      throw "Reached an unreachable!"
    case 113: 
      label = 114; break;
    case 114: 
      label = 116; break;
    case 115: 
      _abort();
      throw "Reached an unreachable!"
    case 116: 
      label = 166; break;
    case 117: 
      var $561=$next;
      var $562=$561;
      $TP5=$562;
      var $563=$TP5;
      var $564=(($563+24)|0);
      var $565=HEAP32[(($564)>>2)];
      $XP6=$565;
      var $566=$TP5;
      var $567=(($566+12)|0);
      var $568=HEAP32[(($567)>>2)];
      var $569=$TP5;
      var $570=(($568)|(0))!=(($569)|(0));
      if ($570) { label = 118; break; } else { label = 125; break; }
    case 118: 
      var $572=$TP5;
      var $573=(($572+8)|0);
      var $574=HEAP32[(($573)>>2)];
      $F8=$574;
      var $575=$TP5;
      var $576=(($575+12)|0);
      var $577=HEAP32[(($576)>>2)];
      $R7=$577;
      var $578=$F8;
      var $579=$578;
      var $580=HEAP32[((((5258124)|0))>>2)];
      var $581=(($579)>>>(0)) >= (($580)>>>(0));
      if ($581) { label = 119; break; } else { var $595 = 0;label = 121; break; }
    case 119: 
      var $583=$F8;
      var $584=(($583+12)|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=$TP5;
      var $587=(($585)|(0))==(($586)|(0));
      if ($587) { label = 120; break; } else { var $595 = 0;label = 121; break; }
    case 120: 
      var $589=$R7;
      var $590=(($589+8)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=$TP5;
      var $593=(($591)|(0))==(($592)|(0));
      var $595 = $593;label = 121; break;
    case 121: 
      var $595;
      var $596=(($595)&(1));
      var $597=($596);
      var $598=(($597)|(0))!=0;
      if ($598) { label = 122; break; } else { label = 123; break; }
    case 122: 
      var $600=$R7;
      var $601=$F8;
      var $602=(($601+12)|0);
      HEAP32[(($602)>>2)]=$600;
      var $603=$F8;
      var $604=$R7;
      var $605=(($604+8)|0);
      HEAP32[(($605)>>2)]=$603;
      label = 124; break;
    case 123: 
      _abort();
      throw "Reached an unreachable!"
    case 124: 
      label = 137; break;
    case 125: 
      var $609=$TP5;
      var $610=(($609+16)|0);
      var $611=(($610+4)|0);
      $RP9=$611;
      var $612=HEAP32[(($611)>>2)];
      $R7=$612;
      var $613=(($612)|(0))!=0;
      if ($613) { label = 127; break; } else { label = 126; break; }
    case 126: 
      var $615=$TP5;
      var $616=(($615+16)|0);
      var $617=(($616)|0);
      $RP9=$617;
      var $618=HEAP32[(($617)>>2)];
      $R7=$618;
      var $619=(($618)|(0))!=0;
      if ($619) { label = 127; break; } else { label = 136; break; }
    case 127: 
      label = 128; break;
    case 128: 
      var $622=$R7;
      var $623=(($622+16)|0);
      var $624=(($623+4)|0);
      $CP10=$624;
      var $625=HEAP32[(($624)>>2)];
      var $626=(($625)|(0))!=0;
      if ($626) { var $634 = 1;label = 130; break; } else { label = 129; break; }
    case 129: 
      var $628=$R7;
      var $629=(($628+16)|0);
      var $630=(($629)|0);
      $CP10=$630;
      var $631=HEAP32[(($630)>>2)];
      var $632=(($631)|(0))!=0;
      var $634 = $632;label = 130; break;
    case 130: 
      var $634;
      if ($634) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $636=$CP10;
      $RP9=$636;
      var $637=HEAP32[(($636)>>2)];
      $R7=$637;
      label = 128; break;
    case 132: 
      var $639=$RP9;
      var $640=$639;
      var $641=HEAP32[((((5258124)|0))>>2)];
      var $642=(($640)>>>(0)) >= (($641)>>>(0));
      var $643=(($642)&(1));
      var $644=($643);
      var $645=(($644)|(0))!=0;
      if ($645) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $647=$RP9;
      HEAP32[(($647)>>2)]=0;
      label = 135; break;
    case 134: 
      _abort();
      throw "Reached an unreachable!"
    case 135: 
      label = 136; break;
    case 136: 
      label = 137; break;
    case 137: 
      var $652=$XP6;
      var $653=(($652)|(0))!=0;
      if ($653) { label = 138; break; } else { label = 165; break; }
    case 138: 
      var $655=$TP5;
      var $656=(($655+28)|0);
      var $657=HEAP32[(($656)>>2)];
      var $658=((((5258412)|0)+($657<<2))|0);
      $H11=$658;
      var $659=$TP5;
      var $660=$H11;
      var $661=HEAP32[(($660)>>2)];
      var $662=(($659)|(0))==(($661)|(0));
      if ($662) { label = 139; break; } else { label = 142; break; }
    case 139: 
      var $664=$R7;
      var $665=$H11;
      HEAP32[(($665)>>2)]=$664;
      var $666=(($664)|(0))==0;
      if ($666) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $668=$TP5;
      var $669=(($668+28)|0);
      var $670=HEAP32[(($669)>>2)];
      var $671=1 << $670;
      var $672=$671 ^ -1;
      var $673=HEAP32[((((5258112)|0))>>2)];
      var $674=$673 & $672;
      HEAP32[((((5258112)|0))>>2)]=$674;
      label = 141; break;
    case 141: 
      label = 149; break;
    case 142: 
      var $677=$XP6;
      var $678=$677;
      var $679=HEAP32[((((5258124)|0))>>2)];
      var $680=(($678)>>>(0)) >= (($679)>>>(0));
      var $681=(($680)&(1));
      var $682=($681);
      var $683=(($682)|(0))!=0;
      if ($683) { label = 143; break; } else { label = 147; break; }
    case 143: 
      var $685=$XP6;
      var $686=(($685+16)|0);
      var $687=(($686)|0);
      var $688=HEAP32[(($687)>>2)];
      var $689=$TP5;
      var $690=(($688)|(0))==(($689)|(0));
      if ($690) { label = 144; break; } else { label = 145; break; }
    case 144: 
      var $692=$R7;
      var $693=$XP6;
      var $694=(($693+16)|0);
      var $695=(($694)|0);
      HEAP32[(($695)>>2)]=$692;
      label = 146; break;
    case 145: 
      var $697=$R7;
      var $698=$XP6;
      var $699=(($698+16)|0);
      var $700=(($699+4)|0);
      HEAP32[(($700)>>2)]=$697;
      label = 146; break;
    case 146: 
      label = 148; break;
    case 147: 
      _abort();
      throw "Reached an unreachable!"
    case 148: 
      label = 149; break;
    case 149: 
      var $705=$R7;
      var $706=(($705)|(0))!=0;
      if ($706) { label = 150; break; } else { label = 164; break; }
    case 150: 
      var $708=$R7;
      var $709=$708;
      var $710=HEAP32[((((5258124)|0))>>2)];
      var $711=(($709)>>>(0)) >= (($710)>>>(0));
      var $712=(($711)&(1));
      var $713=($712);
      var $714=(($713)|(0))!=0;
      if ($714) { label = 151; break; } else { label = 162; break; }
    case 151: 
      var $716=$XP6;
      var $717=$R7;
      var $718=(($717+24)|0);
      HEAP32[(($718)>>2)]=$716;
      var $719=$TP5;
      var $720=(($719+16)|0);
      var $721=(($720)|0);
      var $722=HEAP32[(($721)>>2)];
      $C012=$722;
      var $723=(($722)|(0))!=0;
      if ($723) { label = 152; break; } else { label = 156; break; }
    case 152: 
      var $725=$C012;
      var $726=$725;
      var $727=HEAP32[((((5258124)|0))>>2)];
      var $728=(($726)>>>(0)) >= (($727)>>>(0));
      var $729=(($728)&(1));
      var $730=($729);
      var $731=(($730)|(0))!=0;
      if ($731) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $733=$C012;
      var $734=$R7;
      var $735=(($734+16)|0);
      var $736=(($735)|0);
      HEAP32[(($736)>>2)]=$733;
      var $737=$R7;
      var $738=$C012;
      var $739=(($738+24)|0);
      HEAP32[(($739)>>2)]=$737;
      label = 155; break;
    case 154: 
      _abort();
      throw "Reached an unreachable!"
    case 155: 
      label = 156; break;
    case 156: 
      var $743=$TP5;
      var $744=(($743+16)|0);
      var $745=(($744+4)|0);
      var $746=HEAP32[(($745)>>2)];
      $C113=$746;
      var $747=(($746)|(0))!=0;
      if ($747) { label = 157; break; } else { label = 161; break; }
    case 157: 
      var $749=$C113;
      var $750=$749;
      var $751=HEAP32[((((5258124)|0))>>2)];
      var $752=(($750)>>>(0)) >= (($751)>>>(0));
      var $753=(($752)&(1));
      var $754=($753);
      var $755=(($754)|(0))!=0;
      if ($755) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $757=$C113;
      var $758=$R7;
      var $759=(($758+16)|0);
      var $760=(($759+4)|0);
      HEAP32[(($760)>>2)]=$757;
      var $761=$R7;
      var $762=$C113;
      var $763=(($762+24)|0);
      HEAP32[(($763)>>2)]=$761;
      label = 160; break;
    case 159: 
      _abort();
      throw "Reached an unreachable!"
    case 160: 
      label = 161; break;
    case 161: 
      label = 163; break;
    case 162: 
      _abort();
      throw "Reached an unreachable!"
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      var $772=$psize;
      var $773=$772 | 1;
      var $774=$p;
      var $775=(($774+4)|0);
      HEAP32[(($775)>>2)]=$773;
      var $776=$psize;
      var $777=$p;
      var $778=$777;
      var $779=$psize;
      var $780=(($778+$779)|0);
      var $781=$780;
      var $782=(($781)|0);
      HEAP32[(($782)>>2)]=$776;
      var $783=$p;
      var $784=HEAP32[((((5258128)|0))>>2)];
      var $785=(($783)|(0))==(($784)|(0));
      if ($785) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $787=$psize;
      HEAP32[((((5258116)|0))>>2)]=$787;
      label = 213; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 172; break;
    case 171: 
      var $792=$next;
      var $793=(($792+4)|0);
      var $794=HEAP32[(($793)>>2)];
      var $795=$794 & -2;
      HEAP32[(($793)>>2)]=$795;
      var $796=$psize;
      var $797=$796 | 1;
      var $798=$p;
      var $799=(($798+4)|0);
      HEAP32[(($799)>>2)]=$797;
      var $800=$psize;
      var $801=$p;
      var $802=$801;
      var $803=$psize;
      var $804=(($802+$803)|0);
      var $805=$804;
      var $806=(($805)|0);
      HEAP32[(($806)>>2)]=$800;
      label = 172; break;
    case 172: 
      var $808=$psize;
      var $809=$808 >>> 3;
      var $810=(($809)>>>(0)) < 32;
      if ($810) { label = 173; break; } else { label = 180; break; }
    case 173: 
      var $812=$psize;
      var $813=$812 >>> 3;
      $I14=$813;
      var $814=$I14;
      var $815=$814 << 1;
      var $816=((((5258148)|0)+($815<<2))|0);
      var $817=$816;
      var $818=$817;
      $B15=$818;
      var $819=$B15;
      $F16=$819;
      var $820=HEAP32[((((5258108)|0))>>2)];
      var $821=$I14;
      var $822=1 << $821;
      var $823=$820 & $822;
      var $824=(($823)|(0))!=0;
      if ($824) { label = 175; break; } else { label = 174; break; }
    case 174: 
      var $826=$I14;
      var $827=1 << $826;
      var $828=HEAP32[((((5258108)|0))>>2)];
      var $829=$828 | $827;
      HEAP32[((((5258108)|0))>>2)]=$829;
      label = 179; break;
    case 175: 
      var $831=$B15;
      var $832=(($831+8)|0);
      var $833=HEAP32[(($832)>>2)];
      var $834=$833;
      var $835=HEAP32[((((5258124)|0))>>2)];
      var $836=(($834)>>>(0)) >= (($835)>>>(0));
      var $837=(($836)&(1));
      var $838=($837);
      var $839=(($838)|(0))!=0;
      if ($839) { label = 176; break; } else { label = 177; break; }
    case 176: 
      var $841=$B15;
      var $842=(($841+8)|0);
      var $843=HEAP32[(($842)>>2)];
      $F16=$843;
      label = 178; break;
    case 177: 
      _abort();
      throw "Reached an unreachable!"
    case 178: 
      label = 179; break;
    case 179: 
      var $847=$p;
      var $848=$B15;
      var $849=(($848+8)|0);
      HEAP32[(($849)>>2)]=$847;
      var $850=$p;
      var $851=$F16;
      var $852=(($851+12)|0);
      HEAP32[(($852)>>2)]=$850;
      var $853=$F16;
      var $854=$p;
      var $855=(($854+8)|0);
      HEAP32[(($855)>>2)]=$853;
      var $856=$B15;
      var $857=$p;
      var $858=(($857+12)|0);
      HEAP32[(($858)>>2)]=$856;
      label = 209; break;
    case 180: 
      var $860=$p;
      var $861=$860;
      $tp=$861;
      var $862=$psize;
      var $863=$862 >>> 8;
      $X=$863;
      var $864=$X;
      var $865=(($864)|(0))==0;
      if ($865) { label = 181; break; } else { label = 182; break; }
    case 181: 
      $I18=0;
      label = 186; break;
    case 182: 
      var $868=$X;
      var $869=(($868)>>>(0)) > 65535;
      if ($869) { label = 183; break; } else { label = 184; break; }
    case 183: 
      $I18=31;
      label = 185; break;
    case 184: 
      var $872=$X;
      $Y=$872;
      var $873=$Y;
      var $874=((($873)-(256))|0);
      var $875=$874 >>> 16;
      var $876=$875 & 8;
      $N=$876;
      var $877=$N;
      var $878=$Y;
      var $879=$878 << $877;
      $Y=$879;
      var $880=((($879)-(4096))|0);
      var $881=$880 >>> 16;
      var $882=$881 & 4;
      $K=$882;
      var $883=$K;
      var $884=$N;
      var $885=((($884)+($883))|0);
      $N=$885;
      var $886=$K;
      var $887=$Y;
      var $888=$887 << $886;
      $Y=$888;
      var $889=((($888)-(16384))|0);
      var $890=$889 >>> 16;
      var $891=$890 & 2;
      $K=$891;
      var $892=$N;
      var $893=((($892)+($891))|0);
      $N=$893;
      var $894=$N;
      var $895=(((14)-($894))|0);
      var $896=$K;
      var $897=$Y;
      var $898=$897 << $896;
      $Y=$898;
      var $899=$898 >>> 15;
      var $900=((($895)+($899))|0);
      $K=$900;
      var $901=$K;
      var $902=$901 << 1;
      var $903=$psize;
      var $904=$K;
      var $905=((($904)+(7))|0);
      var $906=$903 >>> (($905)>>>(0));
      var $907=$906 & 1;
      var $908=((($902)+($907))|0);
      $I18=$908;
      label = 185; break;
    case 185: 
      label = 186; break;
    case 186: 
      var $911=$I18;
      var $912=((((5258412)|0)+($911<<2))|0);
      $H17=$912;
      var $913=$I18;
      var $914=$tp;
      var $915=(($914+28)|0);
      HEAP32[(($915)>>2)]=$913;
      var $916=$tp;
      var $917=(($916+16)|0);
      var $918=(($917+4)|0);
      HEAP32[(($918)>>2)]=0;
      var $919=$tp;
      var $920=(($919+16)|0);
      var $921=(($920)|0);
      HEAP32[(($921)>>2)]=0;
      var $922=HEAP32[((((5258112)|0))>>2)];
      var $923=$I18;
      var $924=1 << $923;
      var $925=$922 & $924;
      var $926=(($925)|(0))!=0;
      if ($926) { label = 188; break; } else { label = 187; break; }
    case 187: 
      var $928=$I18;
      var $929=1 << $928;
      var $930=HEAP32[((((5258112)|0))>>2)];
      var $931=$930 | $929;
      HEAP32[((((5258112)|0))>>2)]=$931;
      var $932=$tp;
      var $933=$H17;
      HEAP32[(($933)>>2)]=$932;
      var $934=$H17;
      var $935=$934;
      var $936=$tp;
      var $937=(($936+24)|0);
      HEAP32[(($937)>>2)]=$935;
      var $938=$tp;
      var $939=$tp;
      var $940=(($939+12)|0);
      HEAP32[(($940)>>2)]=$938;
      var $941=$tp;
      var $942=(($941+8)|0);
      HEAP32[(($942)>>2)]=$938;
      label = 206; break;
    case 188: 
      var $944=$H17;
      var $945=HEAP32[(($944)>>2)];
      $T=$945;
      var $946=$psize;
      var $947=$I18;
      var $948=(($947)|(0))==31;
      if ($948) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $957 = 0;label = 191; break;
    case 190: 
      var $951=$I18;
      var $952=$951 >>> 1;
      var $953=((($952)+(8))|0);
      var $954=((($953)-(2))|0);
      var $955=(((31)-($954))|0);
      var $957 = $955;label = 191; break;
    case 191: 
      var $957;
      var $958=$946 << $957;
      $K19=$958;
      label = 192; break;
    case 192: 
      var $960=$T;
      var $961=(($960+4)|0);
      var $962=HEAP32[(($961)>>2)];
      var $963=$962 & -8;
      var $964=$psize;
      var $965=(($963)|(0))!=(($964)|(0));
      if ($965) { label = 193; break; } else { label = 199; break; }
    case 193: 
      var $967=$K19;
      var $968=$967 >>> 31;
      var $969=$968 & 1;
      var $970=$T;
      var $971=(($970+16)|0);
      var $972=(($971+($969<<2))|0);
      $C=$972;
      var $973=$K19;
      var $974=$973 << 1;
      $K19=$974;
      var $975=$C;
      var $976=HEAP32[(($975)>>2)];
      var $977=(($976)|(0))!=0;
      if ($977) { label = 194; break; } else { label = 195; break; }
    case 194: 
      var $979=$C;
      var $980=HEAP32[(($979)>>2)];
      $T=$980;
      label = 198; break;
    case 195: 
      var $982=$C;
      var $983=$982;
      var $984=HEAP32[((((5258124)|0))>>2)];
      var $985=(($983)>>>(0)) >= (($984)>>>(0));
      var $986=(($985)&(1));
      var $987=($986);
      var $988=(($987)|(0))!=0;
      if ($988) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $990=$tp;
      var $991=$C;
      HEAP32[(($991)>>2)]=$990;
      var $992=$T;
      var $993=$tp;
      var $994=(($993+24)|0);
      HEAP32[(($994)>>2)]=$992;
      var $995=$tp;
      var $996=$tp;
      var $997=(($996+12)|0);
      HEAP32[(($997)>>2)]=$995;
      var $998=$tp;
      var $999=(($998+8)|0);
      HEAP32[(($999)>>2)]=$995;
      label = 205; break;
    case 197: 
      _abort();
      throw "Reached an unreachable!"
    case 198: 
      label = 204; break;
    case 199: 
      var $1003=$T;
      var $1004=(($1003+8)|0);
      var $1005=HEAP32[(($1004)>>2)];
      $F20=$1005;
      var $1006=$T;
      var $1007=$1006;
      var $1008=HEAP32[((((5258124)|0))>>2)];
      var $1009=(($1007)>>>(0)) >= (($1008)>>>(0));
      if ($1009) { label = 200; break; } else { var $1016 = 0;label = 201; break; }
    case 200: 
      var $1011=$F20;
      var $1012=$1011;
      var $1013=HEAP32[((((5258124)|0))>>2)];
      var $1014=(($1012)>>>(0)) >= (($1013)>>>(0));
      var $1016 = $1014;label = 201; break;
    case 201: 
      var $1016;
      var $1017=(($1016)&(1));
      var $1018=($1017);
      var $1019=(($1018)|(0))!=0;
      if ($1019) { label = 202; break; } else { label = 203; break; }
    case 202: 
      var $1021=$tp;
      var $1022=$F20;
      var $1023=(($1022+12)|0);
      HEAP32[(($1023)>>2)]=$1021;
      var $1024=$T;
      var $1025=(($1024+8)|0);
      HEAP32[(($1025)>>2)]=$1021;
      var $1026=$F20;
      var $1027=$tp;
      var $1028=(($1027+8)|0);
      HEAP32[(($1028)>>2)]=$1026;
      var $1029=$T;
      var $1030=$tp;
      var $1031=(($1030+12)|0);
      HEAP32[(($1031)>>2)]=$1029;
      var $1032=$tp;
      var $1033=(($1032+24)|0);
      HEAP32[(($1033)>>2)]=0;
      label = 205; break;
    case 203: 
      _abort();
      throw "Reached an unreachable!"
    case 204: 
      label = 192; break;
    case 205: 
      label = 206; break;
    case 206: 
      var $1038=HEAP32[((((5258140)|0))>>2)];
      var $1039=((($1038)-(1))|0);
      HEAP32[((((5258140)|0))>>2)]=$1039;
      var $1040=(($1039)|(0))==0;
      if ($1040) { label = 207; break; } else { label = 208; break; }
    case 207: 
      var $1042=_release_unused_segments(5258108);
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      label = 213; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      _abort();
      throw "Reached an unreachable!"
    case 213: 
      label = 214; break;
    case 214: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_trim($m, $pad) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0;
      var $3=HEAP32[((((5243284)|0))>>2)];
      var $4=(($3)|(0))!=0;
      if ($4) { var $9 = 1;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $6=_init_mparams();
      var $7=(($6)|(0))!=0;
      var $9 = $7;label = 3; break;
    case 3: 
      var $9;
      var $10=(($9)&(1));
      var $11=$2;
      var $12=(($11)>>>(0)) < 4294967232;
      if ($12) { label = 4; break; } else { label = 25; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 25; break; }
    case 5: 
      var $19=$2;
      var $20=((($19)+(40))|0);
      $2=$20;
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($23)>>>(0)) > (($24)>>>(0));
      if ($25) { label = 6; break; } else { label = 21; break; }
    case 6: 
      var $27=HEAP32[((((5243292)|0))>>2)];
      $unit=$27;
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=((($30)-($31))|0);
      var $33=$unit;
      var $34=((($33)-(1))|0);
      var $35=((($32)+($34))|0);
      var $36=$unit;
      var $37=Math.floor(((($35)>>>(0)))/((($36)>>>(0))));
      var $38=((($37)-(1))|0);
      var $39=$unit;
      var $40=Math.imul($38,$39);
      $extra=$40;
      var $41=$1;
      var $42=$1;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=_segment_holding($41, $45);
      $sp=$46;
      var $47=$sp;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 8;
      var $51=(($50)|(0))!=0;
      if ($51) { label = 18; break; } else { label = 7; break; }
    case 7: 
      var $53=$sp;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 0;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 17; break;
    case 9: 
      var $60=$extra;
      var $61=(($60)>>>(0)) >= 2147483647;
      if ($61) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $63=$unit;
      var $64=(((-2147483648)-($63))|0);
      $extra=$64;
      label = 11; break;
    case 11: 
      var $66=_sbrk(0);
      $old_br=$66;
      var $67=$old_br;
      var $68=$sp;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$sp;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70+$73)|0);
      var $75=(($67)|(0))==(($74)|(0));
      if ($75) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $77=$extra;
      var $78=(((-$77))|0);
      var $79=_sbrk($78);
      $rel_br=$79;
      var $80=_sbrk(0);
      $new_br=$80;
      var $81=$rel_br;
      var $82=(($81)|(0))!=-1;
      if ($82) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $84=$new_br;
      var $85=$old_br;
      var $86=(($84)>>>(0)) < (($85)>>>(0));
      if ($86) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $88=$old_br;
      var $89=$new_br;
      var $90=$88;
      var $91=$89;
      var $92=((($90)-($91))|0);
      $released=$92;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $97=$released;
      var $98=(($97)|(0))!=0;
      if ($98) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $100=$released;
      var $101=$sp;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-($100))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=$released;
      var $106=$1;
      var $107=(($106+432)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-($105))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=$1;
      var $111=$1;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$1;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$released;
      var $118=((($116)-($117))|0);
      _init_top($110, $113, $118);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $121=$released;
      var $122=(($121)|(0))==0;
      if ($122) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $124=$1;
      var $125=(($124+12)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$1;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($126)>>>(0)) > (($129)>>>(0));
      if ($130) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $132=$1;
      var $133=(($132+28)|0);
      HEAP32[(($133)>>2)]=-1;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $136=$released;
      var $137=(($136)|(0))!=0;
      var $138=$137 ? 1 : 0;
      return $138;
    default: assert(0, "bad label: " + label);
  }
}
function _segment_holding($m, $addr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2;
      var $5=(($4+448)|0);
      $sp=$5;
      label = 2; break;
    case 2: 
      var $7=$3;
      var $8=$sp;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)>>>(0)) >= (($10)>>>(0));
      if ($11) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $13=$3;
      var $14=$sp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$sp;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+$19)|0);
      var $21=(($13)>>>(0)) < (($20)>>>(0));
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=$sp;
      $1=$23;
      label = 8; break;
    case 5: 
      var $25=$sp;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $sp=$27;
      var $28=(($27)|(0))==0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 8; break;
    case 7: 
      label = 2; break;
    case 8: 
      var $32=$1;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _init_top($m, $p, $psize) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2;
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=$6;
      var $8=$7 & 7;
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $20 = 0;label = 4; break;
    case 3: 
      var $12=$2;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 4; break;
    case 4: 
      var $20;
      $offset=$20;
      var $21=$2;
      var $22=$21;
      var $23=$offset;
      var $24=(($22+$23)|0);
      var $25=$24;
      $2=$25;
      var $26=$offset;
      var $27=$3;
      var $28=((($27)-($26))|0);
      $3=$28;
      var $29=$2;
      var $30=$1;
      var $31=(($30+24)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$3;
      var $33=$1;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$3;
      var $36=$35 | 1;
      var $37=$2;
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$2;
      var $40=$39;
      var $41=$3;
      var $42=(($40+$41)|0);
      var $43=$42;
      var $44=(($43+4)|0);
      HEAP32[(($44)>>2)]=40;
      var $45=HEAP32[((((5243300)|0))>>2)];
      var $46=$1;
      var $47=(($46+28)|0);
      HEAP32[(($47)>>2)]=$45;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _release_unused_segments($m) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0;
      $nsegs=0;
      var $2=$1;
      var $3=(($2+448)|0);
      $pred=$3;
      var $4=$pred;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $sp=$6;
      label = 2; break;
    case 2: 
      var $8=$sp;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 90; break; }
    case 3: 
      var $11=$sp;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $base=$13;
      var $14=$sp;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $size=$16;
      var $17=$sp;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      $next=$19;
      var $20=$nsegs;
      var $21=((($20)+(1))|0);
      $nsegs=$21;
      var $22=$sp;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 0;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 4; break; } else { label = 89; break; }
    case 4: 
      var $28=$sp;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & 8;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 89; break; } else { label = 5; break; }
    case 5: 
      var $34=$base;
      var $35=$base;
      var $36=(($35+8)|0);
      var $37=$36;
      var $38=$37 & 7;
      var $39=(($38)|(0))==0;
      if ($39) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $49 = 0;label = 8; break;
    case 7: 
      var $42=$base;
      var $43=(($42+8)|0);
      var $44=$43;
      var $45=$44 & 7;
      var $46=(((8)-($45))|0);
      var $47=$46 & 7;
      var $49 = $47;label = 8; break;
    case 8: 
      var $49;
      var $50=(($34+$49)|0);
      var $51=$50;
      $p=$51;
      var $52=$p;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 & -8;
      $psize=$55;
      var $56=$p;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & 3;
      var $60=(($59)|(0))!=1;
      if ($60) { label = 88; break; } else { label = 9; break; }
    case 9: 
      var $62=$p;
      var $63=$62;
      var $64=$psize;
      var $65=(($63+$64)|0);
      var $66=$base;
      var $67=$size;
      var $68=(($66+$67)|0);
      var $69=((($68)-(40))|0);
      var $70=(($65)>>>(0)) >= (($69)>>>(0));
      if ($70) { label = 10; break; } else { label = 88; break; }
    case 10: 
      var $72=$p;
      var $73=$72;
      $tp=$73;
      var $74=$p;
      var $75=$1;
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)|(0))==(($77)|(0));
      if ($78) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $80=$1;
      var $81=(($80+20)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$1;
      var $83=(($82+8)|0);
      HEAP32[(($83)>>2)]=0;
      label = 61; break;
    case 12: 
      var $85=$tp;
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      $XP=$87;
      var $88=$tp;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$tp;
      var $92=(($90)|(0))!=(($91)|(0));
      if ($92) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $94=$tp;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      $F=$96;
      var $97=$tp;
      var $98=(($97+12)|0);
      var $99=HEAP32[(($98)>>2)];
      $R=$99;
      var $100=$F;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>(0)) >= (($104)>>>(0));
      if ($105) { label = 14; break; } else { var $119 = 0;label = 16; break; }
    case 14: 
      var $107=$F;
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$tp;
      var $111=(($109)|(0))==(($110)|(0));
      if ($111) { label = 15; break; } else { var $119 = 0;label = 16; break; }
    case 15: 
      var $113=$R;
      var $114=(($113+8)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$tp;
      var $117=(($115)|(0))==(($116)|(0));
      var $119 = $117;label = 16; break;
    case 16: 
      var $119;
      var $120=(($119)&(1));
      var $121=($120);
      var $122=(($121)|(0))!=0;
      if ($122) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $124=$R;
      var $125=$F;
      var $126=(($125+12)|0);
      HEAP32[(($126)>>2)]=$124;
      var $127=$F;
      var $128=$R;
      var $129=(($128+8)|0);
      HEAP32[(($129)>>2)]=$127;
      label = 19; break;
    case 18: 
      _abort();
      throw "Reached an unreachable!"
    case 19: 
      label = 32; break;
    case 20: 
      var $133=$tp;
      var $134=(($133+16)|0);
      var $135=(($134+4)|0);
      $RP=$135;
      var $136=HEAP32[(($135)>>2)];
      $R=$136;
      var $137=(($136)|(0))!=0;
      if ($137) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $139=$tp;
      var $140=(($139+16)|0);
      var $141=(($140)|0);
      $RP=$141;
      var $142=HEAP32[(($141)>>2)];
      $R=$142;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 22; break; } else { label = 31; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $146=$R;
      var $147=(($146+16)|0);
      var $148=(($147+4)|0);
      $CP=$148;
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149)|(0))!=0;
      if ($150) { var $158 = 1;label = 25; break; } else { label = 24; break; }
    case 24: 
      var $152=$R;
      var $153=(($152+16)|0);
      var $154=(($153)|0);
      $CP=$154;
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|(0))!=0;
      var $158 = $156;label = 25; break;
    case 25: 
      var $158;
      if ($158) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $160=$CP;
      $RP=$160;
      var $161=HEAP32[(($160)>>2)];
      $R=$161;
      label = 23; break;
    case 27: 
      var $163=$RP;
      var $164=$163;
      var $165=$1;
      var $166=(($165+16)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($164)>>>(0)) >= (($167)>>>(0));
      var $169=(($168)&(1));
      var $170=($169);
      var $171=(($170)|(0))!=0;
      if ($171) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $173=$RP;
      HEAP32[(($173)>>2)]=0;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!"
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $178=$XP;
      var $179=(($178)|(0))!=0;
      if ($179) { label = 33; break; } else { label = 60; break; }
    case 33: 
      var $181=$tp;
      var $182=(($181+28)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$1;
      var $185=(($184+304)|0);
      var $186=(($185+($183<<2))|0);
      $H=$186;
      var $187=$tp;
      var $188=$H;
      var $189=HEAP32[(($188)>>2)];
      var $190=(($187)|(0))==(($189)|(0));
      if ($190) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $192=$R;
      var $193=$H;
      HEAP32[(($193)>>2)]=$192;
      var $194=(($192)|(0))==0;
      if ($194) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $196=$tp;
      var $197=(($196+28)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=1 << $198;
      var $200=$199 ^ -1;
      var $201=$1;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & $200;
      HEAP32[(($202)>>2)]=$204;
      label = 36; break;
    case 36: 
      label = 44; break;
    case 37: 
      var $207=$XP;
      var $208=$207;
      var $209=$1;
      var $210=(($209+16)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=(($208)>>>(0)) >= (($211)>>>(0));
      var $213=(($212)&(1));
      var $214=($213);
      var $215=(($214)|(0))!=0;
      if ($215) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $217=$XP;
      var $218=(($217+16)|0);
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$tp;
      var $222=(($220)|(0))==(($221)|(0));
      if ($222) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $224=$R;
      var $225=$XP;
      var $226=(($225+16)|0);
      var $227=(($226)|0);
      HEAP32[(($227)>>2)]=$224;
      label = 41; break;
    case 40: 
      var $229=$R;
      var $230=$XP;
      var $231=(($230+16)|0);
      var $232=(($231+4)|0);
      HEAP32[(($232)>>2)]=$229;
      label = 41; break;
    case 41: 
      label = 43; break;
    case 42: 
      _abort();
      throw "Reached an unreachable!"
    case 43: 
      label = 44; break;
    case 44: 
      var $237=$R;
      var $238=(($237)|(0))!=0;
      if ($238) { label = 45; break; } else { label = 59; break; }
    case 45: 
      var $240=$R;
      var $241=$240;
      var $242=$1;
      var $243=(($242+16)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($241)>>>(0)) >= (($244)>>>(0));
      var $246=(($245)&(1));
      var $247=($246);
      var $248=(($247)|(0))!=0;
      if ($248) { label = 46; break; } else { label = 57; break; }
    case 46: 
      var $250=$XP;
      var $251=$R;
      var $252=(($251+24)|0);
      HEAP32[(($252)>>2)]=$250;
      var $253=$tp;
      var $254=(($253+16)|0);
      var $255=(($254)|0);
      var $256=HEAP32[(($255)>>2)];
      $C0=$256;
      var $257=(($256)|(0))!=0;
      if ($257) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $259=$C0;
      var $260=$259;
      var $261=$1;
      var $262=(($261+16)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=(($260)>>>(0)) >= (($263)>>>(0));
      var $265=(($264)&(1));
      var $266=($265);
      var $267=(($266)|(0))!=0;
      if ($267) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $269=$C0;
      var $270=$R;
      var $271=(($270+16)|0);
      var $272=(($271)|0);
      HEAP32[(($272)>>2)]=$269;
      var $273=$R;
      var $274=$C0;
      var $275=(($274+24)|0);
      HEAP32[(($275)>>2)]=$273;
      label = 50; break;
    case 49: 
      _abort();
      throw "Reached an unreachable!"
    case 50: 
      label = 51; break;
    case 51: 
      var $279=$tp;
      var $280=(($279+16)|0);
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      $C1=$282;
      var $283=(($282)|(0))!=0;
      if ($283) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $285=$C1;
      var $286=$285;
      var $287=$1;
      var $288=(($287+16)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=(($286)>>>(0)) >= (($289)>>>(0));
      var $291=(($290)&(1));
      var $292=($291);
      var $293=(($292)|(0))!=0;
      if ($293) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $295=$C1;
      var $296=$R;
      var $297=(($296+16)|0);
      var $298=(($297+4)|0);
      HEAP32[(($298)>>2)]=$295;
      var $299=$R;
      var $300=$C1;
      var $301=(($300+24)|0);
      HEAP32[(($301)>>2)]=$299;
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!"
    case 55: 
      label = 56; break;
    case 56: 
      label = 58; break;
    case 57: 
      _abort();
      throw "Reached an unreachable!"
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $310=$psize;
      var $311=$310 >>> 8;
      $X=$311;
      var $312=$X;
      var $313=(($312)|(0))==0;
      if ($313) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=0;
      label = 67; break;
    case 63: 
      var $316=$X;
      var $317=(($316)>>>(0)) > 65535;
      if ($317) { label = 64; break; } else { label = 65; break; }
    case 64: 
      $I=31;
      label = 66; break;
    case 65: 
      var $320=$X;
      $Y=$320;
      var $321=$Y;
      var $322=((($321)-(256))|0);
      var $323=$322 >>> 16;
      var $324=$323 & 8;
      $N=$324;
      var $325=$N;
      var $326=$Y;
      var $327=$326 << $325;
      $Y=$327;
      var $328=((($327)-(4096))|0);
      var $329=$328 >>> 16;
      var $330=$329 & 4;
      $K=$330;
      var $331=$K;
      var $332=$N;
      var $333=((($332)+($331))|0);
      $N=$333;
      var $334=$K;
      var $335=$Y;
      var $336=$335 << $334;
      $Y=$336;
      var $337=((($336)-(16384))|0);
      var $338=$337 >>> 16;
      var $339=$338 & 2;
      $K=$339;
      var $340=$N;
      var $341=((($340)+($339))|0);
      $N=$341;
      var $342=$N;
      var $343=(((14)-($342))|0);
      var $344=$K;
      var $345=$Y;
      var $346=$345 << $344;
      $Y=$346;
      var $347=$346 >>> 15;
      var $348=((($343)+($347))|0);
      $K=$348;
      var $349=$K;
      var $350=$349 << 1;
      var $351=$psize;
      var $352=$K;
      var $353=((($352)+(7))|0);
      var $354=$351 >>> (($353)>>>(0));
      var $355=$354 & 1;
      var $356=((($350)+($355))|0);
      $I=$356;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $359=$I;
      var $360=$1;
      var $361=(($360+304)|0);
      var $362=(($361+($359<<2))|0);
      $H1=$362;
      var $363=$I;
      var $364=$tp;
      var $365=(($364+28)|0);
      HEAP32[(($365)>>2)]=$363;
      var $366=$tp;
      var $367=(($366+16)|0);
      var $368=(($367+4)|0);
      HEAP32[(($368)>>2)]=0;
      var $369=$tp;
      var $370=(($369+16)|0);
      var $371=(($370)|0);
      HEAP32[(($371)>>2)]=0;
      var $372=$1;
      var $373=(($372+4)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=$I;
      var $376=1 << $375;
      var $377=$374 & $376;
      var $378=(($377)|(0))!=0;
      if ($378) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $380=$I;
      var $381=1 << $380;
      var $382=$1;
      var $383=(($382+4)|0);
      var $384=HEAP32[(($383)>>2)];
      var $385=$384 | $381;
      HEAP32[(($383)>>2)]=$385;
      var $386=$tp;
      var $387=$H1;
      HEAP32[(($387)>>2)]=$386;
      var $388=$H1;
      var $389=$388;
      var $390=$tp;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=$389;
      var $392=$tp;
      var $393=$tp;
      var $394=(($393+12)|0);
      HEAP32[(($394)>>2)]=$392;
      var $395=$tp;
      var $396=(($395+8)|0);
      HEAP32[(($396)>>2)]=$392;
      label = 87; break;
    case 69: 
      var $398=$H1;
      var $399=HEAP32[(($398)>>2)];
      $T=$399;
      var $400=$psize;
      var $401=$I;
      var $402=(($401)|(0))==31;
      if ($402) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $411 = 0;label = 72; break;
    case 71: 
      var $405=$I;
      var $406=$405 >>> 1;
      var $407=((($406)+(8))|0);
      var $408=((($407)-(2))|0);
      var $409=(((31)-($408))|0);
      var $411 = $409;label = 72; break;
    case 72: 
      var $411;
      var $412=$400 << $411;
      $K2=$412;
      label = 73; break;
    case 73: 
      var $414=$T;
      var $415=(($414+4)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=$416 & -8;
      var $418=$psize;
      var $419=(($417)|(0))!=(($418)|(0));
      if ($419) { label = 74; break; } else { label = 80; break; }
    case 74: 
      var $421=$K2;
      var $422=$421 >>> 31;
      var $423=$422 & 1;
      var $424=$T;
      var $425=(($424+16)|0);
      var $426=(($425+($423<<2))|0);
      $C=$426;
      var $427=$K2;
      var $428=$427 << 1;
      $K2=$428;
      var $429=$C;
      var $430=HEAP32[(($429)>>2)];
      var $431=(($430)|(0))!=0;
      if ($431) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $433=$C;
      var $434=HEAP32[(($433)>>2)];
      $T=$434;
      label = 79; break;
    case 76: 
      var $436=$C;
      var $437=$436;
      var $438=$1;
      var $439=(($438+16)|0);
      var $440=HEAP32[(($439)>>2)];
      var $441=(($437)>>>(0)) >= (($440)>>>(0));
      var $442=(($441)&(1));
      var $443=($442);
      var $444=(($443)|(0))!=0;
      if ($444) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $446=$tp;
      var $447=$C;
      HEAP32[(($447)>>2)]=$446;
      var $448=$T;
      var $449=$tp;
      var $450=(($449+24)|0);
      HEAP32[(($450)>>2)]=$448;
      var $451=$tp;
      var $452=$tp;
      var $453=(($452+12)|0);
      HEAP32[(($453)>>2)]=$451;
      var $454=$tp;
      var $455=(($454+8)|0);
      HEAP32[(($455)>>2)]=$451;
      label = 86; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!"
    case 79: 
      label = 85; break;
    case 80: 
      var $459=$T;
      var $460=(($459+8)|0);
      var $461=HEAP32[(($460)>>2)];
      $F3=$461;
      var $462=$T;
      var $463=$462;
      var $464=$1;
      var $465=(($464+16)|0);
      var $466=HEAP32[(($465)>>2)];
      var $467=(($463)>>>(0)) >= (($466)>>>(0));
      if ($467) { label = 81; break; } else { var $476 = 0;label = 82; break; }
    case 81: 
      var $469=$F3;
      var $470=$469;
      var $471=$1;
      var $472=(($471+16)|0);
      var $473=HEAP32[(($472)>>2)];
      var $474=(($470)>>>(0)) >= (($473)>>>(0));
      var $476 = $474;label = 82; break;
    case 82: 
      var $476;
      var $477=(($476)&(1));
      var $478=($477);
      var $479=(($478)|(0))!=0;
      if ($479) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $481=$tp;
      var $482=$F3;
      var $483=(($482+12)|0);
      HEAP32[(($483)>>2)]=$481;
      var $484=$T;
      var $485=(($484+8)|0);
      HEAP32[(($485)>>2)]=$481;
      var $486=$F3;
      var $487=$tp;
      var $488=(($487+8)|0);
      HEAP32[(($488)>>2)]=$486;
      var $489=$T;
      var $490=$tp;
      var $491=(($490+12)|0);
      HEAP32[(($491)>>2)]=$489;
      var $492=$tp;
      var $493=(($492+24)|0);
      HEAP32[(($493)>>2)]=0;
      label = 86; break;
    case 84: 
      _abort();
      throw "Reached an unreachable!"
    case 85: 
      label = 73; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $500=$sp;
      $pred=$500;
      var $501=$next;
      $sp=$501;
      label = 2; break;
    case 90: 
      var $503=$nsegs;
      var $504=(($503)>>>(0)) > 4294967295;
      if ($504) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $506=$nsegs;
      var $509 = $506;label = 93; break;
    case 92: 
      var $509 = -1;label = 93; break;
    case 93: 
      var $509;
      var $510=$1;
      var $511=(($510+32)|0);
      HEAP32[(($511)>>2)]=$509;
      var $512=$released;
      return $512;
    default: assert(0, "bad label: " + label);
  }
}
function _init_mparams() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((5243284)|0))>>2)];
      var $2=(($1)|(0))==0;
      if ($2) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $4=_sysconf(8);
      $psize=$4;
      var $5=$psize;
      $gsize=$5;
      var $6=$gsize;
      var $7=$gsize;
      var $8=((($7)-(1))|0);
      var $9=$6 & $8;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $12=$psize;
      var $13=$psize;
      var $14=((($13)-(1))|0);
      var $15=$12 & $14;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _abort();
      throw "Reached an unreachable!"
    case 5: 
      var $19=$gsize;
      HEAP32[((((5243292)|0))>>2)]=$19;
      var $20=$psize;
      HEAP32[((((5243288)|0))>>2)]=$20;
      HEAP32[((((5243296)|0))>>2)]=-1;
      HEAP32[((((5243300)|0))>>2)]=2097152;
      HEAP32[((((5243304)|0))>>2)]=0;
      var $21=HEAP32[((((5243304)|0))>>2)];
      HEAP32[((((5258552)|0))>>2)]=$21;
      var $22=_time(0);
      var $23=$22 ^ 1431655765;
      $magic=$23;
      var $24=$magic;
      var $25=$24 | 8;
      $magic=$25;
      var $26=$magic;
      var $27=$26 & -8;
      $magic=$27;
      var $28=$magic;
      HEAP32[((((5243284)|0))>>2)]=$28;
      label = 6; break;
    case 6: 
      return 1;
    default: assert(0, "bad label: " + label);
  }
}
function _mmap_alloc($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $fp;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3;
      var $5=((($4)+(24))|0);
      var $6=((($5)+(7))|0);
      var $7=HEAP32[((((5243288)|0))>>2)];
      var $8=((($7)-(1))|0);
      var $9=((($6)+($8))|0);
      var $10=HEAP32[((((5243288)|0))>>2)];
      var $11=((($10)-(1))|0);
      var $12=$11 ^ -1;
      var $13=$9 & $12;
      $mmsize=$13;
      var $14=$2;
      var $15=(($14+440)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $19=$2;
      var $20=(($19+432)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$mmsize;
      var $23=((($21)+($22))|0);
      $fp=$23;
      var $24=$fp;
      var $25=$2;
      var $26=(($25+432)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($24)>>>(0)) <= (($27)>>>(0));
      if ($28) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $30=$fp;
      var $31=$2;
      var $32=(($31+440)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($30)>>>(0)) > (($33)>>>(0));
      if ($34) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 19; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $38=$mmsize;
      var $39=$3;
      var $40=(($38)>>>(0)) > (($39)>>>(0));
      if ($40) { label = 7; break; } else { label = 18; break; }
    case 7: 
      $mm=-1;
      var $42=$mm;
      var $43=(($42)|(0))!=-1;
      if ($43) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $45=$mm;
      var $46=(($45+8)|0);
      var $47=$46;
      var $48=$47 & 7;
      var $49=(($48)|(0))==0;
      if ($49) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $59 = 0;label = 11; break;
    case 10: 
      var $52=$mm;
      var $53=(($52+8)|0);
      var $54=$53;
      var $55=$54 & 7;
      var $56=(((8)-($55))|0);
      var $57=$56 & 7;
      var $59 = $57;label = 11; break;
    case 11: 
      var $59;
      $offset=$59;
      var $60=$mmsize;
      var $61=$offset;
      var $62=((($60)-($61))|0);
      var $63=((($62)-(16))|0);
      $psize=$63;
      var $64=$mm;
      var $65=$offset;
      var $66=(($64+$65)|0);
      var $67=$66;
      $p=$67;
      var $68=$offset;
      var $69=$p;
      var $70=(($69)|0);
      HEAP32[(($70)>>2)]=$68;
      var $71=$psize;
      var $72=$p;
      var $73=(($72+4)|0);
      HEAP32[(($73)>>2)]=$71;
      var $74=$p;
      var $75=$74;
      var $76=$psize;
      var $77=(($75+$76)|0);
      var $78=$77;
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=7;
      var $80=$p;
      var $81=$80;
      var $82=$psize;
      var $83=((($82)+(4))|0);
      var $84=(($81+$83)|0);
      var $85=$84;
      var $86=(($85+4)|0);
      HEAP32[(($86)>>2)]=0;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89)|(0))==0;
      if ($90) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $92=$mm;
      var $93=$2;
      var $94=(($93+16)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($92)>>>(0)) < (($95)>>>(0));
      if ($96) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $98=$mm;
      var $99=$2;
      var $100=(($99+16)|0);
      HEAP32[(($100)>>2)]=$98;
      label = 14; break;
    case 14: 
      var $102=$mmsize;
      var $103=$2;
      var $104=(($103+432)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)+($102))|0);
      HEAP32[(($104)>>2)]=$106;
      var $107=$2;
      var $108=(($107+436)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($106)>>>(0)) > (($109)>>>(0));
      if ($110) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $112=$2;
      var $113=(($112+432)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+436)|0);
      HEAP32[(($116)>>2)]=$114;
      label = 16; break;
    case 16: 
      var $118=$p;
      var $119=$118;
      var $120=(($119+8)|0);
      $1=$120;
      label = 19; break;
    case 17: 
      label = 18; break;
    case 18: 
      $1=0;
      label = 19; break;
    case 19: 
      var $124=$1;
      return $124;
    default: assert(0, "bad label: " + label);
  }
}
function _init_bins($m) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0;
      label = 2; break;
    case 2: 
      var $3=$i;
      var $4=(($3)>>>(0)) < 32;
      if ($4) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $6=$i;
      var $7=$6 << 1;
      var $8=$1;
      var $9=(($8+40)|0);
      var $10=(($9+($7<<2))|0);
      var $11=$10;
      var $12=$11;
      $bin=$12;
      var $13=$bin;
      var $14=$bin;
      var $15=(($14+12)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$bin;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=$13;
      label = 4; break;
    case 4: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=$7;
      var $9=$8 & 7;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $20 = 0;label = 4; break;
    case 3: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 4; break;
    case 4: 
      var $20;
      var $21=(($5+$20)|0);
      var $22=$21;
      $p=$22;
      var $23=$3;
      var $24=$3;
      var $25=(($24+8)|0);
      var $26=$25;
      var $27=$26 & 7;
      var $28=(($27)|(0))==0;
      if ($28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $38 = 0;label = 7; break;
    case 6: 
      var $31=$3;
      var $32=(($31+8)|0);
      var $33=$32;
      var $34=$33 & 7;
      var $35=(((8)-($34))|0);
      var $36=$35 & 7;
      var $38 = $36;label = 7; break;
    case 7: 
      var $38;
      var $39=(($23+$38)|0);
      var $40=$39;
      $oldfirst=$40;
      var $41=$oldfirst;
      var $42=$41;
      var $43=$p;
      var $44=$43;
      var $45=$42;
      var $46=$44;
      var $47=((($45)-($46))|0);
      $psize=$47;
      var $48=$p;
      var $49=$48;
      var $50=$4;
      var $51=(($49+$50)|0);
      var $52=$51;
      $q=$52;
      var $53=$psize;
      var $54=$4;
      var $55=((($53)-($54))|0);
      $qsize=$55;
      var $56=$4;
      var $57=$56 | 1;
      var $58=$57 | 2;
      var $59=$p;
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$oldfirst;
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($61)|(0))==(($64)|(0));
      if ($65) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $67=$qsize;
      var $68=$1;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)+($67))|0);
      HEAP32[(($69)>>2)]=$71;
      $tsize=$71;
      var $72=$q;
      var $73=$1;
      var $74=(($73+24)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$tsize;
      var $76=$75 | 1;
      var $77=$q;
      var $78=(($77+4)|0);
      HEAP32[(($78)>>2)]=$76;
      label = 118; break;
    case 9: 
      var $80=$oldfirst;
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($80)|(0))==(($83)|(0));
      if ($84) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $86=$qsize;
      var $87=$1;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)+($86))|0);
      HEAP32[(($88)>>2)]=$90;
      $dsize=$90;
      var $91=$q;
      var $92=$1;
      var $93=(($92+20)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$dsize;
      var $95=$94 | 1;
      var $96=$q;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$dsize;
      var $99=$q;
      var $100=$99;
      var $101=$dsize;
      var $102=(($100+$101)|0);
      var $103=$102;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$98;
      label = 117; break;
    case 11: 
      var $106=$oldfirst;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 & 3;
      var $110=(($109)|(0))!=1;
      if ($110) { label = 81; break; } else { label = 12; break; }
    case 12: 
      var $112=$oldfirst;
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & -8;
      $nsize=$115;
      var $116=$nsize;
      var $117=$116 >>> 3;
      var $118=(($117)>>>(0)) < 32;
      if ($118) { label = 13; break; } else { label = 31; break; }
    case 13: 
      var $120=$oldfirst;
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      $F=$122;
      var $123=$oldfirst;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      $B=$125;
      var $126=$nsize;
      var $127=$126 >>> 3;
      $I=$127;
      var $128=$F;
      var $129=$I;
      var $130=$129 << 1;
      var $131=$1;
      var $132=(($131+40)|0);
      var $133=(($132+($130<<2))|0);
      var $134=$133;
      var $135=$134;
      var $136=(($128)|(0))==(($135)|(0));
      if ($136) { var $153 = 1;label = 17; break; } else { label = 14; break; }
    case 14: 
      var $138=$F;
      var $139=$138;
      var $140=$1;
      var $141=(($140+16)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($139)>>>(0)) >= (($142)>>>(0));
      if ($143) { label = 15; break; } else { var $151 = 0;label = 16; break; }
    case 15: 
      var $145=$F;
      var $146=(($145+12)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$oldfirst;
      var $149=(($147)|(0))==(($148)|(0));
      var $151 = $149;label = 16; break;
    case 16: 
      var $151;
      var $153 = $151;label = 17; break;
    case 17: 
      var $153;
      var $154=(($153)&(1));
      var $155=($154);
      var $156=(($155)|(0))!=0;
      if ($156) { label = 18; break; } else { label = 29; break; }
    case 18: 
      var $158=$B;
      var $159=$F;
      var $160=(($158)|(0))==(($159)|(0));
      if ($160) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $162=$I;
      var $163=1 << $162;
      var $164=$163 ^ -1;
      var $165=$1;
      var $166=(($165)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$167 & $164;
      HEAP32[(($166)>>2)]=$168;
      label = 28; break;
    case 20: 
      var $170=$B;
      var $171=$I;
      var $172=$171 << 1;
      var $173=$1;
      var $174=(($173+40)|0);
      var $175=(($174+($172<<2))|0);
      var $176=$175;
      var $177=$176;
      var $178=(($170)|(0))==(($177)|(0));
      if ($178) { var $195 = 1;label = 24; break; } else { label = 21; break; }
    case 21: 
      var $180=$B;
      var $181=$180;
      var $182=$1;
      var $183=(($182+16)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($181)>>>(0)) >= (($184)>>>(0));
      if ($185) { label = 22; break; } else { var $193 = 0;label = 23; break; }
    case 22: 
      var $187=$B;
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$oldfirst;
      var $191=(($189)|(0))==(($190)|(0));
      var $193 = $191;label = 23; break;
    case 23: 
      var $193;
      var $195 = $193;label = 24; break;
    case 24: 
      var $195;
      var $196=(($195)&(1));
      var $197=($196);
      var $198=(($197)|(0))!=0;
      if ($198) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $200=$B;
      var $201=$F;
      var $202=(($201+12)|0);
      HEAP32[(($202)>>2)]=$200;
      var $203=$F;
      var $204=$B;
      var $205=(($204+8)|0);
      HEAP32[(($205)>>2)]=$203;
      label = 27; break;
    case 26: 
      _abort();
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!"
    case 30: 
      label = 80; break;
    case 31: 
      var $212=$oldfirst;
      var $213=$212;
      $TP=$213;
      var $214=$TP;
      var $215=(($214+24)|0);
      var $216=HEAP32[(($215)>>2)];
      $XP=$216;
      var $217=$TP;
      var $218=(($217+12)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$TP;
      var $221=(($219)|(0))!=(($220)|(0));
      if ($221) { label = 32; break; } else { label = 39; break; }
    case 32: 
      var $223=$TP;
      var $224=(($223+8)|0);
      var $225=HEAP32[(($224)>>2)];
      $F1=$225;
      var $226=$TP;
      var $227=(($226+12)|0);
      var $228=HEAP32[(($227)>>2)];
      $R=$228;
      var $229=$F1;
      var $230=$229;
      var $231=$1;
      var $232=(($231+16)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=(($230)>>>(0)) >= (($233)>>>(0));
      if ($234) { label = 33; break; } else { var $248 = 0;label = 35; break; }
    case 33: 
      var $236=$F1;
      var $237=(($236+12)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$TP;
      var $240=(($238)|(0))==(($239)|(0));
      if ($240) { label = 34; break; } else { var $248 = 0;label = 35; break; }
    case 34: 
      var $242=$R;
      var $243=(($242+8)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=$TP;
      var $246=(($244)|(0))==(($245)|(0));
      var $248 = $246;label = 35; break;
    case 35: 
      var $248;
      var $249=(($248)&(1));
      var $250=($249);
      var $251=(($250)|(0))!=0;
      if ($251) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $253=$R;
      var $254=$F1;
      var $255=(($254+12)|0);
      HEAP32[(($255)>>2)]=$253;
      var $256=$F1;
      var $257=$R;
      var $258=(($257+8)|0);
      HEAP32[(($258)>>2)]=$256;
      label = 38; break;
    case 37: 
      _abort();
      throw "Reached an unreachable!"
    case 38: 
      label = 51; break;
    case 39: 
      var $262=$TP;
      var $263=(($262+16)|0);
      var $264=(($263+4)|0);
      $RP=$264;
      var $265=HEAP32[(($264)>>2)];
      $R=$265;
      var $266=(($265)|(0))!=0;
      if ($266) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $268=$TP;
      var $269=(($268+16)|0);
      var $270=(($269)|0);
      $RP=$270;
      var $271=HEAP32[(($270)>>2)];
      $R=$271;
      var $272=(($271)|(0))!=0;
      if ($272) { label = 41; break; } else { label = 50; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $275=$R;
      var $276=(($275+16)|0);
      var $277=(($276+4)|0);
      $CP=$277;
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278)|(0))!=0;
      if ($279) { var $287 = 1;label = 44; break; } else { label = 43; break; }
    case 43: 
      var $281=$R;
      var $282=(($281+16)|0);
      var $283=(($282)|0);
      $CP=$283;
      var $284=HEAP32[(($283)>>2)];
      var $285=(($284)|(0))!=0;
      var $287 = $285;label = 44; break;
    case 44: 
      var $287;
      if ($287) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $289=$CP;
      $RP=$289;
      var $290=HEAP32[(($289)>>2)];
      $R=$290;
      label = 42; break;
    case 46: 
      var $292=$RP;
      var $293=$292;
      var $294=$1;
      var $295=(($294+16)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($293)>>>(0)) >= (($296)>>>(0));
      var $298=(($297)&(1));
      var $299=($298);
      var $300=(($299)|(0))!=0;
      if ($300) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $302=$RP;
      HEAP32[(($302)>>2)]=0;
      label = 49; break;
    case 48: 
      _abort();
      throw "Reached an unreachable!"
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $307=$XP;
      var $308=(($307)|(0))!=0;
      if ($308) { label = 52; break; } else { label = 79; break; }
    case 52: 
      var $310=$TP;
      var $311=(($310+28)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=$1;
      var $314=(($313+304)|0);
      var $315=(($314+($312<<2))|0);
      $H=$315;
      var $316=$TP;
      var $317=$H;
      var $318=HEAP32[(($317)>>2)];
      var $319=(($316)|(0))==(($318)|(0));
      if ($319) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $321=$R;
      var $322=$H;
      HEAP32[(($322)>>2)]=$321;
      var $323=(($321)|(0))==0;
      if ($323) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $325=$TP;
      var $326=(($325+28)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=1 << $327;
      var $329=$328 ^ -1;
      var $330=$1;
      var $331=(($330+4)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=$332 & $329;
      HEAP32[(($331)>>2)]=$333;
      label = 55; break;
    case 55: 
      label = 63; break;
    case 56: 
      var $336=$XP;
      var $337=$336;
      var $338=$1;
      var $339=(($338+16)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=(($337)>>>(0)) >= (($340)>>>(0));
      var $342=(($341)&(1));
      var $343=($342);
      var $344=(($343)|(0))!=0;
      if ($344) { label = 57; break; } else { label = 61; break; }
    case 57: 
      var $346=$XP;
      var $347=(($346+16)|0);
      var $348=(($347)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=$TP;
      var $351=(($349)|(0))==(($350)|(0));
      if ($351) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $353=$R;
      var $354=$XP;
      var $355=(($354+16)|0);
      var $356=(($355)|0);
      HEAP32[(($356)>>2)]=$353;
      label = 60; break;
    case 59: 
      var $358=$R;
      var $359=$XP;
      var $360=(($359+16)|0);
      var $361=(($360+4)|0);
      HEAP32[(($361)>>2)]=$358;
      label = 60; break;
    case 60: 
      label = 62; break;
    case 61: 
      _abort();
      throw "Reached an unreachable!"
    case 62: 
      label = 63; break;
    case 63: 
      var $366=$R;
      var $367=(($366)|(0))!=0;
      if ($367) { label = 64; break; } else { label = 78; break; }
    case 64: 
      var $369=$R;
      var $370=$369;
      var $371=$1;
      var $372=(($371+16)|0);
      var $373=HEAP32[(($372)>>2)];
      var $374=(($370)>>>(0)) >= (($373)>>>(0));
      var $375=(($374)&(1));
      var $376=($375);
      var $377=(($376)|(0))!=0;
      if ($377) { label = 65; break; } else { label = 76; break; }
    case 65: 
      var $379=$XP;
      var $380=$R;
      var $381=(($380+24)|0);
      HEAP32[(($381)>>2)]=$379;
      var $382=$TP;
      var $383=(($382+16)|0);
      var $384=(($383)|0);
      var $385=HEAP32[(($384)>>2)];
      $C0=$385;
      var $386=(($385)|(0))!=0;
      if ($386) { label = 66; break; } else { label = 70; break; }
    case 66: 
      var $388=$C0;
      var $389=$388;
      var $390=$1;
      var $391=(($390+16)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=(($389)>>>(0)) >= (($392)>>>(0));
      var $394=(($393)&(1));
      var $395=($394);
      var $396=(($395)|(0))!=0;
      if ($396) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $398=$C0;
      var $399=$R;
      var $400=(($399+16)|0);
      var $401=(($400)|0);
      HEAP32[(($401)>>2)]=$398;
      var $402=$R;
      var $403=$C0;
      var $404=(($403+24)|0);
      HEAP32[(($404)>>2)]=$402;
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      var $408=$TP;
      var $409=(($408+16)|0);
      var $410=(($409+4)|0);
      var $411=HEAP32[(($410)>>2)];
      $C1=$411;
      var $412=(($411)|(0))!=0;
      if ($412) { label = 71; break; } else { label = 75; break; }
    case 71: 
      var $414=$C1;
      var $415=$414;
      var $416=$1;
      var $417=(($416+16)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=(($415)>>>(0)) >= (($418)>>>(0));
      var $420=(($419)&(1));
      var $421=($420);
      var $422=(($421)|(0))!=0;
      if ($422) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $424=$C1;
      var $425=$R;
      var $426=(($425+16)|0);
      var $427=(($426+4)|0);
      HEAP32[(($427)>>2)]=$424;
      var $428=$R;
      var $429=$C1;
      var $430=(($429+24)|0);
      HEAP32[(($430)>>2)]=$428;
      label = 74; break;
    case 73: 
      _abort();
      throw "Reached an unreachable!"
    case 74: 
      label = 75; break;
    case 75: 
      label = 77; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!"
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $439=$oldfirst;
      var $440=$439;
      var $441=$nsize;
      var $442=(($440+$441)|0);
      var $443=$442;
      $oldfirst=$443;
      var $444=$nsize;
      var $445=$qsize;
      var $446=((($445)+($444))|0);
      $qsize=$446;
      label = 81; break;
    case 81: 
      var $448=$oldfirst;
      var $449=(($448+4)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$450 & -2;
      HEAP32[(($449)>>2)]=$451;
      var $452=$qsize;
      var $453=$452 | 1;
      var $454=$q;
      var $455=(($454+4)|0);
      HEAP32[(($455)>>2)]=$453;
      var $456=$qsize;
      var $457=$q;
      var $458=$457;
      var $459=$qsize;
      var $460=(($458+$459)|0);
      var $461=$460;
      var $462=(($461)|0);
      HEAP32[(($462)>>2)]=$456;
      var $463=$qsize;
      var $464=$463 >>> 3;
      var $465=(($464)>>>(0)) < 32;
      if ($465) { label = 82; break; } else { label = 89; break; }
    case 82: 
      var $467=$qsize;
      var $468=$467 >>> 3;
      $I2=$468;
      var $469=$I2;
      var $470=$469 << 1;
      var $471=$1;
      var $472=(($471+40)|0);
      var $473=(($472+($470<<2))|0);
      var $474=$473;
      var $475=$474;
      $B3=$475;
      var $476=$B3;
      $F4=$476;
      var $477=$1;
      var $478=(($477)|0);
      var $479=HEAP32[(($478)>>2)];
      var $480=$I2;
      var $481=1 << $480;
      var $482=$479 & $481;
      var $483=(($482)|(0))!=0;
      if ($483) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $485=$I2;
      var $486=1 << $485;
      var $487=$1;
      var $488=(($487)|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=$489 | $486;
      HEAP32[(($488)>>2)]=$490;
      label = 88; break;
    case 84: 
      var $492=$B3;
      var $493=(($492+8)|0);
      var $494=HEAP32[(($493)>>2)];
      var $495=$494;
      var $496=$1;
      var $497=(($496+16)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=(($495)>>>(0)) >= (($498)>>>(0));
      var $500=(($499)&(1));
      var $501=($500);
      var $502=(($501)|(0))!=0;
      if ($502) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $504=$B3;
      var $505=(($504+8)|0);
      var $506=HEAP32[(($505)>>2)];
      $F4=$506;
      label = 87; break;
    case 86: 
      _abort();
      throw "Reached an unreachable!"
    case 87: 
      label = 88; break;
    case 88: 
      var $510=$q;
      var $511=$B3;
      var $512=(($511+8)|0);
      HEAP32[(($512)>>2)]=$510;
      var $513=$q;
      var $514=$F4;
      var $515=(($514+12)|0);
      HEAP32[(($515)>>2)]=$513;
      var $516=$F4;
      var $517=$q;
      var $518=(($517+8)|0);
      HEAP32[(($518)>>2)]=$516;
      var $519=$B3;
      var $520=$q;
      var $521=(($520+12)|0);
      HEAP32[(($521)>>2)]=$519;
      label = 116; break;
    case 89: 
      var $523=$q;
      var $524=$523;
      $TP5=$524;
      var $525=$qsize;
      var $526=$525 >>> 8;
      $X=$526;
      var $527=$X;
      var $528=(($527)|(0))==0;
      if ($528) { label = 90; break; } else { label = 91; break; }
    case 90: 
      $I7=0;
      label = 95; break;
    case 91: 
      var $531=$X;
      var $532=(($531)>>>(0)) > 65535;
      if ($532) { label = 92; break; } else { label = 93; break; }
    case 92: 
      $I7=31;
      label = 94; break;
    case 93: 
      var $535=$X;
      $Y=$535;
      var $536=$Y;
      var $537=((($536)-(256))|0);
      var $538=$537 >>> 16;
      var $539=$538 & 8;
      $N=$539;
      var $540=$N;
      var $541=$Y;
      var $542=$541 << $540;
      $Y=$542;
      var $543=((($542)-(4096))|0);
      var $544=$543 >>> 16;
      var $545=$544 & 4;
      $K=$545;
      var $546=$K;
      var $547=$N;
      var $548=((($547)+($546))|0);
      $N=$548;
      var $549=$K;
      var $550=$Y;
      var $551=$550 << $549;
      $Y=$551;
      var $552=((($551)-(16384))|0);
      var $553=$552 >>> 16;
      var $554=$553 & 2;
      $K=$554;
      var $555=$N;
      var $556=((($555)+($554))|0);
      $N=$556;
      var $557=$N;
      var $558=(((14)-($557))|0);
      var $559=$K;
      var $560=$Y;
      var $561=$560 << $559;
      $Y=$561;
      var $562=$561 >>> 15;
      var $563=((($558)+($562))|0);
      $K=$563;
      var $564=$K;
      var $565=$564 << 1;
      var $566=$qsize;
      var $567=$K;
      var $568=((($567)+(7))|0);
      var $569=$566 >>> (($568)>>>(0));
      var $570=$569 & 1;
      var $571=((($565)+($570))|0);
      $I7=$571;
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $574=$I7;
      var $575=$1;
      var $576=(($575+304)|0);
      var $577=(($576+($574<<2))|0);
      $H6=$577;
      var $578=$I7;
      var $579=$TP5;
      var $580=(($579+28)|0);
      HEAP32[(($580)>>2)]=$578;
      var $581=$TP5;
      var $582=(($581+16)|0);
      var $583=(($582+4)|0);
      HEAP32[(($583)>>2)]=0;
      var $584=$TP5;
      var $585=(($584+16)|0);
      var $586=(($585)|0);
      HEAP32[(($586)>>2)]=0;
      var $587=$1;
      var $588=(($587+4)|0);
      var $589=HEAP32[(($588)>>2)];
      var $590=$I7;
      var $591=1 << $590;
      var $592=$589 & $591;
      var $593=(($592)|(0))!=0;
      if ($593) { label = 97; break; } else { label = 96; break; }
    case 96: 
      var $595=$I7;
      var $596=1 << $595;
      var $597=$1;
      var $598=(($597+4)|0);
      var $599=HEAP32[(($598)>>2)];
      var $600=$599 | $596;
      HEAP32[(($598)>>2)]=$600;
      var $601=$TP5;
      var $602=$H6;
      HEAP32[(($602)>>2)]=$601;
      var $603=$H6;
      var $604=$603;
      var $605=$TP5;
      var $606=(($605+24)|0);
      HEAP32[(($606)>>2)]=$604;
      var $607=$TP5;
      var $608=$TP5;
      var $609=(($608+12)|0);
      HEAP32[(($609)>>2)]=$607;
      var $610=$TP5;
      var $611=(($610+8)|0);
      HEAP32[(($611)>>2)]=$607;
      label = 115; break;
    case 97: 
      var $613=$H6;
      var $614=HEAP32[(($613)>>2)];
      $T=$614;
      var $615=$qsize;
      var $616=$I7;
      var $617=(($616)|(0))==31;
      if ($617) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $626 = 0;label = 100; break;
    case 99: 
      var $620=$I7;
      var $621=$620 >>> 1;
      var $622=((($621)+(8))|0);
      var $623=((($622)-(2))|0);
      var $624=(((31)-($623))|0);
      var $626 = $624;label = 100; break;
    case 100: 
      var $626;
      var $627=$615 << $626;
      $K8=$627;
      label = 101; break;
    case 101: 
      var $629=$T;
      var $630=(($629+4)|0);
      var $631=HEAP32[(($630)>>2)];
      var $632=$631 & -8;
      var $633=$qsize;
      var $634=(($632)|(0))!=(($633)|(0));
      if ($634) { label = 102; break; } else { label = 108; break; }
    case 102: 
      var $636=$K8;
      var $637=$636 >>> 31;
      var $638=$637 & 1;
      var $639=$T;
      var $640=(($639+16)|0);
      var $641=(($640+($638<<2))|0);
      $C=$641;
      var $642=$K8;
      var $643=$642 << 1;
      $K8=$643;
      var $644=$C;
      var $645=HEAP32[(($644)>>2)];
      var $646=(($645)|(0))!=0;
      if ($646) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $648=$C;
      var $649=HEAP32[(($648)>>2)];
      $T=$649;
      label = 107; break;
    case 104: 
      var $651=$C;
      var $652=$651;
      var $653=$1;
      var $654=(($653+16)|0);
      var $655=HEAP32[(($654)>>2)];
      var $656=(($652)>>>(0)) >= (($655)>>>(0));
      var $657=(($656)&(1));
      var $658=($657);
      var $659=(($658)|(0))!=0;
      if ($659) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $661=$TP5;
      var $662=$C;
      HEAP32[(($662)>>2)]=$661;
      var $663=$T;
      var $664=$TP5;
      var $665=(($664+24)|0);
      HEAP32[(($665)>>2)]=$663;
      var $666=$TP5;
      var $667=$TP5;
      var $668=(($667+12)|0);
      HEAP32[(($668)>>2)]=$666;
      var $669=$TP5;
      var $670=(($669+8)|0);
      HEAP32[(($670)>>2)]=$666;
      label = 114; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!"
    case 107: 
      label = 113; break;
    case 108: 
      var $674=$T;
      var $675=(($674+8)|0);
      var $676=HEAP32[(($675)>>2)];
      $F9=$676;
      var $677=$T;
      var $678=$677;
      var $679=$1;
      var $680=(($679+16)|0);
      var $681=HEAP32[(($680)>>2)];
      var $682=(($678)>>>(0)) >= (($681)>>>(0));
      if ($682) { label = 109; break; } else { var $691 = 0;label = 110; break; }
    case 109: 
      var $684=$F9;
      var $685=$684;
      var $686=$1;
      var $687=(($686+16)|0);
      var $688=HEAP32[(($687)>>2)];
      var $689=(($685)>>>(0)) >= (($688)>>>(0));
      var $691 = $689;label = 110; break;
    case 110: 
      var $691;
      var $692=(($691)&(1));
      var $693=($692);
      var $694=(($693)|(0))!=0;
      if ($694) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $696=$TP5;
      var $697=$F9;
      var $698=(($697+12)|0);
      HEAP32[(($698)>>2)]=$696;
      var $699=$T;
      var $700=(($699+8)|0);
      HEAP32[(($700)>>2)]=$696;
      var $701=$F9;
      var $702=$TP5;
      var $703=(($702+8)|0);
      HEAP32[(($703)>>2)]=$701;
      var $704=$T;
      var $705=$TP5;
      var $706=(($705+12)|0);
      HEAP32[(($706)>>2)]=$704;
      var $707=$TP5;
      var $708=(($707+24)|0);
      HEAP32[(($708)>>2)]=0;
      label = 114; break;
    case 112: 
      _abort();
      throw "Reached an unreachable!"
    case 113: 
      label = 101; break;
    case 114: 
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $716=$p;
      var $717=$716;
      var $718=(($717+8)|0);
      return $718;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNKSt9bad_alloc4whatEv($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  return ((5250868)|0);
}
function __ZSt15get_new_handlerv() {
  var label = 0;
  var $1=(tempValue=HEAP32[((5267532)>>2)],HEAP32[((5267532)>>2)]=tempValue+0,tempValue);
  var $2=$1;
  return $2;
}
function __ZNSt9bad_allocC2Ev($this) {
  var label = 0;
  var $1;
  var $2;
  $2=$this;
  var $3=$2;
  var $4=$3;
  $1=$4;
  var $5=$1;
  var $6=$5;
  HEAP32[(($6)>>2)]=((__ZTVSt9exception+8)|0);
  var $7=$3;
  HEAP32[(($7)>>2)]=((5264356)|0);
  return;
}
function __ZdlPv($ptr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$ptr;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=$1;
      _free($5);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __ZNSt9bad_allocD0Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  __ZNSt9bad_allocD2Ev($2);
  var $3=$2;
  __ZdlPv($3);
  return;
}
function __ZNSt9bad_allocD2Ev($this) {
  var label = 0;
  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2;
  return;
}
function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1;
      var $6=(($5+24)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $old_top=$8;
      var $9=$1;
      var $10=$old_top;
      var $11=_segment_holding($9, $10);
      $oldsp=$11;
      var $12=$oldsp;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$oldsp;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14+$17)|0);
      $old_end=$18;
      $ssize=24;
      var $19=$old_end;
      var $20=$ssize;
      var $21=((($20)+(16))|0);
      var $22=((($21)+(7))|0);
      var $23=(((-$22))|0);
      var $24=(($19+$23)|0);
      $rawsp=$24;
      var $25=$rawsp;
      var $26=(($25+8)|0);
      var $27=$26;
      var $28=$27 & 7;
      var $29=(($28)|(0))==0;
      if ($29) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $39 = 0;label = 4; break;
    case 3: 
      var $32=$rawsp;
      var $33=(($32+8)|0);
      var $34=$33;
      var $35=$34 & 7;
      var $36=(((8)-($35))|0);
      var $37=$36 & 7;
      var $39 = $37;label = 4; break;
    case 4: 
      var $39;
      $offset=$39;
      var $40=$rawsp;
      var $41=$offset;
      var $42=(($40+$41)|0);
      $asp=$42;
      var $43=$asp;
      var $44=$old_top;
      var $45=(($44+16)|0);
      var $46=(($43)>>>(0)) < (($45)>>>(0));
      if ($46) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $48=$old_top;
      var $52 = $48;label = 7; break;
    case 6: 
      var $50=$asp;
      var $52 = $50;label = 7; break;
    case 7: 
      var $52;
      $csp=$52;
      var $53=$csp;
      var $54=$53;
      $sp=$54;
      var $55=$sp;
      var $56=$55;
      var $57=(($56+8)|0);
      var $58=$57;
      $ss=$58;
      var $59=$sp;
      var $60=$59;
      var $61=$ssize;
      var $62=(($60+$61)|0);
      var $63=$62;
      $tnext=$63;
      var $64=$tnext;
      $p=$64;
      $nfences=0;
      var $65=$1;
      var $66=$2;
      var $67=$66;
      var $68=$3;
      var $69=((($68)-(40))|0);
      _init_top($65, $67, $69);
      var $70=$ssize;
      var $71=$70 | 1;
      var $72=$71 | 2;
      var $73=$sp;
      var $74=(($73+4)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$ss;
      var $76=$1;
      var $77=(($76+448)|0);
      var $78=$75;
      var $79=$77;
      assert(16 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
      var $80=$2;
      var $81=$1;
      var $82=(($81+448)|0);
      var $83=(($82)|0);
      HEAP32[(($83)>>2)]=$80;
      var $84=$3;
      var $85=$1;
      var $86=(($85+448)|0);
      var $87=(($86+4)|0);
      HEAP32[(($87)>>2)]=$84;
      var $88=$4;
      var $89=$1;
      var $90=(($89+448)|0);
      var $91=(($90+12)|0);
      HEAP32[(($91)>>2)]=$88;
      var $92=$ss;
      var $93=$1;
      var $94=(($93+448)|0);
      var $95=(($94+8)|0);
      HEAP32[(($95)>>2)]=$92;
      label = 8; break;
    case 8: 
      var $97=$p;
      var $98=$97;
      var $99=(($98+4)|0);
      var $100=$99;
      $nextp=$100;
      var $101=$p;
      var $102=(($101+4)|0);
      HEAP32[(($102)>>2)]=7;
      var $103=$nfences;
      var $104=((($103)+(1))|0);
      $nfences=$104;
      var $105=$nextp;
      var $106=(($105+4)|0);
      var $107=$106;
      var $108=$old_end;
      var $109=(($107)>>>(0)) < (($108)>>>(0));
      if ($109) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $111=$nextp;
      $p=$111;
      label = 11; break;
    case 10: 
      label = 12; break;
    case 11: 
      label = 8; break;
    case 12: 
      var $115=$csp;
      var $116=$old_top;
      var $117=(($115)|(0))!=(($116)|(0));
      if ($117) { label = 13; break; } else { label = 49; break; }
    case 13: 
      var $119=$old_top;
      var $120=$119;
      $q=$120;
      var $121=$csp;
      var $122=$old_top;
      var $123=$121;
      var $124=$122;
      var $125=((($123)-($124))|0);
      $psize=$125;
      var $126=$q;
      var $127=$126;
      var $128=$psize;
      var $129=(($127+$128)|0);
      var $130=$129;
      $tn=$130;
      var $131=$tn;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$133 & -2;
      HEAP32[(($132)>>2)]=$134;
      var $135=$psize;
      var $136=$135 | 1;
      var $137=$q;
      var $138=(($137+4)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$psize;
      var $140=$q;
      var $141=$140;
      var $142=$psize;
      var $143=(($141+$142)|0);
      var $144=$143;
      var $145=(($144)|0);
      HEAP32[(($145)>>2)]=$139;
      var $146=$psize;
      var $147=$146 >>> 3;
      var $148=(($147)>>>(0)) < 32;
      if ($148) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $150=$psize;
      var $151=$150 >>> 3;
      $I=$151;
      var $152=$I;
      var $153=$152 << 1;
      var $154=$1;
      var $155=(($154+40)|0);
      var $156=(($155+($153<<2))|0);
      var $157=$156;
      var $158=$157;
      $B=$158;
      var $159=$B;
      $F=$159;
      var $160=$1;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$I;
      var $164=1 << $163;
      var $165=$162 & $164;
      var $166=(($165)|(0))!=0;
      if ($166) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $168=$I;
      var $169=1 << $168;
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$172 | $169;
      HEAP32[(($171)>>2)]=$173;
      label = 20; break;
    case 16: 
      var $175=$B;
      var $176=(($175+8)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=$1;
      var $180=(($179+16)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($178)>>>(0)) >= (($181)>>>(0));
      var $183=(($182)&(1));
      var $184=($183);
      var $185=(($184)|(0))!=0;
      if ($185) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $187=$B;
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      $F=$189;
      label = 19; break;
    case 18: 
      _abort();
      throw "Reached an unreachable!"
    case 19: 
      label = 20; break;
    case 20: 
      var $193=$q;
      var $194=$B;
      var $195=(($194+8)|0);
      HEAP32[(($195)>>2)]=$193;
      var $196=$q;
      var $197=$F;
      var $198=(($197+12)|0);
      HEAP32[(($198)>>2)]=$196;
      var $199=$F;
      var $200=$q;
      var $201=(($200+8)|0);
      HEAP32[(($201)>>2)]=$199;
      var $202=$B;
      var $203=$q;
      var $204=(($203+12)|0);
      HEAP32[(($204)>>2)]=$202;
      label = 48; break;
    case 21: 
      var $206=$q;
      var $207=$206;
      $TP=$207;
      var $208=$psize;
      var $209=$208 >>> 8;
      $X=$209;
      var $210=$X;
      var $211=(($210)|(0))==0;
      if ($211) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $I1=0;
      label = 27; break;
    case 23: 
      var $214=$X;
      var $215=(($214)>>>(0)) > 65535;
      if ($215) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $I1=31;
      label = 26; break;
    case 25: 
      var $218=$X;
      $Y=$218;
      var $219=$Y;
      var $220=((($219)-(256))|0);
      var $221=$220 >>> 16;
      var $222=$221 & 8;
      $N=$222;
      var $223=$N;
      var $224=$Y;
      var $225=$224 << $223;
      $Y=$225;
      var $226=((($225)-(4096))|0);
      var $227=$226 >>> 16;
      var $228=$227 & 4;
      $K=$228;
      var $229=$K;
      var $230=$N;
      var $231=((($230)+($229))|0);
      $N=$231;
      var $232=$K;
      var $233=$Y;
      var $234=$233 << $232;
      $Y=$234;
      var $235=((($234)-(16384))|0);
      var $236=$235 >>> 16;
      var $237=$236 & 2;
      $K=$237;
      var $238=$N;
      var $239=((($238)+($237))|0);
      $N=$239;
      var $240=$N;
      var $241=(((14)-($240))|0);
      var $242=$K;
      var $243=$Y;
      var $244=$243 << $242;
      $Y=$244;
      var $245=$244 >>> 15;
      var $246=((($241)+($245))|0);
      $K=$246;
      var $247=$K;
      var $248=$247 << 1;
      var $249=$psize;
      var $250=$K;
      var $251=((($250)+(7))|0);
      var $252=$249 >>> (($251)>>>(0));
      var $253=$252 & 1;
      var $254=((($248)+($253))|0);
      $I1=$254;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $257=$I1;
      var $258=$1;
      var $259=(($258+304)|0);
      var $260=(($259+($257<<2))|0);
      $H=$260;
      var $261=$I1;
      var $262=$TP;
      var $263=(($262+28)|0);
      HEAP32[(($263)>>2)]=$261;
      var $264=$TP;
      var $265=(($264+16)|0);
      var $266=(($265+4)|0);
      HEAP32[(($266)>>2)]=0;
      var $267=$TP;
      var $268=(($267+16)|0);
      var $269=(($268)|0);
      HEAP32[(($269)>>2)]=0;
      var $270=$1;
      var $271=(($270+4)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$I1;
      var $274=1 << $273;
      var $275=$272 & $274;
      var $276=(($275)|(0))!=0;
      if ($276) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $278=$I1;
      var $279=1 << $278;
      var $280=$1;
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$282 | $279;
      HEAP32[(($281)>>2)]=$283;
      var $284=$TP;
      var $285=$H;
      HEAP32[(($285)>>2)]=$284;
      var $286=$H;
      var $287=$286;
      var $288=$TP;
      var $289=(($288+24)|0);
      HEAP32[(($289)>>2)]=$287;
      var $290=$TP;
      var $291=$TP;
      var $292=(($291+12)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$TP;
      var $294=(($293+8)|0);
      HEAP32[(($294)>>2)]=$290;
      label = 47; break;
    case 29: 
      var $296=$H;
      var $297=HEAP32[(($296)>>2)];
      $T=$297;
      var $298=$psize;
      var $299=$I1;
      var $300=(($299)|(0))==31;
      if ($300) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $309 = 0;label = 32; break;
    case 31: 
      var $303=$I1;
      var $304=$303 >>> 1;
      var $305=((($304)+(8))|0);
      var $306=((($305)-(2))|0);
      var $307=(((31)-($306))|0);
      var $309 = $307;label = 32; break;
    case 32: 
      var $309;
      var $310=$298 << $309;
      $K2=$310;
      label = 33; break;
    case 33: 
      var $312=$T;
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$314 & -8;
      var $316=$psize;
      var $317=(($315)|(0))!=(($316)|(0));
      if ($317) { label = 34; break; } else { label = 40; break; }
    case 34: 
      var $319=$K2;
      var $320=$319 >>> 31;
      var $321=$320 & 1;
      var $322=$T;
      var $323=(($322+16)|0);
      var $324=(($323+($321<<2))|0);
      $C=$324;
      var $325=$K2;
      var $326=$325 << 1;
      $K2=$326;
      var $327=$C;
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|(0))!=0;
      if ($329) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $331=$C;
      var $332=HEAP32[(($331)>>2)];
      $T=$332;
      label = 39; break;
    case 36: 
      var $334=$C;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>(0)) >= (($338)>>>(0));
      var $340=(($339)&(1));
      var $341=($340);
      var $342=(($341)|(0))!=0;
      if ($342) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $344=$TP;
      var $345=$C;
      HEAP32[(($345)>>2)]=$344;
      var $346=$T;
      var $347=$TP;
      var $348=(($347+24)|0);
      HEAP32[(($348)>>2)]=$346;
      var $349=$TP;
      var $350=$TP;
      var $351=(($350+12)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$TP;
      var $353=(($352+8)|0);
      HEAP32[(($353)>>2)]=$349;
      label = 46; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!"
    case 39: 
      label = 45; break;
    case 40: 
      var $357=$T;
      var $358=(($357+8)|0);
      var $359=HEAP32[(($358)>>2)];
      $F3=$359;
      var $360=$T;
      var $361=$360;
      var $362=$1;
      var $363=(($362+16)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=(($361)>>>(0)) >= (($364)>>>(0));
      if ($365) { label = 41; break; } else { var $374 = 0;label = 42; break; }
    case 41: 
      var $367=$F3;
      var $368=$367;
      var $369=$1;
      var $370=(($369+16)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=(($368)>>>(0)) >= (($371)>>>(0));
      var $374 = $372;label = 42; break;
    case 42: 
      var $374;
      var $375=(($374)&(1));
      var $376=($375);
      var $377=(($376)|(0))!=0;
      if ($377) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $379=$TP;
      var $380=$F3;
      var $381=(($380+12)|0);
      HEAP32[(($381)>>2)]=$379;
      var $382=$T;
      var $383=(($382+8)|0);
      HEAP32[(($383)>>2)]=$379;
      var $384=$F3;
      var $385=$TP;
      var $386=(($385+8)|0);
      HEAP32[(($386)>>2)]=$384;
      var $387=$T;
      var $388=$TP;
      var $389=(($388+12)|0);
      HEAP32[(($389)>>2)]=$387;
      var $390=$TP;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=0;
      label = 46; break;
    case 44: 
      _abort();
      throw "Reached an unreachable!"
    case 45: 
      label = 33; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __Znwj($size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $nh;
      var $2;
      var $3;
      $1=$size;
      var $4=$1;
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$1;
      var $10=_malloc($9);
      $p=$10;
      var $11=(($10)|(0))==0;
      if ($11) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $13=__ZSt15get_new_handlerv();
      $nh=$13;
      var $14=$nh;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $17=$nh;
      (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 12; break;
    case 8: 
      var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
      var $21=$20$0;
      $2=$21;
      var $22=$20$1;
      $3=$22;
      label = 9; break;
    case 9: 
      var $24=$3;
      var $25=(($24)|(0)) < 0;
      if ($25) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $27=$2;
      ___cxa_call_unexpected($27);
      throw "Reached an unreachable!"
    case 11: 
      var $29=___cxa_allocate_exception(4);
      var $30=$29;
      __ZNSt9bad_allocC2Ev($30);
      (function() { try { __THREW__ = 0; return ___cxa_throw($29, 5266260, (1130)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 8; break; }
    case 12: 
      label = 4; break;
    case 13: 
      var $33=$p;
      return $33;
    case 14: 
      var $35=$2;
      var $36=$3;
      var $37$0=$35;
      var $37$1=0;
      var $38$0=$37$0;
      var $38$1=$36;
      ___resumeException($38$0)
    case 15: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
// Bindings utilities
var Object__cache = {}; // we do it this way so we do not modify |Object|
function wrapPointer(ptr, __class__) {
  var cache = __class__ ? __class__.prototype.__cache__ : Object__cache;
  var ret = cache[ptr];
  if (ret) return ret;
  __class__ = __class__ || Object;
  ret = Object.create(__class__.prototype);
  ret.ptr = ptr;
  ret.__class__ = __class__;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;
function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;
Module['NULL'] = wrapPointer(0);
function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  if (obj.__class__ !== Object) {
    delete obj.__class__.prototype.__cache__[obj.ptr];
  } else {
    delete Object__cache[obj.ptr];
  }
}
Module['destroy'] = destroy;
function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;
function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;
function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;
function customizeVTable(object, replacementPairs) {
  // Does not handle multiple inheritance
  // Does not work with asm.js
  // Find out vtable size
  var vTable = getValue(object.ptr, 'void*');
  // This assumes our modification where we null-terminate vtables
  var size = 0;
  while (getValue(vTable + Runtime.QUANTUM_SIZE*size, 'void*')) {
    size++;
  }
  // Prepare replacement lookup table and add replacements to FUNCTION_TABLE
  // There is actually no good way to do this! So we do the following hack:
  // We create a fake vtable with canary functions, to detect which actual
  // function is being called
  var vTable2 = _malloc(size*Runtime.QUANTUM_SIZE);
  setValue(object.ptr, vTable2, 'void*');
  var canaryValue;
  var functions = FUNCTION_TABLE.length;
  for (var i = 0; i < size; i++) {
    var index = FUNCTION_TABLE.length;
    (function(j) {
      FUNCTION_TABLE.push(function() {
        canaryValue = j;
      });
    })(i);
    FUNCTION_TABLE.push(0);
    setValue(vTable2 + Runtime.QUANTUM_SIZE*i, index, 'void*');
  }
  var args = [{ptr: 0}];
  replacementPairs.forEach(function(pair) {
    // We need the wrapper function that converts arguments to not fail. Keep adding arguments til it works.
    while(1) {
      try {
        pair['original'].apply(object, args);
        break;
      } catch(e) {
        args.push(args[0]);
      }
    }
    pair.originalIndex = getValue(vTable + canaryValue*Runtime.QUANTUM_SIZE, 'void*');
  });
  FUNCTION_TABLE = FUNCTION_TABLE.slice(0, functions);
  // Do the replacements
  var replacements = {};
  replacementPairs.forEach(function(pair) {
    var replacementIndex = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(pair['replacement']);
    FUNCTION_TABLE.push(0);
    replacements[pair.originalIndex] = replacementIndex;
  });
  // Copy and modify vtable
  for (var i = 0; i < size; i++) {
    var value = getValue(vTable + Runtime.QUANTUM_SIZE*i, 'void*');
    if (value in replacements) value = replacements[value];
    setValue(vTable2 + Runtime.QUANTUM_SIZE*i, value, 'void*');
  }
  return object;
}
Module['customizeVTable'] = customizeVTable;
// Converts a value into a C-style string.
function ensureString(value) {
  if (typeof value == 'number') return value;
  return allocate(intArrayFromString(value), 'i8', ALLOC_STACK);
}
b2ContactManager.prototype['get_m_contactFilter'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactFilter_p0(this.ptr), Module['b2ContactFilter']);
}
b2ContactManager.prototype['get_m_contactCount'] = function() {
    return _emscripten_bind_b2ContactManager__get_m_contactCount_p0(this.ptr);
}
b2ContactManager.prototype['set_m_contactFilter'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactFilter_p1(this.ptr, arg0.ptr);
}
function b2ContactManager() {
    this.ptr = _emscripten_bind_b2ContactManager__b2ContactManager_p0();
  b2ContactManager.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ContactManager;
}
b2ContactManager.prototype.__cache__ = {};
Module['b2ContactManager'] = b2ContactManager;
b2ContactManager.prototype['AddPair'] = function(arg0, arg1) {
    _emscripten_bind_b2ContactManager__AddPair_p2(this.ptr, arg0, arg1);
}
b2ContactManager.prototype['set_m_allocator'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_allocator_p1(this.ptr, arg0.ptr);
}
b2ContactManager.prototype['set_m_contactCount'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactCount_p1(this.ptr, arg0);
}
b2ContactManager.prototype['Collide'] = function() {
    _emscripten_bind_b2ContactManager__Collide_p0(this.ptr);
}
b2ContactManager.prototype['set_m_contactList'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactList_p1(this.ptr, arg0.ptr);
}
b2ContactManager.prototype['FindNewContacts'] = function() {
    _emscripten_bind_b2ContactManager__FindNewContacts_p0(this.ptr);
}
b2ContactManager.prototype['get_m_contactListener'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactListener_p0(this.ptr), Module['b2ContactListener']);
}
b2ContactManager.prototype['__destroy__'] = function() {
    _emscripten_bind_b2ContactManager____destroy___p0(this.ptr);
}
b2ContactManager.prototype['set_m_contactListener'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_contactListener_p1(this.ptr, arg0.ptr);
}
b2ContactManager.prototype['get_m_broadPhase'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_broadPhase_p0(this.ptr), Module['b2BroadPhase']);
}
b2ContactManager.prototype['Destroy'] = function(arg0) {
    _emscripten_bind_b2ContactManager__Destroy_p1(this.ptr, arg0.ptr);
}
b2ContactManager.prototype['set_m_broadPhase'] = function(arg0) {
    _emscripten_bind_b2ContactManager__set_m_broadPhase_p1(this.ptr, arg0.ptr);
}
b2ContactManager.prototype['get_m_contactList'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_contactList_p0(this.ptr), Module['b2Contact']);
}
b2ContactManager.prototype['get_m_allocator'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactManager__get_m_allocator_p0(this.ptr), Module['b2BlockAllocator']);
}
b2DistanceJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2DistanceJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2DistanceJoint.prototype['SetFrequency'] = function(arg0) {
    _emscripten_bind_b2DistanceJoint__SetFrequency_p1(this.ptr, arg0);
}
b2DistanceJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2DistanceJoint__GetUserData_p0(this.ptr);
}
b2DistanceJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2DistanceJoint__SetUserData_p1(this.ptr, arg0);
}
b2DistanceJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2DistanceJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2DistanceJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2DistanceJoint.prototype['GetLocalAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetLocalAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2DistanceJoint.prototype['GetLocalAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetLocalAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2DistanceJoint.prototype['GetFrequency'] = function() {
    return _emscripten_bind_b2DistanceJoint__GetFrequency_p0(this.ptr);
}
b2DistanceJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DistanceJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2DistanceJoint.prototype['GetLength'] = function() {
    return _emscripten_bind_b2DistanceJoint__GetLength_p0(this.ptr);
}
b2DistanceJoint.prototype['GetDampingRatio'] = function() {
    return _emscripten_bind_b2DistanceJoint__GetDampingRatio_p0(this.ptr);
}
b2DistanceJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2DistanceJoint__GetCollideConnected_p0(this.ptr);
}
b2DistanceJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DistanceJoint____destroy___p0(this.ptr);
}
b2DistanceJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2DistanceJoint__Dump_p0(this.ptr);
}
b2DistanceJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2DistanceJoint__GetType_p0(this.ptr);
}
function b2DistanceJoint(arg0) {
    this.ptr = _emscripten_bind_b2DistanceJoint__b2DistanceJoint_p1(arg0.ptr);
  b2DistanceJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DistanceJoint;
}
b2DistanceJoint.prototype.__cache__ = {};
Module['b2DistanceJoint'] = b2DistanceJoint;
b2DistanceJoint.prototype['SetDampingRatio'] = function(arg0) {
    _emscripten_bind_b2DistanceJoint__SetDampingRatio_p1(this.ptr, arg0);
}
b2DistanceJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2DistanceJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2DistanceJoint.prototype['SetLength'] = function(arg0) {
    _emscripten_bind_b2DistanceJoint__SetLength_p1(this.ptr, arg0);
}
b2DistanceJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2DistanceJoint__IsActive_p0(this.ptr);
}
b2Fixture.prototype['GetRestitution'] = function() {
    return _emscripten_bind_b2Fixture__GetRestitution_p0(this.ptr);
}
b2Fixture.prototype['SetFilterData'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetFilterData_p1(this.ptr, arg0.ptr);
}
b2Fixture.prototype['SetFriction'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetFriction_p1(this.ptr, arg0);
}
function b2Fixture() {
    this.ptr = _emscripten_bind_b2Fixture__b2Fixture_p0();
  b2Fixture.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Fixture;
}
b2Fixture.prototype.__cache__ = {};
Module['b2Fixture'] = b2Fixture;
b2Fixture.prototype['GetShape'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetShape_p0(this.ptr), Module['b2Shape']);
}
b2Fixture.prototype['SetRestitution'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetRestitution_p1(this.ptr, arg0);
}
b2Fixture.prototype['GetBody'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetBody_p0(this.ptr), Module['b2Body']);
}
b2Fixture.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetNext_p0(this.ptr), Module['b2Fixture']);
}
b2Fixture.prototype['GetFriction'] = function() {
    return _emscripten_bind_b2Fixture__GetFriction_p0(this.ptr);
}
b2Fixture.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2Fixture__GetUserData_p0(this.ptr);
}
b2Fixture.prototype['SetDensity'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetDensity_p1(this.ptr, arg0);
}
b2Fixture.prototype['GetMassData'] = function(arg0) {
    _emscripten_bind_b2Fixture__GetMassData_p1(this.ptr, arg0.ptr);
}
b2Fixture.prototype['SetSensor'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetSensor_p1(this.ptr, arg0);
}
b2Fixture.prototype['GetAABB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Fixture__GetAABB_p1(this.ptr, arg0), Module['b2AABB']);
}
b2Fixture.prototype['TestPoint'] = function(arg0) {
    return _emscripten_bind_b2Fixture__TestPoint_p1(this.ptr, arg0.ptr);
}
b2Fixture.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2Fixture__SetUserData_p1(this.ptr, arg0);
}
b2Fixture.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Fixture____destroy___p0(this.ptr);
}
b2Fixture.prototype['RayCast'] = function(arg0, arg1, arg2) {
    return _emscripten_bind_b2Fixture__RayCast_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}
b2Fixture.prototype['Refilter'] = function() {
    _emscripten_bind_b2Fixture__Refilter_p0(this.ptr);
}
b2Fixture.prototype['Dump'] = function(arg0) {
    _emscripten_bind_b2Fixture__Dump_p1(this.ptr, arg0);
}
b2Fixture.prototype['GetFilterData'] = function() {
    return wrapPointer(_emscripten_bind_b2Fixture__GetFilterData_p0(this.ptr), Module['b2Filter']);
}
b2Fixture.prototype['IsSensor'] = function() {
    return _emscripten_bind_b2Fixture__IsSensor_p0(this.ptr);
}
b2Fixture.prototype['GetType'] = function() {
    return _emscripten_bind_b2Fixture__GetType_p0(this.ptr);
}
b2Fixture.prototype['GetDensity'] = function() {
    return _emscripten_bind_b2Fixture__GetDensity_p0(this.ptr);
}
b2MouseJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2MouseJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2MouseJoint.prototype['SetFrequency'] = function(arg0) {
    _emscripten_bind_b2MouseJoint__SetFrequency_p1(this.ptr, arg0);
}
b2MouseJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2MouseJoint__GetUserData_p0(this.ptr);
}
b2MouseJoint.prototype['SetMaxForce'] = function(arg0) {
    _emscripten_bind_b2MouseJoint__SetMaxForce_p1(this.ptr, arg0);
}
b2MouseJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2MouseJoint__SetUserData_p1(this.ptr, arg0);
}
b2MouseJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2MouseJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
function b2MouseJoint(arg0) {
    this.ptr = _emscripten_bind_b2MouseJoint__b2MouseJoint_p1(arg0.ptr);
  b2MouseJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2MouseJoint;
}
b2MouseJoint.prototype.__cache__ = {};
Module['b2MouseJoint'] = b2MouseJoint;
b2MouseJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2MouseJoint.prototype['GetMaxForce'] = function() {
    return _emscripten_bind_b2MouseJoint__GetMaxForce_p0(this.ptr);
}
b2MouseJoint.prototype['GetTarget'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJoint__GetTarget_p0(this.ptr), Module['b2Vec2']);
}
b2MouseJoint.prototype['GetFrequency'] = function() {
    return _emscripten_bind_b2MouseJoint__GetFrequency_p0(this.ptr);
}
b2MouseJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2MouseJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2MouseJoint.prototype['GetDampingRatio'] = function() {
    return _emscripten_bind_b2MouseJoint__GetDampingRatio_p0(this.ptr);
}
b2MouseJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2MouseJoint__GetCollideConnected_p0(this.ptr);
}
b2MouseJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2MouseJoint____destroy___p0(this.ptr);
}
b2MouseJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2MouseJoint__Dump_p0(this.ptr);
}
b2MouseJoint.prototype['SetTarget'] = function(arg0) {
    _emscripten_bind_b2MouseJoint__SetTarget_p1(this.ptr, arg0.ptr);
}
b2MouseJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2MouseJoint__GetType_p0(this.ptr);
}
b2MouseJoint.prototype['SetDampingRatio'] = function(arg0) {
    _emscripten_bind_b2MouseJoint__SetDampingRatio_p1(this.ptr, arg0);
}
b2MouseJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2MouseJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2MouseJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2MouseJoint__IsActive_p0(this.ptr);
}
b2PulleyJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2PulleyJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PulleyJoint____destroy___p0(this.ptr);
}
b2PulleyJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2PulleyJoint__GetType_p0(this.ptr);
}
b2PulleyJoint.prototype['GetGroundAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetGroundAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2PulleyJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2PulleyJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2PulleyJoint__Dump_p0(this.ptr);
}
b2PulleyJoint.prototype['GetGroundAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetGroundAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJoint.prototype['GetLengthB'] = function() {
    return _emscripten_bind_b2PulleyJoint__GetLengthB_p0(this.ptr);
}
b2PulleyJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2PulleyJoint__GetUserData_p0(this.ptr);
}
b2PulleyJoint.prototype['GetLengthA'] = function() {
    return _emscripten_bind_b2PulleyJoint__GetLengthA_p0(this.ptr);
}
b2PulleyJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2PulleyJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2PulleyJoint__GetCollideConnected_p0(this.ptr);
}
b2PulleyJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2PulleyJoint__SetUserData_p1(this.ptr, arg0);
}
b2PulleyJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2PulleyJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
function b2PulleyJoint(arg0) {
    this.ptr = _emscripten_bind_b2PulleyJoint__b2PulleyJoint_p1(arg0.ptr);
  b2PulleyJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PulleyJoint;
}
b2PulleyJoint.prototype.__cache__ = {};
Module['b2PulleyJoint'] = b2PulleyJoint;
b2PulleyJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2PulleyJoint__IsActive_p0(this.ptr);
}
b2PulleyJoint.prototype['GetRatio'] = function() {
    return _emscripten_bind_b2PulleyJoint__GetRatio_p0(this.ptr);
}
b2BroadPhase.prototype['GetTreeQuality'] = function() {
    return _emscripten_bind_b2BroadPhase__GetTreeQuality_p0(this.ptr);
}
b2BroadPhase.prototype['GetFatAABB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2BroadPhase__GetFatAABB_p1(this.ptr, arg0), Module['b2AABB']);
}
b2BroadPhase.prototype['GetUserData'] = function(arg0) {
    return _emscripten_bind_b2BroadPhase__GetUserData_p1(this.ptr, arg0);
}
b2BroadPhase.prototype['__destroy__'] = function() {
    _emscripten_bind_b2BroadPhase____destroy___p0(this.ptr);
}
b2BroadPhase.prototype['GetTreeHeight'] = function() {
    return _emscripten_bind_b2BroadPhase__GetTreeHeight_p0(this.ptr);
}
function b2BroadPhase() {
    this.ptr = _emscripten_bind_b2BroadPhase__b2BroadPhase_p0();
  b2BroadPhase.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BroadPhase;
}
b2BroadPhase.prototype.__cache__ = {};
Module['b2BroadPhase'] = b2BroadPhase;
b2BroadPhase.prototype['GetProxyCount'] = function() {
    return _emscripten_bind_b2BroadPhase__GetProxyCount_p0(this.ptr);
}
b2BroadPhase.prototype['GetTreeBalance'] = function() {
    return _emscripten_bind_b2BroadPhase__GetTreeBalance_p0(this.ptr);
}
b2BroadPhase.prototype['TestOverlap'] = function(arg0, arg1) {
    return _emscripten_bind_b2BroadPhase__TestOverlap_p2(this.ptr, arg0, arg1);
}
b2BroadPhase.prototype['TouchProxy'] = function(arg0) {
    _emscripten_bind_b2BroadPhase__TouchProxy_p1(this.ptr, arg0);
}
b2BroadPhase.prototype['CreateProxy'] = function(arg0, arg1) {
    return _emscripten_bind_b2BroadPhase__CreateProxy_p2(this.ptr, arg0.ptr, arg1);
}
b2BroadPhase.prototype['MoveProxy'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2BroadPhase__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr);
}
b2BroadPhase.prototype['DestroyProxy'] = function(arg0) {
    _emscripten_bind_b2BroadPhase__DestroyProxy_p1(this.ptr, arg0);
}
b2World.prototype['QueryAABB'] = function(arg0, arg1) {
    _emscripten_bind_b2World__QueryAABB_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2World.prototype['SetSubStepping'] = function(arg0) {
    _emscripten_bind_b2World__SetSubStepping_p1(this.ptr, arg0);
}
b2World.prototype['GetTreeQuality'] = function() {
    return _emscripten_bind_b2World__GetTreeQuality_p0(this.ptr);
}
b2World.prototype['GetTreeHeight'] = function() {
    return _emscripten_bind_b2World__GetTreeHeight_p0(this.ptr);
}
b2World.prototype['GetProfile'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetProfile_p0(this.ptr), Module['b2Profile']);
}
b2World.prototype['GetTreeBalance'] = function() {
    return _emscripten_bind_b2World__GetTreeBalance_p0(this.ptr);
}
b2World.prototype['GetSubStepping'] = function() {
    return _emscripten_bind_b2World__GetSubStepping_p0(this.ptr);
}
b2World.prototype['GetContactManager'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetContactManager_p0(this.ptr), Module['b2ContactManager']);
}
b2World.prototype['SetContactListener'] = function(arg0) {
    _emscripten_bind_b2World__SetContactListener_p1(this.ptr, arg0.ptr);
}
b2World.prototype['DrawDebugData'] = function() {
    _emscripten_bind_b2World__DrawDebugData_p0(this.ptr);
}
b2World.prototype['SetContinuousPhysics'] = function(arg0) {
    _emscripten_bind_b2World__SetContinuousPhysics_p1(this.ptr, arg0);
}
b2World.prototype['SetGravity'] = function(arg0) {
    _emscripten_bind_b2World__SetGravity_p1(this.ptr, arg0.ptr);
}
b2World.prototype['GetBodyCount'] = function() {
    return _emscripten_bind_b2World__GetBodyCount_p0(this.ptr);
}
b2World.prototype['GetAutoClearForces'] = function() {
    return _emscripten_bind_b2World__GetAutoClearForces_p0(this.ptr);
}
b2World.prototype['GetContinuousPhysics'] = function() {
    return _emscripten_bind_b2World__GetContinuousPhysics_p0(this.ptr);
}
b2World.prototype['GetJointList'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetJointList_p0(this.ptr), Module['b2Joint']);
}
b2World.prototype['CreateBody'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2World__CreateBody_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2World.prototype['GetBodyList'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetBodyList_p0(this.ptr), Module['b2Body']);
}
b2World.prototype['SetDestructionListener'] = function(arg0) {
    _emscripten_bind_b2World__SetDestructionListener_p1(this.ptr, arg0.ptr);
}
b2World.prototype['DestroyJoint'] = function(arg0) {
    _emscripten_bind_b2World__DestroyJoint_p1(this.ptr, arg0.ptr);
}
function b2World(arg0) {
    this.ptr = _emscripten_bind_b2World__b2World_p1(arg0.ptr);
  b2World.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2World;
}
b2World.prototype.__cache__ = {};
Module['b2World'] = b2World;
b2World.prototype['GetJointCount'] = function() {
    return _emscripten_bind_b2World__GetJointCount_p0(this.ptr);
}
b2World.prototype['Step'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2World__Step_p3(this.ptr, arg0, arg1, arg2);
}
b2World.prototype['ClearForces'] = function() {
    _emscripten_bind_b2World__ClearForces_p0(this.ptr);
}
b2World.prototype['GetWarmStarting'] = function() {
    return _emscripten_bind_b2World__GetWarmStarting_p0(this.ptr);
}
b2World.prototype['SetAllowSleeping'] = function(arg0) {
    _emscripten_bind_b2World__SetAllowSleeping_p1(this.ptr, arg0);
}
b2World.prototype['DestroyBody'] = function(arg0) {
    _emscripten_bind_b2World__DestroyBody_p1(this.ptr, arg0.ptr);
}
b2World.prototype['GetAllowSleeping'] = function() {
    return _emscripten_bind_b2World__GetAllowSleeping_p0(this.ptr);
}
b2World.prototype['CreateJoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2World__CreateJoint_p1(this.ptr, arg0.ptr), Module['b2Joint']);
}
b2World.prototype['GetProxyCount'] = function() {
    return _emscripten_bind_b2World__GetProxyCount_p0(this.ptr);
}
b2World.prototype['RayCast'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2World__RayCast_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}
b2World.prototype['IsLocked'] = function() {
    return _emscripten_bind_b2World__IsLocked_p0(this.ptr);
}
b2World.prototype['GetContactList'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetContactList_p0(this.ptr), Module['b2Contact']);
}
b2World.prototype['SetDebugDraw'] = function(arg0) {
    _emscripten_bind_b2World__SetDebugDraw_p1(this.ptr, arg0.ptr);
}
b2World.prototype['__destroy__'] = function() {
    _emscripten_bind_b2World____destroy___p0(this.ptr);
}
b2World.prototype['Dump'] = function() {
    _emscripten_bind_b2World__Dump_p0(this.ptr);
}
b2World.prototype['SetAutoClearForces'] = function(arg0) {
    _emscripten_bind_b2World__SetAutoClearForces_p1(this.ptr, arg0);
}
b2World.prototype['GetGravity'] = function() {
    return wrapPointer(_emscripten_bind_b2World__GetGravity_p0(this.ptr), Module['b2Vec2']);
}
b2World.prototype['GetContactCount'] = function() {
    return _emscripten_bind_b2World__GetContactCount_p0(this.ptr);
}
b2World.prototype['SetWarmStarting'] = function(arg0) {
    _emscripten_bind_b2World__SetWarmStarting_p1(this.ptr, arg0);
}
b2World.prototype['SetContactFilter'] = function(arg0) {
    _emscripten_bind_b2World__SetContactFilter_p1(this.ptr, arg0.ptr);
}
b2PrismaticJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2PrismaticJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2PrismaticJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetUserData_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetLocalAxisA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetLocalAxisA_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJoint.prototype['GetLowerLimit'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetLowerLimit_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
function b2PrismaticJoint(arg0) {
    this.ptr = _emscripten_bind_b2PrismaticJoint__b2PrismaticJoint_p1(arg0.ptr);
  b2PrismaticJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PrismaticJoint;
}
b2PrismaticJoint.prototype.__cache__ = {};
Module['b2PrismaticJoint'] = b2PrismaticJoint;
b2PrismaticJoint.prototype['GetLocalAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetLocalAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJoint.prototype['SetMotorSpeed'] = function(arg0) {
    _emscripten_bind_b2PrismaticJoint__SetMotorSpeed_p1(this.ptr, arg0);
}
b2PrismaticJoint.prototype['GetLocalAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetLocalAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJoint.prototype['GetMotorSpeed'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetMotorSpeed_p0(this.ptr);
}
b2PrismaticJoint.prototype['SetMaxMotorForce'] = function(arg0) {
    _emscripten_bind_b2PrismaticJoint__SetMaxMotorForce_p1(this.ptr, arg0);
}
b2PrismaticJoint.prototype['EnableLimit'] = function(arg0) {
    _emscripten_bind_b2PrismaticJoint__EnableLimit_p1(this.ptr, arg0);
}
b2PrismaticJoint.prototype['IsMotorEnabled'] = function() {
    return _emscripten_bind_b2PrismaticJoint__IsMotorEnabled_p0(this.ptr);
}
b2PrismaticJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2PrismaticJoint__SetUserData_p1(this.ptr, arg0);
}
b2PrismaticJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2PrismaticJoint.prototype['GetMaxMotorForce'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetMaxMotorForce_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetCollideConnected_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetJointSpeed'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetJointSpeed_p0(this.ptr);
}
b2PrismaticJoint.prototype['EnableMotor'] = function(arg0) {
    _emscripten_bind_b2PrismaticJoint__EnableMotor_p1(this.ptr, arg0);
}
b2PrismaticJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PrismaticJoint____destroy___p0(this.ptr);
}
b2PrismaticJoint.prototype['GetReferenceAngle'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetReferenceAngle_p0(this.ptr);
}
b2PrismaticJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2PrismaticJoint__Dump_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetMotorForce'] = function(arg0) {
    return _emscripten_bind_b2PrismaticJoint__GetMotorForce_p1(this.ptr, arg0);
}
b2PrismaticJoint.prototype['GetJointTranslation'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetJointTranslation_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetType_p0(this.ptr);
}
b2PrismaticJoint.prototype['IsLimitEnabled'] = function() {
    return _emscripten_bind_b2PrismaticJoint__IsLimitEnabled_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2PrismaticJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2PrismaticJoint.prototype['SetLimits'] = function(arg0, arg1) {
    _emscripten_bind_b2PrismaticJoint__SetLimits_p2(this.ptr, arg0, arg1);
}
b2PrismaticJoint.prototype['GetUpperLimit'] = function() {
    return _emscripten_bind_b2PrismaticJoint__GetUpperLimit_p0(this.ptr);
}
b2PrismaticJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2PrismaticJoint__IsActive_p0(this.ptr);
}
b2PrismaticJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2CircleShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2CircleShape____destroy___p0(this.ptr);
}
b2CircleShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2CircleShape__GetType_p0(this.ptr);
}
b2CircleShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2CircleShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}
b2CircleShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2CircleShape__set_m_radius_p1(this.ptr, arg0);
}
b2CircleShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2CircleShape__get_m_radius_p0(this.ptr);
}
b2CircleShape.prototype['GetVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2CircleShape__GetVertex_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2CircleShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2CircleShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}
b2CircleShape.prototype['GetSupportVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2CircleShape__GetSupportVertex_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2CircleShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2CircleShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}
b2CircleShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2CircleShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}
b2CircleShape.prototype['GetVertexCount'] = function() {
    return _emscripten_bind_b2CircleShape__GetVertexCount_p0(this.ptr);
}
b2CircleShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2CircleShape__GetChildCount_p0(this.ptr);
}
b2CircleShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2CircleShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}
function b2CircleShape() {
    this.ptr = _emscripten_bind_b2CircleShape__b2CircleShape_p0();
  b2CircleShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2CircleShape;
}
b2CircleShape.prototype.__cache__ = {};
Module['b2CircleShape'] = b2CircleShape;
b2CircleShape.prototype['GetSupport'] = function(arg0) {
    return _emscripten_bind_b2CircleShape__GetSupport_p1(this.ptr, arg0.ptr);
}
b2CircleShape.prototype['set_m_p'] = function(arg0) {
    _emscripten_bind_b2CircleShape__set_m_p_p1(this.ptr, arg0.ptr);
}
b2CircleShape.prototype['get_m_p'] = function() {
    return wrapPointer(_emscripten_bind_b2CircleShape__get_m_p_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2WheelJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2WheelJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2WheelJoint__GetUserData_p0(this.ptr);
}
b2WheelJoint.prototype['GetLocalAxisA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetLocalAxisA_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJoint.prototype['SetSpringDampingRatio'] = function(arg0) {
    _emscripten_bind_b2WheelJoint__SetSpringDampingRatio_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2WheelJoint.prototype['GetSpringFrequencyHz'] = function() {
    return _emscripten_bind_b2WheelJoint__GetSpringFrequencyHz_p0(this.ptr);
}
b2WheelJoint.prototype['GetLocalAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetLocalAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJoint.prototype['SetMotorSpeed'] = function(arg0) {
    _emscripten_bind_b2WheelJoint__SetMotorSpeed_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['GetLocalAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetLocalAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJoint.prototype['GetMotorSpeed'] = function() {
    return _emscripten_bind_b2WheelJoint__GetMotorSpeed_p0(this.ptr);
}
b2WheelJoint.prototype['GetMotorTorque'] = function(arg0) {
    return _emscripten_bind_b2WheelJoint__GetMotorTorque_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['GetMaxMotorTorque'] = function() {
    return _emscripten_bind_b2WheelJoint__GetMaxMotorTorque_p0(this.ptr);
}
function b2WheelJoint(arg0) {
    this.ptr = _emscripten_bind_b2WheelJoint__b2WheelJoint_p1(arg0.ptr);
  b2WheelJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WheelJoint;
}
b2WheelJoint.prototype.__cache__ = {};
Module['b2WheelJoint'] = b2WheelJoint;
b2WheelJoint.prototype['IsMotorEnabled'] = function() {
    return _emscripten_bind_b2WheelJoint__IsMotorEnabled_p0(this.ptr);
}
b2WheelJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2WheelJoint__SetUserData_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2WheelJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2WheelJoint.prototype['GetSpringDampingRatio'] = function() {
    return _emscripten_bind_b2WheelJoint__GetSpringDampingRatio_p0(this.ptr);
}
b2WheelJoint.prototype['SetMaxMotorTorque'] = function(arg0) {
    _emscripten_bind_b2WheelJoint__SetMaxMotorTorque_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2WheelJoint__GetCollideConnected_p0(this.ptr);
}
b2WheelJoint.prototype['GetJointSpeed'] = function() {
    return _emscripten_bind_b2WheelJoint__GetJointSpeed_p0(this.ptr);
}
b2WheelJoint.prototype['EnableMotor'] = function(arg0) {
    _emscripten_bind_b2WheelJoint__EnableMotor_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2WheelJoint____destroy___p0(this.ptr);
}
b2WheelJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2WheelJoint__Dump_p0(this.ptr);
}
b2WheelJoint.prototype['GetJointTranslation'] = function() {
    return _emscripten_bind_b2WheelJoint__GetJointTranslation_p0(this.ptr);
}
b2WheelJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2WheelJoint__GetType_p0(this.ptr);
}
b2WheelJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2WheelJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['SetSpringFrequencyHz'] = function(arg0) {
    _emscripten_bind_b2WheelJoint__SetSpringFrequencyHz_p1(this.ptr, arg0);
}
b2WheelJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2WheelJoint__IsActive_p0(this.ptr);
}
b2Draw.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Draw____destroy___p0(this.ptr);
}
b2Draw.prototype['AppendFlags'] = function(arg0) {
    _emscripten_bind_b2Draw__AppendFlags_p1(this.ptr, arg0);
}
b2Draw.prototype['DrawTransform'] = function(arg0) {
    _emscripten_bind_b2Draw__DrawTransform_p1(this.ptr, arg0.ptr);
}
b2Draw.prototype['ClearFlags'] = function(arg0) {
    _emscripten_bind_b2Draw__ClearFlags_p1(this.ptr, arg0);
}
b2Draw.prototype['DrawPolygon'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
}
b2Draw.prototype['DrawSolidCircle'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2Draw__DrawSolidCircle_p4(this.ptr, arg0.ptr, arg1, arg2.ptr, arg3.ptr);
}
b2Draw.prototype['DrawSolidPolygon'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawSolidPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
}
b2Draw.prototype['DrawCircle'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawCircle_p3(this.ptr, arg0.ptr, arg1, arg2.ptr);
}
b2Draw.prototype['SetFlags'] = function(arg0) {
    _emscripten_bind_b2Draw__SetFlags_p1(this.ptr, arg0);
}
b2Draw.prototype['DrawSegment'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Draw__DrawSegment_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}
function b2Draw() {
    this.ptr = _emscripten_bind_b2Draw__b2Draw_p0();
  b2Draw.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Draw;
}
b2Draw.prototype.__cache__ = {};
Module['b2Draw'] = b2Draw;
b2Draw.prototype['GetFlags'] = function() {
    return _emscripten_bind_b2Draw__GetFlags_p0(this.ptr);
}
function b2Joint(){ throw "b2Joint is abstract!" }
b2Joint.prototype.__cache__ = {};
Module['b2Joint'] = b2Joint;
b2Joint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2Joint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2Joint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2Joint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2Joint__GetReactionTorque_p1(this.ptr, arg0);
}
b2Joint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2Joint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2Joint__GetUserData_p0(this.ptr);
}
b2Joint.prototype['GetType'] = function() {
    return _emscripten_bind_b2Joint__GetType_p0(this.ptr);
}
b2Joint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2Joint__SetUserData_p1(this.ptr, arg0);
}
b2Joint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2Joint__GetCollideConnected_p0(this.ptr);
}
b2Joint.prototype['Dump'] = function() {
    _emscripten_bind_b2Joint__Dump_p0(this.ptr);
}
b2Joint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2Joint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2Joint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Joint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2Joint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2Joint__IsActive_p0(this.ptr);
}
b2GearJoint.prototype['GetJoint1'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetJoint1_p0(this.ptr), Module['b2Joint']);
}
function b2GearJoint(arg0) {
    this.ptr = _emscripten_bind_b2GearJoint__b2GearJoint_p1(arg0.ptr);
  b2GearJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2GearJoint;
}
b2GearJoint.prototype.__cache__ = {};
Module['b2GearJoint'] = b2GearJoint;
b2GearJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2GearJoint.prototype['GetJoint2'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetJoint2_p0(this.ptr), Module['b2Joint']);
}
b2GearJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2GearJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2GearJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2GearJoint__Dump_p0(this.ptr);
}
b2GearJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2GearJoint____destroy___p0(this.ptr);
}
b2GearJoint.prototype['SetRatio'] = function(arg0) {
    _emscripten_bind_b2GearJoint__SetRatio_p1(this.ptr, arg0);
}
b2GearJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2GearJoint__GetType_p0(this.ptr);
}
b2GearJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2GearJoint__GetUserData_p0(this.ptr);
}
b2GearJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2GearJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2GearJoint__GetCollideConnected_p0(this.ptr);
}
b2GearJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2GearJoint__SetUserData_p1(this.ptr, arg0);
}
b2GearJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2GearJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2GearJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2GearJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2GearJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2GearJoint__IsActive_p0(this.ptr);
}
b2GearJoint.prototype['GetRatio'] = function() {
    return _emscripten_bind_b2GearJoint__GetRatio_p0(this.ptr);
}
b2RayCastCallback.prototype['ReportFixture'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2RayCastCallback__ReportFixture_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}
function b2RayCastCallback() {
    this.ptr = _emscripten_bind_b2RayCastCallback__b2RayCastCallback_p0();
  b2RayCastCallback.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RayCastCallback;
}
b2RayCastCallback.prototype.__cache__ = {};
Module['b2RayCastCallback'] = b2RayCastCallback;
b2RayCastCallback.prototype['__destroy__'] = function() {
    _emscripten_bind_b2RayCastCallback____destroy___p0(this.ptr);
}
b2DynamicTree.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DynamicTree____destroy___p0(this.ptr);
}
function b2DynamicTree() {
    this.ptr = _emscripten_bind_b2DynamicTree__b2DynamicTree_p0();
  b2DynamicTree.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DynamicTree;
}
b2DynamicTree.prototype.__cache__ = {};
Module['b2DynamicTree'] = b2DynamicTree;
b2DynamicTree.prototype['GetFatAABB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DynamicTree__GetFatAABB_p1(this.ptr, arg0), Module['b2AABB']);
}
b2DynamicTree.prototype['GetUserData'] = function(arg0) {
    return _emscripten_bind_b2DynamicTree__GetUserData_p1(this.ptr, arg0);
}
b2DynamicTree.prototype['GetMaxBalance'] = function() {
    return _emscripten_bind_b2DynamicTree__GetMaxBalance_p0(this.ptr);
}
b2DynamicTree.prototype['GetHeight'] = function() {
    return _emscripten_bind_b2DynamicTree__GetHeight_p0(this.ptr);
}
b2DynamicTree.prototype['GetAreaRatio'] = function() {
    return _emscripten_bind_b2DynamicTree__GetAreaRatio_p0(this.ptr);
}
b2DynamicTree.prototype['RebuildBottomUp'] = function() {
    _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0(this.ptr);
}
b2DynamicTree.prototype['CreateProxy'] = function(arg0, arg1) {
    return _emscripten_bind_b2DynamicTree__CreateProxy_p2(this.ptr, arg0.ptr, arg1);
}
b2DynamicTree.prototype['MoveProxy'] = function(arg0, arg1, arg2) {
    return _emscripten_bind_b2DynamicTree__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr);
}
b2DynamicTree.prototype['Validate'] = function() {
    _emscripten_bind_b2DynamicTree__Validate_p0(this.ptr);
}
b2DynamicTree.prototype['DestroyProxy'] = function(arg0) {
    _emscripten_bind_b2DynamicTree__DestroyProxy_p1(this.ptr, arg0);
}
b2WeldJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2WeldJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2WeldJoint.prototype['SetFrequency'] = function(arg0) {
    _emscripten_bind_b2WeldJoint__SetFrequency_p1(this.ptr, arg0);
}
b2WeldJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2WeldJoint__GetUserData_p0(this.ptr);
}
b2WeldJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2WeldJoint__SetUserData_p1(this.ptr, arg0);
}
b2WeldJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2WeldJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2WeldJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2WeldJoint.prototype['GetLocalAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetLocalAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2WeldJoint.prototype['GetLocalAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetLocalAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2WeldJoint.prototype['GetFrequency'] = function() {
    return _emscripten_bind_b2WeldJoint__GetFrequency_p0(this.ptr);
}
function b2WeldJoint(arg0) {
    this.ptr = _emscripten_bind_b2WeldJoint__b2WeldJoint_p1(arg0.ptr);
  b2WeldJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WeldJoint;
}
b2WeldJoint.prototype.__cache__ = {};
Module['b2WeldJoint'] = b2WeldJoint;
b2WeldJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2WeldJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2WeldJoint.prototype['GetDampingRatio'] = function() {
    return _emscripten_bind_b2WeldJoint__GetDampingRatio_p0(this.ptr);
}
b2WeldJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2WeldJoint__GetCollideConnected_p0(this.ptr);
}
b2WeldJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2WeldJoint____destroy___p0(this.ptr);
}
b2WeldJoint.prototype['GetReferenceAngle'] = function() {
    return _emscripten_bind_b2WeldJoint__GetReferenceAngle_p0(this.ptr);
}
b2WeldJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2WeldJoint__Dump_p0(this.ptr);
}
b2WeldJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2WeldJoint__GetType_p0(this.ptr);
}
b2WeldJoint.prototype['SetDampingRatio'] = function(arg0) {
    _emscripten_bind_b2WeldJoint__SetDampingRatio_p1(this.ptr, arg0);
}
b2WeldJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2WeldJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2WeldJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2WeldJoint__IsActive_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2RevoluteJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2RevoluteJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetUserData_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetLowerLimit'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetLowerLimit_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
function b2RevoluteJoint(arg0) {
    this.ptr = _emscripten_bind_b2RevoluteJoint__b2RevoluteJoint_p1(arg0.ptr);
  b2RevoluteJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RevoluteJoint;
}
b2RevoluteJoint.prototype.__cache__ = {};
Module['b2RevoluteJoint'] = b2RevoluteJoint;
b2RevoluteJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2RevoluteJoint.prototype['GetLocalAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetLocalAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2RevoluteJoint.prototype['SetMotorSpeed'] = function(arg0) {
    _emscripten_bind_b2RevoluteJoint__SetMotorSpeed_p1(this.ptr, arg0);
}
b2RevoluteJoint.prototype['GetLocalAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetLocalAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2RevoluteJoint.prototype['GetJointAngle'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetJointAngle_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetMotorSpeed'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetMotorSpeed_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetMotorTorque'] = function(arg0) {
    return _emscripten_bind_b2RevoluteJoint__GetMotorTorque_p1(this.ptr, arg0);
}
b2RevoluteJoint.prototype['IsLimitEnabled'] = function() {
    return _emscripten_bind_b2RevoluteJoint__IsLimitEnabled_p0(this.ptr);
}
b2RevoluteJoint.prototype['EnableLimit'] = function(arg0) {
    _emscripten_bind_b2RevoluteJoint__EnableLimit_p1(this.ptr, arg0);
}
b2RevoluteJoint.prototype['IsMotorEnabled'] = function() {
    return _emscripten_bind_b2RevoluteJoint__IsMotorEnabled_p0(this.ptr);
}
b2RevoluteJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2RevoluteJoint__SetUserData_p1(this.ptr, arg0);
}
b2RevoluteJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2RevoluteJoint.prototype['SetMaxMotorTorque'] = function(arg0) {
    _emscripten_bind_b2RevoluteJoint__SetMaxMotorTorque_p1(this.ptr, arg0);
}
b2RevoluteJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetCollideConnected_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetJointSpeed'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetJointSpeed_p0(this.ptr);
}
b2RevoluteJoint.prototype['EnableMotor'] = function(arg0) {
    _emscripten_bind_b2RevoluteJoint__EnableMotor_p1(this.ptr, arg0);
}
b2RevoluteJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2RevoluteJoint____destroy___p0(this.ptr);
}
b2RevoluteJoint.prototype['GetReferenceAngle'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetReferenceAngle_p0(this.ptr);
}
b2RevoluteJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2RevoluteJoint__Dump_p0(this.ptr);
}
b2RevoluteJoint.prototype['SetLimits'] = function(arg0, arg1) {
    _emscripten_bind_b2RevoluteJoint__SetLimits_p2(this.ptr, arg0, arg1);
}
b2RevoluteJoint.prototype['GetMaxMotorTorque'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetMaxMotorTorque_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetType_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2RevoluteJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2RevoluteJoint.prototype['GetUpperLimit'] = function() {
    return _emscripten_bind_b2RevoluteJoint__GetUpperLimit_p0(this.ptr);
}
b2RevoluteJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2RevoluteJoint__IsActive_p0(this.ptr);
}
b2RevoluteJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
function b2Timer() {
    this.ptr = _emscripten_bind_b2Timer__b2Timer_p0();
  b2Timer.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Timer;
}
b2Timer.prototype.__cache__ = {};
Module['b2Timer'] = b2Timer;
b2Timer.prototype['Reset'] = function() {
    _emscripten_bind_b2Timer__Reset_p0(this.ptr);
}
b2Timer.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Timer____destroy___p0(this.ptr);
}
b2Timer.prototype['GetMilliseconds'] = function() {
    return _emscripten_bind_b2Timer__GetMilliseconds_p0(this.ptr);
}
b2ContactListener.prototype['__destroy__'] = function() {
    _emscripten_bind_b2ContactListener____destroy___p0(this.ptr);
}
function b2ContactListener() {
    this.ptr = _emscripten_bind_b2ContactListener__b2ContactListener_p0();
  b2ContactListener.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ContactListener;
}
b2ContactListener.prototype.__cache__ = {};
Module['b2ContactListener'] = b2ContactListener;
b2ContactListener.prototype['EndContact'] = function(arg0) {
    _emscripten_bind_b2ContactListener__EndContact_p1(this.ptr, arg0.ptr);
}
b2ContactListener.prototype['BeginContact'] = function(arg0) {
    _emscripten_bind_b2ContactListener__BeginContact_p1(this.ptr, arg0.ptr);
}
b2ContactListener.prototype['PreSolve'] = function(arg0, arg1) {
    _emscripten_bind_b2ContactListener__PreSolve_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2ContactListener.prototype['PostSolve'] = function(arg0, arg1) {
    _emscripten_bind_b2ContactListener__PostSolve_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2ChainShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2ChainShape____destroy___p0(this.ptr);
}
b2ChainShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2ChainShape__GetType_p0(this.ptr);
}
b2ChainShape.prototype['CreateChain'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__CreateChain_p2(this.ptr, arg0.ptr, arg1);
}
b2ChainShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2ChainShape__set_m_radius_p1(this.ptr, arg0);
}
b2ChainShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2ChainShape__get_m_radius_p0(this.ptr);
}
b2ChainShape.prototype['get_m_vertices'] = function() {
    return wrapPointer(_emscripten_bind_b2ChainShape__get_m_vertices_p0(this.ptr), Module['b2Vec2']);
}
b2ChainShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}
b2ChainShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2ChainShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}
b2ChainShape.prototype['get_m_count'] = function() {
    return _emscripten_bind_b2ChainShape__get_m_count_p0(this.ptr);
}
b2ChainShape.prototype['GetChildEdge'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__GetChildEdge_p2(this.ptr, arg0.ptr, arg1);
}
function b2ChainShape() {
    this.ptr = _emscripten_bind_b2ChainShape__b2ChainShape_p0();
  b2ChainShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ChainShape;
}
b2ChainShape.prototype.__cache__ = {};
Module['b2ChainShape'] = b2ChainShape;
b2ChainShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2ChainShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}
b2ChainShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2ChainShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}
b2ChainShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2ChainShape__GetChildCount_p0(this.ptr);
}
b2ChainShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2ChainShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2ChainShape.prototype['SetPrevVertex'] = function(arg0) {
    _emscripten_bind_b2ChainShape__SetPrevVertex_p1(this.ptr, arg0.ptr);
}
b2ChainShape.prototype['CreateLoop'] = function(arg0, arg1) {
    _emscripten_bind_b2ChainShape__CreateLoop_p2(this.ptr, arg0.ptr, arg1);
}
b2ChainShape.prototype['set_m_vertices'] = function(arg0) {
    _emscripten_bind_b2ChainShape__set_m_vertices_p1(this.ptr, arg0.ptr);
}
b2ChainShape.prototype['SetNextVertex'] = function(arg0) {
    _emscripten_bind_b2ChainShape__SetNextVertex_p1(this.ptr, arg0.ptr);
}
b2ChainShape.prototype['set_m_count'] = function(arg0) {
    _emscripten_bind_b2ChainShape__set_m_count_p1(this.ptr, arg0);
}
b2QueryCallback.prototype['ReportFixture'] = function(arg0) {
    return _emscripten_bind_b2QueryCallback__ReportFixture_p1(this.ptr, arg0.ptr);
}
b2QueryCallback.prototype['__destroy__'] = function() {
    _emscripten_bind_b2QueryCallback____destroy___p0(this.ptr);
}
function b2QueryCallback() {
    this.ptr = _emscripten_bind_b2QueryCallback__b2QueryCallback_p0();
  b2QueryCallback.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2QueryCallback;
}
b2QueryCallback.prototype.__cache__ = {};
Module['b2QueryCallback'] = b2QueryCallback;
b2BlockAllocator.prototype['__destroy__'] = function() {
    _emscripten_bind_b2BlockAllocator____destroy___p0(this.ptr);
}
b2BlockAllocator.prototype['Clear'] = function() {
    _emscripten_bind_b2BlockAllocator__Clear_p0(this.ptr);
}
b2BlockAllocator.prototype['Free'] = function(arg0, arg1) {
    _emscripten_bind_b2BlockAllocator__Free_p2(this.ptr, arg0, arg1);
}
b2BlockAllocator.prototype['Allocate'] = function(arg0) {
    return _emscripten_bind_b2BlockAllocator__Allocate_p1(this.ptr, arg0);
}
function b2BlockAllocator() {
    this.ptr = _emscripten_bind_b2BlockAllocator__b2BlockAllocator_p0();
  b2BlockAllocator.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BlockAllocator;
}
b2BlockAllocator.prototype.__cache__ = {};
Module['b2BlockAllocator'] = b2BlockAllocator;
b2RopeJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2RopeJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2RopeJoint____destroy___p0(this.ptr);
}
b2RopeJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2RopeJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2RopeJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2RopeJoint.prototype['GetMaxLength'] = function() {
    return _emscripten_bind_b2RopeJoint__GetMaxLength_p0(this.ptr);
}
b2RopeJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2RopeJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2RopeJoint__GetCollideConnected_p0(this.ptr);
}
b2RopeJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2RopeJoint__GetUserData_p0(this.ptr);
}
b2RopeJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2RopeJoint__GetType_p0(this.ptr);
}
b2RopeJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2RopeJoint.prototype['GetLocalAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetLocalAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2RopeJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2RopeJoint__Dump_p0(this.ptr);
}
b2RopeJoint.prototype['SetMaxLength'] = function(arg0) {
    _emscripten_bind_b2RopeJoint__SetMaxLength_p1(this.ptr, arg0);
}
b2RopeJoint.prototype['GetLocalAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetLocalAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2RopeJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2RopeJoint__SetUserData_p1(this.ptr, arg0);
}
b2RopeJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2RopeJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2RopeJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
function b2RopeJoint(arg0) {
    this.ptr = _emscripten_bind_b2RopeJoint__b2RopeJoint_p1(arg0.ptr);
  b2RopeJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RopeJoint;
}
b2RopeJoint.prototype.__cache__ = {};
Module['b2RopeJoint'] = b2RopeJoint;
b2RopeJoint.prototype['GetLimitState'] = function() {
    return _emscripten_bind_b2RopeJoint__GetLimitState_p0(this.ptr);
}
b2RopeJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2RopeJoint__IsActive_p0(this.ptr);
}
b2PolygonShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PolygonShape____destroy___p0(this.ptr);
}
b2PolygonShape.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2PolygonShape__Set_p2(this.ptr, arg0.ptr, arg1);
}
b2PolygonShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2PolygonShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}
b2PolygonShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2PolygonShape__set_m_radius_p1(this.ptr, arg0);
}
b2PolygonShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2PolygonShape__get_m_radius_p0(this.ptr);
}
b2PolygonShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PolygonShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}
b2PolygonShape.prototype['GetVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PolygonShape__GetVertex_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2PolygonShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2PolygonShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}
b2PolygonShape.prototype['SetAsBox'] = function(arg0, arg1, arg2, arg3) {
  if (arg2 === undefined)
    _emscripten_bind_b2PolygonShape__SetAsBox_p2(this.ptr, arg0, arg1);
  else 
    _emscripten_bind_b2PolygonShape__SetAsBox_p4(this.ptr, arg0, arg1, arg2.ptr, arg3);
}
b2PolygonShape.prototype['set_m_centroid'] = function(arg0) {
    _emscripten_bind_b2PolygonShape__set_m_centroid_p1(this.ptr, arg0.ptr);
}
b2PolygonShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2PolygonShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}
b2PolygonShape.prototype['set_m_vertexCount'] = function(arg0) {
    _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1(this.ptr, arg0);
}
b2PolygonShape.prototype['GetVertexCount'] = function() {
    return _emscripten_bind_b2PolygonShape__GetVertexCount_p0(this.ptr);
}
b2PolygonShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2PolygonShape__GetChildCount_p0(this.ptr);
}
b2PolygonShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2PolygonShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2PolygonShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2PolygonShape__GetType_p0(this.ptr);
}
function b2PolygonShape() {
    this.ptr = _emscripten_bind_b2PolygonShape__b2PolygonShape_p0();
  b2PolygonShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PolygonShape;
}
b2PolygonShape.prototype.__cache__ = {};
Module['b2PolygonShape'] = b2PolygonShape;
b2PolygonShape.prototype['get_m_vertexCount'] = function() {
    return _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0(this.ptr);
}
b2PolygonShape.prototype['get_m_centroid'] = function() {
    return wrapPointer(_emscripten_bind_b2PolygonShape__get_m_centroid_p0(this.ptr), Module['b2Vec2']);
}
b2EdgeShape.prototype['__destroy__'] = function() {
    _emscripten_bind_b2EdgeShape____destroy___p0(this.ptr);
}
b2EdgeShape.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2EdgeShape__Set_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2EdgeShape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2EdgeShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}
b2EdgeShape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2EdgeShape__set_m_radius_p1(this.ptr, arg0);
}
b2EdgeShape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2EdgeShape__get_m_radius_p0(this.ptr);
}
b2EdgeShape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2EdgeShape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}
b2EdgeShape.prototype['GetType'] = function() {
    return _emscripten_bind_b2EdgeShape__GetType_p0(this.ptr);
}
b2EdgeShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2EdgeShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}
b2EdgeShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2EdgeShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}
b2EdgeShape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2EdgeShape__GetChildCount_p0(this.ptr);
}
b2EdgeShape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2EdgeShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}
function b2EdgeShape() {
    this.ptr = _emscripten_bind_b2EdgeShape__b2EdgeShape_p0();
  b2EdgeShape.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2EdgeShape;
}
b2EdgeShape.prototype.__cache__ = {};
Module['b2EdgeShape'] = b2EdgeShape;
function b2Contact(){ throw "b2Contact is abstract!" }
b2Contact.prototype.__cache__ = {};
Module['b2Contact'] = b2Contact;
b2Contact.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetNext_p0(this.ptr), Module['b2Contact']);
}
b2Contact.prototype['SetEnabled'] = function(arg0) {
    _emscripten_bind_b2Contact__SetEnabled_p1(this.ptr, arg0);
}
b2Contact.prototype['GetWorldManifold'] = function(arg0) {
    _emscripten_bind_b2Contact__GetWorldManifold_p1(this.ptr, arg0.ptr);
}
b2Contact.prototype['GetRestitution'] = function() {
    return _emscripten_bind_b2Contact__GetRestitution_p0(this.ptr);
}
b2Contact.prototype['ResetFriction'] = function() {
    _emscripten_bind_b2Contact__ResetFriction_p0(this.ptr);
}
b2Contact.prototype['GetFriction'] = function() {
    return _emscripten_bind_b2Contact__GetFriction_p0(this.ptr);
}
b2Contact.prototype['IsTouching'] = function() {
    return _emscripten_bind_b2Contact__IsTouching_p0(this.ptr);
}
b2Contact.prototype['IsEnabled'] = function() {
    return _emscripten_bind_b2Contact__IsEnabled_p0(this.ptr);
}
b2Contact.prototype['GetFixtureB'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetFixtureB_p0(this.ptr), Module['b2Fixture']);
}
b2Contact.prototype['SetFriction'] = function(arg0) {
    _emscripten_bind_b2Contact__SetFriction_p1(this.ptr, arg0);
}
b2Contact.prototype['GetFixtureA'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetFixtureA_p0(this.ptr), Module['b2Fixture']);
}
b2Contact.prototype['GetChildIndexA'] = function() {
    return _emscripten_bind_b2Contact__GetChildIndexA_p0(this.ptr);
}
b2Contact.prototype['GetChildIndexB'] = function() {
    return _emscripten_bind_b2Contact__GetChildIndexB_p0(this.ptr);
}
b2Contact.prototype['Evaluate'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Contact__Evaluate_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}
b2Contact.prototype['SetRestitution'] = function(arg0) {
    _emscripten_bind_b2Contact__SetRestitution_p1(this.ptr, arg0);
}
b2Contact.prototype['GetManifold'] = function() {
    return wrapPointer(_emscripten_bind_b2Contact__GetManifold_p0(this.ptr), Module['b2Manifold']);
}
b2Contact.prototype['ResetRestitution'] = function() {
    _emscripten_bind_b2Contact__ResetRestitution_p0(this.ptr);
}
function b2Shape(){ throw "b2Shape is abstract!" }
b2Shape.prototype.__cache__ = {};
Module['b2Shape'] = b2Shape;
b2Shape.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2Shape__get_m_radius_p0(this.ptr);
}
b2Shape.prototype['ComputeMass'] = function(arg0, arg1) {
    _emscripten_bind_b2Shape__ComputeMass_p2(this.ptr, arg0.ptr, arg1);
}
b2Shape.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2Shape__set_m_radius_p1(this.ptr, arg0);
}
b2Shape.prototype['Clone'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Shape__Clone_p1(this.ptr, arg0.ptr), Module['b2Shape']);
}
b2Shape.prototype['GetType'] = function() {
    return _emscripten_bind_b2Shape__GetType_p0(this.ptr);
}
b2Shape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
    return _emscripten_bind_b2Shape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3);
}
b2Shape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Shape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2);
}
b2Shape.prototype['GetChildCount'] = function() {
    return _emscripten_bind_b2Shape__GetChildCount_p0(this.ptr);
}
b2Shape.prototype['TestPoint'] = function(arg0, arg1) {
    return _emscripten_bind_b2Shape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr);
}
function b2Body(){ throw "b2Body is abstract!" }
b2Body.prototype.__cache__ = {};
Module['b2Body'] = b2Body;
b2Body.prototype['GetAngle'] = function() {
    return _emscripten_bind_b2Body__GetAngle_p0(this.ptr);
}
b2Body.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2Body__GetUserData_p0(this.ptr);
}
b2Body.prototype['IsSleepingAllowed'] = function() {
    return _emscripten_bind_b2Body__IsSleepingAllowed_p0(this.ptr);
}
b2Body.prototype['SetAngularDamping'] = function(arg0) {
    _emscripten_bind_b2Body__SetAngularDamping_p1(this.ptr, arg0);
}
b2Body.prototype['SetActive'] = function(arg0) {
    _emscripten_bind_b2Body__SetActive_p1(this.ptr, arg0);
}
b2Body.prototype['SetGravityScale'] = function(arg0) {
    _emscripten_bind_b2Body__SetGravityScale_p1(this.ptr, arg0);
}
b2Body.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2Body__SetUserData_p1(this.ptr, arg0);
}
b2Body.prototype['GetAngularVelocity'] = function() {
    return _emscripten_bind_b2Body__GetAngularVelocity_p0(this.ptr);
}
b2Body.prototype['GetFixtureList'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetFixtureList_p0(this.ptr), Module['b2Fixture']);
}
b2Body.prototype['ApplyForce'] = function(arg0, arg1) {
    _emscripten_bind_b2Body__ApplyForce_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2Body.prototype['GetLocalPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLocalPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2Body.prototype['SetLinearVelocity'] = function(arg0) {
    _emscripten_bind_b2Body__SetLinearVelocity_p1(this.ptr, arg0.ptr);
}
b2Body.prototype['GetJointList'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetJointList_p0(this.ptr), Module['b2JointEdge']);
}
b2Body.prototype['GetLinearVelocity'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocity_p0(this.ptr), Module['b2Vec2']);
}
b2Body.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetNext_p0(this.ptr), Module['b2Body']);
}
b2Body.prototype['SetSleepingAllowed'] = function(arg0) {
    _emscripten_bind_b2Body__SetSleepingAllowed_p1(this.ptr, arg0);
}
b2Body.prototype['SetTransform'] = function(arg0, arg1) {
    _emscripten_bind_b2Body__SetTransform_p2(this.ptr, arg0.ptr, arg1);
}
b2Body.prototype['GetMass'] = function() {
    return _emscripten_bind_b2Body__GetMass_p0(this.ptr);
}
b2Body.prototype['SetAngularVelocity'] = function(arg0) {
    _emscripten_bind_b2Body__SetAngularVelocity_p1(this.ptr, arg0);
}
b2Body.prototype['GetMassData'] = function(arg0) {
    _emscripten_bind_b2Body__GetMassData_p1(this.ptr, arg0.ptr);
}
b2Body.prototype['GetLinearVelocityFromWorldPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2Body.prototype['ResetMassData'] = function() {
    _emscripten_bind_b2Body__ResetMassData_p0(this.ptr);
}
b2Body.prototype['ApplyForceToCenter'] = function(arg0) {
    _emscripten_bind_b2Body__ApplyForceToCenter_p1(this.ptr, arg0.ptr);
}
b2Body.prototype['ApplyTorque'] = function(arg0) {
    _emscripten_bind_b2Body__ApplyTorque_p1(this.ptr, arg0);
}
b2Body.prototype['IsAwake'] = function() {
    return _emscripten_bind_b2Body__IsAwake_p0(this.ptr);
}
b2Body.prototype['SetType'] = function(arg0) {
    _emscripten_bind_b2Body__SetType_p1(this.ptr, arg0);
}
b2Body.prototype['CreateFixture'] = function(arg0, arg1) {
  if (arg1 === undefined)
    return wrapPointer(_emscripten_bind_b2Body__CreateFixture_p1(this.ptr, arg0.ptr), Module['b2Fixture']);
  else 
    return wrapPointer(_emscripten_bind_b2Body__CreateFixture_p2(this.ptr, arg0.ptr, arg1), Module['b2Fixture']);
}
b2Body.prototype['SetMassData'] = function(arg0) {
    _emscripten_bind_b2Body__SetMassData_p1(this.ptr, arg0.ptr);
}
b2Body.prototype['GetTransform'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetTransform_p0(this.ptr), Module['b2Transform']);
}
b2Body.prototype['GetWorldCenter'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetWorldCenter_p0(this.ptr), Module['b2Vec2']);
}
b2Body.prototype['GetAngularDamping'] = function() {
    return _emscripten_bind_b2Body__GetAngularDamping_p0(this.ptr);
}
b2Body.prototype['ApplyLinearImpulse'] = function(arg0, arg1) {
    _emscripten_bind_b2Body__ApplyLinearImpulse_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2Body.prototype['IsFixedRotation'] = function() {
    return _emscripten_bind_b2Body__IsFixedRotation_p0(this.ptr);
}
b2Body.prototype['GetLocalCenter'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetLocalCenter_p0(this.ptr), Module['b2Vec2']);
}
b2Body.prototype['GetWorldVector'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetWorldVector_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2Body.prototype['GetLinearVelocityFromLocalPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2Body.prototype['GetContactList'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetContactList_p0(this.ptr), Module['b2ContactEdge']);
}
b2Body.prototype['GetWorldPoint'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetWorldPoint_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2Body.prototype['SetAwake'] = function(arg0) {
    _emscripten_bind_b2Body__SetAwake_p1(this.ptr, arg0);
}
b2Body.prototype['GetLinearDamping'] = function() {
    return _emscripten_bind_b2Body__GetLinearDamping_p0(this.ptr);
}
b2Body.prototype['IsBullet'] = function() {
    return _emscripten_bind_b2Body__IsBullet_p0(this.ptr);
}
b2Body.prototype['GetWorld'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetWorld_p0(this.ptr), Module['b2World']);
}
b2Body.prototype['GetLocalVector'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2Body__GetLocalVector_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2Body.prototype['SetLinearDamping'] = function(arg0) {
    _emscripten_bind_b2Body__SetLinearDamping_p1(this.ptr, arg0);
}
b2Body.prototype['Dump'] = function() {
    _emscripten_bind_b2Body__Dump_p0(this.ptr);
}
b2Body.prototype['SetBullet'] = function(arg0) {
    _emscripten_bind_b2Body__SetBullet_p1(this.ptr, arg0);
}
b2Body.prototype['GetType'] = function() {
    return _emscripten_bind_b2Body__GetType_p0(this.ptr);
}
b2Body.prototype['GetGravityScale'] = function() {
    return _emscripten_bind_b2Body__GetGravityScale_p0(this.ptr);
}
b2Body.prototype['DestroyFixture'] = function(arg0) {
    _emscripten_bind_b2Body__DestroyFixture_p1(this.ptr, arg0.ptr);
}
b2Body.prototype['GetInertia'] = function() {
    return _emscripten_bind_b2Body__GetInertia_p0(this.ptr);
}
b2Body.prototype['IsActive'] = function() {
    return _emscripten_bind_b2Body__IsActive_p0(this.ptr);
}
b2Body.prototype['SetFixedRotation'] = function(arg0) {
    _emscripten_bind_b2Body__SetFixedRotation_p1(this.ptr, arg0);
}
b2Body.prototype['ApplyAngularImpulse'] = function(arg0) {
    _emscripten_bind_b2Body__ApplyAngularImpulse_p1(this.ptr, arg0);
}
b2Body.prototype['GetPosition'] = function() {
    return wrapPointer(_emscripten_bind_b2Body__GetPosition_p0(this.ptr), Module['b2Vec2']);
}
b2FrictionJoint.prototype['SetMaxTorque'] = function(arg0) {
    _emscripten_bind_b2FrictionJoint__SetMaxTorque_p1(this.ptr, arg0);
}
b2FrictionJoint.prototype['GetMaxForce'] = function() {
    return _emscripten_bind_b2FrictionJoint__GetMaxForce_p0(this.ptr);
}
b2FrictionJoint.prototype['GetAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2FrictionJoint.prototype['GetReactionTorque'] = function(arg0) {
    return _emscripten_bind_b2FrictionJoint__GetReactionTorque_p1(this.ptr, arg0);
}
b2FrictionJoint.prototype['Dump'] = function() {
    _emscripten_bind_b2FrictionJoint__Dump_p0(this.ptr);
}
b2FrictionJoint.prototype['__destroy__'] = function() {
    _emscripten_bind_b2FrictionJoint____destroy___p0(this.ptr);
}
b2FrictionJoint.prototype['GetCollideConnected'] = function() {
    return _emscripten_bind_b2FrictionJoint__GetCollideConnected_p0(this.ptr);
}
b2FrictionJoint.prototype['GetUserData'] = function() {
    return _emscripten_bind_b2FrictionJoint__GetUserData_p0(this.ptr);
}
b2FrictionJoint.prototype['GetType'] = function() {
    return _emscripten_bind_b2FrictionJoint__GetType_p0(this.ptr);
}
b2FrictionJoint.prototype['SetMaxForce'] = function(arg0) {
    _emscripten_bind_b2FrictionJoint__SetMaxForce_p1(this.ptr, arg0);
}
b2FrictionJoint.prototype['GetBodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetBodyB_p0(this.ptr), Module['b2Body']);
}
b2FrictionJoint.prototype['GetLocalAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetLocalAnchorA_p0(this.ptr), Module['b2Vec2']);
}
function b2FrictionJoint(arg0) {
    this.ptr = _emscripten_bind_b2FrictionJoint__b2FrictionJoint_p1(arg0.ptr);
  b2FrictionJoint.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2FrictionJoint;
}
b2FrictionJoint.prototype.__cache__ = {};
Module['b2FrictionJoint'] = b2FrictionJoint;
b2FrictionJoint.prototype['GetLocalAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetLocalAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2FrictionJoint.prototype['SetUserData'] = function(arg0) {
    _emscripten_bind_b2FrictionJoint__SetUserData_p1(this.ptr, arg0);
}
b2FrictionJoint.prototype['GetAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2FrictionJoint.prototype['GetReactionForce'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetReactionForce_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2FrictionJoint.prototype['GetBodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetBodyA_p0(this.ptr), Module['b2Body']);
}
b2FrictionJoint.prototype['GetNext'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJoint__GetNext_p0(this.ptr), Module['b2Joint']);
}
b2FrictionJoint.prototype['GetMaxTorque'] = function() {
    return _emscripten_bind_b2FrictionJoint__GetMaxTorque_p0(this.ptr);
}
b2FrictionJoint.prototype['IsActive'] = function() {
    return _emscripten_bind_b2FrictionJoint__IsActive_p0(this.ptr);
}
b2StackAllocator.prototype['GetMaxAllocation'] = function() {
    return _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0(this.ptr);
}
b2StackAllocator.prototype['__destroy__'] = function() {
    _emscripten_bind_b2StackAllocator____destroy___p0(this.ptr);
}
function b2StackAllocator() {
    this.ptr = _emscripten_bind_b2StackAllocator__b2StackAllocator_p0();
  b2StackAllocator.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2StackAllocator;
}
b2StackAllocator.prototype.__cache__ = {};
Module['b2StackAllocator'] = b2StackAllocator;
b2StackAllocator.prototype['Allocate'] = function(arg0) {
    return _emscripten_bind_b2StackAllocator__Allocate_p1(this.ptr, arg0);
}
b2StackAllocator.prototype['Free'] = function(arg0) {
    _emscripten_bind_b2StackAllocator__Free_p1(this.ptr, arg0);
}
b2DestructionListener.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DestructionListener____destroy___p0(this.ptr);
}
b2DestructionListener.prototype['SayGoodbye'] = function(arg0) {
    _emscripten_bind_b2DestructionListener__SayGoodbye_p1(this.ptr, arg0.ptr);
}
function b2DestructionListener() {
    this.ptr = _emscripten_bind_b2DestructionListener__b2DestructionListener_p0();
  b2DestructionListener.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DestructionListener;
}
b2DestructionListener.prototype.__cache__ = {};
Module['b2DestructionListener'] = b2DestructionListener;
b2Filter.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Filter____destroy___p0(this.ptr);
}
b2Filter.prototype['set_maskBits'] = function(arg0) {
    _emscripten_bind_b2Filter__set_maskBits_p1(this.ptr, arg0);
}
b2Filter.prototype['set_categoryBits'] = function(arg0) {
    _emscripten_bind_b2Filter__set_categoryBits_p1(this.ptr, arg0);
}
b2Filter.prototype['get_groupIndex'] = function() {
    return _emscripten_bind_b2Filter__get_groupIndex_p0(this.ptr);
}
b2Filter.prototype['set_groupIndex'] = function(arg0) {
    _emscripten_bind_b2Filter__set_groupIndex_p1(this.ptr, arg0);
}
b2Filter.prototype['get_maskBits'] = function() {
    return _emscripten_bind_b2Filter__get_maskBits_p0(this.ptr);
}
function b2Filter() {
    this.ptr = _emscripten_bind_b2Filter__b2Filter_p0();
  b2Filter.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Filter;
}
b2Filter.prototype.__cache__ = {};
Module['b2Filter'] = b2Filter;
b2Filter.prototype['get_categoryBits'] = function() {
    return _emscripten_bind_b2Filter__get_categoryBits_p0(this.ptr);
}
b2FrictionJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2FrictionJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2FrictionJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2FrictionJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2FrictionJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2FrictionJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2FrictionJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2FrictionJointDef____destroy___p0(this.ptr);
}
b2FrictionJointDef.prototype['get_maxForce'] = function() {
    return _emscripten_bind_b2FrictionJointDef__get_maxForce_p0(this.ptr);
}
function b2FrictionJointDef() {
    this.ptr = _emscripten_bind_b2FrictionJointDef__b2FrictionJointDef_p0();
  b2FrictionJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2FrictionJointDef;
}
b2FrictionJointDef.prototype.__cache__ = {};
Module['b2FrictionJointDef'] = b2FrictionJointDef;
b2FrictionJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2FrictionJointDef.prototype['set_maxForce'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_maxForce_p1(this.ptr, arg0);
}
b2FrictionJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2FrictionJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2FrictionJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2FrictionJointDef.prototype['set_maxTorque'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1(this.ptr, arg0);
}
b2FrictionJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2FrictionJointDef__set_collideConnected_p1(this.ptr, arg0);
}
b2FrictionJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2FrictionJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}
b2FrictionJointDef.prototype['get_maxTorque'] = function() {
    return _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0(this.ptr);
}
b2BodyDef.prototype['get_linearDamping'] = function() {
    return _emscripten_bind_b2BodyDef__get_linearDamping_p0(this.ptr);
}
b2BodyDef.prototype['get_awake'] = function() {
    return _emscripten_bind_b2BodyDef__get_awake_p0(this.ptr);
}
b2BodyDef.prototype['get_type'] = function() {
    return _emscripten_bind_b2BodyDef__get_type_p0(this.ptr);
}
b2BodyDef.prototype['get_allowSleep'] = function() {
    return _emscripten_bind_b2BodyDef__get_allowSleep_p0(this.ptr);
}
b2BodyDef.prototype['set_position'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_position_p1(this.ptr, arg0.ptr);
}
b2BodyDef.prototype['set_linearVelocity'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_linearVelocity_p1(this.ptr, arg0.ptr);
}
function b2BodyDef() {
    this.ptr = _emscripten_bind_b2BodyDef__b2BodyDef_p0();
  b2BodyDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2BodyDef;
}
b2BodyDef.prototype.__cache__ = {};
Module['b2BodyDef'] = b2BodyDef;
b2BodyDef.prototype['get_bullet'] = function() {
    return _emscripten_bind_b2BodyDef__get_bullet_p0(this.ptr);
}
b2BodyDef.prototype['get_userData'] = function() {
    return _emscripten_bind_b2BodyDef__get_userData_p0(this.ptr);
}
b2BodyDef.prototype['set_angularDamping'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_angularDamping_p1(this.ptr, arg0);
}
b2BodyDef.prototype['set_fixedRotation'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_fixedRotation_p1(this.ptr, arg0);
}
b2BodyDef.prototype['set_allowSleep'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_allowSleep_p1(this.ptr, arg0);
}
b2BodyDef.prototype['get_gravityScale'] = function() {
    return _emscripten_bind_b2BodyDef__get_gravityScale_p0(this.ptr);
}
b2BodyDef.prototype['set_angularVelocity'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_angularVelocity_p1(this.ptr, arg0);
}
b2BodyDef.prototype['set_userData'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_userData_p1(this.ptr, arg0);
}
b2BodyDef.prototype['get_position'] = function() {
    return wrapPointer(_emscripten_bind_b2BodyDef__get_position_p0(this.ptr), Module['b2Vec2']);
}
b2BodyDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2BodyDef____destroy___p0(this.ptr);
}
b2BodyDef.prototype['set_type'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_type_p1(this.ptr, arg0);
}
b2BodyDef.prototype['set_gravityScale'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_gravityScale_p1(this.ptr, arg0);
}
b2BodyDef.prototype['get_angularDamping'] = function() {
    return _emscripten_bind_b2BodyDef__get_angularDamping_p0(this.ptr);
}
b2BodyDef.prototype['set_bullet'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_bullet_p1(this.ptr, arg0);
}
b2BodyDef.prototype['set_active'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_active_p1(this.ptr, arg0);
}
b2BodyDef.prototype['set_angle'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_angle_p1(this.ptr, arg0);
}
b2BodyDef.prototype['get_angle'] = function() {
    return _emscripten_bind_b2BodyDef__get_angle_p0(this.ptr);
}
b2BodyDef.prototype['get_angularVelocity'] = function() {
    return _emscripten_bind_b2BodyDef__get_angularVelocity_p0(this.ptr);
}
b2BodyDef.prototype['get_linearVelocity'] = function() {
    return wrapPointer(_emscripten_bind_b2BodyDef__get_linearVelocity_p0(this.ptr), Module['b2Vec2']);
}
b2BodyDef.prototype['get_active'] = function() {
    return _emscripten_bind_b2BodyDef__get_active_p0(this.ptr);
}
b2BodyDef.prototype['set_linearDamping'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_linearDamping_p1(this.ptr, arg0);
}
b2BodyDef.prototype['get_fixedRotation'] = function() {
    return _emscripten_bind_b2BodyDef__get_fixedRotation_p0(this.ptr);
}
b2BodyDef.prototype['set_awake'] = function(arg0) {
    _emscripten_bind_b2BodyDef__set_awake_p1(this.ptr, arg0);
}
b2Vec2.prototype['Normalize'] = function() {
    return _emscripten_bind_b2Vec2__Normalize_p0(this.ptr);
}
b2Vec2.prototype['set_x'] = function(arg0) {
    _emscripten_bind_b2Vec2__set_x_p1(this.ptr, arg0);
}
function b2Vec2(arg0, arg1) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Vec2__b2Vec2_p0();
  else 
    this.ptr = _emscripten_bind_b2Vec2__b2Vec2_p2(arg0, arg1);
  b2Vec2.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Vec2;
}
b2Vec2.prototype.__cache__ = {};
Module['b2Vec2'] = b2Vec2;
b2Vec2.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2Vec2__Set_p2(this.ptr, arg0, arg1);
}
b2Vec2.prototype['get_x'] = function() {
    return _emscripten_bind_b2Vec2__get_x_p0(this.ptr);
}
b2Vec2.prototype['get_y'] = function() {
    return _emscripten_bind_b2Vec2__get_y_p0(this.ptr);
}
b2Vec2.prototype['set_y'] = function(arg0) {
    _emscripten_bind_b2Vec2__set_y_p1(this.ptr, arg0);
}
b2Vec2.prototype['IsValid'] = function() {
    return _emscripten_bind_b2Vec2__IsValid_p0(this.ptr);
}
b2Vec2.prototype['Skew'] = function() {
    return wrapPointer(_emscripten_bind_b2Vec2__Skew_p0(this.ptr), Module['b2Vec2']);
}
b2Vec2.prototype['LengthSquared'] = function() {
    return _emscripten_bind_b2Vec2__LengthSquared_p0(this.ptr);
}
b2Vec2.prototype['op_add'] = function(arg0) {
    _emscripten_bind_b2Vec2__op_add_p1(this.ptr, arg0.ptr);
}
b2Vec2.prototype['SetZero'] = function() {
    _emscripten_bind_b2Vec2__SetZero_p0(this.ptr);
}
b2Vec2.prototype['Length'] = function() {
    return _emscripten_bind_b2Vec2__Length_p0(this.ptr);
}
b2Vec2.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Vec2____destroy___p0(this.ptr);
}
b2Vec2.prototype['op_mul'] = function(arg0) {
    _emscripten_bind_b2Vec2__op_mul_p1(this.ptr, arg0);
}
b2Vec2.prototype['op_sub'] = function() {
    return wrapPointer(_emscripten_bind_b2Vec2__op_sub_p0(this.ptr), Module['b2Vec2']);
}
b2Vec3.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Vec3____destroy___p0(this.ptr);
}
b2Vec3.prototype['set_z'] = function(arg0) {
    _emscripten_bind_b2Vec3__set_z_p1(this.ptr, arg0);
}
b2Vec3.prototype['Set'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Vec3__Set_p3(this.ptr, arg0, arg1, arg2);
}
b2Vec3.prototype['get_z'] = function() {
    return _emscripten_bind_b2Vec3__get_z_p0(this.ptr);
}
b2Vec3.prototype['op_add'] = function(arg0) {
    _emscripten_bind_b2Vec3__op_add_p1(this.ptr, arg0.ptr);
}
b2Vec3.prototype['SetZero'] = function() {
    _emscripten_bind_b2Vec3__SetZero_p0(this.ptr);
}
function b2Vec3(arg0, arg1, arg2) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Vec3__b2Vec3_p0();
  else 
    this.ptr = _emscripten_bind_b2Vec3__b2Vec3_p3(arg0, arg1, arg2);
  b2Vec3.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Vec3;
}
b2Vec3.prototype.__cache__ = {};
Module['b2Vec3'] = b2Vec3;
b2Vec3.prototype['op_mul'] = function(arg0) {
    _emscripten_bind_b2Vec3__op_mul_p1(this.ptr, arg0);
}
b2Vec3.prototype['op_sub'] = function() {
    return wrapPointer(_emscripten_bind_b2Vec3__op_sub_p0(this.ptr), Module['b2Vec3']);
}
b2DistanceProxy.prototype['get_m_radius'] = function() {
    return _emscripten_bind_b2DistanceProxy__get_m_radius_p0(this.ptr);
}
b2DistanceProxy.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2DistanceProxy__Set_p2(this.ptr, arg0.ptr, arg1);
}
function b2DistanceProxy() {
    this.ptr = _emscripten_bind_b2DistanceProxy__b2DistanceProxy_p0();
  b2DistanceProxy.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DistanceProxy;
}
b2DistanceProxy.prototype.__cache__ = {};
Module['b2DistanceProxy'] = b2DistanceProxy;
b2DistanceProxy.prototype['set_m_radius'] = function(arg0) {
    _emscripten_bind_b2DistanceProxy__set_m_radius_p1(this.ptr, arg0);
}
b2DistanceProxy.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DistanceProxy____destroy___p0(this.ptr);
}
b2DistanceProxy.prototype['get_m_vertices'] = function() {
    return _emscripten_bind_b2DistanceProxy__get_m_vertices_p0(this.ptr);
}
b2DistanceProxy.prototype['GetSupportVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DistanceProxy__GetSupportVertex_p1(this.ptr, arg0.ptr), Module['b2Vec2']);
}
b2DistanceProxy.prototype['get_m_count'] = function() {
    return _emscripten_bind_b2DistanceProxy__get_m_count_p0(this.ptr);
}
b2DistanceProxy.prototype['GetVertexCount'] = function() {
    return _emscripten_bind_b2DistanceProxy__GetVertexCount_p0(this.ptr);
}
b2DistanceProxy.prototype['GetVertex'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DistanceProxy__GetVertex_p1(this.ptr, arg0), Module['b2Vec2']);
}
b2DistanceProxy.prototype['GetSupport'] = function(arg0) {
    return _emscripten_bind_b2DistanceProxy__GetSupport_p1(this.ptr, arg0.ptr);
}
b2DistanceProxy.prototype['set_m_vertices'] = function(arg0) {
    _emscripten_bind_b2DistanceProxy__set_m_vertices_p1(this.ptr, arg0.ptr);
}
b2DistanceProxy.prototype['set_m_count'] = function(arg0) {
    _emscripten_bind_b2DistanceProxy__set_m_count_p1(this.ptr, arg0);
}
b2FixtureDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2FixtureDef____destroy___p0(this.ptr);
}
b2FixtureDef.prototype['get_isSensor'] = function() {
    return _emscripten_bind_b2FixtureDef__get_isSensor_p0(this.ptr);
}
b2FixtureDef.prototype['set_userData'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_userData_p1(this.ptr, arg0);
}
b2FixtureDef.prototype['set_shape'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_shape_p1(this.ptr, arg0.ptr);
}
b2FixtureDef.prototype['get_density'] = function() {
    return _emscripten_bind_b2FixtureDef__get_density_p0(this.ptr);
}
b2FixtureDef.prototype['get_shape'] = function() {
    return _emscripten_bind_b2FixtureDef__get_shape_p0(this.ptr);
}
function b2FixtureDef() {
    this.ptr = _emscripten_bind_b2FixtureDef__b2FixtureDef_p0();
  b2FixtureDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2FixtureDef;
}
b2FixtureDef.prototype.__cache__ = {};
Module['b2FixtureDef'] = b2FixtureDef;
b2FixtureDef.prototype['set_density'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_density_p1(this.ptr, arg0);
}
b2FixtureDef.prototype['set_restitution'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_restitution_p1(this.ptr, arg0);
}
b2FixtureDef.prototype['get_restitution'] = function() {
    return _emscripten_bind_b2FixtureDef__get_restitution_p0(this.ptr);
}
b2FixtureDef.prototype['set_isSensor'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_isSensor_p1(this.ptr, arg0);
}
b2FixtureDef.prototype['get_filter'] = function() {
    return wrapPointer(_emscripten_bind_b2FixtureDef__get_filter_p0(this.ptr), Module['b2Filter']);
}
b2FixtureDef.prototype['get_friction'] = function() {
    return _emscripten_bind_b2FixtureDef__get_friction_p0(this.ptr);
}
b2FixtureDef.prototype['set_friction'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_friction_p1(this.ptr, arg0);
}
b2FixtureDef.prototype['get_userData'] = function() {
    return _emscripten_bind_b2FixtureDef__get_userData_p0(this.ptr);
}
b2FixtureDef.prototype['set_filter'] = function(arg0) {
    _emscripten_bind_b2FixtureDef__set_filter_p1(this.ptr, arg0.ptr);
}
b2Manifold.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Manifold____destroy___p0(this.ptr);
}
b2Manifold.prototype['get_localPoint'] = function() {
    return wrapPointer(_emscripten_bind_b2Manifold__get_localPoint_p0(this.ptr), Module['b2Vec2']);
}
function b2Manifold() {
    this.ptr = _emscripten_bind_b2Manifold__b2Manifold_p0();
  b2Manifold.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Manifold;
}
b2Manifold.prototype.__cache__ = {};
Module['b2Manifold'] = b2Manifold;
b2Manifold.prototype['set_localPoint'] = function(arg0) {
    _emscripten_bind_b2Manifold__set_localPoint_p1(this.ptr, arg0.ptr);
}
b2Manifold.prototype['set_localNormal'] = function(arg0) {
    _emscripten_bind_b2Manifold__set_localNormal_p1(this.ptr, arg0.ptr);
}
b2Manifold.prototype['set_type'] = function(arg0) {
    _emscripten_bind_b2Manifold__set_type_p1(this.ptr, arg0);
}
b2Manifold.prototype['get_pointCount'] = function() {
    return _emscripten_bind_b2Manifold__get_pointCount_p0(this.ptr);
}
b2Manifold.prototype['get_type'] = function() {
    return _emscripten_bind_b2Manifold__get_type_p0(this.ptr);
}
b2Manifold.prototype['set_pointCount'] = function(arg0) {
    _emscripten_bind_b2Manifold__set_pointCount_p1(this.ptr, arg0);
}
b2Manifold.prototype['get_localNormal'] = function() {
    return wrapPointer(_emscripten_bind_b2Manifold__get_localNormal_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2PrismaticJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2PrismaticJointDef.prototype['get_motorSpeed'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0(this.ptr);
}
b2PrismaticJointDef.prototype['get_enableMotor'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0(this.ptr);
}
b2PrismaticJointDef.prototype['get_referenceAngle'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0(this.ptr);
}
b2PrismaticJointDef.prototype['set_enableLimit'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['set_motorSpeed'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['get_localAxisA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2PrismaticJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
function b2PrismaticJointDef() {
    this.ptr = _emscripten_bind_b2PrismaticJointDef__b2PrismaticJointDef_p0();
  b2PrismaticJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PrismaticJointDef;
}
b2PrismaticJointDef.prototype.__cache__ = {};
Module['b2PrismaticJointDef'] = b2PrismaticJointDef;
b2PrismaticJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2PrismaticJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
}
b2PrismaticJointDef.prototype['set_lowerTranslation'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['get_upperTranslation'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0(this.ptr);
}
b2PrismaticJointDef.prototype['get_enableLimit'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0(this.ptr);
}
b2PrismaticJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PrismaticJointDef____destroy___p0(this.ptr);
}
b2PrismaticJointDef.prototype['set_referenceAngle'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2PrismaticJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2PrismaticJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2PrismaticJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PrismaticJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2PrismaticJointDef.prototype['set_upperTranslation'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['get_maxMotorForce'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0(this.ptr);
}
b2PrismaticJointDef.prototype['set_maxMotorForce'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['set_enableMotor'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_collideConnected_p1(this.ptr, arg0);
}
b2PrismaticJointDef.prototype['get_lowerTranslation'] = function() {
    return _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0(this.ptr);
}
b2PrismaticJointDef.prototype['set_localAxisA'] = function(arg0) {
    _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1(this.ptr, arg0.ptr);
}
b2Rot.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Rot____destroy___p0(this.ptr);
}
b2Rot.prototype['Set'] = function(arg0) {
    _emscripten_bind_b2Rot__Set_p1(this.ptr, arg0);
}
b2Rot.prototype['GetAngle'] = function() {
    return _emscripten_bind_b2Rot__GetAngle_p0(this.ptr);
}
b2Rot.prototype['GetYAxis'] = function() {
    return wrapPointer(_emscripten_bind_b2Rot__GetYAxis_p0(this.ptr), Module['b2Vec2']);
}
b2Rot.prototype['GetXAxis'] = function() {
    return wrapPointer(_emscripten_bind_b2Rot__GetXAxis_p0(this.ptr), Module['b2Vec2']);
}
b2Rot.prototype['set_c'] = function(arg0) {
    _emscripten_bind_b2Rot__set_c_p1(this.ptr, arg0);
}
b2Rot.prototype['SetIdentity'] = function() {
    _emscripten_bind_b2Rot__SetIdentity_p0(this.ptr);
}
function b2Rot(arg0) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Rot__b2Rot_p0();
  else 
    this.ptr = _emscripten_bind_b2Rot__b2Rot_p1(arg0);
  b2Rot.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Rot;
}
b2Rot.prototype.__cache__ = {};
Module['b2Rot'] = b2Rot;
b2Rot.prototype['get_c'] = function() {
    return _emscripten_bind_b2Rot__get_c_p0(this.ptr);
}
b2WheelJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2WheelJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2WheelJointDef.prototype['get_motorSpeed'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0(this.ptr);
}
b2WheelJointDef.prototype['set_maxMotorTorque'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1(this.ptr, arg0);
}
b2WheelJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1(this.ptr, arg0);
}
b2WheelJointDef.prototype['set_motorSpeed'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1(this.ptr, arg0);
}
b2WheelJointDef.prototype['get_localAxisA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAxisA_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2WheelJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2WheelJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2WheelJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
}
function b2WheelJointDef() {
    this.ptr = _emscripten_bind_b2WheelJointDef__b2WheelJointDef_p0();
  b2WheelJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WheelJointDef;
}
b2WheelJointDef.prototype.__cache__ = {};
Module['b2WheelJointDef'] = b2WheelJointDef;
b2WheelJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0(this.ptr);
}
b2WheelJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1(this.ptr, arg0);
}
b2WheelJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2WheelJointDef____destroy___p0(this.ptr);
}
b2WheelJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJointDef.prototype['get_maxMotorTorque'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0(this.ptr);
}
b2WheelJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2WheelJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2WheelJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2WheelJointDef.prototype['get_enableMotor'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_enableMotor_p0(this.ptr);
}
b2WheelJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0(this.ptr);
}
b2WheelJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2WheelJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2WheelJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2WheelJointDef.prototype['set_enableMotor'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_enableMotor_p1(this.ptr, arg0);
}
b2WheelJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_collideConnected_p1(this.ptr, arg0);
}
b2WheelJointDef.prototype['set_localAxisA'] = function(arg0) {
    _emscripten_bind_b2WheelJointDef__set_localAxisA_p1(this.ptr, arg0.ptr);
}
b2RevoluteJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2RevoluteJointDef.prototype['get_lowerAngle'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0(this.ptr);
}
b2RevoluteJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2RevoluteJointDef.prototype['set_lowerAngle'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['get_enableMotor'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0(this.ptr);
}
b2RevoluteJointDef.prototype['set_upperAngle'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['get_referenceAngle'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0(this.ptr);
}
b2RevoluteJointDef.prototype['set_enableLimit'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['get_motorSpeed'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0(this.ptr);
}
b2RevoluteJointDef.prototype['set_motorSpeed'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['get_maxMotorTorque'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0(this.ptr);
}
b2RevoluteJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2RevoluteJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
function b2RevoluteJointDef() {
    this.ptr = _emscripten_bind_b2RevoluteJointDef__b2RevoluteJointDef_p0();
  b2RevoluteJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RevoluteJointDef;
}
b2RevoluteJointDef.prototype.__cache__ = {};
Module['b2RevoluteJointDef'] = b2RevoluteJointDef;
b2RevoluteJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2RevoluteJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}
b2RevoluteJointDef.prototype['get_enableLimit'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0(this.ptr);
}
b2RevoluteJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2RevoluteJointDef____destroy___p0(this.ptr);
}
b2RevoluteJointDef.prototype['get_upperAngle'] = function() {
    return _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0(this.ptr);
}
b2RevoluteJointDef.prototype['set_referenceAngle'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2RevoluteJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2RevoluteJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2RevoluteJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2RevoluteJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2RevoluteJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2RevoluteJointDef.prototype['set_maxMotorTorque'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['set_enableMotor'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1(this.ptr, arg0);
}
b2RevoluteJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2RevoluteJointDef__set_collideConnected_p1(this.ptr, arg0);
}
b2PulleyJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2PulleyJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2PulleyJointDef.prototype['set_ratio'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_ratio_p1(this.ptr, arg0);
}
b2PulleyJointDef.prototype['set_groundAnchorB'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1(this.ptr, arg0.ptr);
}
b2PulleyJointDef.prototype['set_groundAnchorA'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1(this.ptr, arg0.ptr);
}
b2PulleyJointDef.prototype['get_groundAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJointDef.prototype['get_groundAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2PulleyJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2PulleyJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    _emscripten_bind_b2PulleyJointDef__Initialize_p7(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr, arg4.ptr, arg5.ptr, arg6);
}
b2PulleyJointDef.prototype['get_ratio'] = function() {
    return _emscripten_bind_b2PulleyJointDef__get_ratio_p0(this.ptr);
}
b2PulleyJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2PulleyJointDef____destroy___p0(this.ptr);
}
b2PulleyJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2PulleyJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2PulleyJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2PulleyJointDef.prototype['set_lengthB'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_lengthB_p1(this.ptr, arg0);
}
b2PulleyJointDef.prototype['set_lengthA'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_lengthA_p1(this.ptr, arg0);
}
b2PulleyJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2PulleyJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2PulleyJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2PulleyJointDef.prototype['get_lengthB'] = function() {
    return _emscripten_bind_b2PulleyJointDef__get_lengthB_p0(this.ptr);
}
b2PulleyJointDef.prototype['get_lengthA'] = function() {
    return _emscripten_bind_b2PulleyJointDef__get_lengthA_p0(this.ptr);
}
b2PulleyJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2PulleyJointDef__set_collideConnected_p1(this.ptr, arg0);
}
function b2PulleyJointDef() {
    this.ptr = _emscripten_bind_b2PulleyJointDef__b2PulleyJointDef_p0();
  b2PulleyJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2PulleyJointDef;
}
b2PulleyJointDef.prototype.__cache__ = {};
Module['b2PulleyJointDef'] = b2PulleyJointDef;
b2JointDef.prototype['get_bodyA'] = function() {
    return wrapPointer(_emscripten_bind_b2JointDef__get_bodyA_p0(this.ptr), Module['b2Body']);
}
b2JointDef.prototype['set_userData'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_userData_p1(this.ptr, arg0);
}
b2JointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2JointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2JointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2JointDef____destroy___p0(this.ptr);
}
b2JointDef.prototype['get_bodyB'] = function() {
    return wrapPointer(_emscripten_bind_b2JointDef__get_bodyB_p0(this.ptr), Module['b2Body']);
}
b2JointDef.prototype['set_type'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_type_p1(this.ptr, arg0);
}
b2JointDef.prototype['get_collideConnected'] = function() {
    return _emscripten_bind_b2JointDef__get_collideConnected_p0(this.ptr);
}
b2JointDef.prototype['get_type'] = function() {
    return _emscripten_bind_b2JointDef__get_type_p0(this.ptr);
}
b2JointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2JointDef__set_collideConnected_p1(this.ptr, arg0);
}
function b2JointDef() {
    this.ptr = _emscripten_bind_b2JointDef__b2JointDef_p0();
  b2JointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2JointDef;
}
b2JointDef.prototype.__cache__ = {};
Module['b2JointDef'] = b2JointDef;
b2JointDef.prototype['get_userData'] = function() {
    return _emscripten_bind_b2JointDef__get_userData_p0(this.ptr);
}
b2Transform.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Transform____destroy___p0(this.ptr);
}
b2Transform.prototype['Set'] = function(arg0, arg1) {
    _emscripten_bind_b2Transform__Set_p2(this.ptr, arg0.ptr, arg1);
}
b2Transform.prototype['set_p'] = function(arg0) {
    _emscripten_bind_b2Transform__set_p_p1(this.ptr, arg0.ptr);
}
b2Transform.prototype['set_q'] = function(arg0) {
    _emscripten_bind_b2Transform__set_q_p1(this.ptr, arg0.ptr);
}
b2Transform.prototype['get_p'] = function() {
    return wrapPointer(_emscripten_bind_b2Transform__get_p_p0(this.ptr), Module['b2Vec2']);
}
b2Transform.prototype['get_q'] = function() {
    return wrapPointer(_emscripten_bind_b2Transform__get_q_p0(this.ptr), Module['b2Rot']);
}
function b2Transform(arg0, arg1) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Transform__b2Transform_p0();
  else 
    this.ptr = _emscripten_bind_b2Transform__b2Transform_p2(arg0.ptr, arg1.ptr);
  b2Transform.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Transform;
}
b2Transform.prototype.__cache__ = {};
Module['b2Transform'] = b2Transform;
b2Transform.prototype['SetIdentity'] = function() {
    _emscripten_bind_b2Transform__SetIdentity_p0(this.ptr);
}
b2Color.prototype['__destroy__'] = function() {
    _emscripten_bind_b2Color____destroy___p0(this.ptr);
}
b2Color.prototype['Set'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2Color__Set_p3(this.ptr, arg0, arg1, arg2);
}
b2Color.prototype['set_r'] = function(arg0) {
    _emscripten_bind_b2Color__set_r_p1(this.ptr, arg0);
}
b2Color.prototype['get_r'] = function() {
    return _emscripten_bind_b2Color__get_r_p0(this.ptr);
}
function b2Color(arg0, arg1, arg2) {
  if (arg0 === undefined)
    this.ptr = _emscripten_bind_b2Color__b2Color_p0();
  else 
    this.ptr = _emscripten_bind_b2Color__b2Color_p3(arg0, arg1, arg2);
  b2Color.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2Color;
}
b2Color.prototype.__cache__ = {};
Module['b2Color'] = b2Color;
b2Color.prototype['set_b'] = function(arg0) {
    _emscripten_bind_b2Color__set_b_p1(this.ptr, arg0);
}
b2Color.prototype['get_g'] = function() {
    return _emscripten_bind_b2Color__get_g_p0(this.ptr);
}
b2Color.prototype['get_b'] = function() {
    return _emscripten_bind_b2Color__get_b_p0(this.ptr);
}
b2Color.prototype['set_g'] = function(arg0) {
    _emscripten_bind_b2Color__set_g_p1(this.ptr, arg0);
}
b2AABB.prototype['__destroy__'] = function() {
    _emscripten_bind_b2AABB____destroy___p0(this.ptr);
}
function b2AABB() {
    this.ptr = _emscripten_bind_b2AABB__b2AABB_p0();
  b2AABB.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2AABB;
}
b2AABB.prototype.__cache__ = {};
Module['b2AABB'] = b2AABB;
b2AABB.prototype['set_upperBound'] = function(arg0) {
    _emscripten_bind_b2AABB__set_upperBound_p1(this.ptr, arg0.ptr);
}
b2AABB.prototype['IsValid'] = function() {
    return _emscripten_bind_b2AABB__IsValid_p0(this.ptr);
}
b2AABB.prototype['Contains'] = function(arg0) {
    return _emscripten_bind_b2AABB__Contains_p1(this.ptr, arg0.ptr);
}
b2AABB.prototype['GetExtents'] = function() {
    return wrapPointer(_emscripten_bind_b2AABB__GetExtents_p0(this.ptr), Module['b2Vec2']);
}
b2AABB.prototype['GetCenter'] = function() {
    return wrapPointer(_emscripten_bind_b2AABB__GetCenter_p0(this.ptr), Module['b2Vec2']);
}
b2AABB.prototype['get_upperBound'] = function() {
    return wrapPointer(_emscripten_bind_b2AABB__get_upperBound_p0(this.ptr), Module['b2Vec2']);
}
b2AABB.prototype['GetPerimeter'] = function() {
    return _emscripten_bind_b2AABB__GetPerimeter_p0(this.ptr);
}
b2AABB.prototype['Combine'] = function(arg0, arg1) {
  if (arg1 === undefined)
    _emscripten_bind_b2AABB__Combine_p1(this.ptr, arg0.ptr);
  else 
    _emscripten_bind_b2AABB__Combine_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2AABB.prototype['RayCast'] = function(arg0, arg1) {
    return _emscripten_bind_b2AABB__RayCast_p2(this.ptr, arg0.ptr, arg1.ptr);
}
b2AABB.prototype['set_lowerBound'] = function(arg0) {
    _emscripten_bind_b2AABB__set_lowerBound_p1(this.ptr, arg0.ptr);
}
b2AABB.prototype['get_lowerBound'] = function() {
    return wrapPointer(_emscripten_bind_b2AABB__get_lowerBound_p0(this.ptr), Module['b2Vec2']);
}
b2WeldJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2WeldJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2WeldJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2WeldJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2WeldJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2WeldJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2WeldJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0(this.ptr);
}
b2WeldJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2WeldJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2WeldJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2WeldJointDef____destroy___p0(this.ptr);
}
b2WeldJointDef.prototype['set_referenceAngle'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1(this.ptr, arg0);
}
b2WeldJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2WeldJointDef.prototype['get_referenceAngle'] = function() {
    return _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0(this.ptr);
}
b2WeldJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2WeldJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2WeldJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2WeldJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2WeldJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0(this.ptr);
}
b2WeldJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_collideConnected_p1(this.ptr, arg0);
}
b2WeldJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1(this.ptr, arg0);
}
b2WeldJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
    _emscripten_bind_b2WeldJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr);
}
b2WeldJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1(this.ptr, arg0);
}
function b2WeldJointDef() {
    this.ptr = _emscripten_bind_b2WeldJointDef__b2WeldJointDef_p0();
  b2WeldJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2WeldJointDef;
}
b2WeldJointDef.prototype.__cache__ = {};
Module['b2WeldJointDef'] = b2WeldJointDef;
b2MouseJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2MouseJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2MouseJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2MouseJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2MouseJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1(this.ptr, arg0);
}
b2MouseJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2MouseJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
function b2MouseJointDef() {
    this.ptr = _emscripten_bind_b2MouseJointDef__b2MouseJointDef_p0();
  b2MouseJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2MouseJointDef;
}
b2MouseJointDef.prototype.__cache__ = {};
Module['b2MouseJointDef'] = b2MouseJointDef;
b2MouseJointDef.prototype['get_maxForce'] = function() {
    return _emscripten_bind_b2MouseJointDef__get_maxForce_p0(this.ptr);
}
b2MouseJointDef.prototype['set_target'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_target_p1(this.ptr, arg0.ptr);
}
b2MouseJointDef.prototype['set_maxForce'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_maxForce_p1(this.ptr, arg0);
}
b2MouseJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0(this.ptr);
}
b2MouseJointDef.prototype['get_target'] = function() {
    return wrapPointer(_emscripten_bind_b2MouseJointDef__get_target_p0(this.ptr), Module['b2Vec2']);
}
b2MouseJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2MouseJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2MouseJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2MouseJointDef____destroy___p0(this.ptr);
}
b2MouseJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_collideConnected_p1(this.ptr, arg0);
}
b2MouseJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1(this.ptr, arg0);
}
b2MouseJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0(this.ptr);
}
b2DistanceJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2DistanceJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2DistanceJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2DistanceJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2DistanceJointDef.prototype['set_dampingRatio'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1(this.ptr, arg0);
}
b2DistanceJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2DistanceJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2DistanceJointDef.prototype['get_length'] = function() {
    return _emscripten_bind_b2DistanceJointDef__get_length_p0(this.ptr);
}
b2DistanceJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2DistanceJointDef.prototype['get_frequencyHz'] = function() {
    return _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0(this.ptr);
}
b2DistanceJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2DistanceJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2DistanceJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2DistanceJointDef.prototype['get_dampingRatio'] = function() {
    return _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0(this.ptr);
}
function b2DistanceJointDef() {
    this.ptr = _emscripten_bind_b2DistanceJointDef__b2DistanceJointDef_p0();
  b2DistanceJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2DistanceJointDef;
}
b2DistanceJointDef.prototype.__cache__ = {};
Module['b2DistanceJointDef'] = b2DistanceJointDef;
b2DistanceJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2DistanceJointDef____destroy___p0(this.ptr);
}
b2DistanceJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_collideConnected_p1(this.ptr, arg0);
}
b2DistanceJointDef.prototype['set_length'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_length_p1(this.ptr, arg0);
}
b2DistanceJointDef.prototype['set_frequencyHz'] = function(arg0) {
    _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1(this.ptr, arg0);
}
b2DistanceJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
    _emscripten_bind_b2DistanceJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr);
}
b2GearJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2GearJointDef____destroy___p0(this.ptr);
}
b2GearJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2GearJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2GearJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2GearJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2GearJointDef.prototype['get_joint1'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJointDef__get_joint1_p0(this.ptr), Module['b2Joint']);
}
b2GearJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2GearJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2GearJointDef.prototype['set_joint2'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_joint2_p1(this.ptr, arg0.ptr);
}
b2GearJointDef.prototype['set_ratio'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_ratio_p1(this.ptr, arg0);
}
b2GearJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2GearJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2GearJointDef.prototype['get_joint2'] = function() {
    return wrapPointer(_emscripten_bind_b2GearJointDef__get_joint2_p0(this.ptr), Module['b2Joint']);
}
b2GearJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_collideConnected_p1(this.ptr, arg0);
}
function b2GearJointDef() {
    this.ptr = _emscripten_bind_b2GearJointDef__b2GearJointDef_p0();
  b2GearJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2GearJointDef;
}
b2GearJointDef.prototype.__cache__ = {};
Module['b2GearJointDef'] = b2GearJointDef;
b2GearJointDef.prototype['get_ratio'] = function() {
    return _emscripten_bind_b2GearJointDef__get_ratio_p0(this.ptr);
}
b2GearJointDef.prototype['set_joint1'] = function(arg0) {
    _emscripten_bind_b2GearJointDef__set_joint1_p1(this.ptr, arg0.ptr);
}
b2ContactEdge.prototype['__destroy__'] = function() {
    _emscripten_bind_b2ContactEdge____destroy___p0(this.ptr);
}
b2ContactEdge.prototype['set_contact'] = function(arg0) {
    _emscripten_bind_b2ContactEdge__set_contact_p1(this.ptr, arg0.ptr);
}
b2ContactEdge.prototype['get_prev'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactEdge__get_prev_p0(this.ptr), Module['b2ContactEdge']);
}
b2ContactEdge.prototype['get_other'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactEdge__get_other_p0(this.ptr), Module['b2Body']);
}
b2ContactEdge.prototype['set_prev'] = function(arg0) {
    _emscripten_bind_b2ContactEdge__set_prev_p1(this.ptr, arg0.ptr);
}
b2ContactEdge.prototype['get_next'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactEdge__get_next_p0(this.ptr), Module['b2ContactEdge']);
}
b2ContactEdge.prototype['set_other'] = function(arg0) {
    _emscripten_bind_b2ContactEdge__set_other_p1(this.ptr, arg0.ptr);
}
b2ContactEdge.prototype['set_next'] = function(arg0) {
    _emscripten_bind_b2ContactEdge__set_next_p1(this.ptr, arg0.ptr);
}
function b2ContactEdge() {
    this.ptr = _emscripten_bind_b2ContactEdge__b2ContactEdge_p0();
  b2ContactEdge.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2ContactEdge;
}
b2ContactEdge.prototype.__cache__ = {};
Module['b2ContactEdge'] = b2ContactEdge;
b2ContactEdge.prototype['get_contact'] = function() {
    return wrapPointer(_emscripten_bind_b2ContactEdge__get_contact_p0(this.ptr), Module['b2Contact']);
}
b2RopeJointDef.prototype['set_localAnchorA'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr);
}
b2RopeJointDef.prototype['get_bodyA'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2RopeJointDef__get_bodyA_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2RopeJointDef.prototype['get_bodyB'] = function(arg0) {
    return wrapPointer(_emscripten_bind_b2RopeJointDef__get_bodyB_p1(this.ptr, arg0.ptr), Module['b2Body']);
}
b2RopeJointDef.prototype['set_localAnchorB'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr);
}
b2RopeJointDef.prototype['set_bodyA'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_bodyA_p1(this.ptr, arg0.ptr);
}
b2RopeJointDef.prototype['set_bodyB'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_bodyB_p1(this.ptr, arg0.ptr);
}
b2RopeJointDef.prototype['__destroy__'] = function() {
    _emscripten_bind_b2RopeJointDef____destroy___p0(this.ptr);
}
b2RopeJointDef.prototype['get_localAnchorA'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJointDef__get_localAnchorA_p0(this.ptr), Module['b2Vec2']);
}
b2RopeJointDef.prototype['get_maxLength'] = function() {
    return _emscripten_bind_b2RopeJointDef__get_maxLength_p0(this.ptr);
}
b2RopeJointDef.prototype['get_localAnchorB'] = function() {
    return wrapPointer(_emscripten_bind_b2RopeJointDef__get_localAnchorB_p0(this.ptr), Module['b2Vec2']);
}
b2RopeJointDef.prototype['get_collideConnected'] = function(arg0) {
    return _emscripten_bind_b2RopeJointDef__get_collideConnected_p1(this.ptr, arg0);
}
b2RopeJointDef.prototype['set_collideConnected'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_collideConnected_p1(this.ptr, arg0);
}
function b2RopeJointDef() {
    this.ptr = _emscripten_bind_b2RopeJointDef__b2RopeJointDef_p0();
  b2RopeJointDef.prototype.__cache__[this.ptr] = this;
  this.__class__ = b2RopeJointDef;
}
b2RopeJointDef.prototype.__cache__ = {};
Module['b2RopeJointDef'] = b2RopeJointDef;
b2RopeJointDef.prototype['set_maxLength'] = function(arg0) {
    _emscripten_bind_b2RopeJointDef__set_maxLength_p1(this.ptr, arg0);
}
this['Box2D'] = Module; // With or without a closure, the proper usage is Box2D.*
// Additional bindings that the bindings generator does not automatically generate (like enums)
Module['b2_staticBody']    = 0;
Module['b2_kinematicBody'] = 1;
Module['b2_dynamicBody']   = 2;

})();